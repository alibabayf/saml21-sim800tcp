
atsaml21_sim800tcp_basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b6f4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000cc  20000000  0000b6f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  000200cc  2**0
                  CONTENTS
  3 .bss          00000b48  200000cc  0000b7c0  000200cc  2**2
                  ALLOC
  4 .stack        00002004  20000c14  0000c308  000200cc  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003c6d2  00000000  00000000  0002014d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000748c  00000000  00000000  0005c81f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000180e7  00000000  00000000  00063cab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001250  00000000  00000000  0007bd92  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001ad0  00000000  00000000  0007cfe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00021e45  00000000  00000000  0007eab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001ad5e  00000000  00000000  000a08f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00099ff4  00000000  00000000  000bb655  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000038f0  00000000  00000000  0015564c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
        // Keep the default device state after reset
        SystemCoreClock = __SYSTEM_CLOCK;
       0:	18 2c 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     .,. -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	89 7e 00 00 29 01 00 00 29 01 00 00 29 01 00 00     .~..)...)...)...
      4c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      5c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      6c:	29 01 00 00 b9 0d 00 00 29 01 00 00 29 01 00 00     ).......)...)...
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000cc 	.word	0x200000cc
      d4:	00000000 	.word	0x00000000
      d8:	0000b6f4 	.word	0x0000b6f4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000d0 	.word	0x200000d0
     108:	0000b6f4 	.word	0x0000b6f4
     10c:	0000b6f4 	.word	0x0000b6f4
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3
	stdio_redirect_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3
}
     11e:	bd10      	pop	{r4, pc}
     120:	000002f1 	.word	0x000002f1
     124:	00007e69 	.word	0x00007e69

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     12e:	4a1a      	ldr	r2, [pc, #104]	; (198 <Reset_Handler+0x6c>)
     130:	4b1a      	ldr	r3, [pc, #104]	; (19c <Reset_Handler+0x70>)
     132:	429a      	cmp	r2, r3
     134:	d011      	beq.n	15a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     136:	001a      	movs	r2, r3
     138:	4b19      	ldr	r3, [pc, #100]	; (1a0 <Reset_Handler+0x74>)
     13a:	429a      	cmp	r2, r3
     13c:	d20d      	bcs.n	15a <Reset_Handler+0x2e>
     13e:	4a19      	ldr	r2, [pc, #100]	; (1a4 <Reset_Handler+0x78>)
     140:	3303      	adds	r3, #3
     142:	1a9b      	subs	r3, r3, r2
     144:	089b      	lsrs	r3, r3, #2
     146:	3301      	adds	r3, #1
     148:	009b      	lsls	r3, r3, #2
     14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     14c:	4813      	ldr	r0, [pc, #76]	; (19c <Reset_Handler+0x70>)
     14e:	4912      	ldr	r1, [pc, #72]	; (198 <Reset_Handler+0x6c>)
     150:	588c      	ldr	r4, [r1, r2]
     152:	5084      	str	r4, [r0, r2]
     154:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     156:	429a      	cmp	r2, r3
     158:	d1fa      	bne.n	150 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     15a:	4a13      	ldr	r2, [pc, #76]	; (1a8 <Reset_Handler+0x7c>)
     15c:	4b13      	ldr	r3, [pc, #76]	; (1ac <Reset_Handler+0x80>)
     15e:	429a      	cmp	r2, r3
     160:	d20a      	bcs.n	178 <Reset_Handler+0x4c>
     162:	43d3      	mvns	r3, r2
     164:	4911      	ldr	r1, [pc, #68]	; (1ac <Reset_Handler+0x80>)
     166:	185b      	adds	r3, r3, r1
     168:	2103      	movs	r1, #3
     16a:	438b      	bics	r3, r1
     16c:	3304      	adds	r3, #4
     16e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     170:	2100      	movs	r1, #0
     172:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     174:	4293      	cmp	r3, r2
     176:	d1fc      	bne.n	172 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     178:	4a0d      	ldr	r2, [pc, #52]	; (1b0 <Reset_Handler+0x84>)
     17a:	21ff      	movs	r1, #255	; 0xff
     17c:	4b0d      	ldr	r3, [pc, #52]	; (1b4 <Reset_Handler+0x88>)
     17e:	438b      	bics	r3, r1
     180:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     182:	4a0d      	ldr	r2, [pc, #52]	; (1b8 <Reset_Handler+0x8c>)
     184:	6853      	ldr	r3, [r2, #4]
     186:	397f      	subs	r1, #127	; 0x7f
     188:	430b      	orrs	r3, r1
     18a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     18c:	4b0b      	ldr	r3, [pc, #44]	; (1bc <Reset_Handler+0x90>)
     18e:	4798      	blx	r3
        main();
     190:	4b0b      	ldr	r3, [pc, #44]	; (1c0 <Reset_Handler+0x94>)
     192:	4798      	blx	r3
     194:	e7fe      	b.n	194 <Reset_Handler+0x68>
     196:	46c0      	nop			; (mov r8, r8)
     198:	0000b6f4 	.word	0x0000b6f4
     19c:	20000000 	.word	0x20000000
     1a0:	200000cc 	.word	0x200000cc
     1a4:	20000004 	.word	0x20000004
     1a8:	200000cc 	.word	0x200000cc
     1ac:	20000c14 	.word	0x20000c14
     1b0:	e000ed00 	.word	0xe000ed00
     1b4:	00000000 	.word	0x00000000
     1b8:	41004000 	.word	0x41004000
     1bc:	00008529 	.word	0x00008529
     1c0:	0000033d 	.word	0x0000033d

000001c4 <TARGET_IO_PORT_init>:
static uint8_t USART_0_buffer[USART_0_BUFFER_SIZE];

struct usart_sync_descriptor TARGET_IO;

void TARGET_IO_PORT_init(void)
{
     1c4:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1c6:	4b0e      	ldr	r3, [pc, #56]	; (200 <TARGET_IO_PORT_init+0x3c>)
     1c8:	2256      	movs	r2, #86	; 0x56
     1ca:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1cc:	2501      	movs	r5, #1
     1ce:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1d0:	2401      	movs	r4, #1
     1d2:	4321      	orrs	r1, r4
     1d4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1d6:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     1d8:	203b      	movs	r0, #59	; 0x3b
     1da:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     1dc:	3a47      	subs	r2, #71	; 0x47
     1de:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     1e0:	3a0d      	subs	r2, #13
     1e2:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     1e4:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1e6:	2157      	movs	r1, #87	; 0x57
     1e8:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1ea:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1ec:	4322      	orrs	r2, r4
     1ee:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1f0:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     1f2:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     1f4:	3948      	subs	r1, #72	; 0x48
     1f6:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     1f8:	3111      	adds	r1, #17
     1fa:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     1fc:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(EDBG_COM_TX, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(EDBG_COM_RX, PINMUX_PA23C_SERCOM3_PAD1);
}
     1fe:	bd30      	pop	{r4, r5, pc}
     200:	40002800 	.word	0x40002800

00000204 <TARGET_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     204:	4b05      	ldr	r3, [pc, #20]	; (21c <TARGET_IO_CLOCK_init+0x18>)
     206:	2240      	movs	r2, #64	; 0x40
     208:	21d4      	movs	r1, #212	; 0xd4
     20a:	505a      	str	r2, [r3, r1]
     20c:	3910      	subs	r1, #16
     20e:	505a      	str	r2, [r3, r1]
}

static inline void hri_mclk_set_APBCMASK_SERCOM3_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM3;
     210:	4a03      	ldr	r2, [pc, #12]	; (220 <TARGET_IO_CLOCK_init+0x1c>)
     212:	69d3      	ldr	r3, [r2, #28]
     214:	39bc      	subs	r1, #188	; 0xbc
     216:	430b      	orrs	r3, r1
     218:	61d3      	str	r3, [r2, #28]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_SERCOM3_bit(MCLK);
}
     21a:	4770      	bx	lr
     21c:	40001800 	.word	0x40001800
     220:	40000400 	.word	0x40000400

00000224 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     224:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     226:	4b05      	ldr	r3, [pc, #20]	; (23c <TARGET_IO_init+0x18>)
     228:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM3, (void *)NULL);
     22a:	2200      	movs	r2, #0
     22c:	4904      	ldr	r1, [pc, #16]	; (240 <TARGET_IO_init+0x1c>)
     22e:	4805      	ldr	r0, [pc, #20]	; (244 <TARGET_IO_init+0x20>)
     230:	4b05      	ldr	r3, [pc, #20]	; (248 <TARGET_IO_init+0x24>)
     232:	4798      	blx	r3
	TARGET_IO_PORT_init();
     234:	4b05      	ldr	r3, [pc, #20]	; (24c <TARGET_IO_init+0x28>)
     236:	4798      	blx	r3
}
     238:	bd10      	pop	{r4, pc}
     23a:	46c0      	nop			; (mov r8, r8)
     23c:	00000205 	.word	0x00000205
     240:	42000c00 	.word	0x42000c00
     244:	20000bb4 	.word	0x20000bb4
     248:	00000811 	.word	0x00000811
     24c:	000001c5 	.word	0x000001c5

00000250 <USART_0_CLOCK_init>:
     250:	4b06      	ldr	r3, [pc, #24]	; (26c <USART_0_CLOCK_init+0x1c>)
     252:	2140      	movs	r1, #64	; 0x40
     254:	22d8      	movs	r2, #216	; 0xd8
     256:	5099      	str	r1, [r3, r2]
     258:	3103      	adds	r1, #3
     25a:	3a14      	subs	r2, #20
     25c:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM4;
     25e:	4a04      	ldr	r2, [pc, #16]	; (270 <USART_0_CLOCK_init+0x20>)
     260:	69d3      	ldr	r3, [r2, #28]
     262:	3933      	subs	r1, #51	; 0x33
     264:	430b      	orrs	r3, r1
     266:	61d3      	str	r3, [r2, #28]

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_SERCOM4_bit(MCLK);
}
     268:	4770      	bx	lr
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	40001800 	.word	0x40001800
     270:	40000400 	.word	0x40000400

00000274 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     274:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     276:	4b0e      	ldr	r3, [pc, #56]	; (2b0 <USART_0_PORT_init+0x3c>)
     278:	22c8      	movs	r2, #200	; 0xc8
     27a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     27c:	2501      	movs	r5, #1
     27e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     280:	2401      	movs	r4, #1
     282:	4321      	orrs	r1, r4
     284:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     286:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     288:	20b4      	movs	r0, #180	; 0xb4
     28a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     28c:	3ab9      	subs	r2, #185	; 0xb9
     28e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     290:	3a0c      	subs	r2, #12
     292:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     294:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     296:	21c9      	movs	r1, #201	; 0xc9
     298:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     29a:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     29c:	4322      	orrs	r2, r4
     29e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2a0:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2a2:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2a4:	39ba      	subs	r1, #186	; 0xba
     2a6:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     2a8:	3121      	adds	r1, #33	; 0x21
     2aa:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2ac:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PB08, PINMUX_PB08D_SERCOM4_PAD0);

	gpio_set_pin_function(PB09, PINMUX_PB09D_SERCOM4_PAD1);
}
     2ae:	bd30      	pop	{r4, r5, pc}
     2b0:	40002800 	.word	0x40002800

000002b4 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     2b4:	b510      	push	{r4, lr}
     2b6:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     2b8:	4b07      	ldr	r3, [pc, #28]	; (2d8 <USART_0_init+0x24>)
     2ba:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM4, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     2bc:	2300      	movs	r3, #0
     2be:	9300      	str	r3, [sp, #0]
     2c0:	2380      	movs	r3, #128	; 0x80
     2c2:	009b      	lsls	r3, r3, #2
     2c4:	4a05      	ldr	r2, [pc, #20]	; (2dc <USART_0_init+0x28>)
     2c6:	4906      	ldr	r1, [pc, #24]	; (2e0 <USART_0_init+0x2c>)
     2c8:	4806      	ldr	r0, [pc, #24]	; (2e4 <USART_0_init+0x30>)
     2ca:	4c07      	ldr	r4, [pc, #28]	; (2e8 <USART_0_init+0x34>)
     2cc:	47a0      	blx	r4
	USART_0_PORT_init();
     2ce:	4b07      	ldr	r3, [pc, #28]	; (2ec <USART_0_init+0x38>)
     2d0:	4798      	blx	r3
}
     2d2:	b002      	add	sp, #8
     2d4:	bd10      	pop	{r4, pc}
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	00000251 	.word	0x00000251
     2dc:	200000e8 	.word	0x200000e8
     2e0:	42001000 	.word	0x42001000
     2e4:	20000bc0 	.word	0x20000bc0
     2e8:	000005c1 	.word	0x000005c1
     2ec:	00000275 	.word	0x00000275

000002f0 <system_init>:

void system_init(void)
{
     2f0:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     2f2:	4b0d      	ldr	r3, [pc, #52]	; (328 <system_init+0x38>)
     2f4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2f6:	23c0      	movs	r3, #192	; 0xc0
     2f8:	05db      	lsls	r3, r3, #23
     2fa:	2280      	movs	r2, #128	; 0x80
     2fc:	00d2      	lsls	r2, r2, #3
     2fe:	2198      	movs	r1, #152	; 0x98
     300:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     302:	3910      	subs	r1, #16
     304:	505a      	str	r2, [r3, r1]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     306:	4b09      	ldr	r3, [pc, #36]	; (32c <system_init+0x3c>)
     308:	22a8      	movs	r2, #168	; 0xa8
     30a:	4909      	ldr	r1, [pc, #36]	; (330 <system_init+0x40>)
     30c:	5099      	str	r1, [r3, r2]
     30e:	21c0      	movs	r1, #192	; 0xc0
     310:	0609      	lsls	r1, r1, #24
     312:	5099      	str	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     314:	21ca      	movs	r1, #202	; 0xca
     316:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     318:	2001      	movs	r0, #1
     31a:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     31c:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	TARGET_IO_init();
     31e:	4b05      	ldr	r3, [pc, #20]	; (334 <system_init+0x44>)
     320:	4798      	blx	r3
	USART_0_init();
     322:	4b05      	ldr	r3, [pc, #20]	; (338 <system_init+0x48>)
     324:	4798      	blx	r3
}
     326:	bd10      	pop	{r4, pc}
     328:	000009f5 	.word	0x000009f5
     32c:	40002800 	.word	0x40002800
     330:	40000400 	.word	0x40000400
     334:	00000225 	.word	0x00000225
     338:	000002b5 	.word	0x000002b5

0000033c <main>:
volatile static uint32_t data_arrived = 0;

extern int mqtt_example(void);

int main(void)
{
     33c:	b510      	push	{r4, lr}
	uint8_t recv_char;	
	atmel_start_init();
     33e:	4b03      	ldr	r3, [pc, #12]	; (34c <main+0x10>)
     340:	4798      	blx	r3

	time_tick_init();
     342:	4b03      	ldr	r3, [pc, #12]	; (350 <main+0x14>)
     344:	4798      	blx	r3

	mqtt_example();
     346:	4b03      	ldr	r3, [pc, #12]	; (354 <main+0x18>)
     348:	4798      	blx	r3
     34a:	e7fe      	b.n	34a <main+0xe>
     34c:	00000115 	.word	0x00000115
     350:	00007e99 	.word	0x00007e99
     354:	0000387d 	.word	0x0000387d

00000358 <atomic_enter_critical>:
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     358:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     35c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     35e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     360:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     364:	4770      	bx	lr

00000366 <atomic_leave_critical>:
     366:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     36a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     36c:	f383 8810 	msr	PRIMASK, r3
}
     370:	4770      	bx	lr
	...

00000374 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     374:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     376:	4b04      	ldr	r3, [pc, #16]	; (388 <delay_ms+0x14>)
     378:	681c      	ldr	r4, [r3, #0]
     37a:	4b04      	ldr	r3, [pc, #16]	; (38c <delay_ms+0x18>)
     37c:	4798      	blx	r3
     37e:	0001      	movs	r1, r0
     380:	0020      	movs	r0, r4
     382:	4b03      	ldr	r3, [pc, #12]	; (390 <delay_ms+0x1c>)
     384:	4798      	blx	r3
}
     386:	bd10      	pop	{r4, pc}
     388:	200002e8 	.word	0x200002e8
     38c:	000009cd 	.word	0x000009cd
     390:	000009ed 	.word	0x000009ed

00000394 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     394:	b570      	push	{r4, r5, r6, lr}
     396:	0006      	movs	r6, r0
     398:	000c      	movs	r4, r1
     39a:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     39c:	2800      	cmp	r0, #0
     39e:	d00d      	beq.n	3bc <io_write+0x28>
     3a0:	0008      	movs	r0, r1
     3a2:	1e43      	subs	r3, r0, #1
     3a4:	4198      	sbcs	r0, r3
     3a6:	b2c0      	uxtb	r0, r0
     3a8:	2234      	movs	r2, #52	; 0x34
     3aa:	4905      	ldr	r1, [pc, #20]	; (3c0 <io_write+0x2c>)
     3ac:	4b05      	ldr	r3, [pc, #20]	; (3c4 <io_write+0x30>)
     3ae:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     3b0:	6833      	ldr	r3, [r6, #0]
     3b2:	002a      	movs	r2, r5
     3b4:	0021      	movs	r1, r4
     3b6:	0030      	movs	r0, r6
     3b8:	4798      	blx	r3
}
     3ba:	bd70      	pop	{r4, r5, r6, pc}
     3bc:	2000      	movs	r0, #0
     3be:	e7f3      	b.n	3a8 <io_write+0x14>
     3c0:	0000970c 	.word	0x0000970c
     3c4:	00000889 	.word	0x00000889

000003c8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     3c8:	b570      	push	{r4, r5, r6, lr}
     3ca:	0006      	movs	r6, r0
     3cc:	000c      	movs	r4, r1
     3ce:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     3d0:	2800      	cmp	r0, #0
     3d2:	d00d      	beq.n	3f0 <io_read+0x28>
     3d4:	0008      	movs	r0, r1
     3d6:	1e43      	subs	r3, r0, #1
     3d8:	4198      	sbcs	r0, r3
     3da:	b2c0      	uxtb	r0, r0
     3dc:	223d      	movs	r2, #61	; 0x3d
     3de:	4905      	ldr	r1, [pc, #20]	; (3f4 <io_read+0x2c>)
     3e0:	4b05      	ldr	r3, [pc, #20]	; (3f8 <io_read+0x30>)
     3e2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     3e4:	6873      	ldr	r3, [r6, #4]
     3e6:	002a      	movs	r2, r5
     3e8:	0021      	movs	r1, r4
     3ea:	0030      	movs	r0, r6
     3ec:	4798      	blx	r3
}
     3ee:	bd70      	pop	{r4, r5, r6, pc}
     3f0:	2000      	movs	r0, #0
     3f2:	e7f3      	b.n	3dc <io_read+0x14>
     3f4:	0000970c 	.word	0x0000970c
     3f8:	00000889 	.word	0x00000889

000003fc <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     3fc:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     3fe:	3808      	subs	r0, #8

	descr->stat = 0;
     400:	2300      	movs	r3, #0
     402:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     404:	6a43      	ldr	r3, [r0, #36]	; 0x24
     406:	2b00      	cmp	r3, #0
     408:	d000      	beq.n	40c <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     40a:	4798      	blx	r3
	}
}
     40c:	bd10      	pop	{r4, pc}

0000040e <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     40e:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     410:	3808      	subs	r0, #8

	descr->stat = 0;
     412:	2300      	movs	r3, #0
     414:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     416:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     418:	2b00      	cmp	r3, #0
     41a:	d000      	beq.n	41e <usart_error+0x10>
		descr->usart_cb.error(descr);
     41c:	4798      	blx	r3
	}
}
     41e:	bd10      	pop	{r4, pc}

00000420 <usart_fill_rx_buffer>:
{
     420:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     422:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     424:	302c      	adds	r0, #44	; 0x2c
     426:	4b04      	ldr	r3, [pc, #16]	; (438 <usart_fill_rx_buffer+0x18>)
     428:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     42a:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     42c:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     42e:	2b00      	cmp	r3, #0
     430:	d001      	beq.n	436 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     432:	0020      	movs	r0, r4
     434:	4798      	blx	r3
}
     436:	bd10      	pop	{r4, pc}
     438:	0000092d 	.word	0x0000092d

0000043c <usart_async_write>:
{
     43c:	b570      	push	{r4, r5, r6, lr}
     43e:	0004      	movs	r4, r0
     440:	000e      	movs	r6, r1
     442:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     444:	2800      	cmp	r0, #0
     446:	d01d      	beq.n	484 <usart_async_write+0x48>
     448:	2900      	cmp	r1, #0
     44a:	d01d      	beq.n	488 <usart_async_write+0x4c>
     44c:	0010      	movs	r0, r2
     44e:	1e43      	subs	r3, r0, #1
     450:	4198      	sbcs	r0, r3
     452:	223c      	movs	r2, #60	; 0x3c
     454:	32ff      	adds	r2, #255	; 0xff
     456:	490f      	ldr	r1, [pc, #60]	; (494 <usart_async_write+0x58>)
     458:	4b0f      	ldr	r3, [pc, #60]	; (498 <usart_async_write+0x5c>)
     45a:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     45c:	2344      	movs	r3, #68	; 0x44
     45e:	5ae2      	ldrh	r2, [r4, r3]
     460:	3308      	adds	r3, #8
     462:	5ae3      	ldrh	r3, [r4, r3]
     464:	429a      	cmp	r2, r3
     466:	d111      	bne.n	48c <usart_async_write+0x50>
	descr->tx_buffer        = (uint8_t *)buf;
     468:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     46a:	234c      	movs	r3, #76	; 0x4c
     46c:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     46e:	2200      	movs	r2, #0
     470:	3b08      	subs	r3, #8
     472:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     474:	3b43      	subs	r3, #67	; 0x43
     476:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     478:	0020      	movs	r0, r4
     47a:	3008      	adds	r0, #8
     47c:	4b07      	ldr	r3, [pc, #28]	; (49c <usart_async_write+0x60>)
     47e:	4798      	blx	r3
	return (int32_t)length;
     480:	0028      	movs	r0, r5
}
     482:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     484:	2000      	movs	r0, #0
     486:	e7e4      	b.n	452 <usart_async_write+0x16>
     488:	2000      	movs	r0, #0
     48a:	e7e2      	b.n	452 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     48c:	201c      	movs	r0, #28
     48e:	4240      	negs	r0, r0
     490:	e7f7      	b.n	482 <usart_async_write+0x46>
     492:	46c0      	nop			; (mov r8, r8)
     494:	00009720 	.word	0x00009720
     498:	00000889 	.word	0x00000889
     49c:	00000d33 	.word	0x00000d33

000004a0 <usart_process_byte_sent>:
{
     4a0:	b570      	push	{r4, r5, r6, lr}
     4a2:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     4a4:	0001      	movs	r1, r0
     4a6:	3908      	subs	r1, #8
     4a8:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
     4aa:	224c      	movs	r2, #76	; 0x4c
     4ac:	5a8a      	ldrh	r2, [r1, r2]
     4ae:	429a      	cmp	r2, r3
     4b0:	d00c      	beq.n	4cc <usart_process_byte_sent+0x2c>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     4b2:	000a      	movs	r2, r1
     4b4:	6c89      	ldr	r1, [r1, #72]	; 0x48
     4b6:	1c5d      	adds	r5, r3, #1
     4b8:	2044      	movs	r0, #68	; 0x44
     4ba:	5215      	strh	r5, [r2, r0]
     4bc:	5cc9      	ldrb	r1, [r1, r3]
     4be:	0020      	movs	r0, r4
     4c0:	4b04      	ldr	r3, [pc, #16]	; (4d4 <usart_process_byte_sent+0x34>)
     4c2:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     4c4:	0020      	movs	r0, r4
     4c6:	4b04      	ldr	r3, [pc, #16]	; (4d8 <usart_process_byte_sent+0x38>)
     4c8:	4798      	blx	r3
}
     4ca:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     4cc:	4b03      	ldr	r3, [pc, #12]	; (4dc <usart_process_byte_sent+0x3c>)
     4ce:	4798      	blx	r3
}
     4d0:	e7fb      	b.n	4ca <usart_process_byte_sent+0x2a>
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	00000d05 	.word	0x00000d05
     4d8:	00000d33 	.word	0x00000d33
     4dc:	00000d3b 	.word	0x00000d3b

000004e0 <usart_async_read>:
{
     4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4e2:	46ce      	mov	lr, r9
     4e4:	4647      	mov	r7, r8
     4e6:	b580      	push	{r7, lr}
     4e8:	b085      	sub	sp, #20
     4ea:	0005      	movs	r5, r0
     4ec:	000e      	movs	r6, r1
     4ee:	0017      	movs	r7, r2
	ASSERT(descr && buf && length);
     4f0:	2800      	cmp	r0, #0
     4f2:	d015      	beq.n	520 <usart_async_read+0x40>
     4f4:	2900      	cmp	r1, #0
     4f6:	d013      	beq.n	520 <usart_async_read+0x40>
     4f8:	2a00      	cmp	r2, #0
     4fa:	d12a      	bne.n	552 <usart_async_read+0x72>
     4fc:	22ac      	movs	r2, #172	; 0xac
     4fe:	0052      	lsls	r2, r2, #1
     500:	4929      	ldr	r1, [pc, #164]	; (5a8 <usart_async_read+0xc8>)
     502:	2000      	movs	r0, #0
     504:	4b29      	ldr	r3, [pc, #164]	; (5ac <usart_async_read+0xcc>)
     506:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     508:	a803      	add	r0, sp, #12
     50a:	4b29      	ldr	r3, [pc, #164]	; (5b0 <usart_async_read+0xd0>)
     50c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     50e:	0028      	movs	r0, r5
     510:	3034      	adds	r0, #52	; 0x34
     512:	4b28      	ldr	r3, [pc, #160]	; (5b4 <usart_async_read+0xd4>)
     514:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
     516:	a803      	add	r0, sp, #12
     518:	4b27      	ldr	r3, [pc, #156]	; (5b8 <usart_async_read+0xd8>)
     51a:	4798      	blx	r3
	uint16_t                       was_read = 0;
     51c:	2500      	movs	r5, #0
	return (int32_t)was_read;
     51e:	e03c      	b.n	59a <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     520:	22ac      	movs	r2, #172	; 0xac
     522:	0052      	lsls	r2, r2, #1
     524:	4920      	ldr	r1, [pc, #128]	; (5a8 <usart_async_read+0xc8>)
     526:	2000      	movs	r0, #0
     528:	4b20      	ldr	r3, [pc, #128]	; (5ac <usart_async_read+0xcc>)
     52a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     52c:	a803      	add	r0, sp, #12
     52e:	4b20      	ldr	r3, [pc, #128]	; (5b0 <usart_async_read+0xd0>)
     530:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     532:	3534      	adds	r5, #52	; 0x34
     534:	0028      	movs	r0, r5
     536:	9501      	str	r5, [sp, #4]
     538:	4b1e      	ldr	r3, [pc, #120]	; (5b4 <usart_async_read+0xd4>)
     53a:	4798      	blx	r3
     53c:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     53e:	a803      	add	r0, sp, #12
     540:	4b1d      	ldr	r3, [pc, #116]	; (5b8 <usart_async_read+0xd8>)
     542:	4798      	blx	r3
	uint16_t                       was_read = 0;
     544:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     546:	4643      	mov	r3, r8
     548:	2b00      	cmp	r3, #0
     54a:	d026      	beq.n	59a <usart_async_read+0xba>
     54c:	2f00      	cmp	r7, #0
     54e:	d116      	bne.n	57e <usart_async_read+0x9e>
     550:	e023      	b.n	59a <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     552:	22ac      	movs	r2, #172	; 0xac
     554:	0052      	lsls	r2, r2, #1
     556:	4914      	ldr	r1, [pc, #80]	; (5a8 <usart_async_read+0xc8>)
     558:	2001      	movs	r0, #1
     55a:	4b14      	ldr	r3, [pc, #80]	; (5ac <usart_async_read+0xcc>)
     55c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     55e:	a803      	add	r0, sp, #12
     560:	4b13      	ldr	r3, [pc, #76]	; (5b0 <usart_async_read+0xd0>)
     562:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     564:	3534      	adds	r5, #52	; 0x34
     566:	0028      	movs	r0, r5
     568:	9501      	str	r5, [sp, #4]
     56a:	4b12      	ldr	r3, [pc, #72]	; (5b4 <usart_async_read+0xd4>)
     56c:	4798      	blx	r3
     56e:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     570:	a803      	add	r0, sp, #12
     572:	4b11      	ldr	r3, [pc, #68]	; (5b8 <usart_async_read+0xd8>)
     574:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     576:	4643      	mov	r3, r8
	uint16_t                       was_read = 0;
     578:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     57a:	2b00      	cmp	r3, #0
     57c:	d00d      	beq.n	59a <usart_async_read+0xba>
{
     57e:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     580:	4b0e      	ldr	r3, [pc, #56]	; (5bc <usart_async_read+0xdc>)
     582:	4699      	mov	r9, r3
     584:	1c65      	adds	r5, r4, #1
     586:	b2ad      	uxth	r5, r5
     588:	1931      	adds	r1, r6, r4
     58a:	9801      	ldr	r0, [sp, #4]
     58c:	47c8      	blx	r9
     58e:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
     590:	4544      	cmp	r4, r8
     592:	d202      	bcs.n	59a <usart_async_read+0xba>
     594:	b2a3      	uxth	r3, r4
     596:	429f      	cmp	r7, r3
     598:	d8f4      	bhi.n	584 <usart_async_read+0xa4>
}
     59a:	0028      	movs	r0, r5
     59c:	b005      	add	sp, #20
     59e:	bc0c      	pop	{r2, r3}
     5a0:	4690      	mov	r8, r2
     5a2:	4699      	mov	r9, r3
     5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5a6:	46c0      	nop			; (mov r8, r8)
     5a8:	00009720 	.word	0x00009720
     5ac:	00000889 	.word	0x00000889
     5b0:	00000359 	.word	0x00000359
     5b4:	0000096d 	.word	0x0000096d
     5b8:	00000367 	.word	0x00000367
     5bc:	000008e5 	.word	0x000008e5

000005c0 <usart_async_init>:
{
     5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5c2:	0004      	movs	r4, r0
     5c4:	000d      	movs	r5, r1
     5c6:	0016      	movs	r6, r2
     5c8:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     5ca:	2800      	cmp	r0, #0
     5cc:	d026      	beq.n	61c <usart_async_init+0x5c>
     5ce:	2900      	cmp	r1, #0
     5d0:	d026      	beq.n	620 <usart_async_init+0x60>
     5d2:	2a00      	cmp	r2, #0
     5d4:	d026      	beq.n	624 <usart_async_init+0x64>
     5d6:	0018      	movs	r0, r3
     5d8:	1e43      	subs	r3, r0, #1
     5da:	4198      	sbcs	r0, r3
     5dc:	223a      	movs	r2, #58	; 0x3a
     5de:	4914      	ldr	r1, [pc, #80]	; (630 <usart_async_init+0x70>)
     5e0:	4b14      	ldr	r3, [pc, #80]	; (634 <usart_async_init+0x74>)
     5e2:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     5e4:	0020      	movs	r0, r4
     5e6:	3034      	adds	r0, #52	; 0x34
     5e8:	003a      	movs	r2, r7
     5ea:	0031      	movs	r1, r6
     5ec:	4b12      	ldr	r3, [pc, #72]	; (638 <usart_async_init+0x78>)
     5ee:	4798      	blx	r3
     5f0:	2800      	cmp	r0, #0
     5f2:	d119      	bne.n	628 <usart_async_init+0x68>
	init_status = _usart_async_init(&descr->device, hw);
     5f4:	0020      	movs	r0, r4
     5f6:	3008      	adds	r0, #8
     5f8:	0029      	movs	r1, r5
     5fa:	4b10      	ldr	r3, [pc, #64]	; (63c <usart_async_init+0x7c>)
     5fc:	4798      	blx	r3
	if (init_status) {
     5fe:	2800      	cmp	r0, #0
     600:	d10b      	bne.n	61a <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     602:	4b0f      	ldr	r3, [pc, #60]	; (640 <usart_async_init+0x80>)
     604:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     606:	4b0f      	ldr	r3, [pc, #60]	; (644 <usart_async_init+0x84>)
     608:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     60a:	4b0f      	ldr	r3, [pc, #60]	; (648 <usart_async_init+0x88>)
     60c:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     60e:	4b0f      	ldr	r3, [pc, #60]	; (64c <usart_async_init+0x8c>)
     610:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     612:	4b0f      	ldr	r3, [pc, #60]	; (650 <usart_async_init+0x90>)
     614:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     616:	4b0f      	ldr	r3, [pc, #60]	; (654 <usart_async_init+0x94>)
     618:	6163      	str	r3, [r4, #20]
}
     61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     61c:	2000      	movs	r0, #0
     61e:	e7dd      	b.n	5dc <usart_async_init+0x1c>
     620:	2000      	movs	r0, #0
     622:	e7db      	b.n	5dc <usart_async_init+0x1c>
     624:	2000      	movs	r0, #0
     626:	e7d9      	b.n	5dc <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     628:	200d      	movs	r0, #13
     62a:	4240      	negs	r0, r0
     62c:	e7f5      	b.n	61a <usart_async_init+0x5a>
     62e:	46c0      	nop			; (mov r8, r8)
     630:	00009720 	.word	0x00009720
     634:	00000889 	.word	0x00000889
     638:	00000891 	.word	0x00000891
     63c:	00000c5d 	.word	0x00000c5d
     640:	000004e1 	.word	0x000004e1
     644:	0000043d 	.word	0x0000043d
     648:	000004a1 	.word	0x000004a1
     64c:	00000421 	.word	0x00000421
     650:	000003fd 	.word	0x000003fd
     654:	0000040f 	.word	0x0000040f

00000658 <usart_async_enable>:
{
     658:	b510      	push	{r4, lr}
     65a:	0004      	movs	r4, r0
	ASSERT(descr);
     65c:	1e43      	subs	r3, r0, #1
     65e:	4198      	sbcs	r0, r3
     660:	b2c0      	uxtb	r0, r0
     662:	2261      	movs	r2, #97	; 0x61
     664:	4904      	ldr	r1, [pc, #16]	; (678 <usart_async_enable+0x20>)
     666:	4b05      	ldr	r3, [pc, #20]	; (67c <usart_async_enable+0x24>)
     668:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     66a:	0020      	movs	r0, r4
     66c:	3008      	adds	r0, #8
     66e:	4b04      	ldr	r3, [pc, #16]	; (680 <usart_async_enable+0x28>)
     670:	4798      	blx	r3
}
     672:	2000      	movs	r0, #0
     674:	bd10      	pop	{r4, pc}
     676:	46c0      	nop			; (mov r8, r8)
     678:	00009720 	.word	0x00009720
     67c:	00000889 	.word	0x00000889
     680:	00000ce9 	.word	0x00000ce9

00000684 <usart_async_register_callback>:
{
     684:	b570      	push	{r4, r5, r6, lr}
     686:	0005      	movs	r5, r0
     688:	000e      	movs	r6, r1
     68a:	0014      	movs	r4, r2
	ASSERT(descr);
     68c:	1e43      	subs	r3, r0, #1
     68e:	4198      	sbcs	r0, r3
     690:	b2c0      	uxtb	r0, r0
     692:	2283      	movs	r2, #131	; 0x83
     694:	4916      	ldr	r1, [pc, #88]	; (6f0 <usart_async_register_callback+0x6c>)
     696:	4b17      	ldr	r3, [pc, #92]	; (6f4 <usart_async_register_callback+0x70>)
     698:	4798      	blx	r3
	switch (type) {
     69a:	2e01      	cmp	r6, #1
     69c:	d011      	beq.n	6c2 <usart_async_register_callback+0x3e>
     69e:	2e00      	cmp	r6, #0
     6a0:	d004      	beq.n	6ac <usart_async_register_callback+0x28>
     6a2:	2e02      	cmp	r6, #2
     6a4:	d018      	beq.n	6d8 <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
     6a6:	200d      	movs	r0, #13
     6a8:	4240      	negs	r0, r0
     6aa:	e009      	b.n	6c0 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
     6ac:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
     6ae:	1e62      	subs	r2, r4, #1
     6b0:	4194      	sbcs	r4, r2
     6b2:	b2e2      	uxtb	r2, r4
     6b4:	0028      	movs	r0, r5
     6b6:	3008      	adds	r0, #8
     6b8:	2101      	movs	r1, #1
     6ba:	4b0f      	ldr	r3, [pc, #60]	; (6f8 <usart_async_register_callback+0x74>)
     6bc:	4798      	blx	r3
	return ERR_NONE;
     6be:	2000      	movs	r0, #0
}
     6c0:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
     6c2:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
     6c4:	1e62      	subs	r2, r4, #1
     6c6:	4194      	sbcs	r4, r2
     6c8:	b2e2      	uxtb	r2, r4
     6ca:	0028      	movs	r0, r5
     6cc:	3008      	adds	r0, #8
     6ce:	2102      	movs	r1, #2
     6d0:	4b09      	ldr	r3, [pc, #36]	; (6f8 <usart_async_register_callback+0x74>)
     6d2:	4798      	blx	r3
	return ERR_NONE;
     6d4:	2000      	movs	r0, #0
		break;
     6d6:	e7f3      	b.n	6c0 <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
     6d8:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
     6da:	1e62      	subs	r2, r4, #1
     6dc:	4194      	sbcs	r4, r2
     6de:	b2e2      	uxtb	r2, r4
     6e0:	0028      	movs	r0, r5
     6e2:	3008      	adds	r0, #8
     6e4:	2103      	movs	r1, #3
     6e6:	4b04      	ldr	r3, [pc, #16]	; (6f8 <usart_async_register_callback+0x74>)
     6e8:	4798      	blx	r3
	return ERR_NONE;
     6ea:	2000      	movs	r0, #0
		break;
     6ec:	e7e8      	b.n	6c0 <usart_async_register_callback+0x3c>
     6ee:	46c0      	nop			; (mov r8, r8)
     6f0:	00009720 	.word	0x00009720
     6f4:	00000889 	.word	0x00000889
     6f8:	00000d45 	.word	0x00000d45

000006fc <usart_async_is_rx_not_empty>:
{
     6fc:	b510      	push	{r4, lr}
     6fe:	0004      	movs	r4, r0
	ASSERT(descr);
     700:	1e43      	subs	r3, r0, #1
     702:	4198      	sbcs	r0, r3
     704:	b2c0      	uxtb	r0, r0
     706:	2202      	movs	r2, #2
     708:	32ff      	adds	r2, #255	; 0xff
     70a:	4905      	ldr	r1, [pc, #20]	; (720 <usart_async_is_rx_not_empty+0x24>)
     70c:	4b05      	ldr	r3, [pc, #20]	; (724 <usart_async_is_rx_not_empty+0x28>)
     70e:	4798      	blx	r3
	return ringbuffer_num(&descr->rx) > 0;
     710:	0020      	movs	r0, r4
     712:	3034      	adds	r0, #52	; 0x34
     714:	4b04      	ldr	r3, [pc, #16]	; (728 <usart_async_is_rx_not_empty+0x2c>)
     716:	4798      	blx	r3
     718:	1e43      	subs	r3, r0, #1
     71a:	4198      	sbcs	r0, r3
}
     71c:	bd10      	pop	{r4, pc}
     71e:	46c0      	nop			; (mov r8, r8)
     720:	00009720 	.word	0x00009720
     724:	00000889 	.word	0x00000889
     728:	0000096d 	.word	0x0000096d

0000072c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     72e:	46ce      	mov	lr, r9
     730:	4647      	mov	r7, r8
     732:	b580      	push	{r7, lr}
     734:	0004      	movs	r4, r0
     736:	000f      	movs	r7, r1
     738:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     73a:	2800      	cmp	r0, #0
     73c:	d026      	beq.n	78c <usart_sync_write+0x60>
     73e:	2900      	cmp	r1, #0
     740:	d026      	beq.n	790 <usart_sync_write+0x64>
     742:	0010      	movs	r0, r2
     744:	1e43      	subs	r3, r0, #1
     746:	4198      	sbcs	r0, r3
     748:	22f1      	movs	r2, #241	; 0xf1
     74a:	4912      	ldr	r1, [pc, #72]	; (794 <usart_sync_write+0x68>)
     74c:	4b12      	ldr	r3, [pc, #72]	; (798 <usart_sync_write+0x6c>)
     74e:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     750:	3408      	adds	r4, #8
     752:	4d12      	ldr	r5, [pc, #72]	; (79c <usart_sync_write+0x70>)
     754:	0020      	movs	r0, r4
     756:	47a8      	blx	r5
     758:	2800      	cmp	r0, #0
     75a:	d0fb      	beq.n	754 <usart_sync_write+0x28>
     75c:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     75e:	4b10      	ldr	r3, [pc, #64]	; (7a0 <usart_sync_write+0x74>)
     760:	4699      	mov	r9, r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     762:	4d0e      	ldr	r5, [pc, #56]	; (79c <usart_sync_write+0x70>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     764:	5db9      	ldrb	r1, [r7, r6]
     766:	0020      	movs	r0, r4
     768:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     76a:	0020      	movs	r0, r4
     76c:	47a8      	blx	r5
     76e:	2800      	cmp	r0, #0
     770:	d0fb      	beq.n	76a <usart_sync_write+0x3e>
			;
	} while (++offset < length);
     772:	3601      	adds	r6, #1
     774:	4546      	cmp	r6, r8
     776:	d3f5      	bcc.n	764 <usart_sync_write+0x38>
	while (!_usart_sync_is_transmit_done(&descr->device))
     778:	4d0a      	ldr	r5, [pc, #40]	; (7a4 <usart_sync_write+0x78>)
     77a:	0020      	movs	r0, r4
     77c:	47a8      	blx	r5
     77e:	2800      	cmp	r0, #0
     780:	d0fb      	beq.n	77a <usart_sync_write+0x4e>
		;
	return (int32_t)offset;
}
     782:	0030      	movs	r0, r6
     784:	bc0c      	pop	{r2, r3}
     786:	4690      	mov	r8, r2
     788:	4699      	mov	r9, r3
     78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     78c:	2000      	movs	r0, #0
     78e:	e7db      	b.n	748 <usart_sync_write+0x1c>
     790:	2000      	movs	r0, #0
     792:	e7d9      	b.n	748 <usart_sync_write+0x1c>
     794:	00009740 	.word	0x00009740
     798:	00000889 	.word	0x00000889
     79c:	00000d15 	.word	0x00000d15
     7a0:	00000cfd 	.word	0x00000cfd
     7a4:	00000d1f 	.word	0x00000d1f

000007a8 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     7aa:	46ce      	mov	lr, r9
     7ac:	4647      	mov	r7, r8
     7ae:	b580      	push	{r7, lr}
     7b0:	0004      	movs	r4, r0
     7b2:	000f      	movs	r7, r1
     7b4:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     7b6:	2800      	cmp	r0, #0
     7b8:	d01d      	beq.n	7f6 <usart_sync_read+0x4e>
     7ba:	2900      	cmp	r1, #0
     7bc:	d01d      	beq.n	7fa <usart_sync_read+0x52>
     7be:	0010      	movs	r0, r2
     7c0:	1e43      	subs	r3, r0, #1
     7c2:	4198      	sbcs	r0, r3
     7c4:	2286      	movs	r2, #134	; 0x86
     7c6:	0052      	lsls	r2, r2, #1
     7c8:	490d      	ldr	r1, [pc, #52]	; (800 <usart_sync_read+0x58>)
     7ca:	4b0e      	ldr	r3, [pc, #56]	; (804 <usart_sync_read+0x5c>)
     7cc:	4798      	blx	r3
	uint32_t                      offset = 0;
     7ce:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     7d0:	3408      	adds	r4, #8
     7d2:	4d0d      	ldr	r5, [pc, #52]	; (808 <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     7d4:	4b0d      	ldr	r3, [pc, #52]	; (80c <usart_sync_read+0x64>)
     7d6:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
     7d8:	0020      	movs	r0, r4
     7da:	47a8      	blx	r5
     7dc:	2800      	cmp	r0, #0
     7de:	d0fb      	beq.n	7d8 <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     7e0:	0020      	movs	r0, r4
     7e2:	47c8      	blx	r9
     7e4:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     7e6:	3601      	adds	r6, #1
     7e8:	4546      	cmp	r6, r8
     7ea:	d3f5      	bcc.n	7d8 <usart_sync_read+0x30>

	return (int32_t)offset;
}
     7ec:	0030      	movs	r0, r6
     7ee:	bc0c      	pop	{r2, r3}
     7f0:	4690      	mov	r8, r2
     7f2:	4699      	mov	r9, r3
     7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     7f6:	2000      	movs	r0, #0
     7f8:	e7e4      	b.n	7c4 <usart_sync_read+0x1c>
     7fa:	2000      	movs	r0, #0
     7fc:	e7e2      	b.n	7c4 <usart_sync_read+0x1c>
     7fe:	46c0      	nop			; (mov r8, r8)
     800:	00009740 	.word	0x00009740
     804:	00000889 	.word	0x00000889
     808:	00000d29 	.word	0x00000d29
     80c:	00000d0d 	.word	0x00000d0d

00000810 <usart_sync_init>:
{
     810:	b570      	push	{r4, r5, r6, lr}
     812:	0005      	movs	r5, r0
     814:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     816:	2800      	cmp	r0, #0
     818:	d013      	beq.n	842 <usart_sync_init+0x32>
     81a:	0008      	movs	r0, r1
     81c:	1e43      	subs	r3, r0, #1
     81e:	4198      	sbcs	r0, r3
     820:	b2c0      	uxtb	r0, r0
     822:	2234      	movs	r2, #52	; 0x34
     824:	4908      	ldr	r1, [pc, #32]	; (848 <usart_sync_init+0x38>)
     826:	4b09      	ldr	r3, [pc, #36]	; (84c <usart_sync_init+0x3c>)
     828:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     82a:	0028      	movs	r0, r5
     82c:	3008      	adds	r0, #8
     82e:	0021      	movs	r1, r4
     830:	4b07      	ldr	r3, [pc, #28]	; (850 <usart_sync_init+0x40>)
     832:	4798      	blx	r3
	if (init_status) {
     834:	2800      	cmp	r0, #0
     836:	d103      	bne.n	840 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
     838:	4b06      	ldr	r3, [pc, #24]	; (854 <usart_sync_init+0x44>)
     83a:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     83c:	4b06      	ldr	r3, [pc, #24]	; (858 <usart_sync_init+0x48>)
     83e:	602b      	str	r3, [r5, #0]
}
     840:	bd70      	pop	{r4, r5, r6, pc}
     842:	2000      	movs	r0, #0
     844:	e7ed      	b.n	822 <usart_sync_init+0x12>
     846:	46c0      	nop			; (mov r8, r8)
     848:	00009740 	.word	0x00009740
     84c:	00000889 	.word	0x00000889
     850:	00000c31 	.word	0x00000c31
     854:	000007a9 	.word	0x000007a9
     858:	0000072d 	.word	0x0000072d

0000085c <usart_sync_enable>:
{
     85c:	b510      	push	{r4, lr}
     85e:	0004      	movs	r4, r0
	ASSERT(descr);
     860:	1e43      	subs	r3, r0, #1
     862:	4198      	sbcs	r0, r3
     864:	b2c0      	uxtb	r0, r0
     866:	2253      	movs	r2, #83	; 0x53
     868:	4904      	ldr	r1, [pc, #16]	; (87c <usart_sync_enable+0x20>)
     86a:	4b05      	ldr	r3, [pc, #20]	; (880 <usart_sync_enable+0x24>)
     86c:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     86e:	0020      	movs	r0, r4
     870:	3008      	adds	r0, #8
     872:	4b04      	ldr	r3, [pc, #16]	; (884 <usart_sync_enable+0x28>)
     874:	4798      	blx	r3
}
     876:	2000      	movs	r0, #0
     878:	bd10      	pop	{r4, pc}
     87a:	46c0      	nop			; (mov r8, r8)
     87c:	00009740 	.word	0x00009740
     880:	00000889 	.word	0x00000889
     884:	00000cd5 	.word	0x00000cd5

00000888 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     888:	2800      	cmp	r0, #0
     88a:	d100      	bne.n	88e <assert+0x6>
		__asm("BKPT #0");
     88c:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     88e:	4770      	bx	lr

00000890 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     890:	b570      	push	{r4, r5, r6, lr}
     892:	0004      	movs	r4, r0
     894:	000e      	movs	r6, r1
     896:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     898:	2800      	cmp	r0, #0
     89a:	d00b      	beq.n	8b4 <ringbuffer_init+0x24>
     89c:	2900      	cmp	r1, #0
     89e:	d018      	beq.n	8d2 <ringbuffer_init+0x42>
     8a0:	2001      	movs	r0, #1
     8a2:	2a00      	cmp	r2, #0
     8a4:	d107      	bne.n	8b6 <ringbuffer_init+0x26>
     8a6:	2228      	movs	r2, #40	; 0x28
     8a8:	490c      	ldr	r1, [pc, #48]	; (8dc <ringbuffer_init+0x4c>)
     8aa:	2000      	movs	r0, #0
     8ac:	4b0c      	ldr	r3, [pc, #48]	; (8e0 <ringbuffer_init+0x50>)
     8ae:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     8b0:	1e6b      	subs	r3, r5, #1
     8b2:	e007      	b.n	8c4 <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
     8b4:	2000      	movs	r0, #0
     8b6:	2228      	movs	r2, #40	; 0x28
     8b8:	4908      	ldr	r1, [pc, #32]	; (8dc <ringbuffer_init+0x4c>)
     8ba:	4b09      	ldr	r3, [pc, #36]	; (8e0 <ringbuffer_init+0x50>)
     8bc:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
     8be:	1e6b      	subs	r3, r5, #1
     8c0:	422b      	tst	r3, r5
     8c2:	d108      	bne.n	8d6 <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     8c4:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     8c6:	2300      	movs	r3, #0
     8c8:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     8ca:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     8cc:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     8ce:	2000      	movs	r0, #0
}
     8d0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     8d2:	2000      	movs	r0, #0
     8d4:	e7ef      	b.n	8b6 <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
     8d6:	200d      	movs	r0, #13
     8d8:	4240      	negs	r0, r0
     8da:	e7f9      	b.n	8d0 <ringbuffer_init+0x40>
     8dc:	0000975c 	.word	0x0000975c
     8e0:	00000889 	.word	0x00000889

000008e4 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     8e4:	b570      	push	{r4, r5, r6, lr}
     8e6:	0004      	movs	r4, r0
     8e8:	000d      	movs	r5, r1
	ASSERT(rb && data);
     8ea:	2800      	cmp	r0, #0
     8ec:	d015      	beq.n	91a <ringbuffer_get+0x36>
     8ee:	0008      	movs	r0, r1
     8f0:	1e43      	subs	r3, r0, #1
     8f2:	4198      	sbcs	r0, r3
     8f4:	b2c0      	uxtb	r0, r0
     8f6:	2240      	movs	r2, #64	; 0x40
     8f8:	490a      	ldr	r1, [pc, #40]	; (924 <ringbuffer_get+0x40>)
     8fa:	4b0b      	ldr	r3, [pc, #44]	; (928 <ringbuffer_get+0x44>)
     8fc:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     8fe:	68a3      	ldr	r3, [r4, #8]
     900:	68e2      	ldr	r2, [r4, #12]
     902:	429a      	cmp	r2, r3
     904:	d00b      	beq.n	91e <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
     906:	6862      	ldr	r2, [r4, #4]
     908:	4013      	ands	r3, r2
     90a:	6822      	ldr	r2, [r4, #0]
     90c:	5cd3      	ldrb	r3, [r2, r3]
     90e:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     910:	68a3      	ldr	r3, [r4, #8]
     912:	3301      	adds	r3, #1
     914:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     916:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     918:	bd70      	pop	{r4, r5, r6, pc}
     91a:	2000      	movs	r0, #0
     91c:	e7eb      	b.n	8f6 <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
     91e:	200a      	movs	r0, #10
     920:	4240      	negs	r0, r0
     922:	e7f9      	b.n	918 <ringbuffer_get+0x34>
     924:	0000975c 	.word	0x0000975c
     928:	00000889 	.word	0x00000889

0000092c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     92c:	b570      	push	{r4, r5, r6, lr}
     92e:	0004      	movs	r4, r0
     930:	000d      	movs	r5, r1
	ASSERT(rb);
     932:	1e43      	subs	r3, r0, #1
     934:	4198      	sbcs	r0, r3
     936:	b2c0      	uxtb	r0, r0
     938:	2251      	movs	r2, #81	; 0x51
     93a:	490a      	ldr	r1, [pc, #40]	; (964 <ringbuffer_put+0x38>)
     93c:	4b0a      	ldr	r3, [pc, #40]	; (968 <ringbuffer_put+0x3c>)
     93e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     940:	6863      	ldr	r3, [r4, #4]
     942:	68e2      	ldr	r2, [r4, #12]
     944:	4013      	ands	r3, r2
     946:	6822      	ldr	r2, [r4, #0]
     948:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     94a:	68e3      	ldr	r3, [r4, #12]
     94c:	6861      	ldr	r1, [r4, #4]
     94e:	68a2      	ldr	r2, [r4, #8]
     950:	1a9a      	subs	r2, r3, r2
     952:	428a      	cmp	r2, r1
     954:	d901      	bls.n	95a <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     956:	1a59      	subs	r1, r3, r1
     958:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     95a:	3301      	adds	r3, #1
     95c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     95e:	2000      	movs	r0, #0
     960:	bd70      	pop	{r4, r5, r6, pc}
     962:	46c0      	nop			; (mov r8, r8)
     964:	0000975c 	.word	0x0000975c
     968:	00000889 	.word	0x00000889

0000096c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     96c:	b510      	push	{r4, lr}
     96e:	0004      	movs	r4, r0
	ASSERT(rb);
     970:	1e43      	subs	r3, r0, #1
     972:	4198      	sbcs	r0, r3
     974:	b2c0      	uxtb	r0, r0
     976:	2267      	movs	r2, #103	; 0x67
     978:	4903      	ldr	r1, [pc, #12]	; (988 <ringbuffer_num+0x1c>)
     97a:	4b04      	ldr	r3, [pc, #16]	; (98c <ringbuffer_num+0x20>)
     97c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     97e:	68e0      	ldr	r0, [r4, #12]
     980:	68a3      	ldr	r3, [r4, #8]
     982:	1ac0      	subs	r0, r0, r3
}
     984:	bd10      	pop	{r4, pc}
     986:	46c0      	nop			; (mov r8, r8)
     988:	0000975c 	.word	0x0000975c
     98c:	00000889 	.word	0x00000889

00000990 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     990:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     992:	4a06      	ldr	r2, [pc, #24]	; (9ac <_sbrk+0x1c>)
     994:	6812      	ldr	r2, [r2, #0]
     996:	2a00      	cmp	r2, #0
     998:	d004      	beq.n	9a4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     99a:	4a04      	ldr	r2, [pc, #16]	; (9ac <_sbrk+0x1c>)
     99c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     99e:	18c3      	adds	r3, r0, r3
     9a0:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     9a2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     9a4:	4902      	ldr	r1, [pc, #8]	; (9b0 <_sbrk+0x20>)
     9a6:	4a01      	ldr	r2, [pc, #4]	; (9ac <_sbrk+0x1c>)
     9a8:	6011      	str	r1, [r2, #0]
     9aa:	e7f6      	b.n	99a <_sbrk+0xa>
     9ac:	200002ec 	.word	0x200002ec
     9b0:	20002c18 	.word	0x20002c18

000009b4 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     9b4:	2001      	movs	r0, #1
     9b6:	4240      	negs	r0, r0
     9b8:	4770      	bx	lr

000009ba <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     9ba:	2380      	movs	r3, #128	; 0x80
     9bc:	019b      	lsls	r3, r3, #6
     9be:	604b      	str	r3, [r1, #4]

	return 0;
}
     9c0:	2000      	movs	r0, #0
     9c2:	4770      	bx	lr

000009c4 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     9c4:	2001      	movs	r0, #1
     9c6:	4770      	bx	lr

000009c8 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     9c8:	2000      	movs	r0, #0
     9ca:	4770      	bx	lr

000009cc <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
     9cc:	b510      	push	{r4, lr}
     9ce:	0003      	movs	r3, r0
		return (ms * (freq / 10000) + 2) / 3 * 10;
     9d0:	20c8      	movs	r0, #200	; 0xc8
     9d2:	0040      	lsls	r0, r0, #1
     9d4:	4358      	muls	r0, r3
     9d6:	3002      	adds	r0, #2
     9d8:	2103      	movs	r1, #3
     9da:	4b03      	ldr	r3, [pc, #12]	; (9e8 <_get_cycles_for_ms+0x1c>)
     9dc:	4798      	blx	r3
     9de:	0003      	movs	r3, r0
     9e0:	0080      	lsls	r0, r0, #2
     9e2:	18c0      	adds	r0, r0, r3
     9e4:	0040      	lsls	r0, r0, #1
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     9e6:	bd10      	pop	{r4, pc}
     9e8:	00007ef9 	.word	0x00007ef9

000009ec <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
     9ec:	3901      	subs	r1, #1
     9ee:	d8fd      	bhi.n	9ec <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     9f0:	4770      	bx	lr
	...

000009f4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     9f4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     9f6:	4b09      	ldr	r3, [pc, #36]	; (a1c <_init_chip+0x28>)
     9f8:	685a      	ldr	r2, [r3, #4]
     9fa:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
     9fc:	2002      	movs	r0, #2
     9fe:	4b08      	ldr	r3, [pc, #32]	; (a20 <_init_chip+0x2c>)
     a00:	4798      	blx	r3

	_osc32kctrl_init_sources();
     a02:	4b08      	ldr	r3, [pc, #32]	; (a24 <_init_chip+0x30>)
     a04:	4798      	blx	r3
	_oscctrl_init_sources();
     a06:	4b08      	ldr	r3, [pc, #32]	; (a28 <_init_chip+0x34>)
     a08:	4798      	blx	r3
	_mclk_init();
     a0a:	4b08      	ldr	r3, [pc, #32]	; (a2c <_init_chip+0x38>)
     a0c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     a0e:	4b08      	ldr	r3, [pc, #32]	; (a30 <_init_chip+0x3c>)
     a10:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     a12:	20ff      	movs	r0, #255	; 0xff
     a14:	4b07      	ldr	r3, [pc, #28]	; (a34 <_init_chip+0x40>)
     a16:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     a18:	bd10      	pop	{r4, pc}
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	41004000 	.word	0x41004000
     a20:	00000ac3 	.word	0x00000ac3
     a24:	00000a71 	.word	0x00000a71
     a28:	00000a89 	.word	0x00000a89
     a2c:	00000a5d 	.word	0x00000a5d
     a30:	00000ac1 	.word	0x00000ac1
     a34:	00000a39 	.word	0x00000a39

00000a38 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     a38:	07c3      	lsls	r3, r0, #31
     a3a:	d507      	bpl.n	a4c <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     a3c:	4a04      	ldr	r2, [pc, #16]	; (a50 <_gclk_init_generators_by_fref+0x18>)
     a3e:	4b05      	ldr	r3, [pc, #20]	; (a54 <_gclk_init_generators_by_fref+0x1c>)
     a40:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     a42:	0019      	movs	r1, r3
     a44:	4a04      	ldr	r2, [pc, #16]	; (a58 <_gclk_init_generators_by_fref+0x20>)
     a46:	684b      	ldr	r3, [r1, #4]
     a48:	4213      	tst	r3, r2
     a4a:	d1fc      	bne.n	a46 <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
     a4c:	4770      	bx	lr
     a4e:	46c0      	nop			; (mov r8, r8)
     a50:	00010106 	.word	0x00010106
     a54:	40001800 	.word	0x40001800
     a58:	000007fd 	.word	0x000007fd

00000a5c <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
     a5c:	4b03      	ldr	r3, [pc, #12]	; (a6c <_mclk_init+0x10>)
     a5e:	2208      	movs	r2, #8
     a60:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
     a62:	3a04      	subs	r2, #4
     a64:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
     a66:	3a03      	subs	r2, #3
     a68:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     a6a:	4770      	bx	lr
     a6c:	40000400 	.word	0x40000400

00000a70 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     a70:	4b04      	ldr	r3, [pc, #16]	; (a84 <_osc32kctrl_init_sources+0x14>)
     a72:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     a74:	21f8      	movs	r1, #248	; 0xf8
     a76:	0149      	lsls	r1, r1, #5
     a78:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     a7a:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     a7c:	2201      	movs	r2, #1
     a7e:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     a80:	4770      	bx	lr
     a82:	46c0      	nop			; (mov r8, r8)
     a84:	40001000 	.word	0x40001000

00000a88 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
     a88:	2282      	movs	r2, #130	; 0x82
     a8a:	4b0c      	ldr	r3, [pc, #48]	; (abc <_oscctrl_init_sources+0x34>)
     a8c:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     a8e:	0018      	movs	r0, r3
     a90:	2138      	movs	r1, #56	; 0x38
     a92:	3a80      	subs	r2, #128	; 0x80
     a94:	5c43      	ldrb	r3, [r0, r1]
     a96:	4213      	tst	r3, r2
     a98:	d1fc      	bne.n	a94 <_oscctrl_init_sources+0xc>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
     a9a:	4908      	ldr	r1, [pc, #32]	; (abc <_oscctrl_init_sources+0x34>)
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
     a9c:	2210      	movs	r2, #16
     a9e:	68cb      	ldr	r3, [r1, #12]
     aa0:	421a      	tst	r2, r3
     aa2:	d0fc      	beq.n	a9e <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
     aa4:	4a05      	ldr	r2, [pc, #20]	; (abc <_oscctrl_init_sources+0x34>)
     aa6:	7d13      	ldrb	r3, [r2, #20]
     aa8:	2180      	movs	r1, #128	; 0x80
     aaa:	430b      	orrs	r3, r1
     aac:	7513      	strb	r3, [r2, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     aae:	0010      	movs	r0, r2
     ab0:	3948      	subs	r1, #72	; 0x48
     ab2:	220e      	movs	r2, #14
     ab4:	5c43      	ldrb	r3, [r0, r1]
     ab6:	4213      	tst	r3, r2
     ab8:	d1fc      	bne.n	ab4 <_oscctrl_init_sources+0x2c>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     aba:	4770      	bx	lr
     abc:	40000c00 	.word	0x40000c00

00000ac0 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
     ac0:	4770      	bx	lr

00000ac2 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
     ac2:	2380      	movs	r3, #128	; 0x80
     ac4:	05db      	lsls	r3, r3, #23
     ac6:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
     ac8:	2203      	movs	r2, #3
     aca:	4013      	ands	r3, r2
     acc:	4298      	cmp	r0, r3
     ace:	d00c      	beq.n	aea <_set_performance_level+0x28>
	((Pm *)hw)->INTFLAG.reg = mask;
     ad0:	2280      	movs	r2, #128	; 0x80
     ad2:	05d2      	lsls	r2, r2, #23
     ad4:	23ff      	movs	r3, #255	; 0xff
     ad6:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
     ad8:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
     ada:	2103      	movs	r1, #3
     adc:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
     ade:	4008      	ands	r0, r1
     ae0:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
     ae2:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
     ae4:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
     ae6:	2b00      	cmp	r3, #0
     ae8:	d0fc      	beq.n	ae4 <_set_performance_level+0x22>
			;
	}
}
     aea:	4770      	bx	lr

00000aec <_sercom_get_irq_num>:
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
     aec:	4a05      	ldr	r2, [pc, #20]	; (b04 <_sercom_get_irq_num+0x18>)
     aee:	2305      	movs	r3, #5
     af0:	4290      	cmp	r0, r2
     af2:	d004      	beq.n	afe <_sercom_get_irq_num+0x12>
		return 5;
	}

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     af4:	23be      	movs	r3, #190	; 0xbe
     af6:	061b      	lsls	r3, r3, #24
     af8:	469c      	mov	ip, r3
     afa:	4460      	add	r0, ip
     afc:	0a83      	lsrs	r3, r0, #10
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
     afe:	3308      	adds	r3, #8
     b00:	b2d8      	uxtb	r0, r3
}
     b02:	4770      	bx	lr
     b04:	43000400 	.word	0x43000400

00000b08 <_usart_init>:
{
     b08:	b510      	push	{r4, lr}
     b0a:	0004      	movs	r4, r0
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
     b0c:	4b43      	ldr	r3, [pc, #268]	; (c1c <_usart_init+0x114>)
     b0e:	4298      	cmp	r0, r3
     b10:	d005      	beq.n	b1e <_usart_init+0x16>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     b12:	0383      	lsls	r3, r0, #14
     b14:	0e1b      	lsrs	r3, r3, #24
		if (_usarts[i].number == sercom_offset) {
     b16:	2b03      	cmp	r3, #3
     b18:	d053      	beq.n	bc2 <_usart_init+0xba>
     b1a:	2b04      	cmp	r3, #4
     b1c:	d053      	beq.n	bc6 <_usart_init+0xbe>
	ASSERT(false);
     b1e:	4a40      	ldr	r2, [pc, #256]	; (c20 <_usart_init+0x118>)
     b20:	4940      	ldr	r1, [pc, #256]	; (c24 <_usart_init+0x11c>)
     b22:	2000      	movs	r0, #0
     b24:	4b40      	ldr	r3, [pc, #256]	; (c28 <_usart_init+0x120>)
     b26:	4798      	blx	r3
	return 0;
     b28:	2000      	movs	r0, #0
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     b2a:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     b2c:	07db      	lsls	r3, r3, #31
     b2e:	d421      	bmi.n	b74 <_usart_init+0x6c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     b30:	0083      	lsls	r3, r0, #2
     b32:	181b      	adds	r3, r3, r0
     b34:	009b      	lsls	r3, r3, #2
     b36:	4a3d      	ldr	r2, [pc, #244]	; (c2c <_usart_init+0x124>)
     b38:	18d3      	adds	r3, r2, r3
     b3a:	69d9      	ldr	r1, [r3, #28]
     b3c:	231c      	movs	r3, #28
     b3e:	4019      	ands	r1, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b40:	2203      	movs	r2, #3
     b42:	69e3      	ldr	r3, [r4, #28]
     b44:	421a      	tst	r2, r3
     b46:	d1fc      	bne.n	b42 <_usart_init+0x3a>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     b48:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     b4a:	079b      	lsls	r3, r3, #30
     b4c:	d50b      	bpl.n	b66 <_usart_init+0x5e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     b4e:	6823      	ldr	r3, [r4, #0]
     b50:	2202      	movs	r2, #2
     b52:	4393      	bics	r3, r2
     b54:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b56:	2303      	movs	r3, #3
     b58:	69e2      	ldr	r2, [r4, #28]
     b5a:	4213      	tst	r3, r2
     b5c:	d1fc      	bne.n	b58 <_usart_init+0x50>
     b5e:	2302      	movs	r3, #2
     b60:	69e2      	ldr	r2, [r4, #28]
     b62:	4213      	tst	r3, r2
     b64:	d1fc      	bne.n	b60 <_usart_init+0x58>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     b66:	2301      	movs	r3, #1
     b68:	430b      	orrs	r3, r1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     b6a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b6c:	2203      	movs	r2, #3
     b6e:	69e3      	ldr	r3, [r4, #28]
     b70:	421a      	tst	r2, r3
     b72:	d1fc      	bne.n	b6e <_usart_init+0x66>
     b74:	2201      	movs	r2, #1
     b76:	69e3      	ldr	r3, [r4, #28]
     b78:	421a      	tst	r2, r3
     b7a:	d1fc      	bne.n	b76 <_usart_init+0x6e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     b7c:	0001      	movs	r1, r0
     b7e:	0083      	lsls	r3, r0, #2
     b80:	181b      	adds	r3, r3, r0
     b82:	009b      	lsls	r3, r3, #2
     b84:	4a29      	ldr	r2, [pc, #164]	; (c2c <_usart_init+0x124>)
     b86:	18d3      	adds	r3, r2, r3
     b88:	69d8      	ldr	r0, [r3, #28]
	((Sercom *)hw)->USART.CTRLA.reg = data;
     b8a:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b8c:	2203      	movs	r2, #3
     b8e:	69e3      	ldr	r3, [r4, #28]
     b90:	421a      	tst	r2, r3
     b92:	d1fc      	bne.n	b8e <_usart_init+0x86>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     b94:	008b      	lsls	r3, r1, #2
     b96:	185b      	adds	r3, r3, r1
     b98:	009b      	lsls	r3, r3, #2
     b9a:	4a24      	ldr	r2, [pc, #144]	; (c2c <_usart_init+0x124>)
     b9c:	18d3      	adds	r3, r2, r3
     b9e:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     ba0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ba2:	2207      	movs	r2, #7
     ba4:	69e3      	ldr	r3, [r4, #28]
     ba6:	421a      	tst	r2, r3
     ba8:	d1fc      	bne.n	ba4 <_usart_init+0x9c>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     baa:	23c0      	movs	r3, #192	; 0xc0
     bac:	01db      	lsls	r3, r3, #7
     bae:	4218      	tst	r0, r3
     bb0:	d10b      	bne.n	bca <_usart_init+0xc2>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     bb2:	008b      	lsls	r3, r1, #2
     bb4:	185b      	adds	r3, r3, r1
     bb6:	009b      	lsls	r3, r3, #2
     bb8:	4a1c      	ldr	r2, [pc, #112]	; (c2c <_usart_init+0x124>)
     bba:	18d3      	adds	r3, r2, r3
     bbc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     bbe:	81a3      	strh	r3, [r4, #12]
     bc0:	e01a      	b.n	bf8 <_usart_init+0xf0>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     bc2:	2000      	movs	r0, #0
     bc4:	e7b1      	b.n	b2a <_usart_init+0x22>
		if (_usarts[i].number == sercom_offset) {
     bc6:	2001      	movs	r0, #1
     bc8:	e7af      	b.n	b2a <_usart_init+0x22>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     bca:	008a      	lsls	r2, r1, #2
     bcc:	1852      	adds	r2, r2, r1
     bce:	0093      	lsls	r3, r2, #2
     bd0:	4a16      	ldr	r2, [pc, #88]	; (c2c <_usart_init+0x124>)
     bd2:	18d2      	adds	r2, r2, r3
     bd4:	8c90      	ldrh	r0, [r2, #36]	; 0x24
     bd6:	89a3      	ldrh	r3, [r4, #12]
     bd8:	04c0      	lsls	r0, r0, #19
     bda:	0cc0      	lsrs	r0, r0, #19
     bdc:	0b5b      	lsrs	r3, r3, #13
     bde:	035b      	lsls	r3, r3, #13
     be0:	4303      	orrs	r3, r0
     be2:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     be4:	3226      	adds	r2, #38	; 0x26
     be6:	7813      	ldrb	r3, [r2, #0]
     be8:	2207      	movs	r2, #7
     bea:	401a      	ands	r2, r3
     bec:	89a3      	ldrh	r3, [r4, #12]
     bee:	0352      	lsls	r2, r2, #13
     bf0:	04db      	lsls	r3, r3, #19
     bf2:	0cdb      	lsrs	r3, r3, #19
     bf4:	4313      	orrs	r3, r2
     bf6:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     bf8:	4a0c      	ldr	r2, [pc, #48]	; (c2c <_usart_init+0x124>)
     bfa:	0088      	lsls	r0, r1, #2
     bfc:	1843      	adds	r3, r0, r1
     bfe:	009b      	lsls	r3, r3, #2
     c00:	18d3      	adds	r3, r2, r3
     c02:	3327      	adds	r3, #39	; 0x27
     c04:	781b      	ldrb	r3, [r3, #0]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     c06:	73a3      	strb	r3, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     c08:	1841      	adds	r1, r0, r1
     c0a:	0089      	lsls	r1, r1, #2
     c0c:	1852      	adds	r2, r2, r1
     c0e:	3228      	adds	r2, #40	; 0x28
     c10:	7812      	ldrb	r2, [r2, #0]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     c12:	2330      	movs	r3, #48	; 0x30
     c14:	54e2      	strb	r2, [r4, r3]
}
     c16:	2000      	movs	r0, #0
     c18:	bd10      	pop	{r4, pc}
     c1a:	46c0      	nop			; (mov r8, r8)
     c1c:	43000400 	.word	0x43000400
     c20:	00000261 	.word	0x00000261
     c24:	000097c0 	.word	0x000097c0
     c28:	00000889 	.word	0x00000889
     c2c:	00009780 	.word	0x00009780

00000c30 <_usart_sync_init>:
{
     c30:	b570      	push	{r4, r5, r6, lr}
     c32:	0005      	movs	r5, r0
     c34:	000c      	movs	r4, r1
	ASSERT(device);
     c36:	1e43      	subs	r3, r0, #1
     c38:	4198      	sbcs	r0, r3
     c3a:	b2c0      	uxtb	r0, r0
     c3c:	22b6      	movs	r2, #182	; 0xb6
     c3e:	4904      	ldr	r1, [pc, #16]	; (c50 <_usart_sync_init+0x20>)
     c40:	4b04      	ldr	r3, [pc, #16]	; (c54 <_usart_sync_init+0x24>)
     c42:	4798      	blx	r3
	device->hw = hw;
     c44:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     c46:	0020      	movs	r0, r4
     c48:	4b03      	ldr	r3, [pc, #12]	; (c58 <_usart_sync_init+0x28>)
     c4a:	4798      	blx	r3
}
     c4c:	bd70      	pop	{r4, r5, r6, pc}
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	000097c0 	.word	0x000097c0
     c54:	00000889 	.word	0x00000889
     c58:	00000b09 	.word	0x00000b09

00000c5c <_usart_async_init>:
{
     c5c:	b570      	push	{r4, r5, r6, lr}
     c5e:	0006      	movs	r6, r0
     c60:	000c      	movs	r4, r1
	ASSERT(device);
     c62:	1e43      	subs	r3, r0, #1
     c64:	4198      	sbcs	r0, r3
     c66:	b2c0      	uxtb	r0, r0
     c68:	22c4      	movs	r2, #196	; 0xc4
     c6a:	4913      	ldr	r1, [pc, #76]	; (cb8 <_usart_async_init+0x5c>)
     c6c:	4b13      	ldr	r3, [pc, #76]	; (cbc <_usart_async_init+0x60>)
     c6e:	4798      	blx	r3
	init_status = _usart_init(hw);
     c70:	0020      	movs	r0, r4
     c72:	4b13      	ldr	r3, [pc, #76]	; (cc0 <_usart_async_init+0x64>)
     c74:	4798      	blx	r3
     c76:	1e05      	subs	r5, r0, #0
	if (init_status) {
     c78:	d001      	beq.n	c7e <_usart_async_init+0x22>
}
     c7a:	0028      	movs	r0, r5
     c7c:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
     c7e:	61b4      	str	r4, [r6, #24]
	if (hw == SERCOM4) {
     c80:	4b10      	ldr	r3, [pc, #64]	; (cc4 <_usart_async_init+0x68>)
     c82:	429c      	cmp	r4, r3
     c84:	d014      	beq.n	cb0 <_usart_async_init+0x54>
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
     c86:	0020      	movs	r0, r4
     c88:	4b0f      	ldr	r3, [pc, #60]	; (cc8 <_usart_async_init+0x6c>)
     c8a:	4798      	blx	r3
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     c8c:	0603      	lsls	r3, r0, #24
     c8e:	d4f4      	bmi.n	c7a <_usart_async_init+0x1e>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     c90:	231f      	movs	r3, #31
     c92:	4018      	ands	r0, r3
     c94:	3b1e      	subs	r3, #30
     c96:	4083      	lsls	r3, r0
     c98:	4a0c      	ldr	r2, [pc, #48]	; (ccc <_usart_async_init+0x70>)
     c9a:	2180      	movs	r1, #128	; 0x80
     c9c:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     c9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     ca2:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     ca6:	3101      	adds	r1, #1
     ca8:	31ff      	adds	r1, #255	; 0xff
     caa:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     cac:	6013      	str	r3, [r2, #0]
     cae:	e7e4      	b.n	c7a <_usart_async_init+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
     cb0:	4b07      	ldr	r3, [pc, #28]	; (cd0 <_usart_async_init+0x74>)
     cb2:	601e      	str	r6, [r3, #0]
     cb4:	e7e7      	b.n	c86 <_usart_async_init+0x2a>
     cb6:	46c0      	nop			; (mov r8, r8)
     cb8:	000097c0 	.word	0x000097c0
     cbc:	00000889 	.word	0x00000889
     cc0:	00000b09 	.word	0x00000b09
     cc4:	42001000 	.word	0x42001000
     cc8:	00000aed 	.word	0x00000aed
     ccc:	e000e100 	.word	0xe000e100
     cd0:	200002f0 	.word	0x200002f0

00000cd4 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     cd4:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     cd6:	6813      	ldr	r3, [r2, #0]
     cd8:	2102      	movs	r1, #2
     cda:	430b      	orrs	r3, r1
     cdc:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     cde:	3101      	adds	r1, #1
     ce0:	69d3      	ldr	r3, [r2, #28]
     ce2:	4219      	tst	r1, r3
     ce4:	d1fc      	bne.n	ce0 <_usart_sync_enable+0xc>
}
     ce6:	4770      	bx	lr

00000ce8 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     ce8:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     cea:	6813      	ldr	r3, [r2, #0]
     cec:	2102      	movs	r1, #2
     cee:	430b      	orrs	r3, r1
     cf0:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     cf2:	3101      	adds	r1, #1
     cf4:	69d3      	ldr	r3, [r2, #28]
     cf6:	4219      	tst	r1, r3
     cf8:	d1fc      	bne.n	cf4 <_usart_async_enable+0xc>
}
     cfa:	4770      	bx	lr

00000cfc <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     cfc:	6803      	ldr	r3, [r0, #0]
     cfe:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     d00:	8519      	strh	r1, [r3, #40]	; 0x28
}
     d02:	4770      	bx	lr

00000d04 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     d04:	6983      	ldr	r3, [r0, #24]
     d06:	b289      	uxth	r1, r1
     d08:	8519      	strh	r1, [r3, #40]	; 0x28
}
     d0a:	4770      	bx	lr

00000d0c <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     d0c:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     d0e:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     d10:	b2c0      	uxtb	r0, r0
}
     d12:	4770      	bx	lr

00000d14 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     d14:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     d16:	7e18      	ldrb	r0, [r3, #24]
     d18:	2301      	movs	r3, #1
     d1a:	4018      	ands	r0, r3
}
     d1c:	4770      	bx	lr

00000d1e <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     d1e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     d20:	7e18      	ldrb	r0, [r3, #24]
     d22:	0780      	lsls	r0, r0, #30
     d24:	0fc0      	lsrs	r0, r0, #31
}
     d26:	4770      	bx	lr

00000d28 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     d28:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     d2a:	7e18      	ldrb	r0, [r3, #24]
     d2c:	0740      	lsls	r0, r0, #29
     d2e:	0fc0      	lsrs	r0, r0, #31
}
     d30:	4770      	bx	lr

00000d32 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
     d32:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
     d34:	2201      	movs	r2, #1
     d36:	759a      	strb	r2, [r3, #22]
}
     d38:	4770      	bx	lr

00000d3a <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
     d3a:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
     d3c:	2202      	movs	r2, #2
     d3e:	759a      	strb	r2, [r3, #22]
}
     d40:	4770      	bx	lr
	...

00000d44 <_usart_async_set_irq_state>:
{
     d44:	b570      	push	{r4, r5, r6, lr}
     d46:	0004      	movs	r4, r0
     d48:	000d      	movs	r5, r1
     d4a:	0016      	movs	r6, r2
	ASSERT(device);
     d4c:	1e43      	subs	r3, r0, #1
     d4e:	4198      	sbcs	r0, r3
     d50:	b2c0      	uxtb	r0, r0
     d52:	4a16      	ldr	r2, [pc, #88]	; (dac <_usart_async_set_irq_state+0x68>)
     d54:	4916      	ldr	r1, [pc, #88]	; (db0 <_usart_async_set_irq_state+0x6c>)
     d56:	4b17      	ldr	r3, [pc, #92]	; (db4 <_usart_async_set_irq_state+0x70>)
     d58:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
     d5a:	2302      	movs	r3, #2
     d5c:	002a      	movs	r2, r5
     d5e:	439a      	bics	r2, r3
     d60:	d10e      	bne.n	d80 <_usart_async_set_irq_state+0x3c>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
     d62:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
     d64:	2e00      	cmp	r6, #0
     d66:	d105      	bne.n	d74 <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     d68:	2201      	movs	r2, #1
     d6a:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
     d6c:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
     d6e:	3201      	adds	r2, #1
     d70:	751a      	strb	r2, [r3, #20]
}
     d72:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
     d74:	2201      	movs	r2, #1
     d76:	759a      	strb	r2, [r3, #22]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
     d78:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
     d7a:	3201      	adds	r2, #1
     d7c:	759a      	strb	r2, [r3, #22]
     d7e:	e7f8      	b.n	d72 <_usart_async_set_irq_state+0x2e>
	} else if (USART_ASYNC_RX_DONE == type) {
     d80:	2d01      	cmp	r5, #1
     d82:	d007      	beq.n	d94 <_usart_async_set_irq_state+0x50>
	} else if (USART_ASYNC_ERROR == type) {
     d84:	2d03      	cmp	r5, #3
     d86:	d1f4      	bne.n	d72 <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
     d88:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
     d8a:	2e00      	cmp	r6, #0
     d8c:	d00b      	beq.n	da6 <_usart_async_set_irq_state+0x62>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
     d8e:	2280      	movs	r2, #128	; 0x80
     d90:	759a      	strb	r2, [r3, #22]
}
     d92:	e7ee      	b.n	d72 <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
     d94:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
     d96:	2e00      	cmp	r6, #0
     d98:	d102      	bne.n	da0 <_usart_async_set_irq_state+0x5c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
     d9a:	2204      	movs	r2, #4
     d9c:	751a      	strb	r2, [r3, #20]
     d9e:	e7e8      	b.n	d72 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
     da0:	2204      	movs	r2, #4
     da2:	759a      	strb	r2, [r3, #22]
     da4:	e7e5      	b.n	d72 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
     da6:	2280      	movs	r2, #128	; 0x80
     da8:	751a      	strb	r2, [r3, #20]
     daa:	e7e2      	b.n	d72 <_usart_async_set_irq_state+0x2e>
     dac:	00000221 	.word	0x00000221
     db0:	000097c0 	.word	0x000097c0
     db4:	00000889 	.word	0x00000889

00000db8 <SERCOM4_Handler>:

	return NULL;
}

void SERCOM4_Handler(void)
{
     db8:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
     dba:	4b19      	ldr	r3, [pc, #100]	; (e20 <SERCOM4_Handler+0x68>)
     dbc:	6818      	ldr	r0, [r3, #0]
	void *hw = device->hw;
     dbe:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     dc0:	7e23      	ldrb	r3, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
     dc2:	07db      	lsls	r3, r3, #31
     dc4:	d502      	bpl.n	dcc <SERCOM4_Handler+0x14>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
     dc6:	7da3      	ldrb	r3, [r4, #22]
     dc8:	07db      	lsls	r3, r3, #31
     dca:	d40f      	bmi.n	dec <SERCOM4_Handler+0x34>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     dcc:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
     dce:	079b      	lsls	r3, r3, #30
     dd0:	d502      	bpl.n	dd8 <SERCOM4_Handler+0x20>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
     dd2:	7da3      	ldrb	r3, [r4, #22]
     dd4:	079b      	lsls	r3, r3, #30
     dd6:	d40e      	bmi.n	df6 <SERCOM4_Handler+0x3e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     dd8:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
     dda:	075b      	lsls	r3, r3, #29
     ddc:	d515      	bpl.n	e0a <SERCOM4_Handler+0x52>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
     dde:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
     de0:	2337      	movs	r3, #55	; 0x37
     de2:	421a      	tst	r2, r3
     de4:	d00c      	beq.n	e00 <SERCOM4_Handler+0x48>
	((Sercom *)hw)->USART.STATUS.reg = mask;
     de6:	3308      	adds	r3, #8
     de8:	8363      	strh	r3, [r4, #26]
}
     dea:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     dec:	2301      	movs	r3, #1
     dee:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
     df0:	6803      	ldr	r3, [r0, #0]
     df2:	4798      	blx	r3
     df4:	e7f9      	b.n	dea <SERCOM4_Handler+0x32>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
     df6:	2302      	movs	r3, #2
     df8:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
     dfa:	6883      	ldr	r3, [r0, #8]
     dfc:	4798      	blx	r3
     dfe:	e7f4      	b.n	dea <SERCOM4_Handler+0x32>
	return ((Sercom *)hw)->USART.DATA.reg;
     e00:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
     e02:	b2c9      	uxtb	r1, r1
     e04:	6843      	ldr	r3, [r0, #4]
     e06:	4798      	blx	r3
     e08:	e7ef      	b.n	dea <SERCOM4_Handler+0x32>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
     e0a:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
     e0c:	09db      	lsrs	r3, r3, #7
     e0e:	d0ec      	beq.n	dea <SERCOM4_Handler+0x32>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     e10:	2380      	movs	r3, #128	; 0x80
     e12:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
     e14:	68c3      	ldr	r3, [r0, #12]
     e16:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
     e18:	8b63      	ldrh	r3, [r4, #26]
     e1a:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
     e1c:	8363      	strh	r3, [r4, #26]
}
     e1e:	e7e4      	b.n	dea <SERCOM4_Handler+0x32>
     e20:	200002f0 	.word	0x200002f0

00000e24 <IOT_ATM_Init>:
struct at_mqtt_input;
int at_conn_input(struct at_conn_input *param);
int at_mqtt_input(struct at_mqtt_input *param);

int IOT_ATM_Init(void)
{
     e24:	b510      	push	{r4, lr}

#ifdef AT_PARSER_ENABLED
    if (at_parser_init() < 0) {
     e26:	4b05      	ldr	r3, [pc, #20]	; (e3c <IOT_ATM_Init+0x18>)
     e28:	4798      	blx	r3
     e2a:	2800      	cmp	r0, #0
     e2c:	db03      	blt.n	e36 <IOT_ATM_Init+0x12>
    	return -1;
    }
#endif

#ifdef AT_TCP_ENABLED
    if (at_conn_init() < 0) {
     e2e:	4b04      	ldr	r3, [pc, #16]	; (e40 <IOT_ATM_Init+0x1c>)
     e30:	4798      	blx	r3
     e32:	17c0      	asrs	r0, r0, #31
    	return -1;
    }
#endif

    return 0;
}
     e34:	bd10      	pop	{r4, pc}
    	return -1;
     e36:	2001      	movs	r0, #1
     e38:	4240      	negs	r0, r0
     e3a:	e7fb      	b.n	e34 <IOT_ATM_Init+0x10>
     e3c:	00001725 	.word	0x00001725
     e40:	0000123d 	.word	0x0000123d

00000e44 <IOT_ATM_Input>:


int IOT_ATM_Input(void * param) 
{ 
     e44:	b510      	push	{r4, lr}
	int ret = -1;

#if defined(AT_TCP_ENABLED)
    ret = at_conn_input((struct at_conn_input *)param);
     e46:	4b01      	ldr	r3, [pc, #4]	; (e4c <IOT_ATM_Input+0x8>)
     e48:	4798      	blx	r3
#elif defined(AT_MQTT_ENABLED)
    ret = at_mqtt_input((struct at_mqtt_input *)param);
#endif

    return ret;
}
     e4a:	bd10      	pop	{r4, pc}
     e4c:	00001135 	.word	0x00001135

00000e50 <at_ringbuf_available_read_space>:
    uint32_t tail;
} at_ringbuf_t;

static int at_ringbuf_available_read_space(at_ringbuf_t *ringbuf)
{
    if (ringbuf->head == ringbuf->tail) {
     e50:	6883      	ldr	r3, [r0, #8]
     e52:	68c2      	ldr	r2, [r0, #12]
     e54:	4293      	cmp	r3, r2
     e56:	d007      	beq.n	e68 <at_ringbuf_available_read_space+0x18>
        return 0;
    } else if (ringbuf->head < ringbuf->tail) {
     e58:	d304      	bcc.n	e64 <at_ringbuf_available_read_space+0x14>
        return ringbuf->tail - ringbuf->head;
    } else {
        return ringbuf->length + 1 - (ringbuf->head - ringbuf->tail);
     e5a:	6840      	ldr	r0, [r0, #4]
     e5c:	1810      	adds	r0, r2, r0
     e5e:	3001      	adds	r0, #1
     e60:	1ac0      	subs	r0, r0, r3
    }
}
     e62:	4770      	bx	lr
        return ringbuf->tail - ringbuf->head;
     e64:	1ad0      	subs	r0, r2, r3
     e66:	e7fc      	b.n	e62 <at_ringbuf_available_read_space+0x12>
        return 0;
     e68:	2000      	movs	r0, #0
     e6a:	e7fa      	b.n	e62 <at_ringbuf_available_read_space+0x12>

00000e6c <at_ringbuf_write>:
        HAL_Free(ringbuf);
    }
}

static int at_ringbuf_write(at_ringbuf_t *ringbuf, void *data, int size)
{
     e6c:	b570      	push	{r4, r5, r6, lr}
     e6e:	0004      	movs	r4, r0
     e70:	000d      	movs	r5, r1
     e72:	0016      	movs	r6, r2
    if (ringbuf == NULL || data == NULL) {
     e74:	2800      	cmp	r0, #0
     e76:	d01e      	beq.n	eb6 <at_ringbuf_write+0x4a>
     e78:	2900      	cmp	r1, #0
     e7a:	d01f      	beq.n	ebc <at_ringbuf_write+0x50>
    return (ringbuf->length - at_ringbuf_available_read_space(ringbuf));
     e7c:	4b11      	ldr	r3, [pc, #68]	; (ec4 <at_ringbuf_write+0x58>)
     e7e:	4798      	blx	r3
        return -1;
    }

    if (at_ringbuf_full(ringbuf)) {
     e80:	6863      	ldr	r3, [r4, #4]
     e82:	4283      	cmp	r3, r0
     e84:	d011      	beq.n	eaa <at_ringbuf_write+0x3e>
        HAL_Printf("ringbuf full!");
        return -1;
    }

    memcpy(&(((void **) ringbuf->buffer)[ringbuf->tail]), data, size);
     e86:	68e3      	ldr	r3, [r4, #12]
     e88:	0098      	lsls	r0, r3, #2
     e8a:	6823      	ldr	r3, [r4, #0]
     e8c:	469c      	mov	ip, r3
     e8e:	4460      	add	r0, ip
     e90:	0032      	movs	r2, r6
     e92:	0029      	movs	r1, r5
     e94:	4b0c      	ldr	r3, [pc, #48]	; (ec8 <at_ringbuf_write+0x5c>)
     e96:	4798      	blx	r3
    ringbuf->tail = (ringbuf->tail + 1) % (ringbuf->length + 1);
     e98:	68e3      	ldr	r3, [r4, #12]
     e9a:	1c58      	adds	r0, r3, #1
     e9c:	6863      	ldr	r3, [r4, #4]
     e9e:	1c59      	adds	r1, r3, #1
     ea0:	4b0a      	ldr	r3, [pc, #40]	; (ecc <at_ringbuf_write+0x60>)
     ea2:	4798      	blx	r3
     ea4:	60e1      	str	r1, [r4, #12]

    return 0;
     ea6:	2000      	movs	r0, #0
}
     ea8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_Printf("ringbuf full!");
     eaa:	4809      	ldr	r0, [pc, #36]	; (ed0 <at_ringbuf_write+0x64>)
     eac:	4b09      	ldr	r3, [pc, #36]	; (ed4 <at_ringbuf_write+0x68>)
     eae:	4798      	blx	r3
        return -1;
     eb0:	2001      	movs	r0, #1
     eb2:	4240      	negs	r0, r0
     eb4:	e7f8      	b.n	ea8 <at_ringbuf_write+0x3c>
        return -1;
     eb6:	2001      	movs	r0, #1
     eb8:	4240      	negs	r0, r0
     eba:	e7f5      	b.n	ea8 <at_ringbuf_write+0x3c>
     ebc:	2001      	movs	r0, #1
     ebe:	4240      	negs	r0, r0
     ec0:	e7f2      	b.n	ea8 <at_ringbuf_write+0x3c>
     ec2:	46c0      	nop			; (mov r8, r8)
     ec4:	00000e51 	.word	0x00000e51
     ec8:	000085b7 	.word	0x000085b7
     ecc:	00008005 	.word	0x00008005
     ed0:	000097dc 	.word	0x000097dc
     ed4:	00007d35 	.word	0x00007d35

00000ed8 <at_ringbuf_read>:

static int at_ringbuf_read(at_ringbuf_t *ringbuf, void *target,
                            unsigned int ms, unsigned int *size)
{
     ed8:	b570      	push	{r4, r5, r6, lr}
     eda:	0004      	movs	r4, r0
     edc:	000d      	movs	r5, r1
     ede:	001e      	movs	r6, r3
    *size = 0;
     ee0:	2300      	movs	r3, #0
     ee2:	6033      	str	r3, [r6, #0]

    if (ringbuf == NULL || target == NULL) {
     ee4:	2800      	cmp	r0, #0
     ee6:	d01e      	beq.n	f26 <at_ringbuf_read+0x4e>
     ee8:	2900      	cmp	r1, #0
     eea:	d01f      	beq.n	f2c <at_ringbuf_read+0x54>
    return (at_ringbuf_available_read_space(ringbuf) == 0);
     eec:	4b12      	ldr	r3, [pc, #72]	; (f38 <at_ringbuf_read+0x60>)
     eee:	4798      	blx	r3
        return -1;
    }

    /* TODO: timeout handle */
    if (at_ringbuf_empty(ringbuf)) {
     ef0:	2800      	cmp	r0, #0
     ef2:	d01e      	beq.n	f32 <at_ringbuf_read+0x5a>
        return -1;
    }

    memcpy(((void **)target), &((void **)ringbuf->buffer)[ringbuf->head], sizeof(void *));
     ef4:	68a3      	ldr	r3, [r4, #8]
     ef6:	0099      	lsls	r1, r3, #2
     ef8:	6823      	ldr	r3, [r4, #0]
     efa:	469c      	mov	ip, r3
     efc:	4461      	add	r1, ip
     efe:	2204      	movs	r2, #4
     f00:	0028      	movs	r0, r5
     f02:	4b0e      	ldr	r3, [pc, #56]	; (f3c <at_ringbuf_read+0x64>)
     f04:	4798      	blx	r3
    ((void **)ringbuf->buffer)[ringbuf->head] = NULL;
     f06:	68a3      	ldr	r3, [r4, #8]
     f08:	009b      	lsls	r3, r3, #2
     f0a:	2200      	movs	r2, #0
     f0c:	6821      	ldr	r1, [r4, #0]
     f0e:	505a      	str	r2, [r3, r1]
    *size = sizeof(void *);
     f10:	2304      	movs	r3, #4
     f12:	6033      	str	r3, [r6, #0]
    ringbuf->head = (ringbuf->head + 1) % (ringbuf->length + 1);
     f14:	68a3      	ldr	r3, [r4, #8]
     f16:	1c58      	adds	r0, r3, #1
     f18:	6863      	ldr	r3, [r4, #4]
     f1a:	1c59      	adds	r1, r3, #1
     f1c:	4b08      	ldr	r3, [pc, #32]	; (f40 <at_ringbuf_read+0x68>)
     f1e:	4798      	blx	r3
     f20:	60a1      	str	r1, [r4, #8]

    return 0;
     f22:	2000      	movs	r0, #0
}
     f24:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
     f26:	2001      	movs	r0, #1
     f28:	4240      	negs	r0, r0
     f2a:	e7fb      	b.n	f24 <at_ringbuf_read+0x4c>
     f2c:	2001      	movs	r0, #1
     f2e:	4240      	negs	r0, r0
     f30:	e7f8      	b.n	f24 <at_ringbuf_read+0x4c>
        return -1;
     f32:	2001      	movs	r0, #1
     f34:	4240      	negs	r0, r0
     f36:	e7f5      	b.n	f24 <at_ringbuf_read+0x4c>
     f38:	00000e51 	.word	0x00000e51
     f3c:	000085b7 	.word	0x000085b7
     f40:	00008005 	.word	0x00008005

00000f44 <at_mbox_new>:

/**********************public interface***********************/
int at_mbox_new(at_mbox_t *mb, int size)
{
     f44:	b570      	push	{r4, r5, r6, lr}
     f46:	0006      	movs	r6, r0
     f48:	000c      	movs	r4, r1
    void *hdl = NULL;

    if (mb == NULL) {
     f4a:	2800      	cmp	r0, #0
     f4c:	d01b      	beq.n	f86 <at_mbox_new+0x42>
    if (length <= 0) {
     f4e:	2900      	cmp	r1, #0
     f50:	dd16      	ble.n	f80 <at_mbox_new+0x3c>
    ringbuf = HAL_Malloc(sizeof(at_ringbuf_t));
     f52:	2010      	movs	r0, #16
     f54:	4b0d      	ldr	r3, [pc, #52]	; (f8c <at_mbox_new+0x48>)
     f56:	4798      	blx	r3
     f58:	1e05      	subs	r5, r0, #0
    if (ringbuf == NULL) {
     f5a:	d011      	beq.n	f80 <at_mbox_new+0x3c>
    memset(ringbuf, 0, sizeof(at_ringbuf_t));
     f5c:	2210      	movs	r2, #16
     f5e:	2100      	movs	r1, #0
     f60:	4b0b      	ldr	r3, [pc, #44]	; (f90 <at_mbox_new+0x4c>)
     f62:	4798      	blx	r3
    ringbuf->length = length;
     f64:	606c      	str	r4, [r5, #4]
    ringbuf->buffer = HAL_Malloc((ringbuf->length + 1) * sizeof(void *));
     f66:	1c60      	adds	r0, r4, #1
     f68:	0080      	lsls	r0, r0, #2
     f6a:	4b08      	ldr	r3, [pc, #32]	; (f8c <at_mbox_new+0x48>)
     f6c:	4798      	blx	r3
     f6e:	6028      	str	r0, [r5, #0]
    if (ringbuf->buffer == NULL) {
     f70:	2800      	cmp	r0, #0
     f72:	d002      	beq.n	f7a <at_mbox_new+0x36>

    hdl = at_ringbuf_create(size);
    if (hdl == NULL) {
        return -1;
    }
    mb->hdl = hdl;
     f74:	6035      	str	r5, [r6, #0]

    return 0;
     f76:	2000      	movs	r0, #0
}
     f78:	bd70      	pop	{r4, r5, r6, pc}
        HAL_Free(ringbuf);
     f7a:	0028      	movs	r0, r5
     f7c:	4b05      	ldr	r3, [pc, #20]	; (f94 <at_mbox_new+0x50>)
     f7e:	4798      	blx	r3
        return -1;
     f80:	2001      	movs	r0, #1
     f82:	4240      	negs	r0, r0
     f84:	e7f8      	b.n	f78 <at_mbox_new+0x34>
        return  -1;
     f86:	2001      	movs	r0, #1
     f88:	4240      	negs	r0, r0
     f8a:	e7f5      	b.n	f78 <at_mbox_new+0x34>
     f8c:	00007d1d 	.word	0x00007d1d
     f90:	000085c9 	.word	0x000085c9
     f94:	00007c5d 	.word	0x00007c5d

00000f98 <at_mbox_free>:

void at_mbox_free(at_mbox_t *mb)
{
     f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((mb != NULL)) {
     f9a:	2800      	cmp	r0, #0
     f9c:	d030      	beq.n	1000 <at_mbox_free+0x68>
        at_ringbuf_destroy((at_ringbuf_t *)mb->hdl);
     f9e:	6804      	ldr	r4, [r0, #0]
    if (ringbuf) {
     fa0:	2c00      	cmp	r4, #0
     fa2:	d02d      	beq.n	1000 <at_mbox_free+0x68>
        if (ringbuf->buffer) {
     fa4:	6823      	ldr	r3, [r4, #0]
     fa6:	2b00      	cmp	r3, #0
     fa8:	d027      	beq.n	ffa <at_mbox_free+0x62>
    while (ringbuf->head != ringbuf->tail) {
     faa:	68a3      	ldr	r3, [r4, #8]
     fac:	68e2      	ldr	r2, [r4, #12]
     fae:	4293      	cmp	r3, r2
     fb0:	d01c      	beq.n	fec <at_mbox_free+0x54>
        HAL_Printf("Warning: unsafe buffer release!\n");
     fb2:	4d14      	ldr	r5, [pc, #80]	; (1004 <at_mbox_free+0x6c>)
     fb4:	4e14      	ldr	r6, [pc, #80]	; (1008 <at_mbox_free+0x70>)
            HAL_Free(((void **)ringbuf->buffer)[ringbuf->head]);
     fb6:	4f15      	ldr	r7, [pc, #84]	; (100c <at_mbox_free+0x74>)
     fb8:	e009      	b.n	fce <at_mbox_free+0x36>
        ringbuf->head = (ringbuf->head + 1) % (ringbuf->length + 1);
     fba:	68a3      	ldr	r3, [r4, #8]
     fbc:	1c58      	adds	r0, r3, #1
     fbe:	6863      	ldr	r3, [r4, #4]
     fc0:	1c59      	adds	r1, r3, #1
     fc2:	4b13      	ldr	r3, [pc, #76]	; (1010 <at_mbox_free+0x78>)
     fc4:	4798      	blx	r3
     fc6:	60a1      	str	r1, [r4, #8]
    while (ringbuf->head != ringbuf->tail) {
     fc8:	68e3      	ldr	r3, [r4, #12]
     fca:	4299      	cmp	r1, r3
     fcc:	d00e      	beq.n	fec <at_mbox_free+0x54>
        HAL_Printf("Warning: unsafe buffer release!\n");
     fce:	0028      	movs	r0, r5
     fd0:	47b0      	blx	r6
        if (((void **)ringbuf->buffer)[ringbuf->head] != NULL) {
     fd2:	68a3      	ldr	r3, [r4, #8]
     fd4:	009b      	lsls	r3, r3, #2
     fd6:	6822      	ldr	r2, [r4, #0]
     fd8:	5898      	ldr	r0, [r3, r2]
     fda:	2800      	cmp	r0, #0
     fdc:	d0ed      	beq.n	fba <at_mbox_free+0x22>
            HAL_Free(((void **)ringbuf->buffer)[ringbuf->head]);
     fde:	47b8      	blx	r7
            ((void **)ringbuf->buffer)[ringbuf->head] = NULL;
     fe0:	68a3      	ldr	r3, [r4, #8]
     fe2:	009b      	lsls	r3, r3, #2
     fe4:	2200      	movs	r2, #0
     fe6:	6821      	ldr	r1, [r4, #0]
     fe8:	505a      	str	r2, [r3, r1]
     fea:	e7e6      	b.n	fba <at_mbox_free+0x22>
    ringbuf->head = ringbuf->tail = 0;
     fec:	2500      	movs	r5, #0
     fee:	60e5      	str	r5, [r4, #12]
     ff0:	60a5      	str	r5, [r4, #8]
            HAL_Free(ringbuf->buffer);
     ff2:	6820      	ldr	r0, [r4, #0]
     ff4:	4b05      	ldr	r3, [pc, #20]	; (100c <at_mbox_free+0x74>)
     ff6:	4798      	blx	r3
            ringbuf->buffer = NULL;
     ff8:	6025      	str	r5, [r4, #0]
        HAL_Free(ringbuf);
     ffa:	0020      	movs	r0, r4
     ffc:	4b03      	ldr	r3, [pc, #12]	; (100c <at_mbox_free+0x74>)
     ffe:	4798      	blx	r3
    }
}
    1000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1002:	46c0      	nop			; (mov r8, r8)
    1004:	000097ec 	.word	0x000097ec
    1008:	00007d35 	.word	0x00007d35
    100c:	00007c5d 	.word	0x00007c5d
    1010:	00008005 	.word	0x00008005

00001014 <at_mbox_trypost>:
{
    at_ringbuf_write((at_ringbuf_t *)mb->hdl, &msg, sizeof(void *));
}

int at_mbox_trypost(at_mbox_t *mb, void *msg)
{
    1014:	b500      	push	{lr}
    1016:	b083      	sub	sp, #12
    1018:	9101      	str	r1, [sp, #4]
    if (at_ringbuf_write((at_ringbuf_t *)mb->hdl,
    101a:	6800      	ldr	r0, [r0, #0]
    101c:	2204      	movs	r2, #4
    101e:	a901      	add	r1, sp, #4
    1020:	4b03      	ldr	r3, [pc, #12]	; (1030 <at_mbox_trypost+0x1c>)
    1022:	4798      	blx	r3
    1024:	1e43      	subs	r3, r0, #1
    1026:	4198      	sbcs	r0, r3
    1028:	4240      	negs	r0, r0
                         &msg, sizeof(void *)) != 0) {
        return -1;
    } else {
        return 0;
    }
}
    102a:	b003      	add	sp, #12
    102c:	bd00      	pop	{pc}
    102e:	46c0      	nop			; (mov r8, r8)
    1030:	00000e6d 	.word	0x00000e6d

00001034 <at_mbox_valid>:

int at_mbox_valid(at_mbox_t *mbox)
{
    if (mbox == NULL) {
    1034:	2800      	cmp	r0, #0
    1036:	d004      	beq.n	1042 <at_mbox_valid+0xe>
        return 0;
    }

    if (mbox->hdl == NULL) {
    1038:	6800      	ldr	r0, [r0, #0]
    103a:	1e43      	subs	r3, r0, #1
    103c:	4198      	sbcs	r0, r3
    103e:	b2c0      	uxtb	r0, r0
        return 0;
    }

    return 1;
}
    1040:	4770      	bx	lr
    1042:	2000      	movs	r0, #0
    1044:	e7fc      	b.n	1040 <at_mbox_valid+0xc>
	...

00001048 <at_mbox_fetch>:

uint32_t at_mbox_fetch(at_mbox_t *mb, void **msg, uint32_t timeout)
{
    1048:	b5f0      	push	{r4, r5, r6, r7, lr}
    104a:	46c6      	mov	lr, r8
    104c:	b500      	push	{lr}
    104e:	b082      	sub	sp, #8
    1050:	0004      	movs	r4, r0
    1052:	000d      	movs	r5, r1
    1054:	0016      	movs	r6, r2
    uint32_t begin_ms, end_ms, elapsed_ms;
    uint32_t len;
    uint32_t ret;

    if (mb == NULL) {
    1056:	2800      	cmp	r0, #0
    1058:	d025      	beq.n	10a6 <at_mbox_fetch+0x5e>
        return AT_MBOX_TIMEOUT;
    }

    begin_ms = HAL_UptimeMs();
    105a:	4b16      	ldr	r3, [pc, #88]	; (10b4 <at_mbox_fetch+0x6c>)
    105c:	4798      	blx	r3
    105e:	4680      	mov	r8, r0

    if (timeout != 0UL) {
    1060:	2e00      	cmp	r6, #0
    1062:	d110      	bne.n	1086 <at_mbox_fetch+0x3e>
            ret = elapsed_ms;
        } else {
            ret = AT_MBOX_TIMEOUT;
        }
    } else {
        while (at_ringbuf_read((at_ringbuf_t *)mb->hdl, msg, AT_MBOX_TIMEOUT, &len) != 0);
    1064:	2601      	movs	r6, #1
    1066:	4276      	negs	r6, r6
    1068:	4f13      	ldr	r7, [pc, #76]	; (10b8 <at_mbox_fetch+0x70>)
    106a:	ab01      	add	r3, sp, #4
    106c:	0032      	movs	r2, r6
    106e:	0029      	movs	r1, r5
    1070:	6820      	ldr	r0, [r4, #0]
    1072:	47b8      	blx	r7
    1074:	2800      	cmp	r0, #0
    1076:	d1f8      	bne.n	106a <at_mbox_fetch+0x22>
        end_ms = HAL_UptimeMs();
    1078:	4b0e      	ldr	r3, [pc, #56]	; (10b4 <at_mbox_fetch+0x6c>)
    107a:	4798      	blx	r3
        elapsed_ms = end_ms - begin_ms;
    107c:	4643      	mov	r3, r8
    107e:	1ac0      	subs	r0, r0, r3

        if (elapsed_ms == 0UL) {
    1080:	d113      	bne.n	10aa <at_mbox_fetch+0x62>
            elapsed_ms = 1UL;
    1082:	3001      	adds	r0, #1
    1084:	e011      	b.n	10aa <at_mbox_fetch+0x62>
        if (at_ringbuf_read((at_ringbuf_t *)mb->hdl, msg, timeout, &len) == 0) {
    1086:	6820      	ldr	r0, [r4, #0]
    1088:	ab01      	add	r3, sp, #4
    108a:	0032      	movs	r2, r6
    108c:	0029      	movs	r1, r5
    108e:	4c0a      	ldr	r4, [pc, #40]	; (10b8 <at_mbox_fetch+0x70>)
    1090:	47a0      	blx	r4
    1092:	2800      	cmp	r0, #0
    1094:	d002      	beq.n	109c <at_mbox_fetch+0x54>
            ret = AT_MBOX_TIMEOUT;
    1096:	2001      	movs	r0, #1
    1098:	4240      	negs	r0, r0
    109a:	e006      	b.n	10aa <at_mbox_fetch+0x62>
            end_ms = HAL_UptimeMs();
    109c:	4b05      	ldr	r3, [pc, #20]	; (10b4 <at_mbox_fetch+0x6c>)
    109e:	4798      	blx	r3
            elapsed_ms = end_ms - begin_ms;
    10a0:	4643      	mov	r3, r8
    10a2:	1ac0      	subs	r0, r0, r3
    10a4:	e001      	b.n	10aa <at_mbox_fetch+0x62>
        return AT_MBOX_TIMEOUT;
    10a6:	2001      	movs	r0, #1
    10a8:	4240      	negs	r0, r0

        ret = elapsed_ms;
    }

    return ret;
}
    10aa:	b002      	add	sp, #8
    10ac:	bc04      	pop	{r2}
    10ae:	4690      	mov	r8, r2
    10b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10b2:	46c0      	nop			; (mov r8, r8)
    10b4:	00007d95 	.word	0x00007d95
    10b8:	00000ed9 	.word	0x00000ed9

000010bc <at_mbox_tryfetch>:

uint32_t at_mbox_tryfetch(at_mbox_t *mb, void **msg)
{
    10bc:	b510      	push	{r4, lr}
    10be:	b082      	sub	sp, #8
    uint32_t len;

    if (mb == NULL) {
    10c0:	2800      	cmp	r0, #0
    10c2:	d009      	beq.n	10d8 <at_mbox_tryfetch+0x1c>
        return -1;
    }

    if (at_ringbuf_read((at_ringbuf_t *)mb->hdl, msg, 0u, &len) != 0) {
    10c4:	6800      	ldr	r0, [r0, #0]
    10c6:	ab01      	add	r3, sp, #4
    10c8:	2200      	movs	r2, #0
    10ca:	4c05      	ldr	r4, [pc, #20]	; (10e0 <at_mbox_tryfetch+0x24>)
    10cc:	47a0      	blx	r4
    10ce:	1e43      	subs	r3, r0, #1
    10d0:	4198      	sbcs	r0, r3
    10d2:	4240      	negs	r0, r0
        return AT_MBOX_EMPTY;
    } else {
        return 0;
    }
}
    10d4:	b002      	add	sp, #8
    10d6:	bd10      	pop	{r4, pc}
        return -1;
    10d8:	2001      	movs	r0, #1
    10da:	4240      	negs	r0, r0
    10dc:	e7fa      	b.n	10d4 <at_mbox_tryfetch+0x18>
    10de:	46c0      	nop			; (mov r8, r8)
    10e0:	00000ed9 	.word	0x00000ed9

000010e4 <at_mbox_empty>:

int at_mbox_empty(at_mbox_t *mb)
{
    10e4:	b510      	push	{r4, lr}
    if (mb == NULL) {
    10e6:	2800      	cmp	r0, #0
    10e8:	d005      	beq.n	10f6 <at_mbox_empty+0x12>
    return (at_ringbuf_available_read_space(ringbuf) == 0);
    10ea:	6800      	ldr	r0, [r0, #0]
    10ec:	4b03      	ldr	r3, [pc, #12]	; (10fc <at_mbox_empty+0x18>)
    10ee:	4798      	blx	r3
    10f0:	4243      	negs	r3, r0
    10f2:	4158      	adcs	r0, r3
        return -1;
    }

    return at_ringbuf_empty((at_ringbuf_t *)mb->hdl);
}
    10f4:	bd10      	pop	{r4, pc}
        return -1;
    10f6:	2001      	movs	r0, #1
    10f8:	4240      	negs	r0, r0
    10fa:	e7fb      	b.n	10f4 <at_mbox_empty+0x10>
    10fc:	00000e51 	.word	0x00000e51

00001100 <at_mbox_set_invalid>:

void at_mbox_set_invalid(at_mbox_t *mb) 
{ 
    if (mb != NULL) { 
    1100:	2800      	cmp	r0, #0
    1102:	d001      	beq.n	1108 <at_mbox_set_invalid+0x8>
        mb->hdl = NULL; 
    1104:	2300      	movs	r3, #0
    1106:	6003      	str	r3, [r0, #0]
    }
}
    1108:	4770      	bx	lr
	...

0000110c <get_conn>:

static struct at_conn *get_conn(int c)
{
    struct at_conn *conn = NULL;

    if ((c < 0) || (c >= NUM_ATCONN)) {
    110c:	2802      	cmp	r0, #2
    110e:	d80a      	bhi.n	1126 <get_conn+0x1a>
        AT_DEBUG("get_conn(%d): invalid", c);
        return NULL;
    }

    conn = &atconnects[c];
    1110:	4907      	ldr	r1, [pc, #28]	; (1130 <get_conn+0x24>)
    1112:	232c      	movs	r3, #44	; 0x2c
    1114:	001a      	movs	r2, r3
    1116:	4342      	muls	r2, r0
    1118:	188a      	adds	r2, r1, r2

    if (UNUSED_ATCONN == conn->connid) {
    111a:	4343      	muls	r3, r0
    111c:	585b      	ldr	r3, [r3, r1]
    111e:	3301      	adds	r3, #1
    1120:	d003      	beq.n	112a <get_conn+0x1e>
        AT_DEBUG("get_conn(%d): not active", c);
        return NULL;
    }

    return conn;
}
    1122:	0010      	movs	r0, r2
    1124:	4770      	bx	lr
        return NULL;
    1126:	2200      	movs	r2, #0
    1128:	e7fb      	b.n	1122 <get_conn+0x16>
        return NULL;
    112a:	2200      	movs	r2, #0
    112c:	e7f9      	b.n	1122 <get_conn+0x16>
    112e:	46c0      	nop			; (mov r8, r8)
    1130:	200002f4 	.word	0x200002f4

00001134 <at_conn_input>:
    return 0;
}

/****************************public interface*********************/
int at_conn_input(struct at_conn_input *param)
{
    1134:	b5f0      	push	{r4, r5, r6, r7, lr}
    1136:	46ce      	mov	lr, r9
    1138:	b500      	push	{lr}
    113a:	b082      	sub	sp, #8
    char *remote_ip = NULL;
    uint16_t remote_port = 0;
    struct at_conn *conn = NULL;
    at_netbuf_t *buf  = NULL;

    if (NULL == param) {
    113c:	2800      	cmp	r0, #0
    113e:	d054      	beq.n	11ea <at_conn_input+0xb6>
        AT_ERROR("at conn input param NULL\n");
        return -1;
    }

    s = param->fd;
    1140:	6804      	ldr	r4, [r0, #0]
    data = param->data;
    1142:	6847      	ldr	r7, [r0, #4]
    len = param->datalen;
    1144:	6885      	ldr	r5, [r0, #8]
    remote_ip = param->remote_ip;
    1146:	68c6      	ldr	r6, [r0, #12]
    remote_port = param->remote_port;
    1148:	8a03      	ldrh	r3, [r0, #16]
    114a:	4699      	mov	r9, r3

    if (NULL == data || 0 == len) {
    114c:	2f00      	cmp	r7, #0
    114e:	d04f      	beq.n	11f0 <at_conn_input+0xbc>
    1150:	2d00      	cmp	r5, #0
    1152:	d050      	beq.n	11f6 <at_conn_input+0xc2>
        AT_ERROR("low level invalid input data\n");
        return -1;
    }

    if (remote_ip != NULL &&
    1154:	2e00      	cmp	r6, #0
    1156:	d004      	beq.n	1162 <at_conn_input+0x2e>
        strlen(remote_ip) > IPV4_STR_MAX_LEN) {
    1158:	0030      	movs	r0, r6
    115a:	4b30      	ldr	r3, [pc, #192]	; (121c <at_conn_input+0xe8>)
    115c:	4798      	blx	r3
    if (remote_ip != NULL &&
    115e:	2810      	cmp	r0, #16
    1160:	d84c      	bhi.n	11fc <at_conn_input+0xc8>
        AT_ERROR("invalid ip string");
        return -1;
    }

    conn = get_conn(s);
    1162:	0020      	movs	r0, r4
    1164:	4b2e      	ldr	r3, [pc, #184]	; (1220 <at_conn_input+0xec>)
    1166:	4798      	blx	r3
    if (NULL == conn) {
    1168:	2800      	cmp	r0, #0
    116a:	d04a      	beq.n	1202 <at_conn_input+0xce>
        AT_ERROR("conn %d doesn't exist\n", s);
        return -1;
    }

    if (conn->connid < 0) {
    116c:	6803      	ldr	r3, [r0, #0]
    116e:	2b00      	cmp	r3, #0
    1170:	db4a      	blt.n	1208 <at_conn_input+0xd4>
        AT_ERROR("conn %d invalid connid\n", s);
        return -1;
    }

    if (!at_mbox_valid(&conn->recvmbox)) {
    1172:	3020      	adds	r0, #32
    1174:	9001      	str	r0, [sp, #4]
    1176:	4b2b      	ldr	r3, [pc, #172]	; (1224 <at_conn_input+0xf0>)
    1178:	4798      	blx	r3
    117a:	2800      	cmp	r0, #0
    117c:	d047      	beq.n	120e <at_conn_input+0xda>
        AT_ERROR("invalid conn to input packet\n");
        return -1;
    }

    buf = (at_netbuf_t *)HAL_Malloc(sizeof(at_netbuf_t));
    117e:	2018      	movs	r0, #24
    1180:	4b29      	ldr	r3, [pc, #164]	; (1228 <at_conn_input+0xf4>)
    1182:	4798      	blx	r3
    1184:	1e04      	subs	r4, r0, #0
    if (NULL == buf) {
    1186:	d045      	beq.n	1214 <at_conn_input+0xe0>
        AT_ERROR("malloc size %d fail\n", sizeof(at_netbuf_t));
        return -1;
    }
    memset(buf, 0, sizeof(*buf));
    1188:	2218      	movs	r2, #24
    118a:	2100      	movs	r1, #0
    118c:	4b27      	ldr	r3, [pc, #156]	; (122c <at_conn_input+0xf8>)
    118e:	4798      	blx	r3

    buf->payload = HAL_Malloc(len);
    1190:	0028      	movs	r0, r5
    1192:	4b25      	ldr	r3, [pc, #148]	; (1228 <at_conn_input+0xf4>)
    1194:	4798      	blx	r3
    1196:	6020      	str	r0, [r4, #0]
    if (NULL == buf->payload) {
    1198:	2800      	cmp	r0, #0
    119a:	d018      	beq.n	11ce <at_conn_input+0x9a>
        HAL_Free(buf);
        AT_ERROR("malloc size %d fail\n", len);
        return -1;
    }
   
    memcpy(buf->payload, data, len);
    119c:	002a      	movs	r2, r5
    119e:	0039      	movs	r1, r7
    11a0:	4b23      	ldr	r3, [pc, #140]	; (1230 <at_conn_input+0xfc>)
    11a2:	4798      	blx	r3
    buf->len = len;
    11a4:	80a5      	strh	r5, [r4, #4]
    buf->remote_port = remote_port;
    11a6:	464b      	mov	r3, r9
    11a8:	80e3      	strh	r3, [r4, #6]
    if (remote_ip)
    11aa:	2e00      	cmp	r6, #0
    11ac:	d005      	beq.n	11ba <at_conn_input+0x86>
        memcpy(buf->remote_ip, remote_ip, IPV4_STR_MAX_LEN);
    11ae:	0020      	movs	r0, r4
    11b0:	3008      	adds	r0, #8
    11b2:	2210      	movs	r2, #16
    11b4:	0031      	movs	r1, r6
    11b6:	4b1e      	ldr	r3, [pc, #120]	; (1230 <at_conn_input+0xfc>)
    11b8:	4798      	blx	r3
    
    if (at_mbox_trypost(&conn->recvmbox, buf) != 0) {
    11ba:	0021      	movs	r1, r4
    11bc:	9801      	ldr	r0, [sp, #4]
    11be:	4b1d      	ldr	r3, [pc, #116]	; (1234 <at_conn_input+0x100>)
    11c0:	4798      	blx	r3
    11c2:	2800      	cmp	r0, #0
    11c4:	d109      	bne.n	11da <at_conn_input+0xa6>
        AT_ERROR("try post recv packet fail\n");
        return -1;
    }

    return 0;
 }
    11c6:	b002      	add	sp, #8
    11c8:	bc04      	pop	{r2}
    11ca:	4691      	mov	r9, r2
    11cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_Free(buf);
    11ce:	0020      	movs	r0, r4
    11d0:	4b19      	ldr	r3, [pc, #100]	; (1238 <at_conn_input+0x104>)
    11d2:	4798      	blx	r3
        return -1;
    11d4:	2001      	movs	r0, #1
    11d6:	4240      	negs	r0, r0
    11d8:	e7f5      	b.n	11c6 <at_conn_input+0x92>
        HAL_Free(buf->payload);
    11da:	6820      	ldr	r0, [r4, #0]
    11dc:	4d16      	ldr	r5, [pc, #88]	; (1238 <at_conn_input+0x104>)
    11de:	47a8      	blx	r5
        HAL_Free(buf);
    11e0:	0020      	movs	r0, r4
    11e2:	47a8      	blx	r5
        return -1;
    11e4:	2001      	movs	r0, #1
    11e6:	4240      	negs	r0, r0
    11e8:	e7ed      	b.n	11c6 <at_conn_input+0x92>
        return -1;
    11ea:	2001      	movs	r0, #1
    11ec:	4240      	negs	r0, r0
    11ee:	e7ea      	b.n	11c6 <at_conn_input+0x92>
        return -1;
    11f0:	2001      	movs	r0, #1
    11f2:	4240      	negs	r0, r0
    11f4:	e7e7      	b.n	11c6 <at_conn_input+0x92>
    11f6:	2001      	movs	r0, #1
    11f8:	4240      	negs	r0, r0
    11fa:	e7e4      	b.n	11c6 <at_conn_input+0x92>
        return -1;
    11fc:	2001      	movs	r0, #1
    11fe:	4240      	negs	r0, r0
    1200:	e7e1      	b.n	11c6 <at_conn_input+0x92>
        return -1;
    1202:	2001      	movs	r0, #1
    1204:	4240      	negs	r0, r0
    1206:	e7de      	b.n	11c6 <at_conn_input+0x92>
        return -1;
    1208:	2001      	movs	r0, #1
    120a:	4240      	negs	r0, r0
    120c:	e7db      	b.n	11c6 <at_conn_input+0x92>
        return -1;
    120e:	2001      	movs	r0, #1
    1210:	4240      	negs	r0, r0
    1212:	e7d8      	b.n	11c6 <at_conn_input+0x92>
        return -1;
    1214:	2001      	movs	r0, #1
    1216:	4240      	negs	r0, r0
    1218:	e7d5      	b.n	11c6 <at_conn_input+0x92>
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	00008991 	.word	0x00008991
    1220:	0000110d 	.word	0x0000110d
    1224:	00001035 	.word	0x00001035
    1228:	00007d1d 	.word	0x00007d1d
    122c:	000085c9 	.word	0x000085c9
    1230:	000085b7 	.word	0x000085b7
    1234:	00001015 	.word	0x00001015
    1238:	00007c5d 	.word	0x00007c5d

0000123c <at_conn_init>:

int at_conn_init(void)
{
    123c:	b510      	push	{r4, lr}
    static int at_conn_init_done = 0;
    int i;

    if (at_conn_init_done) {
    123e:	4b11      	ldr	r3, [pc, #68]	; (1284 <at_conn_init+0x48>)
    1240:	685b      	ldr	r3, [r3, #4]
        AT_ERROR("at conn have already init done\n");
        return 0;
    1242:	2000      	movs	r0, #0
    if (at_conn_init_done) {
    1244:	2b00      	cmp	r3, #0
    1246:	d112      	bne.n	126e <at_conn_init+0x32>
    }

	for (i = 0; i < NUM_ATCONN; i++) {
		atconnects[i].connid = UNUSED_ATCONN;
    1248:	4b0f      	ldr	r3, [pc, #60]	; (1288 <at_conn_init+0x4c>)
    124a:	2201      	movs	r2, #1
    124c:	4252      	negs	r2, r2
    124e:	601a      	str	r2, [r3, #0]
    1250:	62da      	str	r2, [r3, #44]	; 0x2c
    1252:	659a      	str	r2, [r3, #88]	; 0x58
	}

    g_atconnmutex = HAL_MutexCreate();
    1254:	4b0d      	ldr	r3, [pc, #52]	; (128c <at_conn_init+0x50>)
    1256:	4798      	blx	r3
    1258:	4b0a      	ldr	r3, [pc, #40]	; (1284 <at_conn_init+0x48>)
    125a:	6098      	str	r0, [r3, #8]
    if (g_atconnmutex == NULL) {
    125c:	2800      	cmp	r0, #0
    125e:	d00e      	beq.n	127e <at_conn_init+0x42>
        AT_ERROR("failed to creat g_atconnmutex \n");
        return -1;
    }

    if (HAL_AT_CONN_Init() != 0) {
    1260:	4b0b      	ldr	r3, [pc, #44]	; (1290 <at_conn_init+0x54>)
    1262:	4798      	blx	r3
    1264:	2800      	cmp	r0, #0
    1266:	d103      	bne.n	1270 <at_conn_init+0x34>
        AT_ERROR("at conn low level init fail\n");
        HAL_MutexDestroy(g_atconnmutex);
        return -1;
    }

    at_conn_init_done = 1;
    1268:	2201      	movs	r2, #1
    126a:	4b06      	ldr	r3, [pc, #24]	; (1284 <at_conn_init+0x48>)
    126c:	605a      	str	r2, [r3, #4]

    return 0 ;
}
    126e:	bd10      	pop	{r4, pc}
        HAL_MutexDestroy(g_atconnmutex);
    1270:	4b04      	ldr	r3, [pc, #16]	; (1284 <at_conn_init+0x48>)
    1272:	6898      	ldr	r0, [r3, #8]
    1274:	4b07      	ldr	r3, [pc, #28]	; (1294 <at_conn_init+0x58>)
    1276:	4798      	blx	r3
        return -1;
    1278:	2001      	movs	r0, #1
    127a:	4240      	negs	r0, r0
    127c:	e7f7      	b.n	126e <at_conn_init+0x32>
        return -1;
    127e:	2001      	movs	r0, #1
    1280:	4240      	negs	r0, r0
    1282:	e7f4      	b.n	126e <at_conn_init+0x32>
    1284:	20000374 	.word	0x20000374
    1288:	200002f4 	.word	0x200002f4
    128c:	00007d29 	.word	0x00007d29
    1290:	0000274d 	.word	0x0000274d
    1294:	00007d2d 	.word	0x00007d2d

00001298 <at_conn_getaddrinfo>:

int at_conn_getaddrinfo(const char *nodename, char resultip[16])
{
    1298:	b570      	push	{r4, r5, r6, lr}
    129a:	0004      	movs	r4, r0
    129c:	000d      	movs	r5, r1
	int namelen;

	if (NULL == nodename || NULL == resultip) {
    129e:	2800      	cmp	r0, #0
    12a0:	d00f      	beq.n	12c2 <at_conn_getaddrinfo+0x2a>
    12a2:	2900      	cmp	r1, #0
    12a4:	d010      	beq.n	12c8 <at_conn_getaddrinfo+0x30>
		return -1;
	}
	
    namelen = strlen(nodename);
    12a6:	4b0b      	ldr	r3, [pc, #44]	; (12d4 <at_conn_getaddrinfo+0x3c>)
    12a8:	4798      	blx	r3
    if (namelen > DNS_MAX_NAME_LENGTH)
    12aa:	2380      	movs	r3, #128	; 0x80
    12ac:	005b      	lsls	r3, r3, #1
    12ae:	4298      	cmp	r0, r3
    12b0:	dc0d      	bgt.n	12ce <at_conn_getaddrinfo+0x36>
        return -1;

    if (HAL_AT_CONN_DomainToIp((char *)nodename, resultip) != 0) {
    12b2:	0029      	movs	r1, r5
    12b4:	0020      	movs	r0, r4
    12b6:	4b08      	ldr	r3, [pc, #32]	; (12d8 <at_conn_getaddrinfo+0x40>)
    12b8:	4798      	blx	r3
    12ba:	1e43      	subs	r3, r0, #1
    12bc:	4198      	sbcs	r0, r3
    12be:	4240      	negs	r0, r0
        AT_ERROR("domain to ip failed.");
        return -1;
    }

    return 0;
}
    12c0:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    12c2:	2001      	movs	r0, #1
    12c4:	4240      	negs	r0, r0
    12c6:	e7fb      	b.n	12c0 <at_conn_getaddrinfo+0x28>
    12c8:	2001      	movs	r0, #1
    12ca:	4240      	negs	r0, r0
    12cc:	e7f8      	b.n	12c0 <at_conn_getaddrinfo+0x28>
        return -1;
    12ce:	2001      	movs	r0, #1
    12d0:	4240      	negs	r0, r0
    12d2:	e7f5      	b.n	12c0 <at_conn_getaddrinfo+0x28>
    12d4:	00008991 	.word	0x00008991
    12d8:	00002c09 	.word	0x00002c09

000012dc <at_conn_setup>:

int at_conn_setup(int type)
{
    12dc:	b510      	push	{r4, lr}
    12de:	0004      	movs	r4, r0
	struct at_conn *conn = NULL;
    int connid = -1;

    if (type >= NETCONN_TYPE_NUM || type <= NETCONN_INVALID) {
    12e0:	2801      	cmp	r0, #1
    12e2:	d147      	bne.n	1374 <at_conn_setup+0x98>
    	return -1;
    }

    HAL_MutexLock(g_atconnmutex);
    12e4:	4b2e      	ldr	r3, [pc, #184]	; (13a0 <at_conn_setup+0xc4>)
    12e6:	6898      	ldr	r0, [r3, #8]
    12e8:	4b2e      	ldr	r3, [pc, #184]	; (13a4 <at_conn_setup+0xc8>)
    12ea:	4798      	blx	r3
        if (atconnects[i].connid == UNUSED_ATCONN) {
    12ec:	4b2e      	ldr	r3, [pc, #184]	; (13a8 <at_conn_setup+0xcc>)
    12ee:	681b      	ldr	r3, [r3, #0]
    12f0:	3301      	adds	r3, #1
    12f2:	d042      	beq.n	137a <at_conn_setup+0x9e>
    12f4:	4b2c      	ldr	r3, [pc, #176]	; (13a8 <at_conn_setup+0xcc>)
    12f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    12f8:	3301      	adds	r3, #1
    12fa:	d00b      	beq.n	1314 <at_conn_setup+0x38>
    12fc:	4b2a      	ldr	r3, [pc, #168]	; (13a8 <at_conn_setup+0xcc>)
    12fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1300:	3301      	adds	r3, #1
    1302:	d006      	beq.n	1312 <at_conn_setup+0x36>
    if ((connid = at_newconn()) == -1) {
        AT_ERROR("fai to new at conn\n");
        HAL_MutexUnlock(g_atconnmutex);
    1304:	4b26      	ldr	r3, [pc, #152]	; (13a0 <at_conn_setup+0xc4>)
    1306:	6898      	ldr	r0, [r3, #8]
    1308:	4b28      	ldr	r3, [pc, #160]	; (13ac <at_conn_setup+0xd0>)
    130a:	4798      	blx	r3
    	return -1;
    130c:	2401      	movs	r4, #1
    130e:	4264      	negs	r4, r4
    1310:	e027      	b.n	1362 <at_conn_setup+0x86>
    for (i = 0; i < NUM_ATCONN; i++) {     
    1312:	3401      	adds	r4, #1
        	if (at_mbox_new(&atconnects[i].recvmbox,
    1314:	202c      	movs	r0, #44	; 0x2c
    1316:	4360      	muls	r0, r4
    1318:	3020      	adds	r0, #32
    131a:	4b23      	ldr	r3, [pc, #140]	; (13a8 <at_conn_setup+0xcc>)
    131c:	1818      	adds	r0, r3, r0
    131e:	2108      	movs	r1, #8
    1320:	4b23      	ldr	r3, [pc, #140]	; (13b0 <at_conn_setup+0xd4>)
    1322:	4798      	blx	r3
    1324:	2800      	cmp	r0, #0
    1326:	d1ed      	bne.n	1304 <at_conn_setup+0x28>
            atconnects[i].type            = NETCONN_INVALID;
    1328:	481f      	ldr	r0, [pc, #124]	; (13a8 <at_conn_setup+0xcc>)
    132a:	222c      	movs	r2, #44	; 0x2c
    132c:	4362      	muls	r2, r4
    132e:	1883      	adds	r3, r0, r2
    1330:	2100      	movs	r1, #0
    1332:	7119      	strb	r1, [r3, #4]
            atconnects[i].state           = NETCONN_NONE;
    1334:	7159      	strb	r1, [r3, #5]
            atconnects[i].lastdata        = NULL;
    1336:	6199      	str	r1, [r3, #24]
            atconnects[i].lastoffset      = 0;
    1338:	8399      	strh	r1, [r3, #28]
            atconnects[i].connid          = i;
    133a:	5014      	str	r4, [r2, r0]
            atconnects[i].send_timeout_ms = AT_DEFAULT_SEND_TIMEOUT_MS;
    133c:	22fa      	movs	r2, #250	; 0xfa
    133e:	0092      	lsls	r2, r2, #2
    1340:	625a      	str	r2, [r3, #36]	; 0x24
            atconnects[i].recv_timeout_ms = AT_DEFAULT_RECV_TIMEOUT_MS;
    1342:	629a      	str	r2, [r3, #40]	; 0x28
    if ((connid = at_newconn()) == -1) {
    1344:	1c63      	adds	r3, r4, #1
    1346:	d0dd      	beq.n	1304 <at_conn_setup+0x28>
    }

    if ((conn = get_conn(connid)) == NULL) {
    1348:	0020      	movs	r0, r4
    134a:	4b1a      	ldr	r3, [pc, #104]	; (13b4 <at_conn_setup+0xd8>)
    134c:	4798      	blx	r3
    134e:	2800      	cmp	r0, #0
    1350:	d009      	beq.n	1366 <at_conn_setup+0x8a>
    	AT_ERROR("fai to get at conn\n");
        HAL_MutexUnlock(g_atconnmutex);
    	return -1;
    }

    conn->type = type;
    1352:	2301      	movs	r3, #1
    1354:	7103      	strb	r3, [r0, #4]
    conn->state = NETCONN_NONE;
    1356:	2300      	movs	r3, #0
    1358:	7143      	strb	r3, [r0, #5]
    HAL_MutexUnlock(g_atconnmutex);
    135a:	4b11      	ldr	r3, [pc, #68]	; (13a0 <at_conn_setup+0xc4>)
    135c:	6898      	ldr	r0, [r3, #8]
    135e:	4b13      	ldr	r3, [pc, #76]	; (13ac <at_conn_setup+0xd0>)
    1360:	4798      	blx	r3

    return connid;
}
    1362:	0020      	movs	r0, r4
    1364:	bd10      	pop	{r4, pc}
        HAL_MutexUnlock(g_atconnmutex);
    1366:	4b0e      	ldr	r3, [pc, #56]	; (13a0 <at_conn_setup+0xc4>)
    1368:	6898      	ldr	r0, [r3, #8]
    136a:	4b10      	ldr	r3, [pc, #64]	; (13ac <at_conn_setup+0xd0>)
    136c:	4798      	blx	r3
    	return -1;
    136e:	2401      	movs	r4, #1
    1370:	4264      	negs	r4, r4
    1372:	e7f6      	b.n	1362 <at_conn_setup+0x86>
    	return -1;
    1374:	2401      	movs	r4, #1
    1376:	4264      	negs	r4, r4
    1378:	e7f3      	b.n	1362 <at_conn_setup+0x86>
        	if (at_mbox_new(&atconnects[i].recvmbox,
    137a:	2108      	movs	r1, #8
    137c:	480a      	ldr	r0, [pc, #40]	; (13a8 <at_conn_setup+0xcc>)
    137e:	3020      	adds	r0, #32
    1380:	4b0b      	ldr	r3, [pc, #44]	; (13b0 <at_conn_setup+0xd4>)
    1382:	4798      	blx	r3
    1384:	1e04      	subs	r4, r0, #0
    1386:	d1bd      	bne.n	1304 <at_conn_setup+0x28>
            atconnects[i].type            = NETCONN_INVALID;
    1388:	4b07      	ldr	r3, [pc, #28]	; (13a8 <at_conn_setup+0xcc>)
    138a:	2200      	movs	r2, #0
    138c:	711a      	strb	r2, [r3, #4]
            atconnects[i].state           = NETCONN_NONE;
    138e:	715a      	strb	r2, [r3, #5]
            atconnects[i].lastdata        = NULL;
    1390:	619a      	str	r2, [r3, #24]
            atconnects[i].lastoffset      = 0;
    1392:	839a      	strh	r2, [r3, #28]
            atconnects[i].connid          = i;
    1394:	601a      	str	r2, [r3, #0]
            atconnects[i].send_timeout_ms = AT_DEFAULT_SEND_TIMEOUT_MS;
    1396:	22fa      	movs	r2, #250	; 0xfa
    1398:	0092      	lsls	r2, r2, #2
    139a:	625a      	str	r2, [r3, #36]	; 0x24
            atconnects[i].recv_timeout_ms = AT_DEFAULT_RECV_TIMEOUT_MS;
    139c:	629a      	str	r2, [r3, #40]	; 0x28
    139e:	e7d3      	b.n	1348 <at_conn_setup+0x6c>
    13a0:	20000374 	.word	0x20000374
    13a4:	00007d2f 	.word	0x00007d2f
    13a8:	200002f4 	.word	0x200002f4
    13ac:	00007d31 	.word	0x00007d31
    13b0:	00000f45 	.word	0x00000f45
    13b4:	0000110d 	.word	0x0000110d

000013b8 <at_conn_start>:

int at_conn_start(int connid, char* remoteipaddr, uint16_t remoteport)
{
    13b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13ba:	b087      	sub	sp, #28
    13bc:	0005      	movs	r5, r0
    13be:	000e      	movs	r6, r1
    13c0:	0017      	movs	r7, r2
	char *ipv4anyadrr = AT_IP4_ANY_ADDR;
	at_conn_t statconn = {0};
    13c2:	2218      	movs	r2, #24
    13c4:	2100      	movs	r1, #0
    13c6:	4668      	mov	r0, sp
    13c8:	4b27      	ldr	r3, [pc, #156]	; (1468 <at_conn_start+0xb0>)
    13ca:	4798      	blx	r3
    struct at_conn *conn = NULL;
 
    HAL_MutexLock(g_atconnmutex);
    13cc:	4b27      	ldr	r3, [pc, #156]	; (146c <at_conn_start+0xb4>)
    13ce:	6898      	ldr	r0, [r3, #8]
    13d0:	4b27      	ldr	r3, [pc, #156]	; (1470 <at_conn_start+0xb8>)
    13d2:	4798      	blx	r3
    conn = get_conn(connid);
    13d4:	0028      	movs	r0, r5
    13d6:	4b27      	ldr	r3, [pc, #156]	; (1474 <at_conn_start+0xbc>)
    13d8:	4798      	blx	r3
    13da:	1e04      	subs	r4, r0, #0
    if (NULL == conn) {
    13dc:	d024      	beq.n	1428 <at_conn_start+0x70>
        AT_ERROR("at_startconn: invalid conn\n");
        HAL_MutexUnlock(g_atconnmutex);
        return -1;
    }

    if (conn->state != NETCONN_NONE) {
    13de:	7943      	ldrb	r3, [r0, #5]
    13e0:	2b00      	cmp	r3, #0
    13e2:	d128      	bne.n	1436 <at_conn_start+0x7e>
        AT_ERROR("at_startconn: conn %d state is %d \n", connid, conn->state);
        HAL_MutexUnlock(g_atconnmutex);
        return -1;
    }

    statconn.fd = connid;
    13e4:	9500      	str	r5, [sp, #0]
    statconn.r_port = remoteport;
    13e6:	9703      	str	r7, [sp, #12]
    statconn.l_port = -1;
    13e8:	2301      	movs	r3, #1
    13ea:	425b      	negs	r3, r3
    13ec:	9304      	str	r3, [sp, #16]
    statconn.addr = (char *)remoteipaddr;
    13ee:	9602      	str	r6, [sp, #8]
    if (NULL == statconn.addr) {
    13f0:	2e00      	cmp	r6, #0
    13f2:	d027      	beq.n	1444 <at_conn_start+0x8c>
        statconn.addr = ipv4anyadrr;
    }

    switch (conn->type) {
    13f4:	7923      	ldrb	r3, [r4, #4]
    13f6:	2b01      	cmp	r3, #1
    13f8:	d12e      	bne.n	1458 <at_conn_start+0xa0>
        case NETCONN_TCP:
            statconn.type = TCP_CLIENT;
    13fa:	466a      	mov	r2, sp
    13fc:	7113      	strb	r3, [r2, #4]
            if (HAL_AT_CONN_Start(&statconn) != 0) {
    13fe:	4668      	mov	r0, sp
    1400:	4b1d      	ldr	r3, [pc, #116]	; (1478 <at_conn_start+0xc0>)
    1402:	4798      	blx	r3
    1404:	1e05      	subs	r5, r0, #0
    1406:	d120      	bne.n	144a <at_conn_start+0x92>
                AT_ERROR("fail to setup tcp connect, remote is %s port is %d.\n", statconn.addr, remoteport);
                HAL_MutexUnlock(g_atconnmutex);
                return -1;
            }
            memcpy(conn->remote_ip, statconn.addr, IPV4_STR_MAX_LEN);
    1408:	0020      	movs	r0, r4
    140a:	3008      	adds	r0, #8
    140c:	2210      	movs	r2, #16
    140e:	9902      	ldr	r1, [sp, #8]
    1410:	4b1a      	ldr	r3, [pc, #104]	; (147c <at_conn_start+0xc4>)
    1412:	4798      	blx	r3
            conn->remote_port = remoteport;
    1414:	80e7      	strh	r7, [r4, #6]
            HAL_MutexUnlock(g_atconnmutex);
            return -1;
    }

    /* Update at conn state */
    conn->state = NETCONN_CONNECT;
    1416:	2303      	movs	r3, #3
    1418:	7163      	strb	r3, [r4, #5]
    HAL_MutexUnlock(g_atconnmutex);
    141a:	4b14      	ldr	r3, [pc, #80]	; (146c <at_conn_start+0xb4>)
    141c:	6898      	ldr	r0, [r3, #8]
    141e:	4b18      	ldr	r3, [pc, #96]	; (1480 <at_conn_start+0xc8>)
    1420:	4798      	blx	r3

    return 0;
}
    1422:	0028      	movs	r0, r5
    1424:	b007      	add	sp, #28
    1426:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_MutexUnlock(g_atconnmutex);
    1428:	4b10      	ldr	r3, [pc, #64]	; (146c <at_conn_start+0xb4>)
    142a:	6898      	ldr	r0, [r3, #8]
    142c:	4b14      	ldr	r3, [pc, #80]	; (1480 <at_conn_start+0xc8>)
    142e:	4798      	blx	r3
        return -1;
    1430:	2501      	movs	r5, #1
    1432:	426d      	negs	r5, r5
    1434:	e7f5      	b.n	1422 <at_conn_start+0x6a>
        HAL_MutexUnlock(g_atconnmutex);
    1436:	4b0d      	ldr	r3, [pc, #52]	; (146c <at_conn_start+0xb4>)
    1438:	6898      	ldr	r0, [r3, #8]
    143a:	4b11      	ldr	r3, [pc, #68]	; (1480 <at_conn_start+0xc8>)
    143c:	4798      	blx	r3
        return -1;
    143e:	2501      	movs	r5, #1
    1440:	426d      	negs	r5, r5
    1442:	e7ee      	b.n	1422 <at_conn_start+0x6a>
        statconn.addr = ipv4anyadrr;
    1444:	4b0f      	ldr	r3, [pc, #60]	; (1484 <at_conn_start+0xcc>)
    1446:	9302      	str	r3, [sp, #8]
    1448:	e7d4      	b.n	13f4 <at_conn_start+0x3c>
                HAL_MutexUnlock(g_atconnmutex);
    144a:	4b08      	ldr	r3, [pc, #32]	; (146c <at_conn_start+0xb4>)
    144c:	6898      	ldr	r0, [r3, #8]
    144e:	4b0c      	ldr	r3, [pc, #48]	; (1480 <at_conn_start+0xc8>)
    1450:	4798      	blx	r3
                return -1;
    1452:	2501      	movs	r5, #1
    1454:	426d      	negs	r5, r5
    1456:	e7e4      	b.n	1422 <at_conn_start+0x6a>
            HAL_MutexUnlock(g_atconnmutex);
    1458:	4b04      	ldr	r3, [pc, #16]	; (146c <at_conn_start+0xb4>)
    145a:	6898      	ldr	r0, [r3, #8]
    145c:	4b08      	ldr	r3, [pc, #32]	; (1480 <at_conn_start+0xc8>)
    145e:	4798      	blx	r3
            return -1;
    1460:	2501      	movs	r5, #1
    1462:	426d      	negs	r5, r5
    1464:	e7dd      	b.n	1422 <at_conn_start+0x6a>
    1466:	46c0      	nop			; (mov r8, r8)
    1468:	000085c9 	.word	0x000085c9
    146c:	20000374 	.word	0x20000374
    1470:	00007d2f 	.word	0x00007d2f
    1474:	0000110d 	.word	0x0000110d
    1478:	00002ea5 	.word	0x00002ea5
    147c:	000085b7 	.word	0x000085b7
    1480:	00007d31 	.word	0x00007d31
    1484:	00009810 	.word	0x00009810

00001488 <at_conn_close>:

int at_conn_close(int c)
{
    1488:	b570      	push	{r4, r5, r6, lr}
    148a:	b082      	sub	sp, #8
    148c:	0004      	movs	r4, r0
    struct at_conn *conn = NULL;
    int err;

    AT_DEBUG("at_close(%d)\r\n", c);

    conn = get_conn(c);
    148e:	4b29      	ldr	r3, [pc, #164]	; (1534 <at_conn_close+0xac>)
    1490:	4798      	blx	r3
    1492:	1e06      	subs	r6, r0, #0
    if (NULL == conn) {
    1494:	d04a      	beq.n	152c <at_conn_close+0xa4>
        return -1;
    }

    if (conn->state == NETCONN_CONNECT) {
    1496:	7943      	ldrb	r3, [r0, #5]
    1498:	2b03      	cmp	r3, #3
    149a:	d02f      	beq.n	14fc <at_conn_close+0x74>
        if (HAL_AT_CONN_Close(c, -1) != 0) {
            AT_DEBUG("HAL_AT_close failed.");
        }
    }

    HAL_MutexLock(g_atconnmutex);
    149c:	4b26      	ldr	r3, [pc, #152]	; (1538 <at_conn_close+0xb0>)
    149e:	6898      	ldr	r0, [r3, #8]
    14a0:	4b26      	ldr	r3, [pc, #152]	; (153c <at_conn_close+0xb4>)
    14a2:	4798      	blx	r3
    if (NULL != conn->lastdata) {
    14a4:	69b4      	ldr	r4, [r6, #24]
    14a6:	2c00      	cmp	r4, #0
    14a8:	d009      	beq.n	14be <at_conn_close+0x36>
        if (buf->payload) {
    14aa:	6820      	ldr	r0, [r4, #0]
    14ac:	2800      	cmp	r0, #0
    14ae:	d003      	beq.n	14b8 <at_conn_close+0x30>
            HAL_Free(buf->payload);
    14b0:	4b23      	ldr	r3, [pc, #140]	; (1540 <at_conn_close+0xb8>)
    14b2:	4798      	blx	r3
            buf->payload = NULL;
    14b4:	2300      	movs	r3, #0
    14b6:	6023      	str	r3, [r4, #0]
    	HAL_Free(conn->lastdata);
    14b8:	69b0      	ldr	r0, [r6, #24]
    14ba:	4b21      	ldr	r3, [pc, #132]	; (1540 <at_conn_close+0xb8>)
    14bc:	4798      	blx	r3
    conn->lastdata   = NULL;
    14be:	2300      	movs	r3, #0
    14c0:	61b3      	str	r3, [r6, #24]
    conn->lastoffset = 0;
    14c2:	83b3      	strh	r3, [r6, #28]
    if (at_mbox_valid(&conn->recvmbox)) {
    14c4:	0034      	movs	r4, r6
    14c6:	3420      	adds	r4, #32
    14c8:	0020      	movs	r0, r4
    14ca:	4b1e      	ldr	r3, [pc, #120]	; (1544 <at_conn_close+0xbc>)
    14cc:	4798      	blx	r3
    14ce:	2800      	cmp	r0, #0
    14d0:	d020      	beq.n	1514 <at_conn_close+0x8c>
        while (at_mbox_tryfetch(&conn->recvmbox, (void **)(&mem)) != AT_MBOX_EMPTY) {
    14d2:	4d1d      	ldr	r5, [pc, #116]	; (1548 <at_conn_close+0xc0>)
    14d4:	a901      	add	r1, sp, #4
    14d6:	0020      	movs	r0, r4
    14d8:	47a8      	blx	r5
    14da:	1c43      	adds	r3, r0, #1
    14dc:	d014      	beq.n	1508 <at_conn_close+0x80>
            if (mem != NULL) {
    14de:	9b01      	ldr	r3, [sp, #4]
    14e0:	2b00      	cmp	r3, #0
    14e2:	d0f7      	beq.n	14d4 <at_conn_close+0x4c>
                if (mem->payload) {
    14e4:	6818      	ldr	r0, [r3, #0]
    14e6:	2800      	cmp	r0, #0
    14e8:	d004      	beq.n	14f4 <at_conn_close+0x6c>
                    HAL_Free(mem->payload);
    14ea:	4b15      	ldr	r3, [pc, #84]	; (1540 <at_conn_close+0xb8>)
    14ec:	4798      	blx	r3
                    mem->payload = NULL;
    14ee:	2200      	movs	r2, #0
    14f0:	9b01      	ldr	r3, [sp, #4]
    14f2:	601a      	str	r2, [r3, #0]
                HAL_Free(mem);
    14f4:	9801      	ldr	r0, [sp, #4]
    14f6:	4b12      	ldr	r3, [pc, #72]	; (1540 <at_conn_close+0xb8>)
    14f8:	4798      	blx	r3
    14fa:	e7eb      	b.n	14d4 <at_conn_close+0x4c>
        if (HAL_AT_CONN_Close(c, -1) != 0) {
    14fc:	2101      	movs	r1, #1
    14fe:	4249      	negs	r1, r1
    1500:	0020      	movs	r0, r4
    1502:	4b12      	ldr	r3, [pc, #72]	; (154c <at_conn_close+0xc4>)
    1504:	4798      	blx	r3
    1506:	e7c9      	b.n	149c <at_conn_close+0x14>
        at_mbox_free(&conn->recvmbox);
    1508:	0020      	movs	r0, r4
    150a:	4b11      	ldr	r3, [pc, #68]	; (1550 <at_conn_close+0xc8>)
    150c:	4798      	blx	r3
        at_mbox_set_invalid(&conn->recvmbox);
    150e:	0020      	movs	r0, r4
    1510:	4b10      	ldr	r3, [pc, #64]	; (1554 <at_conn_close+0xcc>)
    1512:	4798      	blx	r3
    conn->type       = NETCONN_INVALID;
    1514:	2300      	movs	r3, #0
    1516:	7133      	strb	r3, [r6, #4]
    conn->state      = NETCONN_NONE;
    1518:	7173      	strb	r3, [r6, #5]
    conn->connid     = UNUSED_ATCONN;
    151a:	3b01      	subs	r3, #1
    151c:	6033      	str	r3, [r6, #0]
    err = at_freeconn(conn);
    HAL_MutexUnlock(g_atconnmutex);
    151e:	4b06      	ldr	r3, [pc, #24]	; (1538 <at_conn_close+0xb0>)
    1520:	6898      	ldr	r0, [r3, #8]
    1522:	4b0d      	ldr	r3, [pc, #52]	; (1558 <at_conn_close+0xd0>)
    1524:	4798      	blx	r3
    if (err != 0) {
        AT_ERROR("at_freeconn failed in %s.", __func__);
        return -1;
    }

    return 0;
    1526:	2000      	movs	r0, #0
}
    1528:	b002      	add	sp, #8
    152a:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
    152c:	2001      	movs	r0, #1
    152e:	4240      	negs	r0, r0
    1530:	e7fa      	b.n	1528 <at_conn_close+0xa0>
    1532:	46c0      	nop			; (mov r8, r8)
    1534:	0000110d 	.word	0x0000110d
    1538:	20000374 	.word	0x20000374
    153c:	00007d2f 	.word	0x00007d2f
    1540:	00007c5d 	.word	0x00007c5d
    1544:	00001035 	.word	0x00001035
    1548:	000010bd 	.word	0x000010bd
    154c:	0000312d 	.word	0x0000312d
    1550:	00000f99 	.word	0x00000f99
    1554:	00001101 	.word	0x00001101
    1558:	00007d31 	.word	0x00007d31

0000155c <at_conn_recvbufempty>:

int at_conn_recvbufempty(int c)
{
    155c:	b510      	push	{r4, lr}
    struct at_conn *conn = NULL;

    conn = get_conn(c);
    155e:	4b0d      	ldr	r3, [pc, #52]	; (1594 <at_conn_recvbufempty+0x38>)
    1560:	4798      	blx	r3
    if (NULL == conn) {
    1562:	2800      	cmp	r0, #0
    1564:	d010      	beq.n	1588 <at_conn_recvbufempty+0x2c>
        return -1;
    }

    /* remain data */
    if (conn->lastdata)
        return 0;
    1566:	2300      	movs	r3, #0
    if (conn->lastdata)
    1568:	6982      	ldr	r2, [r0, #24]
    156a:	2a00      	cmp	r2, #0
    156c:	d001      	beq.n	1572 <at_conn_recvbufempty+0x16>
        AT_ERROR("conn %d invalid recvmbox\n", c);
        return -1;
    }

    return at_mbox_empty(&conn->recvmbox);
}
    156e:	0018      	movs	r0, r3
    1570:	bd10      	pop	{r4, pc}
    if (!at_mbox_valid(&conn->recvmbox)) {
    1572:	3020      	adds	r0, #32
    1574:	0004      	movs	r4, r0
    1576:	4b08      	ldr	r3, [pc, #32]	; (1598 <at_conn_recvbufempty+0x3c>)
    1578:	4798      	blx	r3
    157a:	2800      	cmp	r0, #0
    157c:	d007      	beq.n	158e <at_conn_recvbufempty+0x32>
    return at_mbox_empty(&conn->recvmbox);
    157e:	0020      	movs	r0, r4
    1580:	4b06      	ldr	r3, [pc, #24]	; (159c <at_conn_recvbufempty+0x40>)
    1582:	4798      	blx	r3
    1584:	0003      	movs	r3, r0
    1586:	e7f2      	b.n	156e <at_conn_recvbufempty+0x12>
        return -1;
    1588:	2301      	movs	r3, #1
    158a:	425b      	negs	r3, r3
    158c:	e7ef      	b.n	156e <at_conn_recvbufempty+0x12>
        return -1;
    158e:	2301      	movs	r3, #1
    1590:	425b      	negs	r3, r3
    1592:	e7ec      	b.n	156e <at_conn_recvbufempty+0x12>
    1594:	0000110d 	.word	0x0000110d
    1598:	00001035 	.word	0x00001035
    159c:	000010e5 	.word	0x000010e5

000015a0 <at_conn_send>:

int at_conn_send(int c, const void *data, uint32_t size)
{
    15a0:	b570      	push	{r4, r5, r6, lr}
    15a2:	b082      	sub	sp, #8
    15a4:	0006      	movs	r6, r0
    15a6:	000d      	movs	r5, r1
    15a8:	0014      	movs	r4, r2
    struct at_conn *conn = NULL;

    if (NULL == data || size == 0 || size > AT_MAX_PAYLOAD_SIZE) {
    15aa:	2900      	cmp	r1, #0
    15ac:	d020      	beq.n	15f0 <at_conn_send+0x50>
    15ae:	1e53      	subs	r3, r2, #1
    15b0:	4a15      	ldr	r2, [pc, #84]	; (1608 <at_conn_send+0x68>)
    15b2:	4293      	cmp	r3, r2
    15b4:	d81f      	bhi.n	15f6 <at_conn_send+0x56>
        AT_ERROR("at_conn_send fail to send, size %d\n", size);
        return -1;
    }

    conn = get_conn(c);
    15b6:	4b15      	ldr	r3, [pc, #84]	; (160c <at_conn_send+0x6c>)
    15b8:	4798      	blx	r3
    if (NULL == conn) {
    15ba:	2800      	cmp	r0, #0
    15bc:	d01e      	beq.n	15fc <at_conn_send+0x5c>
        AT_ERROR("at_conn_send fail to get conn %d\n", c);
        return -1;
    }

    if (conn->type == NETCONN_TCP) {
    15be:	7903      	ldrb	r3, [r0, #4]
    15c0:	2b01      	cmp	r3, #1
    15c2:	d00f      	beq.n	15e4 <at_conn_send+0x44>
            AT_ERROR("at_conn_send connect %d state %d\n", c, conn->state);
            return -1;
        }
    }

    if (HAL_AT_CONN_Send(c, (uint8_t *)data, size, NULL, -1, conn->send_timeout_ms)) {
    15c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    15c6:	9301      	str	r3, [sp, #4]
    15c8:	2301      	movs	r3, #1
    15ca:	425b      	negs	r3, r3
    15cc:	9300      	str	r3, [sp, #0]
    15ce:	2300      	movs	r3, #0
    15d0:	0022      	movs	r2, r4
    15d2:	0029      	movs	r1, r5
    15d4:	0030      	movs	r0, r6
    15d6:	4d0e      	ldr	r5, [pc, #56]	; (1610 <at_conn_send+0x70>)
    15d8:	47a8      	blx	r5
    15da:	2800      	cmp	r0, #0
    15dc:	d111      	bne.n	1602 <at_conn_send+0x62>
        AT_ERROR("c %d fail to send do nothing for now\n", c);
        return -1;
    }

    return size;
    15de:	0020      	movs	r0, r4
}
    15e0:	b002      	add	sp, #8
    15e2:	bd70      	pop	{r4, r5, r6, pc}
        if (conn->state == NETCONN_NONE) {
    15e4:	7943      	ldrb	r3, [r0, #5]
    15e6:	2b00      	cmp	r3, #0
    15e8:	d1ec      	bne.n	15c4 <at_conn_send+0x24>
            return -1;
    15ea:	2001      	movs	r0, #1
    15ec:	4240      	negs	r0, r0
    15ee:	e7f7      	b.n	15e0 <at_conn_send+0x40>
        return -1;
    15f0:	2001      	movs	r0, #1
    15f2:	4240      	negs	r0, r0
    15f4:	e7f4      	b.n	15e0 <at_conn_send+0x40>
    15f6:	2001      	movs	r0, #1
    15f8:	4240      	negs	r0, r0
    15fa:	e7f1      	b.n	15e0 <at_conn_send+0x40>
        return -1;
    15fc:	2001      	movs	r0, #1
    15fe:	4240      	negs	r0, r0
    1600:	e7ee      	b.n	15e0 <at_conn_send+0x40>
        return -1;
    1602:	2001      	movs	r0, #1
    1604:	4240      	negs	r0, r0
    1606:	e7eb      	b.n	15e0 <at_conn_send+0x40>
    1608:	000005e7 	.word	0x000005e7
    160c:	0000110d 	.word	0x0000110d
    1610:	00003241 	.word	0x00003241

00001614 <at_conn_recv>:

int at_conn_recv(int c, void *mem, uint32_t len)
{
    1614:	b5f0      	push	{r4, r5, r6, r7, lr}
    1616:	46de      	mov	lr, fp
    1618:	4657      	mov	r7, sl
    161a:	464e      	mov	r6, r9
    161c:	4645      	mov	r5, r8
    161e:	b5e0      	push	{r5, r6, r7, lr}
    1620:	b083      	sub	sp, #12
    1622:	468a      	mov	sl, r1
    1624:	0017      	movs	r7, r2
    uint16_t               buflen  = 0;
    uint16_t               copylen = 0;
    int                    err     = 0;
    uint8_t                done    = 0;

    if (NULL == mem || 0 == len) {
    1626:	2900      	cmp	r1, #0
    1628:	d05a      	beq.n	16e0 <at_conn_recv+0xcc>
    162a:	2a00      	cmp	r2, #0
    162c:	d05c      	beq.n	16e8 <at_conn_recv+0xd4>
        return -1;
    }

    conn = get_conn(c);
    162e:	4b38      	ldr	r3, [pc, #224]	; (1710 <at_conn_recv+0xfc>)
    1630:	4798      	blx	r3
    1632:	1e06      	subs	r6, r0, #0
    if (NULL == conn) {
    1634:	d05c      	beq.n	16f0 <at_conn_recv+0xdc>
    1636:	2300      	movs	r3, #0
    1638:	4699      	mov	r9, r3
    163a:	e02a      	b.n	1692 <at_conn_recv+0x7e>
    void *buf = NULL;
    163c:	9501      	str	r5, [sp, #4]
    if (!at_mbox_valid(&conn->recvmbox)) {
    163e:	0034      	movs	r4, r6
    1640:	3420      	adds	r4, #32
    1642:	0020      	movs	r0, r4
    1644:	4b33      	ldr	r3, [pc, #204]	; (1714 <at_conn_recv+0x100>)
    1646:	4798      	blx	r3
    1648:	2800      	cmp	r0, #0
    164a:	d00e      	beq.n	166a <at_conn_recv+0x56>
    ret = at_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout_ms);
    164c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    164e:	a901      	add	r1, sp, #4
    1650:	0020      	movs	r0, r4
    1652:	4b31      	ldr	r3, [pc, #196]	; (1718 <at_conn_recv+0x104>)
    1654:	4798      	blx	r3
    if (ret == AT_MBOX_TIMEOUT) {
    1656:	1c43      	adds	r3, r0, #1
    1658:	d007      	beq.n	166a <at_conn_recv+0x56>
    *new_buf = buf;
    165a:	9d01      	ldr	r5, [sp, #4]
    do {
        if (conn->lastdata) {
            buf = conn->lastdata;
        } else {
            err = at_conn_fetch(conn, &buf);
            if (err != 0 || buf == NULL || buf->payload == NULL) {
    165c:	2d00      	cmp	r5, #0
    165e:	d004      	beq.n	166a <at_conn_recv+0x56>
    1660:	682b      	ldr	r3, [r5, #0]
    1662:	2b00      	cmp	r3, #0
    1664:	d001      	beq.n	166a <at_conn_recv+0x56>
                } else {
                    return -1;
                }
            }

            conn->lastdata = buf;
    1666:	61b5      	str	r5, [r6, #24]
    1668:	e016      	b.n	1698 <at_conn_recv+0x84>
                if (off > 0) {
    166a:	464b      	mov	r3, r9
    166c:	2b00      	cmp	r3, #0
    166e:	dc46      	bgt.n	16fe <at_conn_recv+0xea>
                    return -1;
    1670:	2301      	movs	r3, #1
    1672:	425b      	negs	r3, r3
    1674:	4699      	mov	r9, r3
    1676:	e042      	b.n	16fe <at_conn_recv+0xea>
            len -= copylen;
            if (len <= 0) {
                done = 1;
            }
        } else {
            done = 1;
    1678:	2301      	movs	r3, #1
    167a:	4698      	mov	r8, r3

        if ((NETCONN_TCP == conn->type) && (buflen > copylen)) {
            conn->lastdata = buf;
            conn->lastoffset += copylen;
        } else {
            conn->lastdata = NULL;
    167c:	2300      	movs	r3, #0
    167e:	61b3      	str	r3, [r6, #24]
            conn->lastoffset = 0;
    1680:	83b3      	strh	r3, [r6, #28]
            HAL_Free(buf->payload);
    1682:	6828      	ldr	r0, [r5, #0]
    1684:	4c25      	ldr	r4, [pc, #148]	; (171c <at_conn_recv+0x108>)
    1686:	47a0      	blx	r4
            HAL_Free(buf);
    1688:	0028      	movs	r0, r5
    168a:	47a0      	blx	r4
            buf = NULL;
        }
    } while (!done);
    168c:	4643      	mov	r3, r8
    168e:	2b00      	cmp	r3, #0
    1690:	d135      	bne.n	16fe <at_conn_recv+0xea>
            buf = conn->lastdata;
    1692:	69b5      	ldr	r5, [r6, #24]
        if (conn->lastdata) {
    1694:	2d00      	cmp	r5, #0
    1696:	d0d1      	beq.n	163c <at_conn_recv+0x28>
        buflen = buf->len;
    1698:	88ac      	ldrh	r4, [r5, #4]
        buflen -= conn->lastoffset;
    169a:	8bb1      	ldrh	r1, [r6, #28]
    169c:	1a64      	subs	r4, r4, r1
    169e:	b2a4      	uxth	r4, r4
            copylen = buflen;
    16a0:	46a3      	mov	fp, r4
        if (len > buflen) {
    16a2:	42a7      	cmp	r7, r4
    16a4:	d801      	bhi.n	16aa <at_conn_recv+0x96>
            copylen = len;
    16a6:	b2bb      	uxth	r3, r7
    16a8:	469b      	mov	fp, r3
        memcpy(&((uint8_t *)mem)[off], &((uint8_t *)buf->payload)[conn->lastoffset], copylen);
    16aa:	4650      	mov	r0, sl
    16ac:	4448      	add	r0, r9
    16ae:	682b      	ldr	r3, [r5, #0]
    16b0:	469c      	mov	ip, r3
    16b2:	4461      	add	r1, ip
    16b4:	465a      	mov	r2, fp
    16b6:	4b1a      	ldr	r3, [pc, #104]	; (1720 <at_conn_recv+0x10c>)
    16b8:	4798      	blx	r3
        off += copylen;
    16ba:	44d9      	add	r9, fp
        if (NETCONN_TCP == conn->type) {
    16bc:	7933      	ldrb	r3, [r6, #4]
    16be:	2b01      	cmp	r3, #1
    16c0:	d1da      	bne.n	1678 <at_conn_recv+0x64>
            if (len < copylen) {
    16c2:	455f      	cmp	r7, fp
    16c4:	d318      	bcc.n	16f8 <at_conn_recv+0xe4>
            len -= copylen;
    16c6:	465b      	mov	r3, fp
    16c8:	1aff      	subs	r7, r7, r3
            if (len <= 0) {
    16ca:	427b      	negs	r3, r7
    16cc:	417b      	adcs	r3, r7
                done = 1;
    16ce:	b2db      	uxtb	r3, r3
    16d0:	4698      	mov	r8, r3
        if ((NETCONN_TCP == conn->type) && (buflen > copylen)) {
    16d2:	45a3      	cmp	fp, r4
    16d4:	d2d2      	bcs.n	167c <at_conn_recv+0x68>
            conn->lastdata = buf;
    16d6:	61b5      	str	r5, [r6, #24]
            conn->lastoffset += copylen;
    16d8:	8bb3      	ldrh	r3, [r6, #28]
    16da:	445b      	add	r3, fp
    16dc:	83b3      	strh	r3, [r6, #28]
    16de:	e7d5      	b.n	168c <at_conn_recv+0x78>
        return -1;
    16e0:	2301      	movs	r3, #1
    16e2:	425b      	negs	r3, r3
    16e4:	4699      	mov	r9, r3
    16e6:	e00a      	b.n	16fe <at_conn_recv+0xea>
    16e8:	2301      	movs	r3, #1
    16ea:	425b      	negs	r3, r3
    16ec:	4699      	mov	r9, r3
    16ee:	e006      	b.n	16fe <at_conn_recv+0xea>
        return -1;
    16f0:	2301      	movs	r3, #1
    16f2:	425b      	negs	r3, r3
    16f4:	4699      	mov	r9, r3
    16f6:	e002      	b.n	16fe <at_conn_recv+0xea>
                return -1;
    16f8:	2301      	movs	r3, #1
    16fa:	425b      	negs	r3, r3
    16fc:	4699      	mov	r9, r3

    return off;
}
    16fe:	4648      	mov	r0, r9
    1700:	b003      	add	sp, #12
    1702:	bc3c      	pop	{r2, r3, r4, r5}
    1704:	4690      	mov	r8, r2
    1706:	4699      	mov	r9, r3
    1708:	46a2      	mov	sl, r4
    170a:	46ab      	mov	fp, r5
    170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    170e:	46c0      	nop			; (mov r8, r8)
    1710:	0000110d 	.word	0x0000110d
    1714:	00001035 	.word	0x00001035
    1718:	00001049 	.word	0x00001049
    171c:	00007c5d 	.word	0x00007c5d
    1720:	000085b7 	.word	0x000085b7

00001724 <at_parser_init>:
    }
}
#endif

int at_parser_init(void)
{
    1724:	b510      	push	{r4, lr}
    void *task;
    int stack_used;
    hal_os_thread_param_t task_parms = {0};
#endif

    if (inited == 1) {
    1726:	4b3d      	ldr	r3, [pc, #244]	; (181c <at_parser_init+0xf8>)
    1728:	781b      	ldrb	r3, [r3, #0]
    172a:	2b01      	cmp	r3, #1
    172c:	d06a      	beq.n	1804 <at_parser_init+0xe0>
        atpsr_info("have already inited ,it will init again\r\n");
        return -1;
    }

    memset(&at, 0, sizeof(at_parser_t));
    172e:	22c4      	movs	r2, #196	; 0xc4
    1730:	2100      	movs	r1, #0
    1732:	483a      	ldr	r0, [pc, #232]	; (181c <at_parser_init+0xf8>)
    1734:	3004      	adds	r0, #4
    1736:	4b3a      	ldr	r3, [pc, #232]	; (1820 <at_parser_init+0xfc>)
    1738:	4798      	blx	r3
    u->port                = AT_UART_PORT;
    173a:	483a      	ldr	r0, [pc, #232]	; (1824 <at_parser_init+0x100>)
    173c:	2201      	movs	r2, #1
    173e:	2348      	movs	r3, #72	; 0x48
    1740:	54c2      	strb	r2, [r0, r3]
    u->config.baud_rate    = AT_UART_BAUDRATE;
    1742:	23e1      	movs	r3, #225	; 0xe1
    1744:	025b      	lsls	r3, r3, #9
    1746:	64c3      	str	r3, [r0, #76]	; 0x4c
    u->config.data_width   = AT_UART_DATA_WIDTH;
    1748:	0003      	movs	r3, r0
    174a:	3348      	adds	r3, #72	; 0x48
    174c:	3202      	adds	r2, #2
    174e:	721a      	strb	r2, [r3, #8]
    u->config.parity       = AT_UART_PARITY;
    1750:	2200      	movs	r2, #0
    1752:	725a      	strb	r2, [r3, #9]
    u->config.stop_bits    = AT_UART_STOP_BITS;
    1754:	729a      	strb	r2, [r3, #10]
    u->config.flow_control = AT_UART_FLOW_CONTROL;
    1756:	72da      	strb	r2, [r3, #11]
    u->config.mode         = AT_UART_MODE;
    1758:	3202      	adds	r2, #2
    175a:	731a      	strb	r2, [r3, #12]
    if (HAL_AT_Uart_Init(&at_uart) != 0) {
    175c:	0018      	movs	r0, r3
    175e:	4b32      	ldr	r3, [pc, #200]	; (1828 <at_parser_init+0x104>)
    1760:	4798      	blx	r3
    1762:	2800      	cmp	r0, #0
    1764:	d151      	bne.n	180a <at_parser_init+0xe6>
    at._pstuart = &at_uart;
    1766:	4c2d      	ldr	r4, [pc, #180]	; (181c <at_parser_init+0xf8>)
    1768:	4b2e      	ldr	r3, [pc, #184]	; (1824 <at_parser_init+0x100>)
    176a:	3348      	adds	r3, #72	; 0x48
    176c:	6063      	str	r3, [r4, #4]
    if (at_init_uart() != 0) {
        atpsr_err("at uart init fail \r\n");
        return -1;
    }

    memset(at._oobs, 0, sizeof(oob_t) * OOB_MAX);
    176e:	0020      	movs	r0, r4
    1770:	302c      	adds	r0, #44	; 0x2c
    1772:	228c      	movs	r2, #140	; 0x8c
    1774:	2100      	movs	r1, #0
    1776:	4b2a      	ldr	r3, [pc, #168]	; (1820 <at_parser_init+0xfc>)
    1778:	4798      	blx	r3
    at._timeout = timeout;
    177a:	4b2c      	ldr	r3, [pc, #176]	; (182c <at_parser_init+0x108>)
    177c:	60a3      	str	r3, [r4, #8]
    at._default_recv_prefix          = (char *)recv_prefix;
    177e:	4b2c      	ldr	r3, [pc, #176]	; (1830 <at_parser_init+0x10c>)
    1780:	60e3      	str	r3, [r4, #12]
    at._default_recv_success_postfix = (char *)recv_success_postfix;
    1782:	4b2c      	ldr	r3, [pc, #176]	; (1834 <at_parser_init+0x110>)
    1784:	6123      	str	r3, [r4, #16]
    at._default_recv_fail_postfix    = (char *)recv_fail_postfix;
    1786:	4b2c      	ldr	r3, [pc, #176]	; (1838 <at_parser_init+0x114>)
    1788:	6163      	str	r3, [r4, #20]
    at._recv_prefix_len              = strlen(recv_prefix);
    178a:	2302      	movs	r3, #2
    178c:	61e3      	str	r3, [r4, #28]
    at._recv_success_postfix_len     = strlen(recv_success_postfix);
    178e:	3302      	adds	r3, #2
    1790:	6223      	str	r3, [r4, #32]
    at._recv_fail_postfix_len        = strlen(recv_fail_postfix);
    1792:	3303      	adds	r3, #3
    1794:	6263      	str	r3, [r4, #36]	; 0x24
    at._send_delimiter  = (char *)delimiter;
    1796:	4b29      	ldr	r3, [pc, #164]	; (183c <at_parser_init+0x118>)
    1798:	61a3      	str	r3, [r4, #24]
    at._send_delim_size = strlen(delimiter);
    179a:	2301      	movs	r3, #1
    179c:	62a3      	str	r3, [r4, #40]	; 0x28
    at.at_uart_recv_mutex = HAL_MutexCreate();
    179e:	4b28      	ldr	r3, [pc, #160]	; (1840 <at_parser_init+0x11c>)
    17a0:	4798      	blx	r3
    17a2:	23bc      	movs	r3, #188	; 0xbc
    17a4:	50e0      	str	r0, [r4, r3]

    at_set_timeout(timeout);
    at_set_recv_delimiter(recv_prefix, recv_success_postfix, recv_fail_postfix);
    at_set_send_delimiter(send_delimiter);

    if (at_init_uart_recv_mutex() != 0) {
    17a6:	2800      	cmp	r0, #0
    17a8:	d032      	beq.n	1810 <at_parser_init+0xec>
    at.task_mutex = HAL_MutexCreate();
    17aa:	4b25      	ldr	r3, [pc, #148]	; (1840 <at_parser_init+0x11c>)
    17ac:	4798      	blx	r3
    17ae:	23c4      	movs	r3, #196	; 0xc4
    17b0:	4a1a      	ldr	r2, [pc, #104]	; (181c <at_parser_init+0xf8>)
    17b2:	50d0      	str	r0, [r2, r3]
    if (NULL == at.task_mutex) {
    17b4:	4244      	negs	r4, r0
    17b6:	4144      	adcs	r4, r0
    17b8:	4264      	negs	r4, r4
        atpsr_err("at_uart_recv_mutex init fail \r\n");
        return -1;
    }

    if (at_init_task_mutex() != 0) {
    17ba:	2c00      	cmp	r4, #0
    17bc:	d10b      	bne.n	17d6 <at_parser_init+0xb2>
    at.at_uart_send_mutex = HAL_MutexCreate();
    17be:	4b20      	ldr	r3, [pc, #128]	; (1840 <at_parser_init+0x11c>)
    17c0:	4798      	blx	r3
    17c2:	23c0      	movs	r3, #192	; 0xc0
    17c4:	4a15      	ldr	r2, [pc, #84]	; (181c <at_parser_init+0xf8>)
    17c6:	50d0      	str	r0, [r2, r3]
        at_deinit_uart_recv_mutex();
        atpsr_err("at mutex init fail \r\n");
        return -1;
    }

    if (at_worker_uart_send_mutex_init() != 0) {
    17c8:	2800      	cmp	r0, #0
    17ca:	d00d      	beq.n	17e8 <at_parser_init+0xc4>
        at_deinit_task_mutex();
        atpsr_err("fail to creat at worker sem\r\n");
    }

#if AT_SINGLE_TASK
    inited = true;
    17cc:	2201      	movs	r2, #1
    17ce:	4b13      	ldr	r3, [pc, #76]	; (181c <at_parser_init+0xf8>)
    17d0:	701a      	strb	r2, [r3, #0]

    HAL_SleepMs(500);
#endif

    return 0;
}
    17d2:	0020      	movs	r0, r4
    17d4:	bd10      	pop	{r4, pc}
    if (at.at_uart_recv_mutex) {
    17d6:	3b08      	subs	r3, #8
    17d8:	58d0      	ldr	r0, [r2, r3]
    17da:	2800      	cmp	r0, #0
    17dc:	d01b      	beq.n	1816 <at_parser_init+0xf2>
        HAL_MutexDestroy(at.at_uart_recv_mutex);
    17de:	4b19      	ldr	r3, [pc, #100]	; (1844 <at_parser_init+0x120>)
    17e0:	4798      	blx	r3
        return -1;
    17e2:	2401      	movs	r4, #1
    17e4:	4264      	negs	r4, r4
    17e6:	e7f4      	b.n	17d2 <at_parser_init+0xae>
    if (at.at_uart_recv_mutex) {
    17e8:	3b04      	subs	r3, #4
    17ea:	58d0      	ldr	r0, [r2, r3]
    17ec:	2800      	cmp	r0, #0
    17ee:	d001      	beq.n	17f4 <at_parser_init+0xd0>
        HAL_MutexDestroy(at.at_uart_recv_mutex);
    17f0:	4b14      	ldr	r3, [pc, #80]	; (1844 <at_parser_init+0x120>)
    17f2:	4798      	blx	r3
    if (at.task_mutex) {
    17f4:	23c4      	movs	r3, #196	; 0xc4
    17f6:	4a09      	ldr	r2, [pc, #36]	; (181c <at_parser_init+0xf8>)
    17f8:	58d0      	ldr	r0, [r2, r3]
    17fa:	2800      	cmp	r0, #0
    17fc:	d0e6      	beq.n	17cc <at_parser_init+0xa8>
        HAL_MutexDestroy(at.task_mutex);
    17fe:	4b11      	ldr	r3, [pc, #68]	; (1844 <at_parser_init+0x120>)
    1800:	4798      	blx	r3
    1802:	e7e3      	b.n	17cc <at_parser_init+0xa8>
        return -1;
    1804:	2401      	movs	r4, #1
    1806:	4264      	negs	r4, r4
    1808:	e7e3      	b.n	17d2 <at_parser_init+0xae>
        return -1;
    180a:	2401      	movs	r4, #1
    180c:	4264      	negs	r4, r4
    180e:	e7e0      	b.n	17d2 <at_parser_init+0xae>
        return -1;
    1810:	2401      	movs	r4, #1
    1812:	4264      	negs	r4, r4
    1814:	e7dd      	b.n	17d2 <at_parser_init+0xae>
        return -1;
    1816:	2401      	movs	r4, #1
    1818:	4264      	negs	r4, r4
    181a:	e7da      	b.n	17d2 <at_parser_init+0xae>
    181c:	20000380 	.word	0x20000380
    1820:	000085c9 	.word	0x000085c9
    1824:	20000400 	.word	0x20000400
    1828:	00007b5d 	.word	0x00007b5d
    182c:	00000bb8 	.word	0x00000bb8
    1830:	00009cb4 	.word	0x00009cb4
    1834:	0000a088 	.word	0x0000a088
    1838:	00009818 	.word	0x00009818
    183c:	00009820 	.word	0x00009820
    1840:	00007d29 	.word	0x00007d29
    1844:	00007d2d 	.word	0x00007d2d

00001848 <at_send_no_reply>:
    return ret;
}
#endif

int at_send_no_reply(const char *data, int datalen, bool delimiter)
{
    1848:	b570      	push	{r4, r5, r6, lr}
    184a:	4c25      	ldr	r4, [pc, #148]	; (18e0 <at_send_no_reply+0x98>)
    184c:	44a5      	add	sp, r4
    184e:	0005      	movs	r5, r0
    1850:	000c      	movs	r4, r1
    1852:	0016      	movs	r6, r2
    int ret;
	char cmdsend[512] = {0};
    1854:	2280      	movs	r2, #128	; 0x80
    1856:	0092      	lsls	r2, r2, #2
    1858:	2100      	movs	r1, #0
    185a:	a802      	add	r0, sp, #8
    185c:	4b21      	ldr	r3, [pc, #132]	; (18e4 <at_send_no_reply+0x9c>)
    185e:	4798      	blx	r3
	int len;
	char* datasend;
    if (inited == 0) {
    1860:	4b21      	ldr	r3, [pc, #132]	; (18e8 <at_send_no_reply+0xa0>)
    1862:	781b      	ldrb	r3, [r3, #0]
    1864:	2b00      	cmp	r3, #0
    1866:	d031      	beq.n	18cc <at_send_no_reply+0x84>
        atpsr_err("at have not init yet\r\n");
        return -1;
    }

    if (NULL == data || datalen <= 0) {
    1868:	2d00      	cmp	r5, #0
    186a:	d032      	beq.n	18d2 <at_send_no_reply+0x8a>
    186c:	2c00      	cmp	r4, #0
    186e:	dd33      	ble.n	18d8 <at_send_no_reply+0x90>
        atpsr_err("invalid input \r\n");
        return -1;
    }

    HAL_MutexLock(at.at_uart_send_mutex);
    1870:	23c0      	movs	r3, #192	; 0xc0
    1872:	4a1d      	ldr	r2, [pc, #116]	; (18e8 <at_send_no_reply+0xa0>)
    1874:	58d0      	ldr	r0, [r2, r3]
    1876:	4b1d      	ldr	r3, [pc, #116]	; (18ec <at_send_no_reply+0xa4>)
    1878:	4798      	blx	r3
		len = datalen + strlen(AT_SEND_DELIMITER);
		datasend = cmdsend;
	}
	else
	{
		datasend = data;
    187a:	0029      	movs	r1, r5
	if (delimiter) {
    187c:	2e00      	cmp	r6, #0
    187e:	d111      	bne.n	18a4 <at_send_no_reply+0x5c>
		len = datalen;
	}
	
    if ((ret = at_sendto_lower(at._pstuart, (void *)datasend,
                               len, at._timeout, true)) != 0) {
    1880:	4a19      	ldr	r2, [pc, #100]	; (18e8 <at_send_no_reply+0xa0>)
    ret = HAL_AT_Uart_Send(uart, data, size, timeout);
    1882:	6893      	ldr	r3, [r2, #8]
    1884:	6850      	ldr	r0, [r2, #4]
    1886:	0022      	movs	r2, r4
    1888:	4c19      	ldr	r4, [pc, #100]	; (18f0 <at_send_no_reply+0xa8>)
    188a:	47a0      	blx	r4
    188c:	1e04      	subs	r4, r0, #0
    if ((ret = at_sendto_lower(at._pstuart, (void *)datasend,
    188e:	d115      	bne.n	18bc <at_send_no_reply+0x74>
            HAL_MutexUnlock(at.at_uart_send_mutex);
            return -1;
        }
    }
    */
    HAL_MutexUnlock(at.at_uart_send_mutex);
    1890:	23c0      	movs	r3, #192	; 0xc0
    1892:	4a15      	ldr	r2, [pc, #84]	; (18e8 <at_send_no_reply+0xa0>)
    1894:	58d0      	ldr	r0, [r2, r3]
    1896:	4b17      	ldr	r3, [pc, #92]	; (18f4 <at_send_no_reply+0xac>)
    1898:	4798      	blx	r3

    return 0;

}
    189a:	0020      	movs	r0, r4
    189c:	2382      	movs	r3, #130	; 0x82
    189e:	009b      	lsls	r3, r3, #2
    18a0:	449d      	add	sp, r3
    18a2:	bd70      	pop	{r4, r5, r6, pc}
		HAL_Snprintf(cmdsend, 512, "%s%s", data,AT_SEND_DELIMITER);
    18a4:	4b14      	ldr	r3, [pc, #80]	; (18f8 <at_send_no_reply+0xb0>)
    18a6:	9300      	str	r3, [sp, #0]
    18a8:	002b      	movs	r3, r5
    18aa:	4a14      	ldr	r2, [pc, #80]	; (18fc <at_send_no_reply+0xb4>)
    18ac:	2180      	movs	r1, #128	; 0x80
    18ae:	0089      	lsls	r1, r1, #2
    18b0:	a802      	add	r0, sp, #8
    18b2:	4d13      	ldr	r5, [pc, #76]	; (1900 <at_send_no_reply+0xb8>)
    18b4:	47a8      	blx	r5
		len = datalen + strlen(AT_SEND_DELIMITER);
    18b6:	3401      	adds	r4, #1
		datasend = cmdsend;
    18b8:	a902      	add	r1, sp, #8
    18ba:	e7e1      	b.n	1880 <at_send_no_reply+0x38>
        HAL_MutexUnlock(at.at_uart_send_mutex);
    18bc:	23c0      	movs	r3, #192	; 0xc0
    18be:	4a0a      	ldr	r2, [pc, #40]	; (18e8 <at_send_no_reply+0xa0>)
    18c0:	58d0      	ldr	r0, [r2, r3]
    18c2:	4b0c      	ldr	r3, [pc, #48]	; (18f4 <at_send_no_reply+0xac>)
    18c4:	4798      	blx	r3
        return -1;
    18c6:	2401      	movs	r4, #1
    18c8:	4264      	negs	r4, r4
    18ca:	e7e6      	b.n	189a <at_send_no_reply+0x52>
        return -1;
    18cc:	2401      	movs	r4, #1
    18ce:	4264      	negs	r4, r4
    18d0:	e7e3      	b.n	189a <at_send_no_reply+0x52>
        return -1;
    18d2:	2401      	movs	r4, #1
    18d4:	4264      	negs	r4, r4
    18d6:	e7e0      	b.n	189a <at_send_no_reply+0x52>
    18d8:	2401      	movs	r4, #1
    18da:	4264      	negs	r4, r4
    18dc:	e7dd      	b.n	189a <at_send_no_reply+0x52>
    18de:	46c0      	nop			; (mov r8, r8)
    18e0:	fffffdf8 	.word	0xfffffdf8
    18e4:	000085c9 	.word	0x000085c9
    18e8:	20000380 	.word	0x20000380
    18ec:	00007d2f 	.word	0x00007d2f
    18f0:	00007c3d 	.word	0x00007c3d
    18f4:	00007d31 	.word	0x00007d31
    18f8:	00009820 	.word	0x00009820
    18fc:	00009824 	.word	0x00009824
    1900:	00007d75 	.word	0x00007d75

00001904 <at_read>:
        return -1;
    }
}

int at_read(char *outbuf, int readsize)
{
    1904:	b5f0      	push	{r4, r5, r6, r7, lr}
    1906:	46ce      	mov	lr, r9
    1908:	4647      	mov	r7, r8
    190a:	b580      	push	{r7, lr}
    190c:	b085      	sub	sp, #20
    190e:	0007      	movs	r7, r0
    1910:	000d      	movs	r5, r1
    int      ret = 0;
    uint32_t recv_size, total_read = 0;

    if (inited == 0) {
    1912:	4b1d      	ldr	r3, [pc, #116]	; (1988 <at_read+0x84>)
    1914:	781b      	ldrb	r3, [r3, #0]
    1916:	2b00      	cmp	r3, #0
    1918:	d02b      	beq.n	1972 <at_read+0x6e>
        atpsr_err("at have not init yet\r\n");
        return -1;
    }

    HAL_MutexLock(at.at_uart_recv_mutex);
    191a:	23bc      	movs	r3, #188	; 0xbc
    191c:	4a1a      	ldr	r2, [pc, #104]	; (1988 <at_read+0x84>)
    191e:	58d0      	ldr	r0, [r2, r3]
    1920:	4b1a      	ldr	r3, [pc, #104]	; (198c <at_read+0x88>)
    1922:	4798      	blx	r3
    uint32_t recv_size, total_read = 0;
    1924:	2400      	movs	r4, #0
    while (total_read < readsize) {
    1926:	46a9      	mov	r9, r5
        ret = at_recvfrom_lower(at._pstuart, (void *)(outbuf + total_read),
    1928:	4e17      	ldr	r6, [pc, #92]	; (1988 <at_read+0x84>)
    ret = HAL_AT_Uart_Recv(uart, data, expect_size, recv_size, timeout);
    192a:	4b19      	ldr	r3, [pc, #100]	; (1990 <at_read+0x8c>)
    192c:	4698      	mov	r8, r3
    while (total_read < readsize) {
    192e:	42ac      	cmp	r4, r5
    1930:	d214      	bcs.n	195c <at_read+0x58>
        ret = at_recvfrom_lower(at._pstuart, (void *)(outbuf + total_read),
    1932:	1b2a      	subs	r2, r5, r4
    1934:	1939      	adds	r1, r7, r4
    ret = HAL_AT_Uart_Recv(uart, data, expect_size, recv_size, timeout);
    1936:	6870      	ldr	r0, [r6, #4]
    1938:	68b3      	ldr	r3, [r6, #8]
    193a:	9300      	str	r3, [sp, #0]
    193c:	ab03      	add	r3, sp, #12
    193e:	47c0      	blx	r8
                                readsize - total_read, &recv_size, at._timeout);
        if (ret != 0) {
    1940:	2800      	cmp	r0, #0
    1942:	d119      	bne.n	1978 <at_read+0x74>
            atpsr_err("at_read failed on uart_recv.");
            break;
        }

        if (recv_size <= 0) {
    1944:	9b03      	ldr	r3, [sp, #12]
    1946:	2b00      	cmp	r3, #0
    1948:	d0f1      	beq.n	192e <at_read+0x2a>
            continue;
        }
        total_read += recv_size;
    194a:	18e4      	adds	r4, r4, r3
        if (total_read >= readsize) {
    194c:	45a1      	cmp	r9, r4
    194e:	d8ee      	bhi.n	192e <at_read+0x2a>
            break;
        }
    }
    HAL_MutexUnlock(at.at_uart_recv_mutex);
    1950:	23bc      	movs	r3, #188	; 0xbc
    1952:	4a0d      	ldr	r2, [pc, #52]	; (1988 <at_read+0x84>)
    1954:	58d0      	ldr	r0, [r2, r3]
    1956:	4b0f      	ldr	r3, [pc, #60]	; (1994 <at_read+0x90>)
    1958:	4798      	blx	r3
    195a:	e004      	b.n	1966 <at_read+0x62>
    195c:	23bc      	movs	r3, #188	; 0xbc
    195e:	4a0a      	ldr	r2, [pc, #40]	; (1988 <at_read+0x84>)
    1960:	58d0      	ldr	r0, [r2, r3]
    1962:	4b0c      	ldr	r3, [pc, #48]	; (1994 <at_read+0x90>)
    1964:	4798      	blx	r3

    if (ret != 0) {
        return -1;
    }

    return total_read;
    1966:	0020      	movs	r0, r4
}
    1968:	b005      	add	sp, #20
    196a:	bc0c      	pop	{r2, r3}
    196c:	4690      	mov	r8, r2
    196e:	4699      	mov	r9, r3
    1970:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
    1972:	2001      	movs	r0, #1
    1974:	4240      	negs	r0, r0
    1976:	e7f7      	b.n	1968 <at_read+0x64>
    HAL_MutexUnlock(at.at_uart_recv_mutex);
    1978:	23bc      	movs	r3, #188	; 0xbc
    197a:	4a03      	ldr	r2, [pc, #12]	; (1988 <at_read+0x84>)
    197c:	58d0      	ldr	r0, [r2, r3]
    197e:	4b05      	ldr	r3, [pc, #20]	; (1994 <at_read+0x90>)
    1980:	4798      	blx	r3
        return -1;
    1982:	2001      	movs	r0, #1
    1984:	4240      	negs	r0, r0
    1986:	e7ef      	b.n	1968 <at_read+0x64>
    1988:	20000380 	.word	0x20000380
    198c:	00007d2f 	.word	0x00007d2f
    1990:	00007b9d 	.word	0x00007b9d
    1994:	00007d31 	.word	0x00007d31

00001998 <at_register_callback>:

int at_register_callback(const char *prefix, const char *postfix,
                         int maxlen, at_recv_cb cb, void *arg)
{
    1998:	b5f0      	push	{r4, r5, r6, r7, lr}
    199a:	46de      	mov	lr, fp
    199c:	4657      	mov	r7, sl
    199e:	b580      	push	{r7, lr}
    19a0:	b083      	sub	sp, #12
    19a2:	9000      	str	r0, [sp, #0]
    19a4:	468b      	mov	fp, r1
    19a6:	4692      	mov	sl, r2
    19a8:	9301      	str	r3, [sp, #4]
    oob_t *oob = NULL;
    int    i   = 0;

    if (maxlen < 0 || NULL == prefix) {
    19aa:	2a00      	cmp	r2, #0
    19ac:	db4b      	blt.n	1a46 <at_register_callback+0xae>
    19ae:	2800      	cmp	r0, #0
    19b0:	d04c      	beq.n	1a4c <at_register_callback+0xb4>
        atpsr_err("%s invalid input \r\n", __func__);
        return -1;
    }

    if (at._oobs_num >= OOB_MAX) {
    19b2:	23b8      	movs	r3, #184	; 0xb8
    19b4:	4a2b      	ldr	r2, [pc, #172]	; (1a64 <at_register_callback+0xcc>)
    19b6:	58d7      	ldr	r7, [r2, r3]
    19b8:	2f04      	cmp	r7, #4
    19ba:	dc4a      	bgt.n	1a52 <at_register_callback+0xba>
        atpsr_err("No place left in OOB.\r\n");
        return -1;
    }

    /*check oob is exit*/
    for (i = 0; i < at._oobs_num; i++) {
    19bc:	2f00      	cmp	r7, #0
    19be:	dd0e      	ble.n	19de <at_register_callback+0x46>
    19c0:	0014      	movs	r4, r2
    19c2:	3404      	adds	r4, #4
    19c4:	00fd      	lsls	r5, r7, #3
    19c6:	1bed      	subs	r5, r5, r7
    19c8:	00ad      	lsls	r5, r5, #2
    19ca:	1965      	adds	r5, r4, r5
        if (strcmp(prefix, at._oobs[i].prefix) == 0) {
    19cc:	4e26      	ldr	r6, [pc, #152]	; (1a68 <at_register_callback+0xd0>)
    19ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    19d0:	9800      	ldr	r0, [sp, #0]
    19d2:	47b0      	blx	r6
    19d4:	2800      	cmp	r0, #0
    19d6:	d03f      	beq.n	1a58 <at_register_callback+0xc0>
    19d8:	341c      	adds	r4, #28
    for (i = 0; i < at._oobs_num; i++) {
    19da:	42ac      	cmp	r4, r5
    19dc:	d1f7      	bne.n	19ce <at_register_callback+0x36>
            atpsr_warning("oob prefix %s is already exist.\r\n", prefix);
            return -1;
        }
    }

    oob = &(at._oobs[at._oobs_num++]);
    19de:	4921      	ldr	r1, [pc, #132]	; (1a64 <at_register_callback+0xcc>)
    19e0:	1c7b      	adds	r3, r7, #1
    19e2:	22b8      	movs	r2, #184	; 0xb8
    19e4:	508b      	str	r3, [r1, r2]

    oob->oobinputdata = NULL;
    19e6:	00fb      	lsls	r3, r7, #3
    19e8:	1bdb      	subs	r3, r3, r7
    19ea:	009b      	lsls	r3, r3, #2
    19ec:	18cb      	adds	r3, r1, r3
    19ee:	2200      	movs	r2, #0
    19f0:	635a      	str	r2, [r3, #52]	; 0x34
    if (postfix != NULL) {
    19f2:	465b      	mov	r3, fp
    19f4:	2b00      	cmp	r3, #0
    19f6:	d00e      	beq.n	1a16 <at_register_callback+0x7e>
        oob->oobinputdata = atpsr_malloc(maxlen);
    19f8:	4650      	mov	r0, sl
    19fa:	4b1c      	ldr	r3, [pc, #112]	; (1a6c <at_register_callback+0xd4>)
    19fc:	4798      	blx	r3
    19fe:	00fb      	lsls	r3, r7, #3
    1a00:	1bdb      	subs	r3, r3, r7
    1a02:	009b      	lsls	r3, r3, #2
    1a04:	4a17      	ldr	r2, [pc, #92]	; (1a64 <at_register_callback+0xcc>)
    1a06:	18d3      	adds	r3, r2, r3
    1a08:	6358      	str	r0, [r3, #52]	; 0x34
        if (NULL == oob->oobinputdata) {
    1a0a:	2800      	cmp	r0, #0
    1a0c:	d027      	beq.n	1a5e <at_register_callback+0xc6>
            atpsr_err("fail to malloc len %d at %s for prefix %s \r\n",
                 maxlen, __func__, prefix);
            return -1;
        }
        memset(oob->oobinputdata, 0, maxlen);
    1a0e:	4652      	mov	r2, sl
    1a10:	2100      	movs	r1, #0
    1a12:	4b17      	ldr	r3, [pc, #92]	; (1a70 <at_register_callback+0xd8>)
    1a14:	4798      	blx	r3
    }


    oob->maxlen  = maxlen;
    1a16:	4913      	ldr	r1, [pc, #76]	; (1a64 <at_register_callback+0xcc>)
    1a18:	00fa      	lsls	r2, r7, #3
    1a1a:	1bd3      	subs	r3, r2, r7
    1a1c:	009b      	lsls	r3, r3, #2
    1a1e:	18cb      	adds	r3, r1, r3
    1a20:	4650      	mov	r0, sl
    1a22:	63d8      	str	r0, [r3, #60]	; 0x3c
    oob->prefix  = (char *)prefix;
    1a24:	9800      	ldr	r0, [sp, #0]
    1a26:	62d8      	str	r0, [r3, #44]	; 0x2c
    oob->postfix = (char *)postfix;
    1a28:	4658      	mov	r0, fp
    1a2a:	6318      	str	r0, [r3, #48]	; 0x30
    oob->cb      = cb;
    1a2c:	9801      	ldr	r0, [sp, #4]
    1a2e:	6418      	str	r0, [r3, #64]	; 0x40
    oob->arg     = arg;
    1a30:	980a      	ldr	r0, [sp, #40]	; 0x28
    1a32:	6458      	str	r0, [r3, #68]	; 0x44
    oob->reallen = 0;
    1a34:	001a      	movs	r2, r3
    1a36:	2300      	movs	r3, #0
    1a38:	6393      	str	r3, [r2, #56]	; 0x38

    atpsr_debug("New oob registered (%s)", oob->prefix);

    return 0;
    1a3a:	2000      	movs	r0, #0
}
    1a3c:	b003      	add	sp, #12
    1a3e:	bc0c      	pop	{r2, r3}
    1a40:	4692      	mov	sl, r2
    1a42:	469b      	mov	fp, r3
    1a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
    1a46:	2001      	movs	r0, #1
    1a48:	4240      	negs	r0, r0
    1a4a:	e7f7      	b.n	1a3c <at_register_callback+0xa4>
    1a4c:	2001      	movs	r0, #1
    1a4e:	4240      	negs	r0, r0
    1a50:	e7f4      	b.n	1a3c <at_register_callback+0xa4>
        return -1;
    1a52:	2001      	movs	r0, #1
    1a54:	4240      	negs	r0, r0
    1a56:	e7f1      	b.n	1a3c <at_register_callback+0xa4>
            return -1;
    1a58:	2001      	movs	r0, #1
    1a5a:	4240      	negs	r0, r0
    1a5c:	e7ee      	b.n	1a3c <at_register_callback+0xa4>
            return -1;
    1a5e:	2001      	movs	r0, #1
    1a60:	4240      	negs	r0, r0
    1a62:	e7eb      	b.n	1a3c <at_register_callback+0xa4>
    1a64:	20000380 	.word	0x20000380
    1a68:	0000896d 	.word	0x0000896d
    1a6c:	00007d1d 	.word	0x00007d1d
    1a70:	000085c9 	.word	0x000085c9

00001a74 <at_yield>:

#if AT_SINGLE_TASK
static char at_rx_buf[RECV_BUFFER_SIZE];
int at_yield(char *replybuf, int bufsize, const atcmd_config_t *atcmdconfig,
             int timeout_ms)
{
    1a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a76:	46de      	mov	lr, fp
    1a78:	4657      	mov	r7, sl
    1a7a:	464e      	mov	r6, r9
    1a7c:	4645      	mov	r5, r8
    1a7e:	b5e0      	push	{r5, r6, r7, lr}
    1a80:	b08f      	sub	sp, #60	; 0x3c
    1a82:	9005      	str	r0, [sp, #20]
    1a84:	9106      	str	r1, [sp, #24]
    1a86:	4693      	mov	fp, r2
    1a88:	9307      	str	r3, [sp, #28]
    char      *buf                 = NULL;
    char      *rsp_prefix          = NULL;
    char      *rsp_success_postfix = NULL;
    char      *rsp_fail_postfix    = NULL;

    if (!inited) {
    1a8a:	4bcc      	ldr	r3, [pc, #816]	; (1dbc <at_yield+0x348>)
    1a8c:	781b      	ldrb	r3, [r3, #0]
    1a8e:	2b00      	cmp	r3, #0
    1a90:	d100      	bne.n	1a94 <at_yield+0x20>
    1a92:	e12b      	b.n	1cec <at_yield+0x278>
        atpsr_err("AT parser has not inited!\r\n");
        return -1;
    }

    if (replybuf != NULL && bufsize <= 0) {
    1a94:	2800      	cmp	r0, #0
    1a96:	d002      	beq.n	1a9e <at_yield+0x2a>
    1a98:	2900      	cmp	r1, #0
    1a9a:	dc00      	bgt.n	1a9e <at_yield+0x2a>
    1a9c:	e129      	b.n	1cf2 <at_yield+0x27e>
    if (NULL == buf) {
        atpsr_err("AT worker fail to malloc ,task exist \r\n");
        return -1;
    }

    memset(buf, 0, RECV_BUFFER_SIZE);
    1a9e:	2280      	movs	r2, #128	; 0x80
    1aa0:	0092      	lsls	r2, r2, #2
    1aa2:	2100      	movs	r1, #0
    1aa4:	48c6      	ldr	r0, [pc, #792]	; (1dc0 <at_yield+0x34c>)
    1aa6:	305c      	adds	r0, #92	; 0x5c
    1aa8:	4bc6      	ldr	r3, [pc, #792]	; (1dc4 <at_yield+0x350>)
    1aaa:	4798      	blx	r3
    int        offset                  = 0;
    1aac:	2700      	movs	r7, #0
    int        at_reply_offset         = 0;
    1aae:	2300      	movs	r3, #0
    1ab0:	930b      	str	r3, [sp, #44]	; 0x2c
    int        at_reply_begin          = 0;
    1ab2:	9308      	str	r3, [sp, #32]
                        memset(buf, 0, offset);
    1ab4:	4bc2      	ldr	r3, [pc, #776]	; (1dc0 <at_yield+0x34c>)
    1ab6:	335c      	adds	r3, #92	; 0x5c
    1ab8:	9309      	str	r3, [sp, #36]	; 0x24
                    memset(buf, 0, offset);
    1aba:	4bc1      	ldr	r3, [pc, #772]	; (1dc0 <at_yield+0x34c>)
    1abc:	335c      	adds	r3, #92	; 0x5c
    1abe:	930a      	str	r3, [sp, #40]	; 0x28
    1ac0:	e0c9      	b.n	1c56 <at_yield+0x1e2>
    1ac2:	2301      	movs	r3, #1
    1ac4:	9308      	str	r3, [sp, #32]
    1ac6:	e0c6      	b.n	1c56 <at_yield+0x1e2>
                oob->cb(oob->arg, NULL, 0);
    1ac8:	6c20      	ldr	r0, [r4, #64]	; 0x40
    1aca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1acc:	2200      	movs	r2, #0
    1ace:	2100      	movs	r1, #0
    1ad0:	4798      	blx	r3
                memset(buf, 0, offset);
    1ad2:	464a      	mov	r2, r9
    1ad4:	2100      	movs	r1, #0
    1ad6:	48ba      	ldr	r0, [pc, #744]	; (1dc0 <at_yield+0x34c>)
    1ad8:	305c      	adds	r0, #92	; 0x5c
    1ada:	4bba      	ldr	r3, [pc, #744]	; (1dc4 <at_yield+0x350>)
    1adc:	4798      	blx	r3
                offset = 0;
    1ade:	9b04      	ldr	r3, [sp, #16]
    1ae0:	4699      	mov	r9, r3
    1ae2:	e01e      	b.n	1b22 <at_yield+0xae>
                            oob->cb(oob->arg, oob->oobinputdata, oob->reallen);
    1ae4:	003a      	movs	r2, r7
    1ae6:	4641      	mov	r1, r8
    1ae8:	6c20      	ldr	r0, [r4, #64]	; 0x40
    1aea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1aec:	4798      	blx	r3
                            memset(oob->oobinputdata, 0, oob->reallen);
    1aee:	6b62      	ldr	r2, [r4, #52]	; 0x34
    1af0:	2100      	movs	r1, #0
    1af2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1af4:	4fb3      	ldr	r7, [pc, #716]	; (1dc4 <at_yield+0x350>)
    1af6:	47b8      	blx	r7
                            oob->reallen = 0;
    1af8:	2300      	movs	r3, #0
    1afa:	6363      	str	r3, [r4, #52]	; 0x34
                            memset(buf, 0, offset);
    1afc:	464a      	mov	r2, r9
    1afe:	2100      	movs	r1, #0
    1b00:	48af      	ldr	r0, [pc, #700]	; (1dc0 <at_yield+0x34c>)
    1b02:	305c      	adds	r0, #92	; 0x5c
    1b04:	47b8      	blx	r7
    1b06:	e00a      	b.n	1b1e <at_yield+0xaa>
                        memset(oob->oobinputdata, 0, oob->reallen);
    1b08:	2100      	movs	r1, #0
    1b0a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1b0c:	4bad      	ldr	r3, [pc, #692]	; (1dc4 <at_yield+0x350>)
    1b0e:	4798      	blx	r3
                        oob->reallen = 0;
    1b10:	2300      	movs	r3, #0
    1b12:	6363      	str	r3, [r4, #52]	; 0x34
                        memset(buf, 0, offset);
    1b14:	464a      	mov	r2, r9
    1b16:	2100      	movs	r1, #0
    1b18:	9809      	ldr	r0, [sp, #36]	; 0x24
    1b1a:	4baa      	ldr	r3, [pc, #680]	; (1dc4 <at_yield+0x350>)
    1b1c:	4798      	blx	r3
                    offset = 0;
    1b1e:	9b04      	ldr	r3, [sp, #16]
    1b20:	4699      	mov	r9, r3
    for (k = 0; k < at._oobs_num; k++) {
    1b22:	3601      	adds	r6, #1
    1b24:	351c      	adds	r5, #28
    1b26:	23b8      	movs	r3, #184	; 0xb8
    1b28:	4aa4      	ldr	r2, [pc, #656]	; (1dbc <at_yield+0x348>)
    1b2a:	58d3      	ldr	r3, [r2, r3]
    1b2c:	429e      	cmp	r6, r3
    1b2e:	da2d      	bge.n	1b8c <at_yield+0x118>
    1b30:	002c      	movs	r4, r5
        if (oob->reallen > 0 ||
    1b32:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    1b34:	2b00      	cmp	r3, #0
    1b36:	d000      	beq.n	1b3a <at_yield+0xc6>
    1b38:	e0ea      	b.n	1d10 <at_yield+0x29c>
            (offset >= strlen(oob->prefix) &&
    1b3a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1b3c:	9303      	str	r3, [sp, #12]
    1b3e:	0018      	movs	r0, r3
    1b40:	4ba1      	ldr	r3, [pc, #644]	; (1dc8 <at_yield+0x354>)
    1b42:	4798      	blx	r3
    1b44:	0007      	movs	r7, r0
        if (oob->reallen > 0 ||
    1b46:	4548      	cmp	r0, r9
    1b48:	d8eb      	bhi.n	1b22 <at_yield+0xae>
             memcmp(oob->prefix, buf + offset - strlen(oob->prefix),
    1b4a:	464a      	mov	r2, r9
    1b4c:	1a13      	subs	r3, r2, r0
    1b4e:	499c      	ldr	r1, [pc, #624]	; (1dc0 <at_yield+0x34c>)
    1b50:	315c      	adds	r1, #92	; 0x5c
    1b52:	18c9      	adds	r1, r1, r3
    1b54:	0002      	movs	r2, r0
    1b56:	9803      	ldr	r0, [sp, #12]
    1b58:	4b9c      	ldr	r3, [pc, #624]	; (1dcc <at_yield+0x358>)
    1b5a:	4798      	blx	r3
            (offset >= strlen(oob->prefix) &&
    1b5c:	2800      	cmp	r0, #0
    1b5e:	d1e0      	bne.n	1b22 <at_yield+0xae>
            if (oob->postfix == NULL) {
    1b60:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    1b62:	2b00      	cmp	r3, #0
    1b64:	d0b0      	beq.n	1ac8 <at_yield+0x54>
                    int len = strlen(oob->prefix) - 1;
    1b66:	3f01      	subs	r7, #1
                    memset(oob->oobinputdata, 0, oob->maxlen);
    1b68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    1b6a:	2100      	movs	r1, #0
    1b6c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1b6e:	4b95      	ldr	r3, [pc, #596]	; (1dc4 <at_yield+0x350>)
    1b70:	4798      	blx	r3
                    len = len > 0 ? len : 0;
    1b72:	43fb      	mvns	r3, r7
    1b74:	17db      	asrs	r3, r3, #31
    1b76:	401f      	ands	r7, r3
                    memcpy(oob->oobinputdata, oob->prefix, len);
    1b78:	003a      	movs	r2, r7
    1b7a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1b7c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1b7e:	4b94      	ldr	r3, [pc, #592]	; (1dd0 <at_yield+0x35c>)
    1b80:	4798      	blx	r3
                    oob->reallen += len;
    1b82:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1b84:	469c      	mov	ip, r3
    1b86:	4467      	add	r7, ip
    1b88:	6367      	str	r7, [r4, #52]	; 0x34
    1b8a:	e0c5      	b.n	1d18 <at_yield+0x2a4>
    1b8c:	464f      	mov	r7, r9
        buf[offset++] = c;
        buf[offset]   = 0;

        at_scan_for_callback(c, buf, &offset);

        if (replybuf == NULL || bufsize <= 0) {
    1b8e:	9b05      	ldr	r3, [sp, #20]
    1b90:	2b00      	cmp	r3, #0
    1b92:	d060      	beq.n	1c56 <at_yield+0x1e2>
    1b94:	9b06      	ldr	r3, [sp, #24]
    1b96:	2b00      	cmp	r3, #0
    1b98:	dd5d      	ble.n	1c56 <at_yield+0x1e2>
            /* if no task, continue recv */
            continue;
        }

        if (NULL != atcmdconfig && NULL != atcmdconfig->reply_prefix) {
    1b9a:	465b      	mov	r3, fp
    1b9c:	2b00      	cmp	r3, #0
    1b9e:	d100      	bne.n	1ba2 <at_yield+0x12e>
    1ba0:	e0ea      	b.n	1d78 <at_yield+0x304>
    1ba2:	681d      	ldr	r5, [r3, #0]
    1ba4:	2d00      	cmp	r5, #0
    1ba6:	d100      	bne.n	1baa <at_yield+0x136>
    1ba8:	e0f7      	b.n	1d9a <at_yield+0x326>
            rsp_prefix     = atcmdconfig->reply_prefix;
            rsp_prefix_len = strlen(rsp_prefix);
    1baa:	0028      	movs	r0, r5
    1bac:	4b86      	ldr	r3, [pc, #536]	; (1dc8 <at_yield+0x354>)
    1bae:	4798      	blx	r3
    1bb0:	0004      	movs	r4, r0
        } else {
            rsp_prefix     = at._default_recv_prefix;
            rsp_prefix_len = at._recv_prefix_len;
        }

        if (NULL != atcmdconfig && NULL != atcmdconfig->reply_success_postfix) {
    1bb2:	465b      	mov	r3, fp
    1bb4:	685b      	ldr	r3, [r3, #4]
    1bb6:	4699      	mov	r9, r3
    1bb8:	2b00      	cmp	r3, #0
    1bba:	d100      	bne.n	1bbe <at_yield+0x14a>
    1bbc:	e0f7      	b.n	1dae <at_yield+0x33a>
            rsp_success_postfix     = atcmdconfig->reply_success_postfix;
            rsp_success_postfix_len = strlen(rsp_success_postfix);
    1bbe:	4648      	mov	r0, r9
    1bc0:	4b81      	ldr	r3, [pc, #516]	; (1dc8 <at_yield+0x354>)
    1bc2:	4798      	blx	r3
    1bc4:	9003      	str	r0, [sp, #12]
        } else {
            rsp_success_postfix     = at._default_recv_success_postfix;
            rsp_success_postfix_len = at._recv_success_postfix_len;
        }

        if (NULL != atcmdconfig && NULL != atcmdconfig->reply_fail_postfix) {
    1bc6:	465b      	mov	r3, fp
    1bc8:	689e      	ldr	r6, [r3, #8]
    1bca:	2e00      	cmp	r6, #0
    1bcc:	d100      	bne.n	1bd0 <at_yield+0x15c>
    1bce:	e0df      	b.n	1d90 <at_yield+0x31c>
            rsp_fail_postfix     = atcmdconfig->reply_fail_postfix;
            rsp_fail_postfix_len = strlen(rsp_fail_postfix);
    1bd0:	0030      	movs	r0, r6
    1bd2:	4b7d      	ldr	r3, [pc, #500]	; (1dc8 <at_yield+0x354>)
    1bd4:	4798      	blx	r3
    1bd6:	4680      	mov	r8, r0
        } else {
            rsp_fail_postfix     = at._default_recv_fail_postfix;
            rsp_fail_postfix_len = at._recv_fail_postfix_len;
        }

        if (offset >= rsp_prefix_len && at_reply_begin == 0 &&
    1bd8:	42a7      	cmp	r7, r4
    1bda:	db39      	blt.n	1c50 <at_yield+0x1dc>
    1bdc:	9b08      	ldr	r3, [sp, #32]
    1bde:	2b00      	cmp	r3, #0
    1be0:	d109      	bne.n	1bf6 <at_yield+0x182>
            (strncmp(buf + offset - rsp_prefix_len, rsp_prefix,
    1be2:	1b3b      	subs	r3, r7, r4
    1be4:	4876      	ldr	r0, [pc, #472]	; (1dc0 <at_yield+0x34c>)
    1be6:	305c      	adds	r0, #92	; 0x5c
    1be8:	18c0      	adds	r0, r0, r3
    1bea:	0022      	movs	r2, r4
    1bec:	0029      	movs	r1, r5
    1bee:	4b79      	ldr	r3, [pc, #484]	; (1dd4 <at_yield+0x360>)
    1bf0:	4798      	blx	r3
        if (offset >= rsp_prefix_len && at_reply_begin == 0 &&
    1bf2:	2800      	cmp	r0, #0
    1bf4:	d12f      	bne.n	1c56 <at_yield+0x1e2>
                     rsp_prefix_len) == 0)) {
            at_reply_begin = 1;
        }

        if (at_reply_begin == 1) {
            if (at_reply_offset < bufsize) {
    1bf6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1bf8:	0013      	movs	r3, r2
    1bfa:	9906      	ldr	r1, [sp, #24]
    1bfc:	428a      	cmp	r2, r1
    1bfe:	da68      	bge.n	1cd2 <at_yield+0x25e>
                replybuf[at_reply_offset] = c;
    1c00:	9c05      	ldr	r4, [sp, #20]
    1c02:	4652      	mov	r2, sl
    1c04:	54e2      	strb	r2, [r4, r3]
                at_reply_offset++;
    1c06:	3301      	adds	r3, #1
    1c08:	930b      	str	r3, [sp, #44]	; 0x2c

                if ((at_reply_offset >= rsp_success_postfix_len &&
    1c0a:	9803      	ldr	r0, [sp, #12]
    1c0c:	0001      	movs	r1, r0
    1c0e:	4283      	cmp	r3, r0
    1c10:	db08      	blt.n	1c24 <at_yield+0x1b0>
                     strncmp(
                       replybuf + at_reply_offset - rsp_success_postfix_len,
    1c12:	1a18      	subs	r0, r3, r0
    1c14:	46a4      	mov	ip, r4
    1c16:	4460      	add	r0, ip
                     strncmp(
    1c18:	000a      	movs	r2, r1
    1c1a:	4649      	mov	r1, r9
    1c1c:	4b6d      	ldr	r3, [pc, #436]	; (1dd4 <at_yield+0x360>)
    1c1e:	4798      	blx	r3
                if ((at_reply_offset >= rsp_success_postfix_len &&
    1c20:	2800      	cmp	r0, #0
    1c22:	d06e      	beq.n	1d02 <at_yield+0x28e>
                       rsp_success_postfix, rsp_success_postfix_len) == 0) ||
    1c24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1c26:	0013      	movs	r3, r2
    1c28:	4590      	cmp	r8, r2
    1c2a:	dd00      	ble.n	1c2e <at_yield+0x1ba>
    1c2c:	e749      	b.n	1ac2 <at_yield+0x4e>
                    (at_reply_offset >= rsp_fail_postfix_len &&
                     strncmp(replybuf + at_reply_offset - rsp_fail_postfix_len,
    1c2e:	4642      	mov	r2, r8
    1c30:	1a98      	subs	r0, r3, r2
    1c32:	9b05      	ldr	r3, [sp, #20]
    1c34:	469c      	mov	ip, r3
    1c36:	4460      	add	r0, ip
    1c38:	0031      	movs	r1, r6
    1c3a:	4b66      	ldr	r3, [pc, #408]	; (1dd4 <at_yield+0x360>)
    1c3c:	4798      	blx	r3
                    (at_reply_offset >= rsp_fail_postfix_len &&
    1c3e:	2800      	cmp	r0, #0
    1c40:	d05f      	beq.n	1d02 <at_yield+0x28e>
    1c42:	2301      	movs	r3, #1
    1c44:	9308      	str	r3, [sp, #32]
    1c46:	e006      	b.n	1c56 <at_yield+0x1e2>
        buf[offset++] = c;
    1c48:	0017      	movs	r7, r2
    1c4a:	e7a0      	b.n	1b8e <at_yield+0x11a>
    for (k = 0; k < at._oobs_num; k++) {
    1c4c:	0017      	movs	r7, r2
    1c4e:	e79e      	b.n	1b8e <at_yield+0x11a>
        if (at_reply_begin == 1) {
    1c50:	9b08      	ldr	r3, [sp, #32]
    1c52:	2b01      	cmp	r3, #1
    1c54:	d0cf      	beq.n	1bf6 <at_yield+0x182>
    uint32_t recv_size = 0;
    1c56:	2300      	movs	r3, #0
    1c58:	930d      	str	r3, [sp, #52]	; 0x34
    if (inited == 0) {
    1c5a:	4b58      	ldr	r3, [pc, #352]	; (1dbc <at_yield+0x348>)
    1c5c:	781b      	ldrb	r3, [r3, #0]
    1c5e:	2b00      	cmp	r3, #0
    1c60:	d04d      	beq.n	1cfe <at_yield+0x28a>
    HAL_MutexLock(at.at_uart_recv_mutex);
    1c62:	4c56      	ldr	r4, [pc, #344]	; (1dbc <at_yield+0x348>)
    1c64:	25bc      	movs	r5, #188	; 0xbc
    1c66:	5960      	ldr	r0, [r4, r5]
    1c68:	4b5b      	ldr	r3, [pc, #364]	; (1dd8 <at_yield+0x364>)
    1c6a:	4798      	blx	r3
    ret = HAL_AT_Uart_Recv(uart, data, expect_size, recv_size, timeout);
    1c6c:	6860      	ldr	r0, [r4, #4]
    1c6e:	9b07      	ldr	r3, [sp, #28]
    1c70:	9300      	str	r3, [sp, #0]
    1c72:	ab0d      	add	r3, sp, #52	; 0x34
    1c74:	2201      	movs	r2, #1
    1c76:	210b      	movs	r1, #11
    1c78:	ae0a      	add	r6, sp, #40	; 0x28
    1c7a:	46b4      	mov	ip, r6
    1c7c:	4461      	add	r1, ip
    1c7e:	4e57      	ldr	r6, [pc, #348]	; (1ddc <at_yield+0x368>)
    1c80:	47b0      	blx	r6
    1c82:	0006      	movs	r6, r0
    1c84:	9004      	str	r0, [sp, #16]
    HAL_MutexUnlock(at.at_uart_recv_mutex);
    1c86:	5960      	ldr	r0, [r4, r5]
    1c88:	4b55      	ldr	r3, [pc, #340]	; (1de0 <at_yield+0x36c>)
    1c8a:	4798      	blx	r3
    if (ret != 0) {
    1c8c:	2e00      	cmp	r6, #0
    1c8e:	d136      	bne.n	1cfe <at_yield+0x28a>
    if (recv_size == 1) {
    1c90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c92:	2b01      	cmp	r3, #1
    1c94:	d133      	bne.n	1cfe <at_yield+0x28a>
        *c = data;
    1c96:	330a      	adds	r3, #10
    1c98:	aa0a      	add	r2, sp, #40	; 0x28
    1c9a:	4694      	mov	ip, r2
    1c9c:	4463      	add	r3, ip
    1c9e:	781b      	ldrb	r3, [r3, #0]
    1ca0:	469a      	mov	sl, r3
        if (offset + 1 >= RECV_BUFFER_SIZE) {
    1ca2:	1c7a      	adds	r2, r7, #1
    1ca4:	4b4f      	ldr	r3, [pc, #316]	; (1de4 <at_yield+0x370>)
    1ca6:	429a      	cmp	r2, r3
    1ca8:	dc26      	bgt.n	1cf8 <at_yield+0x284>
        buf[offset++] = c;
    1caa:	4b45      	ldr	r3, [pc, #276]	; (1dc0 <at_yield+0x34c>)
    1cac:	19df      	adds	r7, r3, r7
    1cae:	375c      	adds	r7, #92	; 0x5c
    1cb0:	4651      	mov	r1, sl
    1cb2:	7039      	strb	r1, [r7, #0]
        buf[offset]   = 0;
    1cb4:	189b      	adds	r3, r3, r2
    1cb6:	335c      	adds	r3, #92	; 0x5c
    1cb8:	2100      	movs	r1, #0
    1cba:	7019      	strb	r1, [r3, #0]
    if (!buf || offset < 0) {
    1cbc:	2a00      	cmp	r2, #0
    1cbe:	dbc3      	blt.n	1c48 <at_yield+0x1d4>
    for (k = 0; k < at._oobs_num; k++) {
    1cc0:	23b8      	movs	r3, #184	; 0xb8
    1cc2:	493e      	ldr	r1, [pc, #248]	; (1dbc <at_yield+0x348>)
    1cc4:	58cb      	ldr	r3, [r1, r3]
    1cc6:	2b00      	cmp	r3, #0
    1cc8:	ddc0      	ble.n	1c4c <at_yield+0x1d8>
    1cca:	000d      	movs	r5, r1
    1ccc:	3504      	adds	r5, #4
                             strlen(oob->prefix) + strlen(oob->postfix)) &&
    1cce:	4691      	mov	r9, r2
    1cd0:	e72e      	b.n	1b30 <at_yield+0xbc>
                             rsp_fail_postfix, rsp_fail_postfix_len) == 0)) {
                    return 0;
                }
            } else {
                memset(replybuf, 0, bufsize);
    1cd2:	9a06      	ldr	r2, [sp, #24]
    1cd4:	2100      	movs	r1, #0
    1cd6:	9c05      	ldr	r4, [sp, #20]
    1cd8:	0020      	movs	r0, r4
    1cda:	4b3a      	ldr	r3, [pc, #232]	; (1dc4 <at_yield+0x350>)
    1cdc:	4798      	blx	r3
                strcpy(replybuf, rsp_fail_postfix);
    1cde:	0031      	movs	r1, r6
    1ce0:	0020      	movs	r0, r4
    1ce2:	4b41      	ldr	r3, [pc, #260]	; (1de8 <at_yield+0x374>)
    1ce4:	4798      	blx	r3
            }
        }

    }

    return -1;
    1ce6:	2001      	movs	r0, #1
    1ce8:	4240      	negs	r0, r0
                break;
    1cea:	e00a      	b.n	1d02 <at_yield+0x28e>
        return -1;
    1cec:	2001      	movs	r0, #1
    1cee:	4240      	negs	r0, r0
    1cf0:	e007      	b.n	1d02 <at_yield+0x28e>
        return -1;
    1cf2:	2001      	movs	r0, #1
    1cf4:	4240      	negs	r0, r0
    1cf6:	e004      	b.n	1d02 <at_yield+0x28e>
    return -1;
    1cf8:	2001      	movs	r0, #1
    1cfa:	4240      	negs	r0, r0
    1cfc:	e001      	b.n	1d02 <at_yield+0x28e>
    1cfe:	2001      	movs	r0, #1
    1d00:	4240      	negs	r0, r0
}
    1d02:	b00f      	add	sp, #60	; 0x3c
    1d04:	bc3c      	pop	{r2, r3, r4, r5}
    1d06:	4690      	mov	r8, r2
    1d08:	4699      	mov	r9, r3
    1d0a:	46a2      	mov	sl, r4
    1d0c:	46ab      	mov	fp, r5
    1d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (oob->postfix == NULL) {
    1d10:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    1d12:	2b00      	cmp	r3, #0
    1d14:	d100      	bne.n	1d18 <at_yield+0x2a4>
    1d16:	e6d7      	b.n	1ac8 <at_yield+0x54>
                if (oob->reallen < oob->maxlen) {
    1d18:	6b62      	ldr	r2, [r4, #52]	; 0x34
    1d1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1d1c:	429a      	cmp	r2, r3
    1d1e:	d300      	bcc.n	1d22 <at_yield+0x2ae>
    1d20:	e6f2      	b.n	1b08 <at_yield+0x94>
                        oob->oobinputdata[oob->reallen] = c;
    1d22:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1d24:	4651      	mov	r1, sl
    1d26:	5499      	strb	r1, [r3, r2]
                        oob->reallen++;
    1d28:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1d2a:	1c5f      	adds	r7, r3, #1
    1d2c:	6367      	str	r7, [r4, #52]	; 0x34
                             strlen(oob->prefix) + strlen(oob->postfix)) &&
    1d2e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1d30:	4b25      	ldr	r3, [pc, #148]	; (1dc8 <at_yield+0x354>)
    1d32:	4798      	blx	r3
    1d34:	4680      	mov	r8, r0
    1d36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1d38:	9303      	str	r3, [sp, #12]
    1d3a:	0018      	movs	r0, r3
    1d3c:	4a22      	ldr	r2, [pc, #136]	; (1dc8 <at_yield+0x354>)
    1d3e:	4790      	blx	r2
    1d40:	0002      	movs	r2, r0
    1d42:	4640      	mov	r0, r8
    1d44:	1883      	adds	r3, r0, r2
                        if ((oob->reallen >=
    1d46:	429f      	cmp	r7, r3
    1d48:	d309      	bcc.n	1d5e <at_yield+0x2ea>
                            (strncmp(oob->oobinputdata + oob->reallen -
    1d4a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1d4c:	4680      	mov	r8, r0
    1d4e:	1ab8      	subs	r0, r7, r2
    1d50:	4440      	add	r0, r8
    1d52:	9903      	ldr	r1, [sp, #12]
    1d54:	4b1f      	ldr	r3, [pc, #124]	; (1dd4 <at_yield+0x360>)
    1d56:	4798      	blx	r3
                             strlen(oob->prefix) + strlen(oob->postfix)) &&
    1d58:	2800      	cmp	r0, #0
    1d5a:	d100      	bne.n	1d5e <at_yield+0x2ea>
    1d5c:	e6c2      	b.n	1ae4 <at_yield+0x70>
                if (offset > (RECV_BUFFER_SIZE - 2)) {
    1d5e:	23ff      	movs	r3, #255	; 0xff
    1d60:	005b      	lsls	r3, r3, #1
    1d62:	4599      	cmp	r9, r3
    1d64:	dc00      	bgt.n	1d68 <at_yield+0x2f4>
    1d66:	e6dc      	b.n	1b22 <at_yield+0xae>
                    memset(buf, 0, offset);
    1d68:	464a      	mov	r2, r9
    1d6a:	2100      	movs	r1, #0
    1d6c:	980a      	ldr	r0, [sp, #40]	; 0x28
    1d6e:	4b15      	ldr	r3, [pc, #84]	; (1dc4 <at_yield+0x350>)
    1d70:	4798      	blx	r3
                    offset = 0;
    1d72:	9b04      	ldr	r3, [sp, #16]
    1d74:	4699      	mov	r9, r3
    1d76:	e6d4      	b.n	1b22 <at_yield+0xae>
            rsp_prefix     = at._default_recv_prefix;
    1d78:	4b10      	ldr	r3, [pc, #64]	; (1dbc <at_yield+0x348>)
    1d7a:	68dd      	ldr	r5, [r3, #12]
            rsp_prefix_len = at._recv_prefix_len;
    1d7c:	69dc      	ldr	r4, [r3, #28]
            rsp_success_postfix     = at._default_recv_success_postfix;
    1d7e:	4b0f      	ldr	r3, [pc, #60]	; (1dbc <at_yield+0x348>)
    1d80:	691a      	ldr	r2, [r3, #16]
    1d82:	4691      	mov	r9, r2
            rsp_success_postfix_len = at._recv_success_postfix_len;
    1d84:	6a1b      	ldr	r3, [r3, #32]
    1d86:	9303      	str	r3, [sp, #12]
        if (NULL != atcmdconfig && NULL != atcmdconfig->reply_fail_postfix) {
    1d88:	465b      	mov	r3, fp
    1d8a:	2b00      	cmp	r3, #0
    1d8c:	d000      	beq.n	1d90 <at_yield+0x31c>
    1d8e:	e71a      	b.n	1bc6 <at_yield+0x152>
            rsp_fail_postfix     = at._default_recv_fail_postfix;
    1d90:	4b0a      	ldr	r3, [pc, #40]	; (1dbc <at_yield+0x348>)
    1d92:	695e      	ldr	r6, [r3, #20]
            rsp_fail_postfix_len = at._recv_fail_postfix_len;
    1d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1d96:	4698      	mov	r8, r3
    1d98:	e71e      	b.n	1bd8 <at_yield+0x164>
            rsp_prefix     = at._default_recv_prefix;
    1d9a:	4b08      	ldr	r3, [pc, #32]	; (1dbc <at_yield+0x348>)
    1d9c:	68dd      	ldr	r5, [r3, #12]
            rsp_prefix_len = at._recv_prefix_len;
    1d9e:	69dc      	ldr	r4, [r3, #28]
        if (NULL != atcmdconfig && NULL != atcmdconfig->reply_success_postfix) {
    1da0:	465b      	mov	r3, fp
    1da2:	685b      	ldr	r3, [r3, #4]
    1da4:	4699      	mov	r9, r3
    1da6:	2b00      	cmp	r3, #0
    1da8:	d000      	beq.n	1dac <at_yield+0x338>
    1daa:	e708      	b.n	1bbe <at_yield+0x14a>
    1dac:	e7e7      	b.n	1d7e <at_yield+0x30a>
            rsp_success_postfix     = at._default_recv_success_postfix;
    1dae:	4b03      	ldr	r3, [pc, #12]	; (1dbc <at_yield+0x348>)
    1db0:	691a      	ldr	r2, [r3, #16]
    1db2:	4691      	mov	r9, r2
            rsp_success_postfix_len = at._recv_success_postfix_len;
    1db4:	6a1b      	ldr	r3, [r3, #32]
    1db6:	9303      	str	r3, [sp, #12]
    1db8:	e705      	b.n	1bc6 <at_yield+0x152>
    1dba:	46c0      	nop			; (mov r8, r8)
    1dbc:	20000380 	.word	0x20000380
    1dc0:	20000400 	.word	0x20000400
    1dc4:	000085c9 	.word	0x000085c9
    1dc8:	00008991 	.word	0x00008991
    1dcc:	00008599 	.word	0x00008599
    1dd0:	000085b7 	.word	0x000085b7
    1dd4:	0000899f 	.word	0x0000899f
    1dd8:	00007d2f 	.word	0x00007d2f
    1ddc:	00007b9d 	.word	0x00007b9d
    1de0:	00007d31 	.word	0x00007d31
    1de4:	000001ff 	.word	0x000001ff
    1de8:	00008981 	.word	0x00008981

00001dec <at_send_wait_reply>:
{
    1dec:	b510      	push	{r4, lr}
    1dee:	001c      	movs	r4, r3
    if (at_send_no_reply(cmd, cmdlen, delimiter) < 0) {
    1df0:	4b12      	ldr	r3, [pc, #72]	; (1e3c <at_send_wait_reply+0x50>)
    1df2:	4798      	blx	r3
    1df4:	2800      	cmp	r0, #0
    1df6:	db1d      	blt.n	1e34 <at_send_wait_reply+0x48>
    if (data && datalen) {
    1df8:	2c00      	cmp	r4, #0
    1dfa:	d002      	beq.n	1e02 <at_send_wait_reply+0x16>
    1dfc:	9b02      	ldr	r3, [sp, #8]
    1dfe:	2b00      	cmp	r3, #0
    1e00:	d10b      	bne.n	1e1a <at_send_wait_reply+0x2e>
	HAL_SleepMs(100);
    1e02:	2064      	movs	r0, #100	; 0x64
    1e04:	4b0e      	ldr	r3, [pc, #56]	; (1e40 <at_send_wait_reply+0x54>)
    1e06:	4798      	blx	r3
    if (at_yield(replybuf, bufsize, atcmdconfig, at._timeout) <  0) {
    1e08:	4b0e      	ldr	r3, [pc, #56]	; (1e44 <at_send_wait_reply+0x58>)
    1e0a:	689b      	ldr	r3, [r3, #8]
    1e0c:	9a05      	ldr	r2, [sp, #20]
    1e0e:	9904      	ldr	r1, [sp, #16]
    1e10:	9803      	ldr	r0, [sp, #12]
    1e12:	4c0d      	ldr	r4, [pc, #52]	; (1e48 <at_send_wait_reply+0x5c>)
    1e14:	47a0      	blx	r4
    1e16:	17c0      	asrs	r0, r0, #31
}
    1e18:	bd10      	pop	{r4, pc}
            HAL_SleepMs(intval_ms);
    1e1a:	2032      	movs	r0, #50	; 0x32
    1e1c:	4b08      	ldr	r3, [pc, #32]	; (1e40 <at_send_wait_reply+0x54>)
    1e1e:	4798      	blx	r3
        if (at_send_no_reply(data, datalen, false) < 0) {
    1e20:	2200      	movs	r2, #0
    1e22:	9902      	ldr	r1, [sp, #8]
    1e24:	0020      	movs	r0, r4
    1e26:	4b05      	ldr	r3, [pc, #20]	; (1e3c <at_send_wait_reply+0x50>)
    1e28:	4798      	blx	r3
    1e2a:	2800      	cmp	r0, #0
    1e2c:	dae9      	bge.n	1e02 <at_send_wait_reply+0x16>
            return -1;
    1e2e:	2001      	movs	r0, #1
    1e30:	4240      	negs	r0, r0
    1e32:	e7f1      	b.n	1e18 <at_send_wait_reply+0x2c>
        return -1;
    1e34:	2001      	movs	r0, #1
    1e36:	4240      	negs	r0, r0
    1e38:	e7ee      	b.n	1e18 <at_send_wait_reply+0x2c>
    1e3a:	46c0      	nop			; (mov r8, r8)
    1e3c:	00001849 	.word	0x00001849
    1e40:	00007d65 	.word	0x00007d65
    1e44:	20000380 	.word	0x20000380
    1e48:	00001a75 	.word	0x00001a75

00001e4c <AT_TCP_Establish>:

    return t_left;
}

uintptr_t AT_TCP_Establish(const char *host, uint16_t port)
{
    1e4c:	b530      	push	{r4, r5, lr}
    1e4e:	b085      	sub	sp, #20
    1e50:	0004      	movs	r4, r0
    1e52:	000d      	movs	r5, r1
    int fd = 0;
    int rc = 0;
    char resultip[16];

    HAL_Printf("establish tcp connection with server(host='%s', port=[%u])\n", host, port);
    1e54:	000a      	movs	r2, r1
    1e56:	0001      	movs	r1, r0
    1e58:	481d      	ldr	r0, [pc, #116]	; (1ed0 <AT_TCP_Establish+0x84>)
    1e5a:	4b1e      	ldr	r3, [pc, #120]	; (1ed4 <AT_TCP_Establish+0x88>)
    1e5c:	4798      	blx	r3
	HAL_SleepMs(50);
    1e5e:	2032      	movs	r0, #50	; 0x32
    1e60:	4b1d      	ldr	r3, [pc, #116]	; (1ed8 <AT_TCP_Establish+0x8c>)
    1e62:	4798      	blx	r3
    if ((rc = at_conn_getaddrinfo(host, resultip)) != 0) {
    1e64:	4669      	mov	r1, sp
    1e66:	0020      	movs	r0, r4
    1e68:	4b1c      	ldr	r3, [pc, #112]	; (1edc <AT_TCP_Establish+0x90>)
    1e6a:	4798      	blx	r3
    1e6c:	2800      	cmp	r0, #0
    1e6e:	d009      	beq.n	1e84 <AT_TCP_Establish+0x38>
        HAL_Printf("getaddrinfo error(%d), host = '%s', port = [%d]\n", rc, host, port);
    1e70:	002b      	movs	r3, r5
    1e72:	0022      	movs	r2, r4
    1e74:	0001      	movs	r1, r0
    1e76:	481a      	ldr	r0, [pc, #104]	; (1ee0 <AT_TCP_Establish+0x94>)
    1e78:	4c16      	ldr	r4, [pc, #88]	; (1ed4 <AT_TCP_Establish+0x88>)
    1e7a:	47a0      	blx	r4
        return -1;
    1e7c:	2001      	movs	r0, #1
    1e7e:	4240      	negs	r0, r0
    } else {
        HAL_Printf("success to establish tcp, fd=%d\n", rc);
    }

    return (uintptr_t)rc;
}
    1e80:	b005      	add	sp, #20
    1e82:	bd30      	pop	{r4, r5, pc}
    fd = at_conn_setup(NETCONN_TCP);
    1e84:	2001      	movs	r0, #1
    1e86:	4b17      	ldr	r3, [pc, #92]	; (1ee4 <AT_TCP_Establish+0x98>)
    1e88:	4798      	blx	r3
    1e8a:	1e04      	subs	r4, r0, #0
    if (fd < 0) {
    1e8c:	db0d      	blt.n	1eaa <AT_TCP_Establish+0x5e>
    if (at_conn_start(fd, resultip, port) == 0) {
    1e8e:	002a      	movs	r2, r5
    1e90:	4669      	mov	r1, sp
    1e92:	4b15      	ldr	r3, [pc, #84]	; (1ee8 <AT_TCP_Establish+0x9c>)
    1e94:	4798      	blx	r3
    1e96:	2800      	cmp	r0, #0
    1e98:	d10d      	bne.n	1eb6 <AT_TCP_Establish+0x6a>
    if (-1 == rc) {
    1e9a:	1c63      	adds	r3, r4, #1
    1e9c:	d011      	beq.n	1ec2 <AT_TCP_Establish+0x76>
        HAL_Printf("success to establish tcp, fd=%d\n", rc);
    1e9e:	0021      	movs	r1, r4
    1ea0:	4812      	ldr	r0, [pc, #72]	; (1eec <AT_TCP_Establish+0xa0>)
    1ea2:	4b0c      	ldr	r3, [pc, #48]	; (1ed4 <AT_TCP_Establish+0x88>)
    1ea4:	4798      	blx	r3
    return (uintptr_t)rc;
    1ea6:	0020      	movs	r0, r4
    1ea8:	e7ea      	b.n	1e80 <AT_TCP_Establish+0x34>
        HAL_Printf("create at conn error\n");
    1eaa:	4811      	ldr	r0, [pc, #68]	; (1ef0 <AT_TCP_Establish+0xa4>)
    1eac:	4b09      	ldr	r3, [pc, #36]	; (1ed4 <AT_TCP_Establish+0x88>)
    1eae:	4798      	blx	r3
        return -1;
    1eb0:	2001      	movs	r0, #1
    1eb2:	4240      	negs	r0, r0
    1eb4:	e7e4      	b.n	1e80 <AT_TCP_Establish+0x34>
        at_conn_close(fd);
    1eb6:	0020      	movs	r0, r4
    1eb8:	4b0e      	ldr	r3, [pc, #56]	; (1ef4 <AT_TCP_Establish+0xa8>)
    1eba:	4798      	blx	r3
        HAL_Printf("connect error\n");
    1ebc:	480e      	ldr	r0, [pc, #56]	; (1ef8 <AT_TCP_Establish+0xac>)
    1ebe:	4b05      	ldr	r3, [pc, #20]	; (1ed4 <AT_TCP_Establish+0x88>)
    1ec0:	4798      	blx	r3
        HAL_Printf("fail to establish tcp\n");
    1ec2:	480e      	ldr	r0, [pc, #56]	; (1efc <AT_TCP_Establish+0xb0>)
    1ec4:	4b03      	ldr	r3, [pc, #12]	; (1ed4 <AT_TCP_Establish+0x88>)
    1ec6:	4798      	blx	r3
    1ec8:	2401      	movs	r4, #1
    1eca:	4264      	negs	r4, r4
    1ecc:	e7eb      	b.n	1ea6 <AT_TCP_Establish+0x5a>
    1ece:	46c0      	nop			; (mov r8, r8)
    1ed0:	0000982c 	.word	0x0000982c
    1ed4:	00007d35 	.word	0x00007d35
    1ed8:	00007d65 	.word	0x00007d65
    1edc:	00001299 	.word	0x00001299
    1ee0:	00009868 	.word	0x00009868
    1ee4:	000012dd 	.word	0x000012dd
    1ee8:	000013b9 	.word	0x000013b9
    1eec:	000098dc 	.word	0x000098dc
    1ef0:	0000989c 	.word	0x0000989c
    1ef4:	00001489 	.word	0x00001489
    1ef8:	000098b4 	.word	0x000098b4
    1efc:	000098c4 	.word	0x000098c4

00001f00 <AT_TCP_Destroy>:

int AT_TCP_Destroy(uintptr_t fd)
{
    1f00:	b510      	push	{r4, lr}
    int rc;

    rc = at_conn_close((int) fd);
    1f02:	4b05      	ldr	r3, [pc, #20]	; (1f18 <AT_TCP_Destroy+0x18>)
    1f04:	4798      	blx	r3
    if (0 != rc) {
    1f06:	2800      	cmp	r0, #0
    1f08:	d100      	bne.n	1f0c <AT_TCP_Destroy+0xc>
        HAL_Printf("closesocket error\n");
        return -1;
    }

    return 0;
}
    1f0a:	bd10      	pop	{r4, pc}
        HAL_Printf("closesocket error\n");
    1f0c:	4803      	ldr	r0, [pc, #12]	; (1f1c <AT_TCP_Destroy+0x1c>)
    1f0e:	4b04      	ldr	r3, [pc, #16]	; (1f20 <AT_TCP_Destroy+0x20>)
    1f10:	4798      	blx	r3
        return -1;
    1f12:	2001      	movs	r0, #1
    1f14:	4240      	negs	r0, r0
    1f16:	e7f8      	b.n	1f0a <AT_TCP_Destroy+0xa>
    1f18:	00001489 	.word	0x00001489
    1f1c:	00009900 	.word	0x00009900
    1f20:	00007d35 	.word	0x00007d35

00001f24 <AT_TCP_Write>:

int32_t AT_TCP_Write(uintptr_t fd, const char *buf, uint32_t len, uint32_t timeout_ms)
{
    1f24:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f26:	46ce      	mov	lr, r9
    1f28:	4647      	mov	r7, r8
    1f2a:	b580      	push	{r7, lr}
    1f2c:	b083      	sub	sp, #12
    1f2e:	9001      	str	r0, [sp, #4]
    1f30:	4688      	mov	r8, r1
    1f32:	0014      	movs	r4, r2
    1f34:	001d      	movs	r5, r3
    return HAL_UptimeMs();
    1f36:	4b16      	ldr	r3, [pc, #88]	; (1f90 <AT_TCP_Write+0x6c>)
    1f38:	4798      	blx	r3
    int ret;
    uint32_t len_sent;
    uint64_t t_end;
    int net_err = 0;

    t_end = _get_time_ms() + timeout_ms;
    1f3a:	002e      	movs	r6, r5
    1f3c:	2700      	movs	r7, #0
    1f3e:	1836      	adds	r6, r6, r0
    1f40:	414f      	adcs	r7, r1
    len_sent = 0;
    1f42:	2500      	movs	r5, #0
    ret = 1; /* send one time if timeout_ms is value 0 */

    do {
        ret = at_conn_send(fd, buf + len_sent, len - len_sent);
    1f44:	4b13      	ldr	r3, [pc, #76]	; (1f94 <AT_TCP_Write+0x70>)
    1f46:	4699      	mov	r9, r3
    1f48:	1b62      	subs	r2, r4, r5
    1f4a:	4643      	mov	r3, r8
    1f4c:	1959      	adds	r1, r3, r5
    1f4e:	9801      	ldr	r0, [sp, #4]
    1f50:	47c8      	blx	r9
        if (ret > 0) {
    1f52:	2800      	cmp	r0, #0
    1f54:	dd0f      	ble.n	1f76 <AT_TCP_Write+0x52>
            len_sent += ret;
    1f56:	182d      	adds	r5, r5, r0
        } else {
            HAL_Printf("send fail, ret = send() = %d\n", ret);
            net_err = 1;
            break;
        }
    } while (!net_err && (len_sent < len) && (_time_left(t_end, _get_time_ms()) > 0));
    1f58:	42a5      	cmp	r5, r4
    1f5a:	d206      	bcs.n	1f6a <AT_TCP_Write+0x46>
    return HAL_UptimeMs();
    1f5c:	4b0c      	ldr	r3, [pc, #48]	; (1f90 <AT_TCP_Write+0x6c>)
    1f5e:	4798      	blx	r3
    if (t_end > t_now) {
    1f60:	428f      	cmp	r7, r1
    1f62:	d8f1      	bhi.n	1f48 <AT_TCP_Write+0x24>
    1f64:	d101      	bne.n	1f6a <AT_TCP_Write+0x46>
    1f66:	4286      	cmp	r6, r0
    1f68:	d8ee      	bhi.n	1f48 <AT_TCP_Write+0x24>

    if (net_err) {
        return -1;
    } else {
        return len_sent;
    1f6a:	0028      	movs	r0, r5
    }
}
    1f6c:	b003      	add	sp, #12
    1f6e:	bc0c      	pop	{r2, r3}
    1f70:	4690      	mov	r8, r2
    1f72:	4699      	mov	r9, r3
    1f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if (0 == ret) {
    1f76:	2800      	cmp	r0, #0
    1f78:	d103      	bne.n	1f82 <AT_TCP_Write+0x5e>
            HAL_Printf("No data be sent\n");
    1f7a:	4807      	ldr	r0, [pc, #28]	; (1f98 <AT_TCP_Write+0x74>)
    1f7c:	4b07      	ldr	r3, [pc, #28]	; (1f9c <AT_TCP_Write+0x78>)
    1f7e:	4798      	blx	r3
    1f80:	e7ea      	b.n	1f58 <AT_TCP_Write+0x34>
            HAL_Printf("send fail, ret = send() = %d\n", ret);
    1f82:	0001      	movs	r1, r0
    1f84:	4806      	ldr	r0, [pc, #24]	; (1fa0 <AT_TCP_Write+0x7c>)
    1f86:	4b05      	ldr	r3, [pc, #20]	; (1f9c <AT_TCP_Write+0x78>)
    1f88:	4798      	blx	r3
        return -1;
    1f8a:	2001      	movs	r0, #1
    1f8c:	4240      	negs	r0, r0
    1f8e:	e7ed      	b.n	1f6c <AT_TCP_Write+0x48>
    1f90:	00007d95 	.word	0x00007d95
    1f94:	000015a1 	.word	0x000015a1
    1f98:	00009914 	.word	0x00009914
    1f9c:	00007d35 	.word	0x00007d35
    1fa0:	00009928 	.word	0x00009928

00001fa4 <AT_TCP_Read>:

int32_t AT_TCP_Read(uintptr_t fd, char *buf, uint32_t len, uint32_t timeout_ms)
{
    1fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fa6:	46de      	mov	lr, fp
    1fa8:	4657      	mov	r7, sl
    1faa:	464e      	mov	r6, r9
    1fac:	4645      	mov	r5, r8
    1fae:	b5e0      	push	{r5, r6, r7, lr}
    1fb0:	b085      	sub	sp, #20
    1fb2:	9003      	str	r0, [sp, #12]
    1fb4:	468a      	mov	sl, r1
    1fb6:	4693      	mov	fp, r2
    1fb8:	001c      	movs	r4, r3
    return HAL_UptimeMs();
    1fba:	4b2e      	ldr	r3, [pc, #184]	; (2074 <STACK_SIZE+0x74>)
    1fbc:	4798      	blx	r3
    int ret, err_code;
    uint32_t len_recv;
    uint64_t t_end, t_left;
    int empty;

    t_end = _get_time_ms() + timeout_ms;
    1fbe:	0026      	movs	r6, r4
    1fc0:	2700      	movs	r7, #0
    1fc2:	1836      	adds	r6, r6, r0
    1fc4:	414f      	adcs	r7, r1
    len_recv = 0;
    1fc6:	2300      	movs	r3, #0
    1fc8:	9301      	str	r3, [sp, #4]
    return HAL_UptimeMs();
    1fca:	4b2a      	ldr	r3, [pc, #168]	; (2074 <STACK_SIZE+0x74>)
    1fcc:	4699      	mov	r9, r3
                ret = -1;
            }

#ifdef AT_PARSER_ENABLED
#if AT_SINGLE_TASK
            at_yield(NULL, 0, NULL, AT_UART_TIMEOUT_MS);
    1fce:	4d2a      	ldr	r5, [pc, #168]	; (2078 <STACK_SIZE+0x78>)
    1fd0:	e038      	b.n	2044 <STACK_SIZE+0x44>
    if (t_end > t_now) {
    1fd2:	428f      	cmp	r7, r1
    1fd4:	d101      	bne.n	1fda <AT_TCP_Read+0x36>
    1fd6:	4286      	cmp	r6, r0
    1fd8:	d837      	bhi.n	204a <STACK_SIZE+0x4a>
    err_code = 0;
    1fda:	2400      	movs	r4, #0
    1fdc:	e013      	b.n	2006 <STACK_SIZE+0x6>
            if (0 == t_left) {
                ret = 0;
                break;
            }

            HAL_SleepMs(10);
    1fde:	200a      	movs	r0, #10
    1fe0:	4b26      	ldr	r3, [pc, #152]	; (207c <STACK_SIZE+0x7c>)
    1fe2:	4798      	blx	r3
            empty = at_conn_recvbufempty(fd);
    1fe4:	0020      	movs	r0, r4
    1fe6:	47c0      	blx	r8
            if (0 == empty) {
    1fe8:	2800      	cmp	r0, #0
    1fea:	d018      	beq.n	201e <STACK_SIZE+0x1e>
            at_yield(NULL, 0, NULL, AT_UART_TIMEOUT_MS);
    1fec:	4b24      	ldr	r3, [pc, #144]	; (2080 <STACK_SIZE+0x80>)
    1fee:	2200      	movs	r2, #0
    1ff0:	2100      	movs	r1, #0
    1ff2:	2000      	movs	r0, #0
    1ff4:	47a8      	blx	r5
    return HAL_UptimeMs();
    1ff6:	4b1f      	ldr	r3, [pc, #124]	; (2074 <STACK_SIZE+0x74>)
    1ff8:	4798      	blx	r3
    if (t_end > t_now) {
    1ffa:	428f      	cmp	r7, r1
    1ffc:	d8ef      	bhi.n	1fde <AT_TCP_Read+0x3a>
    1ffe:	d101      	bne.n	2004 <STACK_SIZE+0x4>
    2000:	4286      	cmp	r6, r0
    2002:	d8ec      	bhi.n	1fde <AT_TCP_Read+0x3a>
    err_code = 0;
    2004:	2400      	movs	r4, #0
        }
    } while ((len_recv < len));

    /* priority to return data bytes if any data be received from TCP connection. */
    /* It will get error code on next calling */
    return (0 != len_recv) ? len_recv : err_code;
    2006:	0020      	movs	r0, r4
    2008:	9b01      	ldr	r3, [sp, #4]
    200a:	2b00      	cmp	r3, #0
    200c:	d000      	beq.n	2010 <STACK_SIZE+0x10>
    200e:	0018      	movs	r0, r3
}
    2010:	b005      	add	sp, #20
    2012:	bc3c      	pop	{r2, r3, r4, r5}
    2014:	4690      	mov	r8, r2
    2016:	4699      	mov	r9, r3
    2018:	46a2      	mov	sl, r4
    201a:	46ab      	mov	fp, r5
    201c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    201e:	0004      	movs	r4, r0
            ret = at_conn_recv(fd, buf + len_recv, len - len_recv);
    2020:	465a      	mov	r2, fp
    2022:	9b01      	ldr	r3, [sp, #4]
    2024:	1ad2      	subs	r2, r2, r3
    2026:	469c      	mov	ip, r3
    2028:	44d4      	add	ip, sl
    202a:	4661      	mov	r1, ip
    202c:	9802      	ldr	r0, [sp, #8]
    202e:	4b15      	ldr	r3, [pc, #84]	; (2084 <STACK_SIZE+0x84>)
    2030:	4798      	blx	r3
            if (ret > 0) {
    2032:	2800      	cmp	r0, #0
    2034:	dd0f      	ble.n	2056 <STACK_SIZE+0x56>
                len_recv += ret;
    2036:	9901      	ldr	r1, [sp, #4]
    2038:	468c      	mov	ip, r1
    203a:	4484      	add	ip, r0
    203c:	4663      	mov	r3, ip
    203e:	9301      	str	r3, [sp, #4]
    } while ((len_recv < len));
    2040:	45e3      	cmp	fp, ip
    2042:	d9e0      	bls.n	2006 <STACK_SIZE+0x6>
    return HAL_UptimeMs();
    2044:	47c8      	blx	r9
    if (t_end > t_now) {
    2046:	428f      	cmp	r7, r1
    2048:	d9c3      	bls.n	1fd2 <AT_TCP_Read+0x2e>
            empty = at_conn_recvbufempty(fd);
    204a:	9b03      	ldr	r3, [sp, #12]
    204c:	9302      	str	r3, [sp, #8]
    204e:	4a0e      	ldr	r2, [pc, #56]	; (2088 <STACK_SIZE+0x88>)
    2050:	4690      	mov	r8, r2
    2052:	001c      	movs	r4, r3
    2054:	e7c6      	b.n	1fe4 <AT_TCP_Read+0x40>
            } else if (0 == ret) {
    2056:	2800      	cmp	r0, #0
    2058:	d105      	bne.n	2066 <STACK_SIZE+0x66>
                HAL_Printf("connection is closed\n");
    205a:	480c      	ldr	r0, [pc, #48]	; (208c <STACK_SIZE+0x8c>)
    205c:	4b0c      	ldr	r3, [pc, #48]	; (2090 <STACK_SIZE+0x90>)
    205e:	4798      	blx	r3
                err_code = -1;
    2060:	2401      	movs	r4, #1
    2062:	4264      	negs	r4, r4
                break;
    2064:	e7cf      	b.n	2006 <STACK_SIZE+0x6>
                HAL_Printf("recv fail\n");
    2066:	480b      	ldr	r0, [pc, #44]	; (2094 <STACK_SIZE+0x94>)
    2068:	4b09      	ldr	r3, [pc, #36]	; (2090 <STACK_SIZE+0x90>)
    206a:	4798      	blx	r3
                err_code = -2;
    206c:	2402      	movs	r4, #2
    206e:	4264      	negs	r4, r4
                break;
    2070:	e7c9      	b.n	2006 <STACK_SIZE+0x6>
    2072:	46c0      	nop			; (mov r8, r8)
    2074:	00007d95 	.word	0x00007d95
    2078:	00001a75 	.word	0x00001a75
    207c:	00007d65 	.word	0x00007d65
    2080:	00000bb8 	.word	0x00000bb8
    2084:	00001615 	.word	0x00001615
    2088:	0000155d 	.word	0x0000155d
    208c:	00009948 	.word	0x00009948
    2090:	00007d35 	.word	0x00007d35
    2094:	00009960 	.word	0x00009960

00002098 <sim800_gprs_got_ip>:

    return 0;
}

static int sim800_gprs_got_ip(void)
{
    2098:	b5f0      	push	{r4, r5, r6, r7, lr}
    209a:	b099      	sub	sp, #100	; 0x64
    char rsp[SIM800_DEFAULT_RSP_LEN] = {0};
    209c:	2240      	movs	r2, #64	; 0x40
    209e:	2100      	movs	r1, #0
    20a0:	a808      	add	r0, sp, #32
    20a2:	4b3c      	ldr	r3, [pc, #240]	; (2194 <sim800_gprs_got_ip+0xfc>)
    20a4:	4798      	blx	r3
    atcmd_config_t atcmd_config = {NULL, AT_RECV_PREFIX, NULL};
    20a6:	2300      	movs	r3, #0
    20a8:	9305      	str	r3, [sp, #20]
    20aa:	4a3b      	ldr	r2, [pc, #236]	; (2198 <sim800_gprs_got_ip+0x100>)
    20ac:	9206      	str	r2, [sp, #24]
    20ae:	9307      	str	r3, [sp, #28]
    int retry = 0;
    20b0:	2400      	movs	r4, #0

    while (true) {
        retry++;
         /*start gprs stask*/
        at_send_wait_reply(AT_CMD_START_TASK, strlen(AT_CMD_START_TASK), true,
    20b2:	2500      	movs	r5, #0
    20b4:	4f39      	ldr	r7, [pc, #228]	; (219c <sim800_gprs_got_ip+0x104>)
        retry++;
    20b6:	3401      	adds	r4, #1
        at_send_wait_reply(AT_CMD_START_TASK, strlen(AT_CMD_START_TASK), true,
    20b8:	9503      	str	r5, [sp, #12]
    20ba:	2340      	movs	r3, #64	; 0x40
    20bc:	9302      	str	r3, [sp, #8]
    20be:	ae08      	add	r6, sp, #32
    20c0:	9601      	str	r6, [sp, #4]
    20c2:	9500      	str	r5, [sp, #0]
    20c4:	002b      	movs	r3, r5
    20c6:	2201      	movs	r2, #1
    20c8:	2107      	movs	r1, #7
    20ca:	4835      	ldr	r0, [pc, #212]	; (21a0 <sim800_gprs_got_ip+0x108>)
    20cc:	47b8      	blx	r7
                       NULL, 0, rsp, SIM800_DEFAULT_RSP_LEN, NULL);
        if (strstr(rsp, SIM800_AT_CMD_SUCCESS_RSP) == NULL) {
    20ce:	4935      	ldr	r1, [pc, #212]	; (21a4 <sim800_gprs_got_ip+0x10c>)
    20d0:	0030      	movs	r0, r6
    20d2:	4b35      	ldr	r3, [pc, #212]	; (21a8 <sim800_gprs_got_ip+0x110>)
    20d4:	4798      	blx	r3
    20d6:	2800      	cmp	r0, #0
    20d8:	d112      	bne.n	2100 <sim800_gprs_got_ip+0x68>
            HAL_SleepMs(50);
    20da:	3032      	adds	r0, #50	; 0x32
    20dc:	4b33      	ldr	r3, [pc, #204]	; (21ac <sim800_gprs_got_ip+0x114>)
    20de:	4798      	blx	r3

            if (retry > SIM800_RETRY_MAX) {
    20e0:	2c33      	cmp	r4, #51	; 0x33
    20e2:	d052      	beq.n	218a <sim800_gprs_got_ip+0xf2>
                return -1;
            }
            at_conn_hal_err( "cmd %s rsp %s retry %d at %s %d fail \r\n", AT_CMD_START_TASK,
    20e4:	23ee      	movs	r3, #238	; 0xee
    20e6:	005b      	lsls	r3, r3, #1
    20e8:	9301      	str	r3, [sp, #4]
    20ea:	4b31      	ldr	r3, [pc, #196]	; (21b0 <sim800_gprs_got_ip+0x118>)
    20ec:	9300      	str	r3, [sp, #0]
    20ee:	0023      	movs	r3, r4
    20f0:	aa08      	add	r2, sp, #32
    20f2:	492b      	ldr	r1, [pc, #172]	; (21a0 <sim800_gprs_got_ip+0x108>)
    20f4:	482f      	ldr	r0, [pc, #188]	; (21b4 <sim800_gprs_got_ip+0x11c>)
    20f6:	4e30      	ldr	r6, [pc, #192]	; (21b8 <sim800_gprs_got_ip+0x120>)
    20f8:	47b0      	blx	r6
    20fa:	4827      	ldr	r0, [pc, #156]	; (2198 <sim800_gprs_got_ip+0x100>)
    20fc:	47b0      	blx	r6
        retry++;
    20fe:	e7da      	b.n	20b6 <sim800_gprs_got_ip+0x1e>
            break;
        }
    }

    /*bring up wireless connectiong with gprs*/
    memset(rsp, 0, SIM800_DEFAULT_RSP_LEN);
    2100:	ac08      	add	r4, sp, #32
    2102:	2240      	movs	r2, #64	; 0x40
    2104:	2100      	movs	r1, #0
    2106:	0020      	movs	r0, r4
    2108:	4b22      	ldr	r3, [pc, #136]	; (2194 <sim800_gprs_got_ip+0xfc>)
    210a:	4798      	blx	r3
    at_send_wait_reply(AT_CMD_BRING_UP_GPRS_CONNECT, strlen(AT_CMD_BRING_UP_GPRS_CONNECT), true,
    210c:	2300      	movs	r3, #0
    210e:	9303      	str	r3, [sp, #12]
    2110:	2240      	movs	r2, #64	; 0x40
    2112:	9202      	str	r2, [sp, #8]
    2114:	9401      	str	r4, [sp, #4]
    2116:	9300      	str	r3, [sp, #0]
    2118:	3a3f      	subs	r2, #63	; 0x3f
    211a:	2108      	movs	r1, #8
    211c:	4827      	ldr	r0, [pc, #156]	; (21bc <sim800_gprs_got_ip+0x124>)
    211e:	4d1f      	ldr	r5, [pc, #124]	; (219c <sim800_gprs_got_ip+0x104>)
    2120:	47a8      	blx	r5
                       NULL, 0, rsp, SIM800_DEFAULT_RSP_LEN, NULL);
    if (strstr(rsp, SIM800_AT_CMD_SUCCESS_RSP) == NULL) {
    2122:	4920      	ldr	r1, [pc, #128]	; (21a4 <sim800_gprs_got_ip+0x10c>)
    2124:	0020      	movs	r0, r4
    2126:	4b20      	ldr	r3, [pc, #128]	; (21a8 <sim800_gprs_got_ip+0x110>)
    2128:	4798      	blx	r3
    212a:	2800      	cmp	r0, #0
    212c:	d023      	beq.n	2176 <sim800_gprs_got_ip+0xde>
        at_conn_hal_err( "%s %d failed rsp %s\r\n", __func__, __LINE__, rsp);
    }

    /*try to got ip*/
    memset(rsp, 0, SIM800_DEFAULT_RSP_LEN);
    212e:	ac08      	add	r4, sp, #32
    2130:	2240      	movs	r2, #64	; 0x40
    2132:	2100      	movs	r1, #0
    2134:	0020      	movs	r0, r4
    2136:	4b17      	ldr	r3, [pc, #92]	; (2194 <sim800_gprs_got_ip+0xfc>)
    2138:	4798      	blx	r3

    at_send_wait_reply(AT_CMD_GOT_LOCAL_IP, strlen(AT_CMD_GOT_LOCAL_IP), true, NULL, 0,
    213a:	ab05      	add	r3, sp, #20
    213c:	9303      	str	r3, [sp, #12]
    213e:	2340      	movs	r3, #64	; 0x40
    2140:	9302      	str	r3, [sp, #8]
    2142:	9401      	str	r4, [sp, #4]
    2144:	2300      	movs	r3, #0
    2146:	9300      	str	r3, [sp, #0]
    2148:	2201      	movs	r2, #1
    214a:	2108      	movs	r1, #8
    214c:	481c      	ldr	r0, [pc, #112]	; (21c0 <sim800_gprs_got_ip+0x128>)
    214e:	4d13      	ldr	r5, [pc, #76]	; (219c <sim800_gprs_got_ip+0x104>)
    2150:	47a8      	blx	r5
                       rsp, SIM800_DEFAULT_RSP_LEN, &atcmd_config);
    if (strstr(rsp, SIM800_AT_CMD_FAIL_RSP) != NULL) {
    2152:	491c      	ldr	r1, [pc, #112]	; (21c4 <sim800_gprs_got_ip+0x12c>)
    2154:	0020      	movs	r0, r4
    2156:	4b14      	ldr	r3, [pc, #80]	; (21a8 <sim800_gprs_got_ip+0x110>)
    2158:	4798      	blx	r3
    215a:	2800      	cmp	r0, #0
    215c:	d018      	beq.n	2190 <sim800_gprs_got_ip+0xf8>
        at_conn_hal_err( "%s %d failed rsp %s\r\n", __func__, __LINE__, rsp);
    215e:	ab08      	add	r3, sp, #32
    2160:	22f8      	movs	r2, #248	; 0xf8
    2162:	0052      	lsls	r2, r2, #1
    2164:	4912      	ldr	r1, [pc, #72]	; (21b0 <sim800_gprs_got_ip+0x118>)
    2166:	4818      	ldr	r0, [pc, #96]	; (21c8 <sim800_gprs_got_ip+0x130>)
    2168:	4c13      	ldr	r4, [pc, #76]	; (21b8 <sim800_gprs_got_ip+0x120>)
    216a:	47a0      	blx	r4
    216c:	480a      	ldr	r0, [pc, #40]	; (2198 <sim800_gprs_got_ip+0x100>)
    216e:	47a0      	blx	r4
    }

    return 0;
    2170:	2000      	movs	r0, #0
}
    2172:	b019      	add	sp, #100	; 0x64
    2174:	bdf0      	pop	{r4, r5, r6, r7, pc}
        at_conn_hal_err( "%s %d failed rsp %s\r\n", __func__, __LINE__, rsp);
    2176:	ab08      	add	r3, sp, #32
    2178:	22e8      	movs	r2, #232	; 0xe8
    217a:	32ff      	adds	r2, #255	; 0xff
    217c:	490c      	ldr	r1, [pc, #48]	; (21b0 <sim800_gprs_got_ip+0x118>)
    217e:	4812      	ldr	r0, [pc, #72]	; (21c8 <sim800_gprs_got_ip+0x130>)
    2180:	4c0d      	ldr	r4, [pc, #52]	; (21b8 <sim800_gprs_got_ip+0x120>)
    2182:	47a0      	blx	r4
    2184:	4804      	ldr	r0, [pc, #16]	; (2198 <sim800_gprs_got_ip+0x100>)
    2186:	47a0      	blx	r4
    2188:	e7d1      	b.n	212e <sim800_gprs_got_ip+0x96>
                return -1;
    218a:	2001      	movs	r0, #1
    218c:	4240      	negs	r0, r0
    218e:	e7f0      	b.n	2172 <sim800_gprs_got_ip+0xda>
    return 0;
    2190:	2000      	movs	r0, #0
    2192:	e7ee      	b.n	2172 <sim800_gprs_got_ip+0xda>
    2194:	000085c9 	.word	0x000085c9
    2198:	00009cb4 	.word	0x00009cb4
    219c:	00001ded 	.word	0x00001ded
    21a0:	00009ab4 	.word	0x00009ab4
    21a4:	00009abc 	.word	0x00009abc
    21a8:	000089eb 	.word	0x000089eb
    21ac:	00007d65 	.word	0x00007d65
    21b0:	0000996c 	.word	0x0000996c
    21b4:	00009ac0 	.word	0x00009ac0
    21b8:	00007d35 	.word	0x00007d35
    21bc:	00009ae8 	.word	0x00009ae8
    21c0:	00009b0c 	.word	0x00009b0c
    21c4:	00009b18 	.word	0x00009b18
    21c8:	00009af4 	.word	0x00009af4

000021cc <sim800_gprs_module_socket_data_handle>:
{
    21cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ce:	46c6      	mov	lr, r8
    21d0:	b500      	push	{lr}
    21d2:	b090      	sub	sp, #64	; 0x40
    unsigned char uclinkid = 0;
    21d4:	2437      	movs	r4, #55	; 0x37
    21d6:	ab02      	add	r3, sp, #8
    21d8:	469c      	mov	ip, r3
    21da:	4464      	add	r4, ip
    21dc:	2300      	movs	r3, #0
    21de:	7023      	strb	r3, [r4, #0]
    unsigned char unusesymbol = 0;
    21e0:	2236      	movs	r2, #54	; 0x36
    21e2:	4462      	add	r2, ip
    21e4:	7013      	strb	r3, [r2, #0]
    unsigned char datalen[6] = {0};
    21e6:	2206      	movs	r2, #6
    21e8:	2100      	movs	r1, #0
    21ea:	a80e      	add	r0, sp, #56	; 0x38
    21ec:	4d75      	ldr	r5, [pc, #468]	; (23c4 <sim800_gprs_module_socket_data_handle+0x1f8>)
    21ee:	47a8      	blx	r5
    unsigned char ipaddr[16] = {0};
    21f0:	2210      	movs	r2, #16
    21f2:	2100      	movs	r1, #0
    21f4:	a80a      	add	r0, sp, #40	; 0x28
    21f6:	47a8      	blx	r5
    unsigned char port[6] = {0};
    21f8:	2206      	movs	r2, #6
    21fa:	2100      	movs	r1, #0
    21fc:	a808      	add	r0, sp, #32
    21fe:	47a8      	blx	r5
    at_read((char *)&uclinkid, 1);
    2200:	2101      	movs	r1, #1
    2202:	0020      	movs	r0, r4
    2204:	4b70      	ldr	r3, [pc, #448]	; (23c8 <sim800_gprs_module_socket_data_handle+0x1fc>)
    2206:	4798      	blx	r3
    linkid = uclinkid - '0';
    2208:	7826      	ldrb	r6, [r4, #0]
    220a:	3e30      	subs	r6, #48	; 0x30
    if (linkid < 0 || linkid >=  SIM800_MAX_LINK_NUM) {
    220c:	2e05      	cmp	r6, #5
    220e:	d816      	bhi.n	223e <sim800_gprs_module_socket_data_handle+0x72>
    at_read((char *)&unusesymbol, 1);
    2210:	2101      	movs	r1, #1
    2212:	2036      	movs	r0, #54	; 0x36
    2214:	ab02      	add	r3, sp, #8
    2216:	469c      	mov	ip, r3
    2218:	4460      	add	r0, ip
    221a:	4b6b      	ldr	r3, [pc, #428]	; (23c8 <sim800_gprs_module_socket_data_handle+0x1fc>)
    221c:	4798      	blx	r3
    i = 0;
    221e:	2400      	movs	r4, #0
        at_read((char *)&datalen[i], 1);
    2220:	ad0e      	add	r5, sp, #56	; 0x38
    2222:	4f69      	ldr	r7, [pc, #420]	; (23c8 <sim800_gprs_module_socket_data_handle+0x1fc>)
    2224:	1928      	adds	r0, r5, r4
    2226:	2101      	movs	r1, #1
    2228:	47b8      	blx	r7
        if (datalen[i] == ',') {
    222a:	5d63      	ldrb	r3, [r4, r5]
    222c:	2b2c      	cmp	r3, #44	; 0x2c
    222e:	d00d      	beq.n	224c <sim800_gprs_module_socket_data_handle+0x80>
        if (i >= sizeof(datalen)) {
    2230:	2c06      	cmp	r4, #6
    2232:	d020      	beq.n	2276 <sim800_gprs_module_socket_data_handle+0xaa>
        if (datalen[i] > '9' || datalen[i] < '0') {
    2234:	3b30      	subs	r3, #48	; 0x30
    2236:	2b09      	cmp	r3, #9
    2238:	d827      	bhi.n	228a <sim800_gprs_module_socket_data_handle+0xbe>
        i++;
    223a:	3401      	adds	r4, #1
        at_read((char *)&datalen[i], 1);
    223c:	e7f2      	b.n	2224 <sim800_gprs_module_socket_data_handle+0x58>
        at_conn_hal_err( "Invalid link id 0x%02x !!!\r\n", linkid);
    223e:	0031      	movs	r1, r6
    2240:	4862      	ldr	r0, [pc, #392]	; (23cc <sim800_gprs_module_socket_data_handle+0x200>)
    2242:	4c63      	ldr	r4, [pc, #396]	; (23d0 <sim800_gprs_module_socket_data_handle+0x204>)
    2244:	47a0      	blx	r4
    2246:	4863      	ldr	r0, [pc, #396]	; (23d4 <sim800_gprs_module_socket_data_handle+0x208>)
    2248:	47a0      	blx	r4
        return;
    224a:	e01a      	b.n	2282 <sim800_gprs_module_socket_data_handle+0xb6>
    for (j = 0; j < i; j++) {
    224c:	2700      	movs	r7, #0
    224e:	2c00      	cmp	r4, #0
    2250:	dd0c      	ble.n	226c <sim800_gprs_module_socket_data_handle+0xa0>
    2252:	2700      	movs	r7, #0
    2254:	2100      	movs	r1, #0
        len = len * 10 + datalen[j] - '0';
    2256:	aa0e      	add	r2, sp, #56	; 0x38
    2258:	00bb      	lsls	r3, r7, #2
    225a:	19db      	adds	r3, r3, r7
    225c:	005b      	lsls	r3, r3, #1
    225e:	5c88      	ldrb	r0, [r1, r2]
    2260:	181b      	adds	r3, r3, r0
    2262:	3b30      	subs	r3, #48	; 0x30
    2264:	001f      	movs	r7, r3
    for (j = 0; j < i; j++) {
    2266:	3101      	adds	r1, #1
    2268:	428c      	cmp	r4, r1
    226a:	d1f5      	bne.n	2258 <sim800_gprs_module_socket_data_handle+0x8c>
    226c:	ac0a      	add	r4, sp, #40	; 0x28
    226e:	2500      	movs	r5, #0
        at_read((char *)&ipaddr[i], 1);
    2270:	4b55      	ldr	r3, [pc, #340]	; (23c8 <sim800_gprs_module_socket_data_handle+0x1fc>)
    2272:	4698      	mov	r8, r3
    2274:	e019      	b.n	22aa <sim800_gprs_module_socket_data_handle+0xde>
            at_conn_hal_err( "Too long length of data.datalen is %s \r\n", datalen);
    2276:	a90e      	add	r1, sp, #56	; 0x38
    2278:	4857      	ldr	r0, [pc, #348]	; (23d8 <sim800_gprs_module_socket_data_handle+0x20c>)
    227a:	4c55      	ldr	r4, [pc, #340]	; (23d0 <sim800_gprs_module_socket_data_handle+0x204>)
    227c:	47a0      	blx	r4
    227e:	4855      	ldr	r0, [pc, #340]	; (23d4 <sim800_gprs_module_socket_data_handle+0x208>)
    2280:	47a0      	blx	r4
}
    2282:	b010      	add	sp, #64	; 0x40
    2284:	bc04      	pop	{r2}
    2286:	4690      	mov	r8, r2
    2288:	bdf0      	pop	{r4, r5, r6, r7, pc}
            at_conn_hal_err( "Invalid len string!!!, datalen is %s \r\n", datalen);
    228a:	a90e      	add	r1, sp, #56	; 0x38
    228c:	4853      	ldr	r0, [pc, #332]	; (23dc <sim800_gprs_module_socket_data_handle+0x210>)
    228e:	4c50      	ldr	r4, [pc, #320]	; (23d0 <sim800_gprs_module_socket_data_handle+0x204>)
    2290:	47a0      	blx	r4
    2292:	4850      	ldr	r0, [pc, #320]	; (23d4 <sim800_gprs_module_socket_data_handle+0x208>)
    2294:	47a0      	blx	r4
            return;
    2296:	e7f4      	b.n	2282 <sim800_gprs_module_socket_data_handle+0xb6>
            at_conn_hal_err( "Too long length of ipaddr.ipaddr is %s \r\n", ipaddr);
    2298:	a90a      	add	r1, sp, #40	; 0x28
    229a:	4851      	ldr	r0, [pc, #324]	; (23e0 <sim800_gprs_module_socket_data_handle+0x214>)
    229c:	4c4c      	ldr	r4, [pc, #304]	; (23d0 <sim800_gprs_module_socket_data_handle+0x204>)
    229e:	47a0      	blx	r4
    22a0:	484c      	ldr	r0, [pc, #304]	; (23d4 <sim800_gprs_module_socket_data_handle+0x208>)
    22a2:	47a0      	blx	r4
            return;
    22a4:	e7ed      	b.n	2282 <sim800_gprs_module_socket_data_handle+0xb6>
        i++;
    22a6:	3501      	adds	r5, #1
    22a8:	3401      	adds	r4, #1
        at_read((char *)&ipaddr[i], 1);
    22aa:	2101      	movs	r1, #1
    22ac:	0020      	movs	r0, r4
    22ae:	47c0      	blx	r8
        if (ipaddr[i] == ':') {
    22b0:	7823      	ldrb	r3, [r4, #0]
    22b2:	2b3a      	cmp	r3, #58	; 0x3a
    22b4:	d00e      	beq.n	22d4 <sim800_gprs_module_socket_data_handle+0x108>
        if (i >= sizeof(ipaddr)) {
    22b6:	2d10      	cmp	r5, #16
    22b8:	d0ee      	beq.n	2298 <sim800_gprs_module_socket_data_handle+0xcc>
        if (!((ipaddr[i] <= '9' && ipaddr[i] >= '0') || ipaddr[i] == '.')) {
    22ba:	001a      	movs	r2, r3
    22bc:	3a30      	subs	r2, #48	; 0x30
    22be:	2a09      	cmp	r2, #9
    22c0:	d9f1      	bls.n	22a6 <sim800_gprs_module_socket_data_handle+0xda>
    22c2:	2b2e      	cmp	r3, #46	; 0x2e
    22c4:	d0ef      	beq.n	22a6 <sim800_gprs_module_socket_data_handle+0xda>
            at_conn_hal_err( "Invalid ipaddr string!!!, ipaddr is %s \r\n", ipaddr);
    22c6:	a90a      	add	r1, sp, #40	; 0x28
    22c8:	4846      	ldr	r0, [pc, #280]	; (23e4 <sim800_gprs_module_socket_data_handle+0x218>)
    22ca:	4c41      	ldr	r4, [pc, #260]	; (23d0 <sim800_gprs_module_socket_data_handle+0x204>)
    22cc:	47a0      	blx	r4
    22ce:	4841      	ldr	r0, [pc, #260]	; (23d4 <sim800_gprs_module_socket_data_handle+0x208>)
    22d0:	47a0      	blx	r4
            return;
    22d2:	e7d6      	b.n	2282 <sim800_gprs_module_socket_data_handle+0xb6>
    ipaddr[i] = 0;
    22d4:	2200      	movs	r2, #0
    22d6:	ab0a      	add	r3, sp, #40	; 0x28
    22d8:	555a      	strb	r2, [r3, r5]
    i = 0;
    22da:	2400      	movs	r4, #0
        at_read((char *)&port[i], 1);
    22dc:	ad08      	add	r5, sp, #32
    22de:	4b3a      	ldr	r3, [pc, #232]	; (23c8 <sim800_gprs_module_socket_data_handle+0x1fc>)
    22e0:	4698      	mov	r8, r3
    22e2:	1928      	adds	r0, r5, r4
    22e4:	2101      	movs	r1, #1
    22e6:	47c0      	blx	r8
        if (port[i] == '\r') {
    22e8:	5d63      	ldrb	r3, [r4, r5]
    22ea:	2b0d      	cmp	r3, #13
    22ec:	d014      	beq.n	2318 <sim800_gprs_module_socket_data_handle+0x14c>
        if (i >= sizeof(port)) {
    22ee:	2c06      	cmp	r4, #6
    22f0:	d004      	beq.n	22fc <sim800_gprs_module_socket_data_handle+0x130>
        if (port[i] > '9' || port[i] < '0') {
    22f2:	3b30      	subs	r3, #48	; 0x30
    22f4:	2b09      	cmp	r3, #9
    22f6:	d808      	bhi.n	230a <sim800_gprs_module_socket_data_handle+0x13e>
        i++;
    22f8:	3401      	adds	r4, #1
        at_read((char *)&port[i], 1);
    22fa:	e7f2      	b.n	22e2 <sim800_gprs_module_socket_data_handle+0x116>
            at_conn_hal_err( "Too long length of remote port.port is %s \r\n", port);
    22fc:	a908      	add	r1, sp, #32
    22fe:	483a      	ldr	r0, [pc, #232]	; (23e8 <sim800_gprs_module_socket_data_handle+0x21c>)
    2300:	4c33      	ldr	r4, [pc, #204]	; (23d0 <sim800_gprs_module_socket_data_handle+0x204>)
    2302:	47a0      	blx	r4
    2304:	4833      	ldr	r0, [pc, #204]	; (23d4 <sim800_gprs_module_socket_data_handle+0x208>)
    2306:	47a0      	blx	r4
            return;
    2308:	e7bb      	b.n	2282 <sim800_gprs_module_socket_data_handle+0xb6>
            at_conn_hal_err( "Invalid ipaddr string!!!, port is %s \r\n", port);
    230a:	a908      	add	r1, sp, #32
    230c:	4837      	ldr	r0, [pc, #220]	; (23ec <sim800_gprs_module_socket_data_handle+0x220>)
    230e:	4c30      	ldr	r4, [pc, #192]	; (23d0 <sim800_gprs_module_socket_data_handle+0x204>)
    2310:	47a0      	blx	r4
    2312:	4830      	ldr	r0, [pc, #192]	; (23d4 <sim800_gprs_module_socket_data_handle+0x208>)
    2314:	47a0      	blx	r4
            return;
    2316:	e7b4      	b.n	2282 <sim800_gprs_module_socket_data_handle+0xb6>
    port[i] = 0;
    2318:	2200      	movs	r2, #0
    231a:	ab08      	add	r3, sp, #32
    231c:	551a      	strb	r2, [r3, r4]
    at_read((char *)&unusesymbol, 1);
    231e:	2101      	movs	r1, #1
    2320:	2036      	movs	r0, #54	; 0x36
    2322:	ab02      	add	r3, sp, #8
    2324:	469c      	mov	ip, r3
    2326:	4460      	add	r0, ip
    2328:	4b27      	ldr	r3, [pc, #156]	; (23c8 <sim800_gprs_module_socket_data_handle+0x1fc>)
    232a:	4798      	blx	r3
    for (j = 0; j < i; j++) {
    232c:	2c00      	cmp	r4, #0
    232e:	dd31      	ble.n	2394 <sim800_gprs_module_socket_data_handle+0x1c8>
    2330:	2500      	movs	r5, #0
    2332:	2100      	movs	r1, #0
        remoteport = remoteport * 10 + port[j] - '0';
    2334:	aa08      	add	r2, sp, #32
    2336:	00ab      	lsls	r3, r5, #2
    2338:	195b      	adds	r3, r3, r5
    233a:	005b      	lsls	r3, r3, #1
    233c:	5c88      	ldrb	r0, [r1, r2]
    233e:	181b      	adds	r3, r3, r0
    2340:	3b30      	subs	r3, #48	; 0x30
    2342:	001d      	movs	r5, r3
    for (j = 0; j < i; j++) {
    2344:	3101      	adds	r1, #1
    2346:	428c      	cmp	r4, r1
    2348:	d1f5      	bne.n	2336 <sim800_gprs_module_socket_data_handle+0x16a>
    recvdata = (char *)HAL_Malloc(len + 1);
    234a:	1c7b      	adds	r3, r7, #1
    234c:	9301      	str	r3, [sp, #4]
    234e:	0018      	movs	r0, r3
    2350:	4b27      	ldr	r3, [pc, #156]	; (23f0 <sim800_gprs_module_socket_data_handle+0x224>)
    2352:	4798      	blx	r3
    2354:	1e04      	subs	r4, r0, #0
    if (!recvdata) {
    2356:	d01f      	beq.n	2398 <sim800_gprs_module_socket_data_handle+0x1cc>
    memset(recvdata, 0, len + 1);
    2358:	9a01      	ldr	r2, [sp, #4]
    235a:	2100      	movs	r1, #0
    235c:	4b19      	ldr	r3, [pc, #100]	; (23c4 <sim800_gprs_module_socket_data_handle+0x1f8>)
    235e:	4798      	blx	r3
    at_read(recvdata, len);
    2360:	0039      	movs	r1, r7
    2362:	0020      	movs	r0, r4
    2364:	4b18      	ldr	r3, [pc, #96]	; (23c8 <sim800_gprs_module_socket_data_handle+0x1fc>)
    2366:	4798      	blx	r3
    if (g_link[linkid].fd >= 0) {
    2368:	0073      	lsls	r3, r6, #1
    236a:	199b      	adds	r3, r3, r6
    236c:	009b      	lsls	r3, r3, #2
    236e:	4a21      	ldr	r2, [pc, #132]	; (23f4 <sim800_gprs_module_socket_data_handle+0x228>)
    2370:	589b      	ldr	r3, [r3, r2]
    2372:	2b00      	cmp	r3, #0
    2374:	db0a      	blt.n	238c <sim800_gprs_module_socket_data_handle+0x1c0>
        param.fd = g_link[linkid].fd;
    2376:	a803      	add	r0, sp, #12
    2378:	9303      	str	r3, [sp, #12]
        param.data = recvdata;
    237a:	6044      	str	r4, [r0, #4]
        param.datalen = len;
    237c:	6087      	str	r7, [r0, #8]
        param.remote_ip = (char *)ipaddr;
    237e:	ab0a      	add	r3, sp, #40	; 0x28
    2380:	60c3      	str	r3, [r0, #12]
        param.remote_port = remoteport;
    2382:	8205      	strh	r5, [r0, #16]
        if (IOT_ATM_Input(&param) != 0) {
    2384:	4b1c      	ldr	r3, [pc, #112]	; (23f8 <sim800_gprs_module_socket_data_handle+0x22c>)
    2386:	4798      	blx	r3
    2388:	2800      	cmp	r0, #0
    238a:	d10e      	bne.n	23aa <sim800_gprs_module_socket_data_handle+0x1de>
    HAL_Free(recvdata);
    238c:	0020      	movs	r0, r4
    238e:	4b1b      	ldr	r3, [pc, #108]	; (23fc <sim800_gprs_module_socket_data_handle+0x230>)
    2390:	4798      	blx	r3
    return;
    2392:	e776      	b.n	2282 <sim800_gprs_module_socket_data_handle+0xb6>
    int           remoteport = 0;
    2394:	2500      	movs	r5, #0
    2396:	e7d8      	b.n	234a <sim800_gprs_module_socket_data_handle+0x17e>
        at_conn_hal_err( "Error: %s %d out of memory.", __func__, __LINE__);
    2398:	22ec      	movs	r2, #236	; 0xec
    239a:	4919      	ldr	r1, [pc, #100]	; (2400 <sim800_gprs_module_socket_data_handle+0x234>)
    239c:	3114      	adds	r1, #20
    239e:	4819      	ldr	r0, [pc, #100]	; (2404 <sim800_gprs_module_socket_data_handle+0x238>)
    23a0:	4c0b      	ldr	r4, [pc, #44]	; (23d0 <sim800_gprs_module_socket_data_handle+0x204>)
    23a2:	47a0      	blx	r4
    23a4:	480b      	ldr	r0, [pc, #44]	; (23d4 <sim800_gprs_module_socket_data_handle+0x208>)
    23a6:	47a0      	blx	r4
        return;
    23a8:	e76b      	b.n	2282 <sim800_gprs_module_socket_data_handle+0xb6>
            at_conn_hal_err( " %s socket %d get data len %d fail to post to at_conn, drop it\n",
    23aa:	230c      	movs	r3, #12
    23ac:	435e      	muls	r6, r3
    23ae:	003b      	movs	r3, r7
    23b0:	4a10      	ldr	r2, [pc, #64]	; (23f4 <sim800_gprs_module_socket_data_handle+0x228>)
    23b2:	58b2      	ldr	r2, [r6, r2]
    23b4:	4912      	ldr	r1, [pc, #72]	; (2400 <sim800_gprs_module_socket_data_handle+0x234>)
    23b6:	3114      	adds	r1, #20
    23b8:	4813      	ldr	r0, [pc, #76]	; (2408 <sim800_gprs_module_socket_data_handle+0x23c>)
    23ba:	4d05      	ldr	r5, [pc, #20]	; (23d0 <sim800_gprs_module_socket_data_handle+0x204>)
    23bc:	47a8      	blx	r5
    23be:	4805      	ldr	r0, [pc, #20]	; (23d4 <sim800_gprs_module_socket_data_handle+0x208>)
    23c0:	47a8      	blx	r5
    23c2:	e7e3      	b.n	238c <sim800_gprs_module_socket_data_handle+0x1c0>
    23c4:	000085c9 	.word	0x000085c9
    23c8:	00001905 	.word	0x00001905
    23cc:	00009b20 	.word	0x00009b20
    23d0:	00007d35 	.word	0x00007d35
    23d4:	00009cb4 	.word	0x00009cb4
    23d8:	00009b40 	.word	0x00009b40
    23dc:	00009b6c 	.word	0x00009b6c
    23e0:	00009b94 	.word	0x00009b94
    23e4:	00009bc0 	.word	0x00009bc0
    23e8:	00009bec 	.word	0x00009bec
    23ec:	00009c1c 	.word	0x00009c1c
    23f0:	00007d1d 	.word	0x00007d1d
    23f4:	2000065c 	.word	0x2000065c
    23f8:	00000e45 	.word	0x00000e45
    23fc:	00007c5d 	.word	0x00007c5d
    2400:	0000996c 	.word	0x0000996c
    2404:	00009c44 	.word	0x00009c44
    2408:	00009c60 	.word	0x00009c60

0000240c <sim800_gprs_domain_rsp_callback>:
{
    240c:	b510      	push	{r4, lr}
    if (NULL == rspinfo || rsplen == 0) {
    240e:	2900      	cmp	r1, #0
    2410:	d001      	beq.n	2416 <sim800_gprs_domain_rsp_callback+0xa>
    2412:	2a00      	cmp	r2, #0
    2414:	d107      	bne.n	2426 <sim800_gprs_domain_rsp_callback+0x1a>
        at_conn_hal_err( "invalid input at %s \r\n", __func__);
    2416:	4908      	ldr	r1, [pc, #32]	; (2438 <sim800_gprs_domain_rsp_callback+0x2c>)
    2418:	313c      	adds	r1, #60	; 0x3c
    241a:	4808      	ldr	r0, [pc, #32]	; (243c <sim800_gprs_domain_rsp_callback+0x30>)
    241c:	4c08      	ldr	r4, [pc, #32]	; (2440 <sim800_gprs_domain_rsp_callback+0x34>)
    241e:	47a0      	blx	r4
    2420:	4808      	ldr	r0, [pc, #32]	; (2444 <sim800_gprs_domain_rsp_callback+0x38>)
    2422:	47a0      	blx	r4
}
    2424:	bd10      	pop	{r4, pc}
    memcpy(g_pcdomain_rsp, rspinfo, rsplen);
    2426:	4808      	ldr	r0, [pc, #32]	; (2448 <sim800_gprs_domain_rsp_callback+0x3c>)
    2428:	3048      	adds	r0, #72	; 0x48
    242a:	4b08      	ldr	r3, [pc, #32]	; (244c <sim800_gprs_domain_rsp_callback+0x40>)
    242c:	4798      	blx	r3
    g_domain_mark = 1;
    242e:	2201      	movs	r2, #1
    2430:	4b07      	ldr	r3, [pc, #28]	; (2450 <sim800_gprs_domain_rsp_callback+0x44>)
    2432:	649a      	str	r2, [r3, #72]	; 0x48
    return;
    2434:	e7f6      	b.n	2424 <sim800_gprs_domain_rsp_callback+0x18>
    2436:	46c0      	nop			; (mov r8, r8)
    2438:	0000996c 	.word	0x0000996c
    243c:	00009ca0 	.word	0x00009ca0
    2440:	00007d35 	.word	0x00007d35
    2444:	00009cb4 	.word	0x00009cb4
    2448:	2000065c 	.word	0x2000065c
    244c:	000085b7 	.word	0x000085b7
    2450:	2000085c 	.word	0x2000085c

00002454 <sim800_gprs_ip_init>:
{
    2454:	b5f0      	push	{r4, r5, r6, r7, lr}
    2456:	b0a7      	sub	sp, #156	; 0x9c
    char cmd[SIM800_DEFAULT_CMD_LEN] = {0};
    2458:	2240      	movs	r2, #64	; 0x40
    245a:	2100      	movs	r1, #0
    245c:	a816      	add	r0, sp, #88	; 0x58
    245e:	4c65      	ldr	r4, [pc, #404]	; (25f4 <sim800_gprs_ip_init+0x1a0>)
    2460:	47a0      	blx	r4
    char rsp[SIM800_DEFAULT_RSP_LEN] = {0};
    2462:	2240      	movs	r2, #64	; 0x40
    2464:	2100      	movs	r1, #0
    2466:	a806      	add	r0, sp, #24
    2468:	47a0      	blx	r4
    int retry = 0;
    246a:	2400      	movs	r4, #0
        at_send_wait_reply(AT_CMD_GPRS_PDP_DEACTIVE, strlen(AT_CMD_GPRS_PDP_DEACTIVE), true,
    246c:	4f62      	ldr	r7, [pc, #392]	; (25f8 <sim800_gprs_ip_init+0x1a4>)
            at_conn_hal_err( "%s %d failed rsp %s retry count %d\r\n", __func__, __LINE__, rsp, retry);
    246e:	4b63      	ldr	r3, [pc, #396]	; (25fc <sim800_gprs_ip_init+0x1a8>)
    2470:	335c      	adds	r3, #92	; 0x5c
    2472:	9305      	str	r3, [sp, #20]
        retry++;
    2474:	3401      	adds	r4, #1
        at_send_wait_reply(AT_CMD_GPRS_PDP_DEACTIVE, strlen(AT_CMD_GPRS_PDP_DEACTIVE), true,
    2476:	2300      	movs	r3, #0
    2478:	9303      	str	r3, [sp, #12]
    247a:	2240      	movs	r2, #64	; 0x40
    247c:	9202      	str	r2, [sp, #8]
    247e:	ad06      	add	r5, sp, #24
    2480:	9501      	str	r5, [sp, #4]
    2482:	9300      	str	r3, [sp, #0]
    2484:	3a3f      	subs	r2, #63	; 0x3f
    2486:	210a      	movs	r1, #10
    2488:	0038      	movs	r0, r7
    248a:	4e5d      	ldr	r6, [pc, #372]	; (2600 <sim800_gprs_ip_init+0x1ac>)
    248c:	47b0      	blx	r6
        if (strstr(rsp, SIM800_AT_CMD_SUCCESS_RSP) == NULL) {
    248e:	495d      	ldr	r1, [pc, #372]	; (2604 <sim800_gprs_ip_init+0x1b0>)
    2490:	0028      	movs	r0, r5
    2492:	4b5d      	ldr	r3, [pc, #372]	; (2608 <sim800_gprs_ip_init+0x1b4>)
    2494:	4798      	blx	r3
    2496:	2800      	cmp	r0, #0
    2498:	d110      	bne.n	24bc <sim800_gprs_ip_init+0x68>
             HAL_SleepMs(50);
    249a:	3032      	adds	r0, #50	; 0x32
    249c:	4b5b      	ldr	r3, [pc, #364]	; (260c <sim800_gprs_ip_init+0x1b8>)
    249e:	4798      	blx	r3
            if (retry > SIM800_RETRY_MAX) {
    24a0:	2c33      	cmp	r4, #51	; 0x33
    24a2:	d100      	bne.n	24a6 <sim800_gprs_ip_init+0x52>
    24a4:	e0a3      	b.n	25ee <sim800_gprs_ip_init+0x19a>
            at_conn_hal_err( "%s %d failed rsp %s retry count %d\r\n", __func__, __LINE__, rsp, retry);
    24a6:	9400      	str	r4, [sp, #0]
    24a8:	ab06      	add	r3, sp, #24
    24aa:	22d1      	movs	r2, #209	; 0xd1
    24ac:	0052      	lsls	r2, r2, #1
    24ae:	9905      	ldr	r1, [sp, #20]
    24b0:	4857      	ldr	r0, [pc, #348]	; (2610 <sim800_gprs_ip_init+0x1bc>)
    24b2:	4d58      	ldr	r5, [pc, #352]	; (2614 <sim800_gprs_ip_init+0x1c0>)
    24b4:	47a8      	blx	r5
    24b6:	4858      	ldr	r0, [pc, #352]	; (2618 <sim800_gprs_ip_init+0x1c4>)
    24b8:	47a8      	blx	r5
        retry++;
    24ba:	e7db      	b.n	2474 <sim800_gprs_ip_init+0x20>
    memset(rsp, 0, SIM800_DEFAULT_RSP_LEN);
    24bc:	ac06      	add	r4, sp, #24
    24be:	2240      	movs	r2, #64	; 0x40
    24c0:	2100      	movs	r1, #0
    24c2:	0020      	movs	r0, r4
    24c4:	4b4b      	ldr	r3, [pc, #300]	; (25f4 <sim800_gprs_ip_init+0x1a0>)
    24c6:	4798      	blx	r3
    HAL_Snprintf(cmd, SIM800_DEFAULT_CMD_LEN - 1, "%s=%d", AT_CMD_MULTI_IP_CONNECTION, 1);
    24c8:	2301      	movs	r3, #1
    24ca:	9300      	str	r3, [sp, #0]
    24cc:	4b53      	ldr	r3, [pc, #332]	; (261c <sim800_gprs_ip_init+0x1c8>)
    24ce:	4a54      	ldr	r2, [pc, #336]	; (2620 <sim800_gprs_ip_init+0x1cc>)
    24d0:	213f      	movs	r1, #63	; 0x3f
    24d2:	a816      	add	r0, sp, #88	; 0x58
    24d4:	4d53      	ldr	r5, [pc, #332]	; (2624 <sim800_gprs_ip_init+0x1d0>)
    24d6:	47a8      	blx	r5
    at_send_wait_reply(cmd, strlen(cmd), true, NULL, 0,
    24d8:	a816      	add	r0, sp, #88	; 0x58
    24da:	4b53      	ldr	r3, [pc, #332]	; (2628 <sim800_gprs_ip_init+0x1d4>)
    24dc:	4798      	blx	r3
    24de:	0001      	movs	r1, r0
    24e0:	2300      	movs	r3, #0
    24e2:	9303      	str	r3, [sp, #12]
    24e4:	2240      	movs	r2, #64	; 0x40
    24e6:	9202      	str	r2, [sp, #8]
    24e8:	9401      	str	r4, [sp, #4]
    24ea:	9300      	str	r3, [sp, #0]
    24ec:	3a3f      	subs	r2, #63	; 0x3f
    24ee:	a816      	add	r0, sp, #88	; 0x58
    24f0:	4d43      	ldr	r5, [pc, #268]	; (2600 <sim800_gprs_ip_init+0x1ac>)
    24f2:	47a8      	blx	r5
    if (strstr(rsp, SIM800_AT_CMD_SUCCESS_RSP) == NULL) {
    24f4:	4943      	ldr	r1, [pc, #268]	; (2604 <sim800_gprs_ip_init+0x1b0>)
    24f6:	0020      	movs	r0, r4
    24f8:	4b43      	ldr	r3, [pc, #268]	; (2608 <sim800_gprs_ip_init+0x1b4>)
    24fa:	4798      	blx	r3
    24fc:	2800      	cmp	r0, #0
    24fe:	d04f      	beq.n	25a0 <sim800_gprs_ip_init+0x14c>
    memset(rsp, 0, SIM800_DEFAULT_RSP_LEN);
    2500:	ac06      	add	r4, sp, #24
    2502:	2240      	movs	r2, #64	; 0x40
    2504:	2100      	movs	r1, #0
    2506:	0020      	movs	r0, r4
    2508:	4d3a      	ldr	r5, [pc, #232]	; (25f4 <sim800_gprs_ip_init+0x1a0>)
    250a:	47a8      	blx	r5
    memset(cmd, 0, SIM800_DEFAULT_CMD_LEN);
    250c:	2240      	movs	r2, #64	; 0x40
    250e:	2100      	movs	r1, #0
    2510:	a816      	add	r0, sp, #88	; 0x58
    2512:	47a8      	blx	r5
    HAL_Snprintf(cmd, SIM800_DEFAULT_CMD_LEN - 1, "%s=%d", AT_CMD_SEND_DATA_PROMPT_SET, 0);
    2514:	2500      	movs	r5, #0
    2516:	9500      	str	r5, [sp, #0]
    2518:	4b44      	ldr	r3, [pc, #272]	; (262c <sim800_gprs_ip_init+0x1d8>)
    251a:	4a41      	ldr	r2, [pc, #260]	; (2620 <sim800_gprs_ip_init+0x1cc>)
    251c:	213f      	movs	r1, #63	; 0x3f
    251e:	a816      	add	r0, sp, #88	; 0x58
    2520:	4e40      	ldr	r6, [pc, #256]	; (2624 <sim800_gprs_ip_init+0x1d0>)
    2522:	47b0      	blx	r6
    at_send_wait_reply(cmd, strlen(cmd), true, NULL, 0, 
    2524:	a816      	add	r0, sp, #88	; 0x58
    2526:	4b40      	ldr	r3, [pc, #256]	; (2628 <sim800_gprs_ip_init+0x1d4>)
    2528:	4798      	blx	r3
    252a:	0001      	movs	r1, r0
    252c:	9503      	str	r5, [sp, #12]
    252e:	2340      	movs	r3, #64	; 0x40
    2530:	9302      	str	r3, [sp, #8]
    2532:	9401      	str	r4, [sp, #4]
    2534:	9500      	str	r5, [sp, #0]
    2536:	2300      	movs	r3, #0
    2538:	2201      	movs	r2, #1
    253a:	a816      	add	r0, sp, #88	; 0x58
    253c:	4d30      	ldr	r5, [pc, #192]	; (2600 <sim800_gprs_ip_init+0x1ac>)
    253e:	47a8      	blx	r5
    if (strstr(rsp, SIM800_AT_CMD_SUCCESS_RSP) == NULL) {
    2540:	4930      	ldr	r1, [pc, #192]	; (2604 <sim800_gprs_ip_init+0x1b0>)
    2542:	0020      	movs	r0, r4
    2544:	4b30      	ldr	r3, [pc, #192]	; (2608 <sim800_gprs_ip_init+0x1b4>)
    2546:	4798      	blx	r3
    2548:	2800      	cmp	r0, #0
    254a:	d036      	beq.n	25ba <sim800_gprs_ip_init+0x166>
    memset(rsp, 0, SIM800_DEFAULT_RSP_LEN);
    254c:	ac06      	add	r4, sp, #24
    254e:	2240      	movs	r2, #64	; 0x40
    2550:	2100      	movs	r1, #0
    2552:	0020      	movs	r0, r4
    2554:	4d27      	ldr	r5, [pc, #156]	; (25f4 <sim800_gprs_ip_init+0x1a0>)
    2556:	47a8      	blx	r5
    memset(cmd, 0, SIM800_DEFAULT_CMD_LEN);
    2558:	2240      	movs	r2, #64	; 0x40
    255a:	2100      	movs	r1, #0
    255c:	a816      	add	r0, sp, #88	; 0x58
    255e:	47a8      	blx	r5
    HAL_Snprintf(cmd, SIM800_DEFAULT_CMD_LEN - 1, "%s=%d", AT_CMD_RECV_DATA_FORMAT_SET, 1);
    2560:	2301      	movs	r3, #1
    2562:	9300      	str	r3, [sp, #0]
    2564:	4b32      	ldr	r3, [pc, #200]	; (2630 <sim800_gprs_ip_init+0x1dc>)
    2566:	4a2e      	ldr	r2, [pc, #184]	; (2620 <sim800_gprs_ip_init+0x1cc>)
    2568:	213f      	movs	r1, #63	; 0x3f
    256a:	a816      	add	r0, sp, #88	; 0x58
    256c:	4d2d      	ldr	r5, [pc, #180]	; (2624 <sim800_gprs_ip_init+0x1d0>)
    256e:	47a8      	blx	r5
    at_send_wait_reply(cmd, strlen(cmd), true, NULL, 0, rsp, SIM800_DEFAULT_RSP_LEN, NULL);
    2570:	a816      	add	r0, sp, #88	; 0x58
    2572:	4b2d      	ldr	r3, [pc, #180]	; (2628 <sim800_gprs_ip_init+0x1d4>)
    2574:	4798      	blx	r3
    2576:	0001      	movs	r1, r0
    2578:	2300      	movs	r3, #0
    257a:	9303      	str	r3, [sp, #12]
    257c:	2240      	movs	r2, #64	; 0x40
    257e:	9202      	str	r2, [sp, #8]
    2580:	9401      	str	r4, [sp, #4]
    2582:	9300      	str	r3, [sp, #0]
    2584:	3a3f      	subs	r2, #63	; 0x3f
    2586:	a816      	add	r0, sp, #88	; 0x58
    2588:	4d1d      	ldr	r5, [pc, #116]	; (2600 <sim800_gprs_ip_init+0x1ac>)
    258a:	47a8      	blx	r5
    if (strstr(rsp, SIM800_AT_CMD_SUCCESS_RSP) == NULL) {
    258c:	491d      	ldr	r1, [pc, #116]	; (2604 <sim800_gprs_ip_init+0x1b0>)
    258e:	0020      	movs	r0, r4
    2590:	4b1d      	ldr	r3, [pc, #116]	; (2608 <sim800_gprs_ip_init+0x1b4>)
    2592:	4798      	blx	r3
    return 0;
    2594:	2300      	movs	r3, #0
    if (strstr(rsp, SIM800_AT_CMD_SUCCESS_RSP) == NULL) {
    2596:	2800      	cmp	r0, #0
    2598:	d01c      	beq.n	25d4 <sim800_gprs_ip_init+0x180>
}
    259a:	0018      	movs	r0, r3
    259c:	b027      	add	sp, #156	; 0x9c
    259e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        at_conn_hal_err( "%s %d failed rsp %s\r\n", __func__, __LINE__, rsp);
    25a0:	ab06      	add	r3, sp, #24
    25a2:	22d7      	movs	r2, #215	; 0xd7
    25a4:	0052      	lsls	r2, r2, #1
    25a6:	4915      	ldr	r1, [pc, #84]	; (25fc <sim800_gprs_ip_init+0x1a8>)
    25a8:	315c      	adds	r1, #92	; 0x5c
    25aa:	4822      	ldr	r0, [pc, #136]	; (2634 <sim800_gprs_ip_init+0x1e0>)
    25ac:	4c19      	ldr	r4, [pc, #100]	; (2614 <sim800_gprs_ip_init+0x1c0>)
    25ae:	47a0      	blx	r4
    25b0:	4819      	ldr	r0, [pc, #100]	; (2618 <sim800_gprs_ip_init+0x1c4>)
    25b2:	47a0      	blx	r4
        return -1;
    25b4:	2301      	movs	r3, #1
    25b6:	425b      	negs	r3, r3
    25b8:	e7ef      	b.n	259a <sim800_gprs_ip_init+0x146>
        at_conn_hal_err( "%s %d failed rsp %s\r\n", __func__, __LINE__, rsp);
    25ba:	ab06      	add	r3, sp, #24
    25bc:	22ba      	movs	r2, #186	; 0xba
    25be:	32ff      	adds	r2, #255	; 0xff
    25c0:	490e      	ldr	r1, [pc, #56]	; (25fc <sim800_gprs_ip_init+0x1a8>)
    25c2:	315c      	adds	r1, #92	; 0x5c
    25c4:	481b      	ldr	r0, [pc, #108]	; (2634 <sim800_gprs_ip_init+0x1e0>)
    25c6:	4c13      	ldr	r4, [pc, #76]	; (2614 <sim800_gprs_ip_init+0x1c0>)
    25c8:	47a0      	blx	r4
    25ca:	4813      	ldr	r0, [pc, #76]	; (2618 <sim800_gprs_ip_init+0x1c4>)
    25cc:	47a0      	blx	r4
        return -1;
    25ce:	2301      	movs	r3, #1
    25d0:	425b      	negs	r3, r3
    25d2:	e7e2      	b.n	259a <sim800_gprs_ip_init+0x146>
        at_conn_hal_err( "%s %d failed rsp %s\r\n", __func__, __LINE__, rsp);
    25d4:	ab06      	add	r3, sp, #24
    25d6:	22c4      	movs	r2, #196	; 0xc4
    25d8:	32ff      	adds	r2, #255	; 0xff
    25da:	4908      	ldr	r1, [pc, #32]	; (25fc <sim800_gprs_ip_init+0x1a8>)
    25dc:	315c      	adds	r1, #92	; 0x5c
    25de:	4815      	ldr	r0, [pc, #84]	; (2634 <sim800_gprs_ip_init+0x1e0>)
    25e0:	4c0c      	ldr	r4, [pc, #48]	; (2614 <sim800_gprs_ip_init+0x1c0>)
    25e2:	47a0      	blx	r4
    25e4:	480c      	ldr	r0, [pc, #48]	; (2618 <sim800_gprs_ip_init+0x1c4>)
    25e6:	47a0      	blx	r4
        return -1;
    25e8:	2301      	movs	r3, #1
    25ea:	425b      	negs	r3, r3
    25ec:	e7d5      	b.n	259a <sim800_gprs_ip_init+0x146>
                return -1;
    25ee:	2301      	movs	r3, #1
    25f0:	425b      	negs	r3, r3
    25f2:	e7d2      	b.n	259a <sim800_gprs_ip_init+0x146>
    25f4:	000085c9 	.word	0x000085c9
    25f8:	00009cb8 	.word	0x00009cb8
    25fc:	0000996c 	.word	0x0000996c
    2600:	00001ded 	.word	0x00001ded
    2604:	00009abc 	.word	0x00009abc
    2608:	000089eb 	.word	0x000089eb
    260c:	00007d65 	.word	0x00007d65
    2610:	00009cc4 	.word	0x00009cc4
    2614:	00007d35 	.word	0x00007d35
    2618:	00009cb4 	.word	0x00009cb4
    261c:	00009cec 	.word	0x00009cec
    2620:	00009cf8 	.word	0x00009cf8
    2624:	00007d75 	.word	0x00007d75
    2628:	00008991 	.word	0x00008991
    262c:	00009d00 	.word	0x00009d00
    2630:	00009d0c 	.word	0x00009d0c
    2634:	00009af4 	.word	0x00009af4

00002638 <fd_to_linkid>:
{
    2638:	b570      	push	{r4, r5, r6, lr}
    263a:	0005      	movs	r5, r0
    HAL_MutexLock(g_link_mutex);
    263c:	4b0c      	ldr	r3, [pc, #48]	; (2670 <fd_to_linkid+0x38>)
    263e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    2640:	4b0c      	ldr	r3, [pc, #48]	; (2674 <fd_to_linkid+0x3c>)
    2642:	4798      	blx	r3
        if (g_link[link_id].fd == fd) {
    2644:	4b0c      	ldr	r3, [pc, #48]	; (2678 <fd_to_linkid+0x40>)
    2646:	681b      	ldr	r3, [r3, #0]
    2648:	429d      	cmp	r5, r3
    264a:	d00e      	beq.n	266a <fd_to_linkid+0x32>
    264c:	4b0a      	ldr	r3, [pc, #40]	; (2678 <fd_to_linkid+0x40>)
    for (link_id = 0; link_id < SIM800_MAX_LINK_NUM; link_id++) {
    264e:	2401      	movs	r4, #1
        if (g_link[link_id].fd == fd) {
    2650:	68da      	ldr	r2, [r3, #12]
    2652:	42aa      	cmp	r2, r5
    2654:	d003      	beq.n	265e <fd_to_linkid+0x26>
    for (link_id = 0; link_id < SIM800_MAX_LINK_NUM; link_id++) {
    2656:	3401      	adds	r4, #1
    2658:	330c      	adds	r3, #12
    265a:	2c06      	cmp	r4, #6
    265c:	d1f8      	bne.n	2650 <fd_to_linkid+0x18>
    HAL_MutexUnlock(g_link_mutex);
    265e:	4b04      	ldr	r3, [pc, #16]	; (2670 <fd_to_linkid+0x38>)
    2660:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    2662:	4b06      	ldr	r3, [pc, #24]	; (267c <fd_to_linkid+0x44>)
    2664:	4798      	blx	r3
}
    2666:	0020      	movs	r0, r4
    2668:	bd70      	pop	{r4, r5, r6, pc}
    for (link_id = 0; link_id < SIM800_MAX_LINK_NUM; link_id++) {
    266a:	2400      	movs	r4, #0
    266c:	e7f7      	b.n	265e <fd_to_linkid+0x26>
    266e:	46c0      	nop			; (mov r8, r8)
    2670:	2000085c 	.word	0x2000085c
    2674:	00007d2f 	.word	0x00007d2f
    2678:	2000065c 	.word	0x2000065c
    267c:	00007d31 	.word	0x00007d31

00002680 <sim800_uart_selfadaption>:
{
    2680:	b5f0      	push	{r4, r5, r6, r7, lr}
    2682:	b099      	sub	sp, #100	; 0x64
    2684:	0004      	movs	r4, r0
    2686:	9005      	str	r0, [sp, #20]
    2688:	000d      	movs	r5, r1
    268a:	9106      	str	r1, [sp, #24]
    268c:	0017      	movs	r7, r2
    char buffer[SIM800_DEFAULT_RSP_LEN] = {0};
    268e:	2240      	movs	r2, #64	; 0x40
    2690:	2100      	movs	r1, #0
    2692:	a808      	add	r0, sp, #32
    2694:	4b22      	ldr	r3, [pc, #136]	; (2720 <sim800_uart_selfadaption+0xa0>)
    2696:	4798      	blx	r3
    if (NULL == command || NULL == rsp || 0 == rsplen) {
    2698:	2c00      	cmp	r4, #0
    269a:	d02f      	beq.n	26fc <sim800_uart_selfadaption+0x7c>
    269c:	2d00      	cmp	r5, #0
    269e:	d02d      	beq.n	26fc <sim800_uart_selfadaption+0x7c>
    26a0:	2400      	movs	r4, #0
    26a2:	2f00      	cmp	r7, #0
    26a4:	d02a      	beq.n	26fc <sim800_uart_selfadaption+0x7c>
        at_send_wait_reply(command, strlen(command), true,
    26a6:	4f1f      	ldr	r7, [pc, #124]	; (2724 <sim800_uart_selfadaption+0xa4>)
            at_conn_hal_err( "%s %d failed rsp %s retry count %d\r\n", __func__, __LINE__, rsp, retry);
    26a8:	4b1f      	ldr	r3, [pc, #124]	; (2728 <sim800_uart_selfadaption+0xa8>)
    26aa:	3370      	adds	r3, #112	; 0x70
    26ac:	9307      	str	r3, [sp, #28]
        retry++;
    26ae:	3401      	adds	r4, #1
        at_send_wait_reply(command, strlen(command), true,
    26b0:	9d05      	ldr	r5, [sp, #20]
    26b2:	0028      	movs	r0, r5
    26b4:	47b8      	blx	r7
    26b6:	0001      	movs	r1, r0
    26b8:	2300      	movs	r3, #0
    26ba:	9303      	str	r3, [sp, #12]
    26bc:	2240      	movs	r2, #64	; 0x40
    26be:	9202      	str	r2, [sp, #8]
    26c0:	ae08      	add	r6, sp, #32
    26c2:	9601      	str	r6, [sp, #4]
    26c4:	9300      	str	r3, [sp, #0]
    26c6:	3a3f      	subs	r2, #63	; 0x3f
    26c8:	0028      	movs	r0, r5
    26ca:	4d18      	ldr	r5, [pc, #96]	; (272c <sim800_uart_selfadaption+0xac>)
    26cc:	47a8      	blx	r5
        if ((strstr(buffer, rsp) == NULL)) {
    26ce:	9d06      	ldr	r5, [sp, #24]
    26d0:	0029      	movs	r1, r5
    26d2:	0030      	movs	r0, r6
    26d4:	4b16      	ldr	r3, [pc, #88]	; (2730 <sim800_uart_selfadaption+0xb0>)
    26d6:	4798      	blx	r3
    26d8:	2800      	cmp	r0, #0
    26da:	d11a      	bne.n	2712 <sim800_uart_selfadaption+0x92>
             HAL_SleepMs(50);
    26dc:	3032      	adds	r0, #50	; 0x32
    26de:	4b15      	ldr	r3, [pc, #84]	; (2734 <sim800_uart_selfadaption+0xb4>)
    26e0:	4798      	blx	r3
            if (retry > SIM800_RETRY_MAX) {
    26e2:	2c33      	cmp	r4, #51	; 0x33
    26e4:	d018      	beq.n	2718 <sim800_uart_selfadaption+0x98>
            at_conn_hal_err( "%s %d failed rsp %s retry count %d\r\n", __func__, __LINE__, rsp, retry);
    26e6:	9400      	str	r4, [sp, #0]
    26e8:	002b      	movs	r3, r5
    26ea:	221c      	movs	r2, #28
    26ec:	32ff      	adds	r2, #255	; 0xff
    26ee:	9907      	ldr	r1, [sp, #28]
    26f0:	4811      	ldr	r0, [pc, #68]	; (2738 <sim800_uart_selfadaption+0xb8>)
    26f2:	4e12      	ldr	r6, [pc, #72]	; (273c <sim800_uart_selfadaption+0xbc>)
    26f4:	47b0      	blx	r6
    26f6:	4812      	ldr	r0, [pc, #72]	; (2740 <sim800_uart_selfadaption+0xc0>)
    26f8:	47b0      	blx	r6
        retry++;
    26fa:	e7d8      	b.n	26ae <sim800_uart_selfadaption+0x2e>
        at_conn_hal_err( "invalid input %s %d\r\n", __FILE__, __LINE__);
    26fc:	220e      	movs	r2, #14
    26fe:	32ff      	adds	r2, #255	; 0xff
    2700:	4910      	ldr	r1, [pc, #64]	; (2744 <sim800_uart_selfadaption+0xc4>)
    2702:	4811      	ldr	r0, [pc, #68]	; (2748 <sim800_uart_selfadaption+0xc8>)
    2704:	4c0d      	ldr	r4, [pc, #52]	; (273c <sim800_uart_selfadaption+0xbc>)
    2706:	47a0      	blx	r4
    2708:	480d      	ldr	r0, [pc, #52]	; (2740 <sim800_uart_selfadaption+0xc0>)
    270a:	47a0      	blx	r4
        return -1;
    270c:	2001      	movs	r0, #1
    270e:	4240      	negs	r0, r0
    2710:	e000      	b.n	2714 <sim800_uart_selfadaption+0x94>
    return 0;
    2712:	2000      	movs	r0, #0
}
    2714:	b019      	add	sp, #100	; 0x64
    2716:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return -1;
    2718:	2001      	movs	r0, #1
    271a:	4240      	negs	r0, r0
    271c:	e7fa      	b.n	2714 <sim800_uart_selfadaption+0x94>
    271e:	46c0      	nop			; (mov r8, r8)
    2720:	000085c9 	.word	0x000085c9
    2724:	00008991 	.word	0x00008991
    2728:	0000996c 	.word	0x0000996c
    272c:	00001ded 	.word	0x00001ded
    2730:	000089eb 	.word	0x000089eb
    2734:	00007d65 	.word	0x00007d65
    2738:	00009cc4 	.word	0x00009cc4
    273c:	00007d35 	.word	0x00007d35
    2740:	00009cb4 	.word	0x00009cb4
    2744:	00009d18 	.word	0x00009d18
    2748:	00009d30 	.word	0x00009d30

0000274c <HAL_AT_CONN_Init>:
    }
    return 0;
}

int HAL_AT_CONN_Init(void)
{
    274c:	b5f0      	push	{r4, r5, r6, r7, lr}
    274e:	b0a7      	sub	sp, #156	; 0x9c
    int ret = 0;
    uint32_t linknum = 0;

    if (inited) {
    2750:	2350      	movs	r3, #80	; 0x50
    2752:	4ae1      	ldr	r2, [pc, #900]	; (2ad8 <HAL_AT_CONN_Init+0x38c>)
    2754:	5cd3      	ldrb	r3, [r2, r3]
    2756:	2b00      	cmp	r3, #0
    2758:	d000      	beq.n	275c <HAL_AT_CONN_Init+0x10>
    275a:	e0d2      	b.n	2902 <HAL_AT_CONN_Init+0x1b6>
        at_conn_hal_info( "sim800 gprs module have already inited \r\n");
        return 0;
    }

    memset(g_pcdomain_rsp , 0, SIM800_DOMAIN_RSP_MAX_LEN);
    275c:	2280      	movs	r2, #128	; 0x80
    275e:	0092      	lsls	r2, r2, #2
    2760:	2100      	movs	r1, #0
    2762:	48de      	ldr	r0, [pc, #888]	; (2adc <HAL_AT_CONN_Init+0x390>)
    2764:	3048      	adds	r0, #72	; 0x48
    2766:	4bde      	ldr	r3, [pc, #888]	; (2ae0 <HAL_AT_CONN_Init+0x394>)
    2768:	4798      	blx	r3

    if (NULL == (g_link_mutex = HAL_MutexCreate())) {
    276a:	4bde      	ldr	r3, [pc, #888]	; (2ae4 <HAL_AT_CONN_Init+0x398>)
    276c:	4798      	blx	r3
    276e:	4bda      	ldr	r3, [pc, #872]	; (2ad8 <HAL_AT_CONN_Init+0x38c>)
    2770:	64d8      	str	r0, [r3, #76]	; 0x4c
    2772:	2800      	cmp	r0, #0
    2774:	d100      	bne.n	2778 <HAL_AT_CONN_Init+0x2c>
    2776:	e0cb      	b.n	2910 <HAL_AT_CONN_Init+0x1c4>
        at_conn_hal_err( "Creating link mutex failed (%s %d).", __func__, __LINE__);
        goto err;
    }

    if (NULL == (g_domain_mutex = HAL_MutexCreate())) {
    2778:	4bda      	ldr	r3, [pc, #872]	; (2ae4 <HAL_AT_CONN_Init+0x398>)
    277a:	4798      	blx	r3
    277c:	4bd6      	ldr	r3, [pc, #856]	; (2ad8 <HAL_AT_CONN_Init+0x38c>)
    277e:	6558      	str	r0, [r3, #84]	; 0x54
    2780:	2800      	cmp	r0, #0
    2782:	d100      	bne.n	2786 <HAL_AT_CONN_Init+0x3a>
    2784:	e0ce      	b.n	2924 <HAL_AT_CONN_Init+0x1d8>
        at_conn_hal_err( "Creating domain mutex failed (%s %d).", __func__, __LINE__);
        goto err;
    }
#endif

    memset(g_link, 0, sizeof(g_link));
    2786:	4cd5      	ldr	r4, [pc, #852]	; (2adc <HAL_AT_CONN_Init+0x390>)
    2788:	2248      	movs	r2, #72	; 0x48
    278a:	2100      	movs	r1, #0
    278c:	0020      	movs	r0, r4
    278e:	4dd4      	ldr	r5, [pc, #848]	; (2ae0 <HAL_AT_CONN_Init+0x394>)
    2790:	47a8      	blx	r5

    for (linknum = 0; linknum < SIM800_MAX_LINK_NUM; linknum++) {
        g_link[linknum].fd = -1;
    2792:	2301      	movs	r3, #1
    2794:	425b      	negs	r3, r3
    2796:	6023      	str	r3, [r4, #0]
    2798:	60e3      	str	r3, [r4, #12]
    279a:	61a3      	str	r3, [r4, #24]
    279c:	6263      	str	r3, [r4, #36]	; 0x24
    279e:	6323      	str	r3, [r4, #48]	; 0x30
    27a0:	63e3      	str	r3, [r4, #60]	; 0x3c
    char cmd[SIM800_DEFAULT_CMD_LEN] = {0};
    27a2:	2240      	movs	r2, #64	; 0x40
    27a4:	2100      	movs	r1, #0
    27a6:	a806      	add	r0, sp, #24
    27a8:	47a8      	blx	r5
    char rsp[SIM800_DEFAULT_RSP_LEN] = {0};
    27aa:	2240      	movs	r2, #64	; 0x40
    27ac:	2100      	movs	r1, #0
    27ae:	a816      	add	r0, sp, #88	; 0x58
    27b0:	47a8      	blx	r5
    ret = sim800_uart_selfadaption(AT_CMD_TEST, AT_CMD_TEST_RESULT, strlen(AT_CMD_TEST_RESULT));
    27b2:	2204      	movs	r2, #4
    27b4:	49cc      	ldr	r1, [pc, #816]	; (2ae8 <HAL_AT_CONN_Init+0x39c>)
    27b6:	48cd      	ldr	r0, [pc, #820]	; (2aec <HAL_AT_CONN_Init+0x3a0>)
    27b8:	4bcd      	ldr	r3, [pc, #820]	; (2af0 <HAL_AT_CONN_Init+0x3a4>)
    27ba:	4798      	blx	r3
    27bc:	1e04      	subs	r4, r0, #0
    if (ret) {
    27be:	d000      	beq.n	27c2 <HAL_AT_CONN_Init+0x76>
    27c0:	e0b9      	b.n	2936 <HAL_AT_CONN_Init+0x1ea>
    at_send_wait_reply(AT_CMD_ECHO_OFF, strlen(AT_CMD_ECHO_OFF), true, NULL, 0,
    27c2:	2300      	movs	r3, #0
    27c4:	9303      	str	r3, [sp, #12]
    27c6:	2240      	movs	r2, #64	; 0x40
    27c8:	9202      	str	r2, [sp, #8]
    27ca:	ad16      	add	r5, sp, #88	; 0x58
    27cc:	9501      	str	r5, [sp, #4]
    27ce:	9300      	str	r3, [sp, #0]
    27d0:	3a3f      	subs	r2, #63	; 0x3f
    27d2:	2104      	movs	r1, #4
    27d4:	48c7      	ldr	r0, [pc, #796]	; (2af4 <HAL_AT_CONN_Init+0x3a8>)
    27d6:	4ec8      	ldr	r6, [pc, #800]	; (2af8 <HAL_AT_CONN_Init+0x3ac>)
    27d8:	47b0      	blx	r6
    if (strstr(rsp, SIM800_AT_CMD_SUCCESS_RSP) == NULL) {
    27da:	49c8      	ldr	r1, [pc, #800]	; (2afc <HAL_AT_CONN_Init+0x3b0>)
    27dc:	0028      	movs	r0, r5
    27de:	4bc8      	ldr	r3, [pc, #800]	; (2b00 <HAL_AT_CONN_Init+0x3b4>)
    27e0:	4798      	blx	r3
    27e2:	2800      	cmp	r0, #0
    27e4:	d100      	bne.n	27e8 <HAL_AT_CONN_Init+0x9c>
    27e6:	e0c5      	b.n	2974 <HAL_AT_CONN_Init+0x228>
    HAL_Snprintf(cmd, SIM800_DEFAULT_CMD_LEN - 1, "%s=%d", AT_CMD_BAUDRATE_SET, AT_UART_BAUDRATE);
    27e8:	23e1      	movs	r3, #225	; 0xe1
    27ea:	025b      	lsls	r3, r3, #9
    27ec:	9300      	str	r3, [sp, #0]
    27ee:	4bc5      	ldr	r3, [pc, #788]	; (2b04 <HAL_AT_CONN_Init+0x3b8>)
    27f0:	4ac5      	ldr	r2, [pc, #788]	; (2b08 <HAL_AT_CONN_Init+0x3bc>)
    27f2:	213f      	movs	r1, #63	; 0x3f
    27f4:	a806      	add	r0, sp, #24
    27f6:	4dc5      	ldr	r5, [pc, #788]	; (2b0c <HAL_AT_CONN_Init+0x3c0>)
    27f8:	47a8      	blx	r5
    at_send_wait_reply(cmd, strlen(cmd), true, NULL, 0, rsp, SIM800_DEFAULT_RSP_LEN, NULL);
    27fa:	a806      	add	r0, sp, #24
    27fc:	4bc4      	ldr	r3, [pc, #784]	; (2b10 <HAL_AT_CONN_Init+0x3c4>)
    27fe:	4798      	blx	r3
    2800:	0001      	movs	r1, r0
    2802:	2300      	movs	r3, #0
    2804:	9303      	str	r3, [sp, #12]
    2806:	2240      	movs	r2, #64	; 0x40
    2808:	9202      	str	r2, [sp, #8]
    280a:	ad16      	add	r5, sp, #88	; 0x58
    280c:	9501      	str	r5, [sp, #4]
    280e:	9300      	str	r3, [sp, #0]
    2810:	3a3f      	subs	r2, #63	; 0x3f
    2812:	a806      	add	r0, sp, #24
    2814:	4eb8      	ldr	r6, [pc, #736]	; (2af8 <HAL_AT_CONN_Init+0x3ac>)
    2816:	47b0      	blx	r6
    if (strstr(rsp, SIM800_AT_CMD_SUCCESS_RSP) == NULL) {
    2818:	49b8      	ldr	r1, [pc, #736]	; (2afc <HAL_AT_CONN_Init+0x3b0>)
    281a:	0028      	movs	r0, r5
    281c:	4bb8      	ldr	r3, [pc, #736]	; (2b00 <HAL_AT_CONN_Init+0x3b4>)
    281e:	4798      	blx	r3
    2820:	2800      	cmp	r0, #0
    2822:	d100      	bne.n	2826 <HAL_AT_CONN_Init+0xda>
    2824:	e0b1      	b.n	298a <HAL_AT_CONN_Init+0x23e>
    memset(cmd, 0, SIM800_DEFAULT_CMD_LEN);
    2826:	2240      	movs	r2, #64	; 0x40
    2828:	2100      	movs	r1, #0
    282a:	a806      	add	r0, sp, #24
    282c:	4dac      	ldr	r5, [pc, #688]	; (2ae0 <HAL_AT_CONN_Init+0x394>)
    282e:	47a8      	blx	r5
    memset(rsp, 0, SIM800_DEFAULT_RSP_LEN);
    2830:	ae16      	add	r6, sp, #88	; 0x58
    2832:	2240      	movs	r2, #64	; 0x40
    2834:	2100      	movs	r1, #0
    2836:	0030      	movs	r0, r6
    2838:	47a8      	blx	r5
    HAL_Snprintf(cmd, SIM800_DEFAULT_CMD_LEN - 1, "%s=%d,%d", AT_CMD_FLOW_CONTROL, 0, 0);
    283a:	2500      	movs	r5, #0
    283c:	9501      	str	r5, [sp, #4]
    283e:	9500      	str	r5, [sp, #0]
    2840:	4bb4      	ldr	r3, [pc, #720]	; (2b14 <HAL_AT_CONN_Init+0x3c8>)
    2842:	4ab5      	ldr	r2, [pc, #724]	; (2b18 <HAL_AT_CONN_Init+0x3cc>)
    2844:	213f      	movs	r1, #63	; 0x3f
    2846:	a806      	add	r0, sp, #24
    2848:	4fb0      	ldr	r7, [pc, #704]	; (2b0c <HAL_AT_CONN_Init+0x3c0>)
    284a:	47b8      	blx	r7
    at_send_wait_reply(cmd, strlen(cmd), true, NULL, 0, rsp, SIM800_DEFAULT_RSP_LEN, NULL);
    284c:	a806      	add	r0, sp, #24
    284e:	4bb0      	ldr	r3, [pc, #704]	; (2b10 <HAL_AT_CONN_Init+0x3c4>)
    2850:	4798      	blx	r3
    2852:	0001      	movs	r1, r0
    2854:	9503      	str	r5, [sp, #12]
    2856:	2340      	movs	r3, #64	; 0x40
    2858:	9302      	str	r3, [sp, #8]
    285a:	9601      	str	r6, [sp, #4]
    285c:	9500      	str	r5, [sp, #0]
    285e:	2300      	movs	r3, #0
    2860:	2201      	movs	r2, #1
    2862:	a806      	add	r0, sp, #24
    2864:	4da4      	ldr	r5, [pc, #656]	; (2af8 <HAL_AT_CONN_Init+0x3ac>)
    2866:	47a8      	blx	r5
    if (strstr(rsp, SIM800_AT_CMD_SUCCESS_RSP) == NULL) {
    2868:	49a4      	ldr	r1, [pc, #656]	; (2afc <HAL_AT_CONN_Init+0x3b0>)
    286a:	0030      	movs	r0, r6
    286c:	4ba4      	ldr	r3, [pc, #656]	; (2b00 <HAL_AT_CONN_Init+0x3b4>)
    286e:	4798      	blx	r3
    2870:	2800      	cmp	r0, #0
    2872:	d100      	bne.n	2876 <HAL_AT_CONN_Init+0x12a>
    2874:	e094      	b.n	29a0 <HAL_AT_CONN_Init+0x254>
    memset(rsp, 0, SIM800_DEFAULT_RSP_LEN);
    2876:	ad16      	add	r5, sp, #88	; 0x58
    2878:	2240      	movs	r2, #64	; 0x40
    287a:	2100      	movs	r1, #0
    287c:	0028      	movs	r0, r5
    287e:	4b98      	ldr	r3, [pc, #608]	; (2ae0 <HAL_AT_CONN_Init+0x394>)
    2880:	4798      	blx	r3
    at_send_wait_reply(AT_CMD_SAVE_CONFIG, strlen(AT_CMD_SAVE_CONFIG), true, NULL, 0,
    2882:	2300      	movs	r3, #0
    2884:	9303      	str	r3, [sp, #12]
    2886:	2240      	movs	r2, #64	; 0x40
    2888:	9202      	str	r2, [sp, #8]
    288a:	9501      	str	r5, [sp, #4]
    288c:	9300      	str	r3, [sp, #0]
    288e:	3a3f      	subs	r2, #63	; 0x3f
    2890:	2104      	movs	r1, #4
    2892:	48a2      	ldr	r0, [pc, #648]	; (2b1c <HAL_AT_CONN_Init+0x3d0>)
    2894:	4e98      	ldr	r6, [pc, #608]	; (2af8 <HAL_AT_CONN_Init+0x3ac>)
    2896:	47b0      	blx	r6
    if (strstr(rsp, SIM800_AT_CMD_SUCCESS_RSP) == NULL) {
    2898:	4998      	ldr	r1, [pc, #608]	; (2afc <HAL_AT_CONN_Init+0x3b0>)
    289a:	0028      	movs	r0, r5
    289c:	4b98      	ldr	r3, [pc, #608]	; (2b00 <HAL_AT_CONN_Init+0x3b4>)
    289e:	4798      	blx	r3
    28a0:	2800      	cmp	r0, #0
    28a2:	d100      	bne.n	28a6 <HAL_AT_CONN_Init+0x15a>
    28a4:	e087      	b.n	29b6 <HAL_AT_CONN_Init+0x26a>
    char rsp[SIM800_DEFAULT_RSP_LEN] = {0};
    28a6:	2240      	movs	r2, #64	; 0x40
    28a8:	2100      	movs	r1, #0
    28aa:	a816      	add	r0, sp, #88	; 0x58
    28ac:	4b8c      	ldr	r3, [pc, #560]	; (2ae0 <HAL_AT_CONN_Init+0x394>)
    28ae:	4798      	blx	r3
        at_send_wait_reply(AT_CMD_SIM_PIN_CHECK, strlen(AT_CMD_SIM_PIN_CHECK), true,
    28b0:	4f9b      	ldr	r7, [pc, #620]	; (2b20 <HAL_AT_CONN_Init+0x3d4>)
            at_conn_hal_err( "%s %d failed rsp %s retry count %d\r\n", __func__, __LINE__, rsp, retry);
    28b2:	4b9c      	ldr	r3, [pc, #624]	; (2b24 <HAL_AT_CONN_Init+0x3d8>)
    28b4:	3334      	adds	r3, #52	; 0x34
    28b6:	9305      	str	r3, [sp, #20]
        retry++;
    28b8:	3401      	adds	r4, #1
        at_send_wait_reply(AT_CMD_SIM_PIN_CHECK, strlen(AT_CMD_SIM_PIN_CHECK), true,
    28ba:	2300      	movs	r3, #0
    28bc:	9303      	str	r3, [sp, #12]
    28be:	2240      	movs	r2, #64	; 0x40
    28c0:	9202      	str	r2, [sp, #8]
    28c2:	ad16      	add	r5, sp, #88	; 0x58
    28c4:	9501      	str	r5, [sp, #4]
    28c6:	9300      	str	r3, [sp, #0]
    28c8:	3a3f      	subs	r2, #63	; 0x3f
    28ca:	2108      	movs	r1, #8
    28cc:	0038      	movs	r0, r7
    28ce:	4e8a      	ldr	r6, [pc, #552]	; (2af8 <HAL_AT_CONN_Init+0x3ac>)
    28d0:	47b0      	blx	r6
        if (strstr(rsp, SIM800_AT_CMD_SUCCESS_RSP) == NULL) {
    28d2:	498a      	ldr	r1, [pc, #552]	; (2afc <HAL_AT_CONN_Init+0x3b0>)
    28d4:	0028      	movs	r0, r5
    28d6:	4b8a      	ldr	r3, [pc, #552]	; (2b00 <HAL_AT_CONN_Init+0x3b4>)
    28d8:	4798      	blx	r3
    28da:	2800      	cmp	r0, #0
    28dc:	d000      	beq.n	28e0 <HAL_AT_CONN_Init+0x194>
    28de:	e075      	b.n	29cc <HAL_AT_CONN_Init+0x280>
            HAL_SleepMs(50);
    28e0:	3032      	adds	r0, #50	; 0x32
    28e2:	4b91      	ldr	r3, [pc, #580]	; (2b28 <HAL_AT_CONN_Init+0x3dc>)
    28e4:	4798      	blx	r3
            if (retry > SIM800_RETRY_MAX) {
    28e6:	2c33      	cmp	r4, #51	; 0x33
    28e8:	d100      	bne.n	28ec <HAL_AT_CONN_Init+0x1a0>
    28ea:	e0e0      	b.n	2aae <HAL_AT_CONN_Init+0x362>
            at_conn_hal_err( "%s %d failed rsp %s retry count %d\r\n", __func__, __LINE__, rsp, retry);
    28ec:	9400      	str	r4, [sp, #0]
    28ee:	ab16      	add	r3, sp, #88	; 0x58
    28f0:	22b4      	movs	r2, #180	; 0xb4
    28f2:	0052      	lsls	r2, r2, #1
    28f4:	9905      	ldr	r1, [sp, #20]
    28f6:	488d      	ldr	r0, [pc, #564]	; (2b2c <HAL_AT_CONN_Init+0x3e0>)
    28f8:	4d8d      	ldr	r5, [pc, #564]	; (2b30 <HAL_AT_CONN_Init+0x3e4>)
    28fa:	47a8      	blx	r5
    28fc:	488d      	ldr	r0, [pc, #564]	; (2b34 <HAL_AT_CONN_Init+0x3e8>)
    28fe:	47a8      	blx	r5
    2900:	e7da      	b.n	28b8 <HAL_AT_CONN_Init+0x16c>
        at_conn_hal_info( "sim800 gprs module have already inited \r\n");
    2902:	488d      	ldr	r0, [pc, #564]	; (2b38 <HAL_AT_CONN_Init+0x3ec>)
    2904:	4c8a      	ldr	r4, [pc, #552]	; (2b30 <HAL_AT_CONN_Init+0x3e4>)
    2906:	47a0      	blx	r4
    2908:	488a      	ldr	r0, [pc, #552]	; (2b34 <HAL_AT_CONN_Init+0x3e8>)
    290a:	47a0      	blx	r4
        return 0;
    290c:	2000      	movs	r0, #0
    290e:	e02f      	b.n	2970 <HAL_AT_CONN_Init+0x224>
        at_conn_hal_err( "Creating link mutex failed (%s %d).", __func__, __LINE__);
    2910:	2284      	movs	r2, #132	; 0x84
    2912:	0092      	lsls	r2, r2, #2
    2914:	4983      	ldr	r1, [pc, #524]	; (2b24 <HAL_AT_CONN_Init+0x3d8>)
    2916:	310c      	adds	r1, #12
    2918:	4888      	ldr	r0, [pc, #544]	; (2b3c <HAL_AT_CONN_Init+0x3f0>)
    291a:	4c85      	ldr	r4, [pc, #532]	; (2b30 <HAL_AT_CONN_Init+0x3e4>)
    291c:	47a0      	blx	r4
    291e:	4885      	ldr	r0, [pc, #532]	; (2b34 <HAL_AT_CONN_Init+0x3e8>)
    2920:	47a0      	blx	r4
        goto err;
    2922:	e016      	b.n	2952 <HAL_AT_CONN_Init+0x206>
        at_conn_hal_err( "Creating link mutex failed (%s %d).", __func__, __LINE__);
    2924:	4a86      	ldr	r2, [pc, #536]	; (2b40 <HAL_AT_CONN_Init+0x3f4>)
    2926:	497f      	ldr	r1, [pc, #508]	; (2b24 <HAL_AT_CONN_Init+0x3d8>)
    2928:	310c      	adds	r1, #12
    292a:	4884      	ldr	r0, [pc, #528]	; (2b3c <HAL_AT_CONN_Init+0x3f0>)
    292c:	4c80      	ldr	r4, [pc, #512]	; (2b30 <HAL_AT_CONN_Init+0x3e4>)
    292e:	47a0      	blx	r4
    2930:	4880      	ldr	r0, [pc, #512]	; (2b34 <HAL_AT_CONN_Init+0x3e8>)
    2932:	47a0      	blx	r4
        goto err;
    2934:	e00d      	b.n	2952 <HAL_AT_CONN_Init+0x206>
        at_conn_hal_err( "sim800_uart_selfadaption fail \r\n");
    2936:	4883      	ldr	r0, [pc, #524]	; (2b44 <HAL_AT_CONN_Init+0x3f8>)
    2938:	4c7d      	ldr	r4, [pc, #500]	; (2b30 <HAL_AT_CONN_Init+0x3e4>)
    293a:	47a0      	blx	r4
    293c:	487d      	ldr	r0, [pc, #500]	; (2b34 <HAL_AT_CONN_Init+0x3e8>)
    293e:	47a0      	blx	r4
    }

    ret = sim800_uart_init();
    if (ret) {
        at_conn_hal_err( "%s %d failed \r\n", __func__, __LINE__);
    2940:	228a      	movs	r2, #138	; 0x8a
    2942:	0092      	lsls	r2, r2, #2
    2944:	4977      	ldr	r1, [pc, #476]	; (2b24 <HAL_AT_CONN_Init+0x3d8>)
    2946:	310c      	adds	r1, #12
    2948:	487f      	ldr	r0, [pc, #508]	; (2b48 <HAL_AT_CONN_Init+0x3fc>)
    294a:	4c79      	ldr	r4, [pc, #484]	; (2b30 <HAL_AT_CONN_Init+0x3e4>)
    294c:	47a0      	blx	r4
    294e:	4879      	ldr	r0, [pc, #484]	; (2b34 <HAL_AT_CONN_Init+0x3e8>)
    2950:	47a0      	blx	r4

    inited = 1;

    return 0;
err:
    if (g_link_mutex != NULL) {
    2952:	4b61      	ldr	r3, [pc, #388]	; (2ad8 <HAL_AT_CONN_Init+0x38c>)
    2954:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    2956:	2800      	cmp	r0, #0
    2958:	d001      	beq.n	295e <HAL_AT_CONN_Init+0x212>
        HAL_MutexDestroy(g_link_mutex);
    295a:	4b7c      	ldr	r3, [pc, #496]	; (2b4c <HAL_AT_CONN_Init+0x400>)
    295c:	4798      	blx	r3
    }

    if (g_domain_mutex != NULL) {
    295e:	4b5e      	ldr	r3, [pc, #376]	; (2ad8 <HAL_AT_CONN_Init+0x38c>)
    2960:	6d58      	ldr	r0, [r3, #84]	; 0x54
    2962:	2800      	cmp	r0, #0
    2964:	d100      	bne.n	2968 <HAL_AT_CONN_Init+0x21c>
    2966:	e131      	b.n	2bcc <HAL_AT_CONN_Init+0x480>
        HAL_MutexDestroy(g_domain_mutex);
    2968:	4b78      	ldr	r3, [pc, #480]	; (2b4c <HAL_AT_CONN_Init+0x400>)
    296a:	4798      	blx	r3
    if (g_domain_sem != NULL) {
        HAL_SemaphoreDestroy(g_domain_sem);
    }
#endif

    return -1;
    296c:	2001      	movs	r0, #1
    296e:	4240      	negs	r0, r0
}
    2970:	b027      	add	sp, #156	; 0x9c
    2972:	bdf0      	pop	{r4, r5, r6, r7, pc}
        at_conn_hal_err( "%s %d failed rsp %s\r\n", __func__, __LINE__, rsp);
    2974:	ab16      	add	r3, sp, #88	; 0x58
    2976:	2236      	movs	r2, #54	; 0x36
    2978:	32ff      	adds	r2, #255	; 0xff
    297a:	496a      	ldr	r1, [pc, #424]	; (2b24 <HAL_AT_CONN_Init+0x3d8>)
    297c:	3120      	adds	r1, #32
    297e:	4874      	ldr	r0, [pc, #464]	; (2b50 <HAL_AT_CONN_Init+0x404>)
    2980:	4c6b      	ldr	r4, [pc, #428]	; (2b30 <HAL_AT_CONN_Init+0x3e4>)
    2982:	47a0      	blx	r4
    2984:	486b      	ldr	r0, [pc, #428]	; (2b34 <HAL_AT_CONN_Init+0x3e8>)
    2986:	47a0      	blx	r4
    2988:	e7da      	b.n	2940 <HAL_AT_CONN_Init+0x1f4>
        at_conn_hal_err( "%s %d failed rsp %s\r\n", __func__, __LINE__, rsp);
    298a:	ab16      	add	r3, sp, #88	; 0x58
    298c:	223e      	movs	r2, #62	; 0x3e
    298e:	32ff      	adds	r2, #255	; 0xff
    2990:	4964      	ldr	r1, [pc, #400]	; (2b24 <HAL_AT_CONN_Init+0x3d8>)
    2992:	3120      	adds	r1, #32
    2994:	486e      	ldr	r0, [pc, #440]	; (2b50 <HAL_AT_CONN_Init+0x404>)
    2996:	4c66      	ldr	r4, [pc, #408]	; (2b30 <HAL_AT_CONN_Init+0x3e4>)
    2998:	47a0      	blx	r4
    299a:	4866      	ldr	r0, [pc, #408]	; (2b34 <HAL_AT_CONN_Init+0x3e8>)
    299c:	47a0      	blx	r4
    299e:	e7cf      	b.n	2940 <HAL_AT_CONN_Init+0x1f4>
        at_conn_hal_err( "%s %d failed rsp %s\r\n", __func__, __LINE__, rsp);
    29a0:	ab16      	add	r3, sp, #88	; 0x58
    29a2:	2248      	movs	r2, #72	; 0x48
    29a4:	32ff      	adds	r2, #255	; 0xff
    29a6:	495f      	ldr	r1, [pc, #380]	; (2b24 <HAL_AT_CONN_Init+0x3d8>)
    29a8:	3120      	adds	r1, #32
    29aa:	4869      	ldr	r0, [pc, #420]	; (2b50 <HAL_AT_CONN_Init+0x404>)
    29ac:	4c60      	ldr	r4, [pc, #384]	; (2b30 <HAL_AT_CONN_Init+0x3e4>)
    29ae:	47a0      	blx	r4
    29b0:	4860      	ldr	r0, [pc, #384]	; (2b34 <HAL_AT_CONN_Init+0x3e8>)
    29b2:	47a0      	blx	r4
    29b4:	e7c4      	b.n	2940 <HAL_AT_CONN_Init+0x1f4>
        at_conn_hal_err( "%s %d failed rsp %s\r\n", __func__, __LINE__, rsp);
    29b6:	ab16      	add	r3, sp, #88	; 0x58
    29b8:	22a8      	movs	r2, #168	; 0xa8
    29ba:	0052      	lsls	r2, r2, #1
    29bc:	4959      	ldr	r1, [pc, #356]	; (2b24 <HAL_AT_CONN_Init+0x3d8>)
    29be:	3120      	adds	r1, #32
    29c0:	4863      	ldr	r0, [pc, #396]	; (2b50 <HAL_AT_CONN_Init+0x404>)
    29c2:	4c5b      	ldr	r4, [pc, #364]	; (2b30 <HAL_AT_CONN_Init+0x3e4>)
    29c4:	47a0      	blx	r4
    29c6:	485b      	ldr	r0, [pc, #364]	; (2b34 <HAL_AT_CONN_Init+0x3e8>)
    29c8:	47a0      	blx	r4
    29ca:	e7b9      	b.n	2940 <HAL_AT_CONN_Init+0x1f4>
    memset(rsp, 0, SIM800_DEFAULT_RSP_LEN);
    29cc:	ac16      	add	r4, sp, #88	; 0x58
    29ce:	2240      	movs	r2, #64	; 0x40
    29d0:	2100      	movs	r1, #0
    29d2:	0020      	movs	r0, r4
    29d4:	4b42      	ldr	r3, [pc, #264]	; (2ae0 <HAL_AT_CONN_Init+0x394>)
    29d6:	4798      	blx	r3
    at_send_wait_reply(AT_CMD_SIGNAL_QUALITY_CHECK, strlen(AT_CMD_SIGNAL_QUALITY_CHECK), true,
    29d8:	2300      	movs	r3, #0
    29da:	9303      	str	r3, [sp, #12]
    29dc:	2240      	movs	r2, #64	; 0x40
    29de:	9202      	str	r2, [sp, #8]
    29e0:	9401      	str	r4, [sp, #4]
    29e2:	9300      	str	r3, [sp, #0]
    29e4:	3a3f      	subs	r2, #63	; 0x3f
    29e6:	2106      	movs	r1, #6
    29e8:	485a      	ldr	r0, [pc, #360]	; (2b54 <HAL_AT_CONN_Init+0x408>)
    29ea:	4d43      	ldr	r5, [pc, #268]	; (2af8 <HAL_AT_CONN_Init+0x3ac>)
    29ec:	47a8      	blx	r5
    if (strstr(rsp, SIM800_AT_CMD_SUCCESS_RSP) == NULL) {
    29ee:	4943      	ldr	r1, [pc, #268]	; (2afc <HAL_AT_CONN_Init+0x3b0>)
    29f0:	0020      	movs	r0, r4
    29f2:	4b43      	ldr	r3, [pc, #268]	; (2b00 <HAL_AT_CONN_Init+0x3b4>)
    29f4:	4798      	blx	r3
    29f6:	2800      	cmp	r0, #0
    29f8:	d04f      	beq.n	2a9a <HAL_AT_CONN_Init+0x34e>
    at_conn_hal_info( "signal quality is %s \r\n", rsp);
    29fa:	ac16      	add	r4, sp, #88	; 0x58
    29fc:	0021      	movs	r1, r4
    29fe:	4856      	ldr	r0, [pc, #344]	; (2b58 <HAL_AT_CONN_Init+0x40c>)
    2a00:	4d4b      	ldr	r5, [pc, #300]	; (2b30 <HAL_AT_CONN_Init+0x3e4>)
    2a02:	47a8      	blx	r5
    2a04:	484b      	ldr	r0, [pc, #300]	; (2b34 <HAL_AT_CONN_Init+0x3e8>)
    2a06:	47a8      	blx	r5
    memset(rsp, 0, SIM800_DEFAULT_RSP_LEN);
    2a08:	2240      	movs	r2, #64	; 0x40
    2a0a:	2100      	movs	r1, #0
    2a0c:	0020      	movs	r0, r4
    2a0e:	4b34      	ldr	r3, [pc, #208]	; (2ae0 <HAL_AT_CONN_Init+0x394>)
    2a10:	4798      	blx	r3
    at_send_wait_reply(AT_CMD_NETWORK_REG_CHECK, strlen(AT_CMD_NETWORK_REG_CHECK), true,
    2a12:	2300      	movs	r3, #0
    2a14:	9303      	str	r3, [sp, #12]
    2a16:	2240      	movs	r2, #64	; 0x40
    2a18:	9202      	str	r2, [sp, #8]
    2a1a:	9401      	str	r4, [sp, #4]
    2a1c:	9300      	str	r3, [sp, #0]
    2a1e:	3a3f      	subs	r2, #63	; 0x3f
    2a20:	2108      	movs	r1, #8
    2a22:	484e      	ldr	r0, [pc, #312]	; (2b5c <HAL_AT_CONN_Init+0x410>)
    2a24:	4d34      	ldr	r5, [pc, #208]	; (2af8 <HAL_AT_CONN_Init+0x3ac>)
    2a26:	47a8      	blx	r5
    if (strstr(rsp, SIM800_AT_CMD_SUCCESS_RSP) == NULL) {
    2a28:	4934      	ldr	r1, [pc, #208]	; (2afc <HAL_AT_CONN_Init+0x3b0>)
    2a2a:	0020      	movs	r0, r4
    2a2c:	4b34      	ldr	r3, [pc, #208]	; (2b00 <HAL_AT_CONN_Init+0x3b4>)
    2a2e:	4798      	blx	r3
    2a30:	2800      	cmp	r0, #0
    2a32:	d045      	beq.n	2ac0 <HAL_AT_CONN_Init+0x374>
    at_conn_hal_info( "network registration is %s \r\n", rsp);
    2a34:	ac16      	add	r4, sp, #88	; 0x58
    2a36:	0021      	movs	r1, r4
    2a38:	4849      	ldr	r0, [pc, #292]	; (2b60 <HAL_AT_CONN_Init+0x414>)
    2a3a:	4d3d      	ldr	r5, [pc, #244]	; (2b30 <HAL_AT_CONN_Init+0x3e4>)
    2a3c:	47a8      	blx	r5
    2a3e:	483d      	ldr	r0, [pc, #244]	; (2b34 <HAL_AT_CONN_Init+0x3e8>)
    2a40:	47a8      	blx	r5
    memset(rsp, 0, SIM800_DEFAULT_RSP_LEN);
    2a42:	2240      	movs	r2, #64	; 0x40
    2a44:	2100      	movs	r1, #0
    2a46:	0020      	movs	r0, r4
    2a48:	4b25      	ldr	r3, [pc, #148]	; (2ae0 <HAL_AT_CONN_Init+0x394>)
    2a4a:	4798      	blx	r3
    at_send_wait_reply(AT_CMD_GPRS_ATTACH_CHECK, strlen(AT_CMD_GPRS_ATTACH_CHECK),true,
    2a4c:	2300      	movs	r3, #0
    2a4e:	9303      	str	r3, [sp, #12]
    2a50:	2240      	movs	r2, #64	; 0x40
    2a52:	9202      	str	r2, [sp, #8]
    2a54:	9401      	str	r4, [sp, #4]
    2a56:	9300      	str	r3, [sp, #0]
    2a58:	3a3f      	subs	r2, #63	; 0x3f
    2a5a:	2109      	movs	r1, #9
    2a5c:	4841      	ldr	r0, [pc, #260]	; (2b64 <HAL_AT_CONN_Init+0x418>)
    2a5e:	4d26      	ldr	r5, [pc, #152]	; (2af8 <HAL_AT_CONN_Init+0x3ac>)
    2a60:	47a8      	blx	r5
    if (strstr(rsp, SIM800_AT_CMD_SUCCESS_RSP) == NULL) {
    2a62:	4926      	ldr	r1, [pc, #152]	; (2afc <HAL_AT_CONN_Init+0x3b0>)
    2a64:	0020      	movs	r0, r4
    2a66:	4b26      	ldr	r3, [pc, #152]	; (2b00 <HAL_AT_CONN_Init+0x3b4>)
    2a68:	4798      	blx	r3
    2a6a:	2800      	cmp	r0, #0
    2a6c:	d100      	bne.n	2a70 <HAL_AT_CONN_Init+0x324>
    2a6e:	e081      	b.n	2b74 <HAL_AT_CONN_Init+0x428>
    at_conn_hal_info( "gprs attach check %s \r\n", rsp);
    2a70:	a916      	add	r1, sp, #88	; 0x58
    2a72:	483d      	ldr	r0, [pc, #244]	; (2b68 <HAL_AT_CONN_Init+0x41c>)
    2a74:	4c2e      	ldr	r4, [pc, #184]	; (2b30 <HAL_AT_CONN_Init+0x3e4>)
    2a76:	47a0      	blx	r4
    2a78:	482e      	ldr	r0, [pc, #184]	; (2b34 <HAL_AT_CONN_Init+0x3e8>)
    2a7a:	47a0      	blx	r4
    ret = sim800_gprs_ip_init();
    2a7c:	4b3b      	ldr	r3, [pc, #236]	; (2b6c <HAL_AT_CONN_Init+0x420>)
    2a7e:	4798      	blx	r3
    if (ret) {
    2a80:	2800      	cmp	r0, #0
    2a82:	d100      	bne.n	2a86 <HAL_AT_CONN_Init+0x33a>
    2a84:	e081      	b.n	2b8a <HAL_AT_CONN_Init+0x43e>
        at_conn_hal_err( "%s %d failed \r\n", __func__, __LINE__);
    2a86:	228d      	movs	r2, #141	; 0x8d
    2a88:	0092      	lsls	r2, r2, #2
    2a8a:	4926      	ldr	r1, [pc, #152]	; (2b24 <HAL_AT_CONN_Init+0x3d8>)
    2a8c:	310c      	adds	r1, #12
    2a8e:	482e      	ldr	r0, [pc, #184]	; (2b48 <HAL_AT_CONN_Init+0x3fc>)
    2a90:	4c27      	ldr	r4, [pc, #156]	; (2b30 <HAL_AT_CONN_Init+0x3e4>)
    2a92:	47a0      	blx	r4
    2a94:	4827      	ldr	r0, [pc, #156]	; (2b34 <HAL_AT_CONN_Init+0x3e8>)
    2a96:	47a0      	blx	r4
        goto err;
    2a98:	e75b      	b.n	2952 <HAL_AT_CONN_Init+0x206>
        at_conn_hal_err( "%s %d failed rsp %s\r\n", __func__, __LINE__, rsp);
    2a9a:	ab16      	add	r3, sp, #88	; 0x58
    2a9c:	2274      	movs	r2, #116	; 0x74
    2a9e:	32ff      	adds	r2, #255	; 0xff
    2aa0:	4920      	ldr	r1, [pc, #128]	; (2b24 <HAL_AT_CONN_Init+0x3d8>)
    2aa2:	3134      	adds	r1, #52	; 0x34
    2aa4:	482a      	ldr	r0, [pc, #168]	; (2b50 <HAL_AT_CONN_Init+0x404>)
    2aa6:	4c22      	ldr	r4, [pc, #136]	; (2b30 <HAL_AT_CONN_Init+0x3e4>)
    2aa8:	47a0      	blx	r4
    2aaa:	4822      	ldr	r0, [pc, #136]	; (2b34 <HAL_AT_CONN_Init+0x3e8>)
    2aac:	47a0      	blx	r4
        at_conn_hal_err( "%s %d failed \r\n", __func__, __LINE__);
    2aae:	4a30      	ldr	r2, [pc, #192]	; (2b70 <HAL_AT_CONN_Init+0x424>)
    2ab0:	491c      	ldr	r1, [pc, #112]	; (2b24 <HAL_AT_CONN_Init+0x3d8>)
    2ab2:	310c      	adds	r1, #12
    2ab4:	4824      	ldr	r0, [pc, #144]	; (2b48 <HAL_AT_CONN_Init+0x3fc>)
    2ab6:	4c1e      	ldr	r4, [pc, #120]	; (2b30 <HAL_AT_CONN_Init+0x3e4>)
    2ab8:	47a0      	blx	r4
    2aba:	481e      	ldr	r0, [pc, #120]	; (2b34 <HAL_AT_CONN_Init+0x3e8>)
    2abc:	47a0      	blx	r4
        goto err;
    2abe:	e748      	b.n	2952 <HAL_AT_CONN_Init+0x206>
        at_conn_hal_err( "%s %d failed rsp %s\r\n", __func__, __LINE__, rsp);
    2ac0:	ab16      	add	r3, sp, #88	; 0x58
    2ac2:	227e      	movs	r2, #126	; 0x7e
    2ac4:	32ff      	adds	r2, #255	; 0xff
    2ac6:	4917      	ldr	r1, [pc, #92]	; (2b24 <HAL_AT_CONN_Init+0x3d8>)
    2ac8:	3134      	adds	r1, #52	; 0x34
    2aca:	4821      	ldr	r0, [pc, #132]	; (2b50 <HAL_AT_CONN_Init+0x404>)
    2acc:	4c18      	ldr	r4, [pc, #96]	; (2b30 <HAL_AT_CONN_Init+0x3e4>)
    2ace:	47a0      	blx	r4
    2ad0:	4818      	ldr	r0, [pc, #96]	; (2b34 <HAL_AT_CONN_Init+0x3e8>)
    2ad2:	47a0      	blx	r4
    2ad4:	e7eb      	b.n	2aae <HAL_AT_CONN_Init+0x362>
    2ad6:	46c0      	nop			; (mov r8, r8)
    2ad8:	2000085c 	.word	0x2000085c
    2adc:	2000065c 	.word	0x2000065c
    2ae0:	000085c9 	.word	0x000085c9
    2ae4:	00007d29 	.word	0x00007d29
    2ae8:	0000a088 	.word	0x0000a088
    2aec:	00009d98 	.word	0x00009d98
    2af0:	00002681 	.word	0x00002681
    2af4:	00009dc0 	.word	0x00009dc0
    2af8:	00001ded 	.word	0x00001ded
    2afc:	00009abc 	.word	0x00009abc
    2b00:	000089eb 	.word	0x000089eb
    2b04:	00009dc8 	.word	0x00009dc8
    2b08:	00009cf8 	.word	0x00009cf8
    2b0c:	00007d75 	.word	0x00007d75
    2b10:	00008991 	.word	0x00008991
    2b14:	00009dd0 	.word	0x00009dd0
    2b18:	00009dd8 	.word	0x00009dd8
    2b1c:	00009de4 	.word	0x00009de4
    2b20:	00009dec 	.word	0x00009dec
    2b24:	000099ec 	.word	0x000099ec
    2b28:	00007d65 	.word	0x00007d65
    2b2c:	00009cc4 	.word	0x00009cc4
    2b30:	00007d35 	.word	0x00007d35
    2b34:	00009cb4 	.word	0x00009cb4
    2b38:	00009d48 	.word	0x00009d48
    2b3c:	00009d74 	.word	0x00009d74
    2b40:	00000215 	.word	0x00000215
    2b44:	00009d9c 	.word	0x00009d9c
    2b48:	00009e68 	.word	0x00009e68
    2b4c:	00007d2d 	.word	0x00007d2d
    2b50:	00009af4 	.word	0x00009af4
    2b54:	00009df8 	.word	0x00009df8
    2b58:	00009e00 	.word	0x00009e00
    2b5c:	00009e18 	.word	0x00009e18
    2b60:	00009e24 	.word	0x00009e24
    2b64:	00009e44 	.word	0x00009e44
    2b68:	00009e50 	.word	0x00009e50
    2b6c:	00002455 	.word	0x00002455
    2b70:	0000022e 	.word	0x0000022e
        at_conn_hal_err( "%s %d failed rsp %s\r\n", __func__, __LINE__, rsp);
    2b74:	ab16      	add	r3, sp, #88	; 0x58
    2b76:	22c4      	movs	r2, #196	; 0xc4
    2b78:	0052      	lsls	r2, r2, #1
    2b7a:	4916      	ldr	r1, [pc, #88]	; (2bd4 <HAL_AT_CONN_Init+0x488>)
    2b7c:	3134      	adds	r1, #52	; 0x34
    2b7e:	4816      	ldr	r0, [pc, #88]	; (2bd8 <HAL_AT_CONN_Init+0x48c>)
    2b80:	4c16      	ldr	r4, [pc, #88]	; (2bdc <HAL_AT_CONN_Init+0x490>)
    2b82:	47a0      	blx	r4
    2b84:	4816      	ldr	r0, [pc, #88]	; (2be0 <HAL_AT_CONN_Init+0x494>)
    2b86:	47a0      	blx	r4
    2b88:	e791      	b.n	2aae <HAL_AT_CONN_Init+0x362>
    at_register_callback(AT_CMD_DOMAIN_RSP, AT_RECV_PREFIX, SIM800_DOMAIN_RSP_MAX_LEN,
    2b8a:	2500      	movs	r5, #0
    2b8c:	9500      	str	r5, [sp, #0]
    2b8e:	4b15      	ldr	r3, [pc, #84]	; (2be4 <HAL_AT_CONN_Init+0x498>)
    2b90:	2280      	movs	r2, #128	; 0x80
    2b92:	0092      	lsls	r2, r2, #2
    2b94:	4912      	ldr	r1, [pc, #72]	; (2be0 <HAL_AT_CONN_Init+0x494>)
    2b96:	4814      	ldr	r0, [pc, #80]	; (2be8 <HAL_AT_CONN_Init+0x49c>)
    2b98:	4c14      	ldr	r4, [pc, #80]	; (2bec <HAL_AT_CONN_Init+0x4a0>)
    2b9a:	47a0      	blx	r4
    at_register_callback(AT_CMD_DATA_RECV, NULL, 0, sim800_gprs_module_socket_data_handle, NULL);
    2b9c:	9500      	str	r5, [sp, #0]
    2b9e:	4b14      	ldr	r3, [pc, #80]	; (2bf0 <HAL_AT_CONN_Init+0x4a4>)
    2ba0:	2200      	movs	r2, #0
    2ba2:	2100      	movs	r1, #0
    2ba4:	4813      	ldr	r0, [pc, #76]	; (2bf4 <HAL_AT_CONN_Init+0x4a8>)
    2ba6:	47a0      	blx	r4
    ret = sim800_gprs_got_ip();
    2ba8:	4b13      	ldr	r3, [pc, #76]	; (2bf8 <HAL_AT_CONN_Init+0x4ac>)
    2baa:	4798      	blx	r3
    if (ret) {
    2bac:	2800      	cmp	r0, #0
    2bae:	d104      	bne.n	2bba <HAL_AT_CONN_Init+0x46e>
    inited = 1;
    2bb0:	2101      	movs	r1, #1
    2bb2:	2350      	movs	r3, #80	; 0x50
    2bb4:	4a11      	ldr	r2, [pc, #68]	; (2bfc <HAL_AT_CONN_Init+0x4b0>)
    2bb6:	54d1      	strb	r1, [r2, r3]
    return 0;
    2bb8:	e6da      	b.n	2970 <HAL_AT_CONN_Init+0x224>
        at_conn_hal_err( "%s %d failed \r\n", __func__, __LINE__);
    2bba:	4a11      	ldr	r2, [pc, #68]	; (2c00 <HAL_AT_CONN_Init+0x4b4>)
    2bbc:	4905      	ldr	r1, [pc, #20]	; (2bd4 <HAL_AT_CONN_Init+0x488>)
    2bbe:	310c      	adds	r1, #12
    2bc0:	4810      	ldr	r0, [pc, #64]	; (2c04 <HAL_AT_CONN_Init+0x4b8>)
    2bc2:	4c06      	ldr	r4, [pc, #24]	; (2bdc <HAL_AT_CONN_Init+0x490>)
    2bc4:	47a0      	blx	r4
    2bc6:	4806      	ldr	r0, [pc, #24]	; (2be0 <HAL_AT_CONN_Init+0x494>)
    2bc8:	47a0      	blx	r4
        goto err;
    2bca:	e6c2      	b.n	2952 <HAL_AT_CONN_Init+0x206>
    return -1;
    2bcc:	2001      	movs	r0, #1
    2bce:	4240      	negs	r0, r0
    2bd0:	e6ce      	b.n	2970 <HAL_AT_CONN_Init+0x224>
    2bd2:	46c0      	nop			; (mov r8, r8)
    2bd4:	000099ec 	.word	0x000099ec
    2bd8:	00009af4 	.word	0x00009af4
    2bdc:	00007d35 	.word	0x00007d35
    2be0:	00009cb4 	.word	0x00009cb4
    2be4:	0000240d 	.word	0x0000240d
    2be8:	00009e78 	.word	0x00009e78
    2bec:	00001999 	.word	0x00001999
    2bf0:	000021cd 	.word	0x000021cd
    2bf4:	00009e88 	.word	0x00009e88
    2bf8:	00002099 	.word	0x00002099
    2bfc:	2000085c 	.word	0x2000085c
    2c00:	0000023e 	.word	0x0000023e
    2c04:	00009e68 	.word	0x00009e68

00002c08 <HAL_AT_CONN_DomainToIp>:
    inited = 0;
    return 0;
}

int HAL_AT_CONN_DomainToIp(char *domain, char ip[16])
{
    2c08:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c0a:	46de      	mov	lr, fp
    2c0c:	4647      	mov	r7, r8
    2c0e:	b580      	push	{r7, lr}
    2c10:	b0ad      	sub	sp, #180	; 0xb4
    2c12:	9005      	str	r0, [sp, #20]
    2c14:	468b      	mov	fp, r1
    char *pccmd = NULL;
    char *head = NULL;
    char *end = NULL;
    char rsp[SIM800_DEFAULT_RSP_LEN] = {0};
    2c16:	2240      	movs	r2, #64	; 0x40
    2c18:	2100      	movs	r1, #0
    2c1a:	a81c      	add	r0, sp, #112	; 0x70
    2c1c:	4b81      	ldr	r3, [pc, #516]	; (2e24 <HAL_AT_CONN_DomainToIp+0x21c>)
    2c1e:	4798      	blx	r3

    if (!inited) {
    2c20:	2350      	movs	r3, #80	; 0x50
    2c22:	4a81      	ldr	r2, [pc, #516]	; (2e28 <HAL_AT_CONN_DomainToIp+0x220>)
    2c24:	5cd3      	ldrb	r3, [r2, r3]
    2c26:	2b00      	cmp	r3, #0
    2c28:	d02c      	beq.n	2c84 <HAL_AT_CONN_DomainToIp+0x7c>
        at_conn_hal_err( "%s sim800 gprs module haven't init yet \r\n", __func__);
        return -1;
    }

    if (NULL == domain || NULL == ip) {
    2c2a:	9b05      	ldr	r3, [sp, #20]
    2c2c:	2b00      	cmp	r3, #0
    2c2e:	d033      	beq.n	2c98 <HAL_AT_CONN_DomainToIp+0x90>
    2c30:	465b      	mov	r3, fp
    2c32:	2b00      	cmp	r3, #0
    2c34:	d030      	beq.n	2c98 <HAL_AT_CONN_DomainToIp+0x90>
        at_conn_hal_err( "invalid input at %s \r\n", __func__);
        return -1;
    }

    if (strlen(domain) > SIM800_DOMAIN_MAX_LEN) {
    2c36:	9805      	ldr	r0, [sp, #20]
    2c38:	4b7c      	ldr	r3, [pc, #496]	; (2e2c <HAL_AT_CONN_DomainToIp+0x224>)
    2c3a:	4798      	blx	r3
    2c3c:	2380      	movs	r3, #128	; 0x80
    2c3e:	005b      	lsls	r3, r3, #1
    2c40:	4298      	cmp	r0, r3
    2c42:	d833      	bhi.n	2cac <HAL_AT_CONN_DomainToIp+0xa4>
    if (NULL == pccmd) {
        at_conn_hal_err( "fail to malloc memory %d at %s \r\n", SIM800_DOMAIN_CMD_LEN, __func__);
        return -1;
    }

    memset(pccmd, 0, SIM800_DOMAIN_CMD_LEN);
    2c44:	4c78      	ldr	r4, [pc, #480]	; (2e28 <HAL_AT_CONN_DomainToIp+0x220>)
    2c46:	0025      	movs	r5, r4
    2c48:	3558      	adds	r5, #88	; 0x58
    2c4a:	2286      	movs	r2, #134	; 0x86
    2c4c:	0052      	lsls	r2, r2, #1
    2c4e:	2100      	movs	r1, #0
    2c50:	0028      	movs	r0, r5
    2c52:	4b74      	ldr	r3, [pc, #464]	; (2e24 <HAL_AT_CONN_DomainToIp+0x21c>)
    2c54:	4798      	blx	r3
    HAL_Snprintf(pccmd, SIM800_DOMAIN_CMD_LEN - 1, "%s=%s", AT_CMD_DOMAIN_TO_IP, domain);
    2c56:	9b05      	ldr	r3, [sp, #20]
    2c58:	9300      	str	r3, [sp, #0]
    2c5a:	4b75      	ldr	r3, [pc, #468]	; (2e30 <HAL_AT_CONN_DomainToIp+0x228>)
    2c5c:	4a75      	ldr	r2, [pc, #468]	; (2e34 <HAL_AT_CONN_DomainToIp+0x22c>)
    2c5e:	210c      	movs	r1, #12
    2c60:	31ff      	adds	r1, #255	; 0xff
    2c62:	0028      	movs	r0, r5
    2c64:	4d74      	ldr	r5, [pc, #464]	; (2e38 <HAL_AT_CONN_DomainToIp+0x230>)
    2c66:	47a8      	blx	r5

    HAL_MutexLock(g_domain_mutex);
    2c68:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2c6a:	4b74      	ldr	r3, [pc, #464]	; (2e3c <HAL_AT_CONN_DomainToIp+0x234>)
    2c6c:	4798      	blx	r3
restart:
    at_send_wait_reply(pccmd, strlen(pccmd), true, NULL, 0, rsp,
    2c6e:	4d6e      	ldr	r5, [pc, #440]	; (2e28 <HAL_AT_CONN_DomainToIp+0x220>)
    2c70:	3558      	adds	r5, #88	; 0x58
    2c72:	9506      	str	r5, [sp, #24]
    2c74:	4d6d      	ldr	r5, [pc, #436]	; (2e2c <HAL_AT_CONN_DomainToIp+0x224>)
                       SIM800_DEFAULT_RSP_LEN, NULL);
    if (strstr(rsp, SIM800_AT_CMD_SUCCESS_RSP) == NULL) {
        at_conn_hal_err( "%s %d failed rsp %s\r\n", __func__, __LINE__, rsp);
    2c76:	4b72      	ldr	r3, [pc, #456]	; (2e40 <HAL_AT_CONN_DomainToIp+0x238>)
    2c78:	3350      	adds	r3, #80	; 0x50
    2c7a:	4698      	mov	r8, r3
     * formate is :
       +CDNSGIP: 1,"www.baidu.com","183.232.231.173","183.232.231.172"
       or :
       +CDNSGIP: 0,8
    */
    if ((head = strstr(g_pcdomain_rsp, domain)) == NULL) {
    2c7c:	4b71      	ldr	r3, [pc, #452]	; (2e44 <HAL_AT_CONN_DomainToIp+0x23c>)
    2c7e:	3348      	adds	r3, #72	; 0x48
    2c80:	9307      	str	r3, [sp, #28]
    2c82:	e05c      	b.n	2d3e <HAL_AT_CONN_DomainToIp+0x136>
        at_conn_hal_err( "%s sim800 gprs module haven't init yet \r\n", __func__);
    2c84:	496e      	ldr	r1, [pc, #440]	; (2e40 <HAL_AT_CONN_DomainToIp+0x238>)
    2c86:	3150      	adds	r1, #80	; 0x50
    2c88:	486f      	ldr	r0, [pc, #444]	; (2e48 <HAL_AT_CONN_DomainToIp+0x240>)
    2c8a:	4c70      	ldr	r4, [pc, #448]	; (2e4c <HAL_AT_CONN_DomainToIp+0x244>)
    2c8c:	47a0      	blx	r4
    2c8e:	4870      	ldr	r0, [pc, #448]	; (2e50 <HAL_AT_CONN_DomainToIp+0x248>)
    2c90:	47a0      	blx	r4
        return -1;
    2c92:	2001      	movs	r0, #1
    2c94:	4240      	negs	r0, r0
    2c96:	e0c0      	b.n	2e1a <HAL_AT_CONN_DomainToIp+0x212>
        at_conn_hal_err( "invalid input at %s \r\n", __func__);
    2c98:	4969      	ldr	r1, [pc, #420]	; (2e40 <HAL_AT_CONN_DomainToIp+0x238>)
    2c9a:	3150      	adds	r1, #80	; 0x50
    2c9c:	486d      	ldr	r0, [pc, #436]	; (2e54 <HAL_AT_CONN_DomainToIp+0x24c>)
    2c9e:	4c6b      	ldr	r4, [pc, #428]	; (2e4c <HAL_AT_CONN_DomainToIp+0x244>)
    2ca0:	47a0      	blx	r4
    2ca2:	486b      	ldr	r0, [pc, #428]	; (2e50 <HAL_AT_CONN_DomainToIp+0x248>)
    2ca4:	47a0      	blx	r4
        return -1;
    2ca6:	2001      	movs	r0, #1
    2ca8:	4240      	negs	r0, r0
    2caa:	e0b6      	b.n	2e1a <HAL_AT_CONN_DomainToIp+0x212>
        at_conn_hal_err( "domain length oversize at %s \r\n", __func__);
    2cac:	4964      	ldr	r1, [pc, #400]	; (2e40 <HAL_AT_CONN_DomainToIp+0x238>)
    2cae:	3150      	adds	r1, #80	; 0x50
    2cb0:	4869      	ldr	r0, [pc, #420]	; (2e58 <HAL_AT_CONN_DomainToIp+0x250>)
    2cb2:	4c66      	ldr	r4, [pc, #408]	; (2e4c <HAL_AT_CONN_DomainToIp+0x244>)
    2cb4:	47a0      	blx	r4
    2cb6:	4866      	ldr	r0, [pc, #408]	; (2e50 <HAL_AT_CONN_DomainToIp+0x248>)
    2cb8:	47a0      	blx	r4
        return -1;
    2cba:	2001      	movs	r0, #1
    2cbc:	4240      	negs	r0, r0
    2cbe:	e0ac      	b.n	2e1a <HAL_AT_CONN_DomainToIp+0x212>
        at_conn_hal_err( "%s %d failed rsp %s\r\n", __func__, __LINE__, rsp);
    2cc0:	ab1c      	add	r3, sp, #112	; 0x70
    2cc2:	4a66      	ldr	r2, [pc, #408]	; (2e5c <HAL_AT_CONN_DomainToIp+0x254>)
    2cc4:	4641      	mov	r1, r8
    2cc6:	4866      	ldr	r0, [pc, #408]	; (2e60 <HAL_AT_CONN_DomainToIp+0x258>)
    2cc8:	4c60      	ldr	r4, [pc, #384]	; (2e4c <HAL_AT_CONN_DomainToIp+0x244>)
    2cca:	47a0      	blx	r4
    2ccc:	4860      	ldr	r0, [pc, #384]	; (2e50 <HAL_AT_CONN_DomainToIp+0x248>)
    2cce:	47a0      	blx	r4
        goto err;
    2cd0:	e07a      	b.n	2dc8 <HAL_AT_CONN_DomainToIp+0x1c0>
        at_conn_hal_err( "invalid domain rsp %s at %d\r\n", g_pcdomain_rsp, __LINE__);
    2cd2:	22a7      	movs	r2, #167	; 0xa7
    2cd4:	0092      	lsls	r2, r2, #2
    2cd6:	495b      	ldr	r1, [pc, #364]	; (2e44 <HAL_AT_CONN_DomainToIp+0x23c>)
    2cd8:	3148      	adds	r1, #72	; 0x48
    2cda:	4862      	ldr	r0, [pc, #392]	; (2e64 <HAL_AT_CONN_DomainToIp+0x25c>)
    2cdc:	4c5b      	ldr	r4, [pc, #364]	; (2e4c <HAL_AT_CONN_DomainToIp+0x244>)
    2cde:	47a0      	blx	r4
    2ce0:	485b      	ldr	r0, [pc, #364]	; (2e50 <HAL_AT_CONN_DomainToIp+0x248>)
    2ce2:	47a0      	blx	r4
        goto err;
    2ce4:	e070      	b.n	2dc8 <HAL_AT_CONN_DomainToIp+0x1c0>
    }

    head += (strlen(domain) + 3);
    if ((end = strstr(head, "\"")) == NULL) {
        at_conn_hal_err( "invalid domain rsp head is %s at %d\r\n", head, __LINE__);
    2ce6:	4a60      	ldr	r2, [pc, #384]	; (2e68 <HAL_AT_CONN_DomainToIp+0x260>)
    2ce8:	0021      	movs	r1, r4
    2cea:	4860      	ldr	r0, [pc, #384]	; (2e6c <HAL_AT_CONN_DomainToIp+0x264>)
    2cec:	4c57      	ldr	r4, [pc, #348]	; (2e4c <HAL_AT_CONN_DomainToIp+0x244>)
    2cee:	47a0      	blx	r4
    2cf0:	4857      	ldr	r0, [pc, #348]	; (2e50 <HAL_AT_CONN_DomainToIp+0x248>)
    2cf2:	47a0      	blx	r4
        goto err;
    2cf4:	e068      	b.n	2dc8 <HAL_AT_CONN_DomainToIp+0x1c0>
    2cf6:	0007      	movs	r7, r0
        at_conn_hal_err( "invalid domain rsp head is %s at %d\r\n", head, __LINE__);
        goto err;
    }

    /* We find a good IP, save it. */
    memcpy(ip, head, end - head);
    2cf8:	0002      	movs	r2, r0
    2cfa:	0021      	movs	r1, r4
    2cfc:	4658      	mov	r0, fp
    2cfe:	4b5c      	ldr	r3, [pc, #368]	; (2e70 <HAL_AT_CONN_DomainToIp+0x268>)
    2d00:	4798      	blx	r3
    ip[end - head] = '\0';
    2d02:	2300      	movs	r3, #0
    2d04:	465a      	mov	r2, fp
    2d06:	55d3      	strb	r3, [r2, r7]
    memset(g_pcdomain_rsp, 0, SIM800_DOMAIN_RSP_MAX_LEN);
    2d08:	2280      	movs	r2, #128	; 0x80
    2d0a:	0092      	lsls	r2, r2, #2
    2d0c:	2100      	movs	r1, #0
    2d0e:	484d      	ldr	r0, [pc, #308]	; (2e44 <HAL_AT_CONN_DomainToIp+0x23c>)
    2d10:	3048      	adds	r0, #72	; 0x48
    2d12:	4b44      	ldr	r3, [pc, #272]	; (2e24 <HAL_AT_CONN_DomainToIp+0x21c>)
    2d14:	4798      	blx	r3
    HAL_MutexUnlock(g_domain_mutex);
    2d16:	4b44      	ldr	r3, [pc, #272]	; (2e28 <HAL_AT_CONN_DomainToIp+0x220>)
    2d18:	6d58      	ldr	r0, [r3, #84]	; 0x54
    2d1a:	4b56      	ldr	r3, [pc, #344]	; (2e74 <HAL_AT_CONN_DomainToIp+0x26c>)
    2d1c:	4798      	blx	r3

    return 0;
    2d1e:	2000      	movs	r0, #0
    2d20:	e07b      	b.n	2e1a <HAL_AT_CONN_DomainToIp+0x212>
        at_conn_hal_err( "%s %d failed rsp %s\r\n", __func__, __LINE__, rsp);
    2d22:	ab0c      	add	r3, sp, #48	; 0x30
    2d24:	22fe      	movs	r2, #254	; 0xfe
    2d26:	32ff      	adds	r2, #255	; 0xff
    2d28:	4945      	ldr	r1, [pc, #276]	; (2e40 <HAL_AT_CONN_DomainToIp+0x238>)
    2d2a:	3168      	adds	r1, #104	; 0x68
    2d2c:	484c      	ldr	r0, [pc, #304]	; (2e60 <HAL_AT_CONN_DomainToIp+0x258>)
    2d2e:	4c47      	ldr	r4, [pc, #284]	; (2e4c <HAL_AT_CONN_DomainToIp+0x244>)
    2d30:	47a0      	blx	r4
    2d32:	4847      	ldr	r0, [pc, #284]	; (2e50 <HAL_AT_CONN_DomainToIp+0x248>)
    2d34:	47a0      	blx	r4
err:
    if (sim800_gprs_get_ip_only() != 0) {
        sim800_gprs_ip_init();
    2d36:	4b50      	ldr	r3, [pc, #320]	; (2e78 <HAL_AT_CONN_DomainToIp+0x270>)
    2d38:	4798      	blx	r3
        sim800_gprs_got_ip();
    2d3a:	4b50      	ldr	r3, [pc, #320]	; (2e7c <HAL_AT_CONN_DomainToIp+0x274>)
    2d3c:	4798      	blx	r3
    at_send_wait_reply(pccmd, strlen(pccmd), true, NULL, 0, rsp,
    2d3e:	9e06      	ldr	r6, [sp, #24]
    2d40:	0030      	movs	r0, r6
    2d42:	47a8      	blx	r5
    2d44:	0001      	movs	r1, r0
    2d46:	2300      	movs	r3, #0
    2d48:	9303      	str	r3, [sp, #12]
    2d4a:	2240      	movs	r2, #64	; 0x40
    2d4c:	9202      	str	r2, [sp, #8]
    2d4e:	ac1c      	add	r4, sp, #112	; 0x70
    2d50:	9401      	str	r4, [sp, #4]
    2d52:	9300      	str	r3, [sp, #0]
    2d54:	3a3f      	subs	r2, #63	; 0x3f
    2d56:	0030      	movs	r0, r6
    2d58:	4e49      	ldr	r6, [pc, #292]	; (2e80 <HAL_AT_CONN_DomainToIp+0x278>)
    2d5a:	47b0      	blx	r6
    if (strstr(rsp, SIM800_AT_CMD_SUCCESS_RSP) == NULL) {
    2d5c:	4949      	ldr	r1, [pc, #292]	; (2e84 <HAL_AT_CONN_DomainToIp+0x27c>)
    2d5e:	0020      	movs	r0, r4
    2d60:	4b49      	ldr	r3, [pc, #292]	; (2e88 <HAL_AT_CONN_DomainToIp+0x280>)
    2d62:	4798      	blx	r3
    2d64:	2800      	cmp	r0, #0
    2d66:	d0ab      	beq.n	2cc0 <HAL_AT_CONN_DomainToIp+0xb8>
    while(!g_domain_mark) {
    2d68:	4b2f      	ldr	r3, [pc, #188]	; (2e28 <HAL_AT_CONN_DomainToIp+0x220>)
    2d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	d10c      	bne.n	2d8a <HAL_AT_CONN_DomainToIp+0x182>
        at_yield(NULL, 0, NULL, 100);
    2d70:	4e46      	ldr	r6, [pc, #280]	; (2e8c <HAL_AT_CONN_DomainToIp+0x284>)
        HAL_SleepMs(50);
    2d72:	4f47      	ldr	r7, [pc, #284]	; (2e90 <HAL_AT_CONN_DomainToIp+0x288>)
    while(!g_domain_mark) {
    2d74:	4c2c      	ldr	r4, [pc, #176]	; (2e28 <HAL_AT_CONN_DomainToIp+0x220>)
        at_yield(NULL, 0, NULL, 100);
    2d76:	2364      	movs	r3, #100	; 0x64
    2d78:	2200      	movs	r2, #0
    2d7a:	2100      	movs	r1, #0
    2d7c:	2000      	movs	r0, #0
    2d7e:	47b0      	blx	r6
        HAL_SleepMs(50);
    2d80:	2032      	movs	r0, #50	; 0x32
    2d82:	47b8      	blx	r7
    while(!g_domain_mark) {
    2d84:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2d86:	2b00      	cmp	r3, #0
    2d88:	d0f5      	beq.n	2d76 <HAL_AT_CONN_DomainToIp+0x16e>
    g_domain_mark = 0;
    2d8a:	2200      	movs	r2, #0
    2d8c:	4b26      	ldr	r3, [pc, #152]	; (2e28 <HAL_AT_CONN_DomainToIp+0x220>)
    2d8e:	649a      	str	r2, [r3, #72]	; 0x48
    if ((head = strstr(g_pcdomain_rsp, domain)) == NULL) {
    2d90:	9905      	ldr	r1, [sp, #20]
    2d92:	9807      	ldr	r0, [sp, #28]
    2d94:	4b3c      	ldr	r3, [pc, #240]	; (2e88 <HAL_AT_CONN_DomainToIp+0x280>)
    2d96:	4798      	blx	r3
    2d98:	1e04      	subs	r4, r0, #0
    2d9a:	d09a      	beq.n	2cd2 <HAL_AT_CONN_DomainToIp+0xca>
    head += (strlen(domain) + 3);
    2d9c:	9805      	ldr	r0, [sp, #20]
    2d9e:	4b23      	ldr	r3, [pc, #140]	; (2e2c <HAL_AT_CONN_DomainToIp+0x224>)
    2da0:	4798      	blx	r3
    2da2:	3003      	adds	r0, #3
    2da4:	1824      	adds	r4, r4, r0
    if ((end = strstr(head, "\"")) == NULL) {
    2da6:	2122      	movs	r1, #34	; 0x22
    2da8:	0020      	movs	r0, r4
    2daa:	4b3a      	ldr	r3, [pc, #232]	; (2e94 <HAL_AT_CONN_DomainToIp+0x28c>)
    2dac:	4798      	blx	r3
    2dae:	2800      	cmp	r0, #0
    2db0:	d099      	beq.n	2ce6 <HAL_AT_CONN_DomainToIp+0xde>
    if ((end - head) > 15 || (end - head) < 7) {
    2db2:	1b00      	subs	r0, r0, r4
    2db4:	1fc3      	subs	r3, r0, #7
    2db6:	2b08      	cmp	r3, #8
    2db8:	d99d      	bls.n	2cf6 <HAL_AT_CONN_DomainToIp+0xee>
        at_conn_hal_err( "invalid domain rsp head is %s at %d\r\n", head, __LINE__);
    2dba:	4a37      	ldr	r2, [pc, #220]	; (2e98 <HAL_AT_CONN_DomainToIp+0x290>)
    2dbc:	0021      	movs	r1, r4
    2dbe:	482b      	ldr	r0, [pc, #172]	; (2e6c <HAL_AT_CONN_DomainToIp+0x264>)
    2dc0:	4c22      	ldr	r4, [pc, #136]	; (2e4c <HAL_AT_CONN_DomainToIp+0x244>)
    2dc2:	47a0      	blx	r4
    2dc4:	4822      	ldr	r0, [pc, #136]	; (2e50 <HAL_AT_CONN_DomainToIp+0x248>)
    2dc6:	47a0      	blx	r4
    char rsp[SIM800_DEFAULT_RSP_LEN] = {0};
    2dc8:	ac0c      	add	r4, sp, #48	; 0x30
    2dca:	2240      	movs	r2, #64	; 0x40
    2dcc:	2100      	movs	r1, #0
    2dce:	0020      	movs	r0, r4
    2dd0:	4b14      	ldr	r3, [pc, #80]	; (2e24 <HAL_AT_CONN_DomainToIp+0x21c>)
    2dd2:	4798      	blx	r3
    atcmd_config_t atcmd_config = {NULL, AT_RECV_PREFIX, NULL};
    2dd4:	aa09      	add	r2, sp, #36	; 0x24
    2dd6:	2300      	movs	r3, #0
    2dd8:	9309      	str	r3, [sp, #36]	; 0x24
    2dda:	491d      	ldr	r1, [pc, #116]	; (2e50 <HAL_AT_CONN_DomainToIp+0x248>)
    2ddc:	910a      	str	r1, [sp, #40]	; 0x28
    2dde:	930b      	str	r3, [sp, #44]	; 0x2c
    at_send_wait_reply(AT_CMD_GOT_LOCAL_IP, strlen(AT_CMD_GOT_LOCAL_IP), true,
    2de0:	9203      	str	r2, [sp, #12]
    2de2:	2240      	movs	r2, #64	; 0x40
    2de4:	9202      	str	r2, [sp, #8]
    2de6:	9401      	str	r4, [sp, #4]
    2de8:	9300      	str	r3, [sp, #0]
    2dea:	3a3f      	subs	r2, #63	; 0x3f
    2dec:	2108      	movs	r1, #8
    2dee:	482b      	ldr	r0, [pc, #172]	; (2e9c <HAL_AT_CONN_DomainToIp+0x294>)
    2df0:	4f23      	ldr	r7, [pc, #140]	; (2e80 <HAL_AT_CONN_DomainToIp+0x278>)
    2df2:	47b8      	blx	r7
    if (strstr(rsp, SIM800_AT_CMD_FAIL_RSP) != NULL) {
    2df4:	492a      	ldr	r1, [pc, #168]	; (2ea0 <HAL_AT_CONN_DomainToIp+0x298>)
    2df6:	0020      	movs	r0, r4
    2df8:	4b23      	ldr	r3, [pc, #140]	; (2e88 <HAL_AT_CONN_DomainToIp+0x280>)
    2dfa:	4798      	blx	r3
    2dfc:	2800      	cmp	r0, #0
    2dfe:	d190      	bne.n	2d22 <HAL_AT_CONN_DomainToIp+0x11a>
        goto restart;
    }

    memset(g_pcdomain_rsp, 0, SIM800_DOMAIN_RSP_MAX_LEN);
    2e00:	2280      	movs	r2, #128	; 0x80
    2e02:	0092      	lsls	r2, r2, #2
    2e04:	2100      	movs	r1, #0
    2e06:	480f      	ldr	r0, [pc, #60]	; (2e44 <HAL_AT_CONN_DomainToIp+0x23c>)
    2e08:	3048      	adds	r0, #72	; 0x48
    2e0a:	4b06      	ldr	r3, [pc, #24]	; (2e24 <HAL_AT_CONN_DomainToIp+0x21c>)
    2e0c:	4798      	blx	r3
    HAL_MutexUnlock(g_domain_mutex);
    2e0e:	4b06      	ldr	r3, [pc, #24]	; (2e28 <HAL_AT_CONN_DomainToIp+0x220>)
    2e10:	6d58      	ldr	r0, [r3, #84]	; 0x54
    2e12:	4b18      	ldr	r3, [pc, #96]	; (2e74 <HAL_AT_CONN_DomainToIp+0x26c>)
    2e14:	4798      	blx	r3

    return -1;
    2e16:	2001      	movs	r0, #1
    2e18:	4240      	negs	r0, r0
}
    2e1a:	b02d      	add	sp, #180	; 0xb4
    2e1c:	bc0c      	pop	{r2, r3}
    2e1e:	4690      	mov	r8, r2
    2e20:	469b      	mov	fp, r3
    2e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e24:	000085c9 	.word	0x000085c9
    2e28:	2000085c 	.word	0x2000085c
    2e2c:	00008991 	.word	0x00008991
    2e30:	00009ee0 	.word	0x00009ee0
    2e34:	00009eec 	.word	0x00009eec
    2e38:	00007d75 	.word	0x00007d75
    2e3c:	00007d2f 	.word	0x00007d2f
    2e40:	000099ec 	.word	0x000099ec
    2e44:	2000065c 	.word	0x2000065c
    2e48:	00009e94 	.word	0x00009e94
    2e4c:	00007d35 	.word	0x00007d35
    2e50:	00009cb4 	.word	0x00009cb4
    2e54:	00009ca0 	.word	0x00009ca0
    2e58:	00009ec0 	.word	0x00009ec0
    2e5c:	00000286 	.word	0x00000286
    2e60:	00009af4 	.word	0x00009af4
    2e64:	00009ef4 	.word	0x00009ef4
    2e68:	000002a2 	.word	0x000002a2
    2e6c:	00009f14 	.word	0x00009f14
    2e70:	000085b7 	.word	0x000085b7
    2e74:	00007d31 	.word	0x00007d31
    2e78:	00002455 	.word	0x00002455
    2e7c:	00002099 	.word	0x00002099
    2e80:	00001ded 	.word	0x00001ded
    2e84:	00009abc 	.word	0x00009abc
    2e88:	000089eb 	.word	0x000089eb
    2e8c:	00001a75 	.word	0x00001a75
    2e90:	00007d65 	.word	0x00007d65
    2e94:	00008951 	.word	0x00008951
    2e98:	000002a7 	.word	0x000002a7
    2e9c:	00009b0c 	.word	0x00009b0c
    2ea0:	00009b18 	.word	0x00009b18

00002ea4 <HAL_AT_CONN_Start>:

int HAL_AT_CONN_Start(at_conn_t *conn)
{
    2ea4:	b570      	push	{r4, r5, r6, lr}
    2ea6:	b098      	sub	sp, #96	; 0x60
    2ea8:	0005      	movs	r5, r0
    int  linkid = 0;
    char *pccmd = NULL;
    char rsp[SIM800_DEFAULT_RSP_LEN] = {0};
    2eaa:	2240      	movs	r2, #64	; 0x40
    2eac:	2100      	movs	r1, #0
    2eae:	a808      	add	r0, sp, #32
    2eb0:	4b85      	ldr	r3, [pc, #532]	; (30c8 <HAL_AT_CONN_Start+0x224>)
    2eb2:	4798      	blx	r3
    atcmd_config_t atcmd_config_client = { NULL, AT_CMD_CLIENT_CONNECT_OK, AT_CMD_CLIENT_CONNECT_FAIL};
    2eb4:	aa05      	add	r2, sp, #20
    2eb6:	4b85      	ldr	r3, [pc, #532]	; (30cc <HAL_AT_CONN_Start+0x228>)
    2eb8:	cb13      	ldmia	r3!, {r0, r1, r4}
    2eba:	c213      	stmia	r2!, {r0, r1, r4}

    if (!inited) {
    2ebc:	2350      	movs	r3, #80	; 0x50
    2ebe:	4a84      	ldr	r2, [pc, #528]	; (30d0 <HAL_AT_CONN_Start+0x22c>)
    2ec0:	5cd3      	ldrb	r3, [r2, r3]
    2ec2:	2b00      	cmp	r3, #0
    2ec4:	d024      	beq.n	2f10 <HAL_AT_CONN_Start+0x6c>
        at_conn_hal_err( "%s sim800 gprs module haven't init yet \r\n", __func__);
        return -1;
    }

    if (!conn || !conn->addr) {
    2ec6:	2d00      	cmp	r5, #0
    2ec8:	d02c      	beq.n	2f24 <HAL_AT_CONN_Start+0x80>
    2eca:	68ab      	ldr	r3, [r5, #8]
    2ecc:	2b00      	cmp	r3, #0
    2ece:	d029      	beq.n	2f24 <HAL_AT_CONN_Start+0x80>
        at_conn_hal_err( "%s %d - invalid input \r\n", __func__, __LINE__);
        return -1;
    }

    HAL_MutexLock(g_link_mutex);
    2ed0:	4b7f      	ldr	r3, [pc, #508]	; (30d0 <HAL_AT_CONN_Start+0x22c>)
    2ed2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    2ed4:	4b7f      	ldr	r3, [pc, #508]	; (30d4 <HAL_AT_CONN_Start+0x230>)
    2ed6:	4798      	blx	r3
    for (linkid = 0; linkid < SIM800_MAX_LINK_NUM; linkid++) {
        if (g_link[linkid].fd >= 0) {
    2ed8:	4b7f      	ldr	r3, [pc, #508]	; (30d8 <HAL_AT_CONN_Start+0x234>)
    2eda:	681b      	ldr	r3, [r3, #0]
    2edc:	2b00      	cmp	r3, #0
    2ede:	da00      	bge.n	2ee2 <HAL_AT_CONN_Start+0x3e>
    2ee0:	e0e8      	b.n	30b4 <HAL_AT_CONN_Start+0x210>
    2ee2:	4b7d      	ldr	r3, [pc, #500]	; (30d8 <HAL_AT_CONN_Start+0x234>)
    for (linkid = 0; linkid < SIM800_MAX_LINK_NUM; linkid++) {
    2ee4:	2401      	movs	r4, #1
        if (g_link[linkid].fd >= 0) {
    2ee6:	68da      	ldr	r2, [r3, #12]
    2ee8:	2a00      	cmp	r2, #0
    2eea:	db27      	blt.n	2f3c <HAL_AT_CONN_Start+0x98>
    for (linkid = 0; linkid < SIM800_MAX_LINK_NUM; linkid++) {
    2eec:	3401      	adds	r4, #1
    2eee:	330c      	adds	r3, #12
    2ef0:	2c06      	cmp	r4, #6
    2ef2:	d1f8      	bne.n	2ee6 <HAL_AT_CONN_Start+0x42>
            continue;
        }
        g_link[linkid].fd = conn->fd;
        break;
    }
    HAL_MutexUnlock(g_link_mutex);
    2ef4:	4b76      	ldr	r3, [pc, #472]	; (30d0 <HAL_AT_CONN_Start+0x22c>)
    2ef6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    2ef8:	4b78      	ldr	r3, [pc, #480]	; (30dc <HAL_AT_CONN_Start+0x238>)
    2efa:	4798      	blx	r3

    if (linkid >= SIM800_MAX_LINK_NUM) {
        at_conn_hal_err( "No link available for now, %s failed. \r\n", __func__);
    2efc:	4973      	ldr	r1, [pc, #460]	; (30cc <HAL_AT_CONN_Start+0x228>)
    2efe:	310c      	adds	r1, #12
    2f00:	4877      	ldr	r0, [pc, #476]	; (30e0 <HAL_AT_CONN_Start+0x23c>)
    2f02:	4c78      	ldr	r4, [pc, #480]	; (30e4 <HAL_AT_CONN_Start+0x240>)
    2f04:	47a0      	blx	r4
    2f06:	4878      	ldr	r0, [pc, #480]	; (30e8 <HAL_AT_CONN_Start+0x244>)
    2f08:	47a0      	blx	r4
        return -1;
    2f0a:	2501      	movs	r5, #1
    2f0c:	426d      	negs	r5, r5
    2f0e:	e043      	b.n	2f98 <HAL_AT_CONN_Start+0xf4>
        at_conn_hal_err( "%s sim800 gprs module haven't init yet \r\n", __func__);
    2f10:	496e      	ldr	r1, [pc, #440]	; (30cc <HAL_AT_CONN_Start+0x228>)
    2f12:	310c      	adds	r1, #12
    2f14:	4875      	ldr	r0, [pc, #468]	; (30ec <HAL_AT_CONN_Start+0x248>)
    2f16:	4c73      	ldr	r4, [pc, #460]	; (30e4 <HAL_AT_CONN_Start+0x240>)
    2f18:	47a0      	blx	r4
    2f1a:	4873      	ldr	r0, [pc, #460]	; (30e8 <HAL_AT_CONN_Start+0x244>)
    2f1c:	47a0      	blx	r4
        return -1;
    2f1e:	2501      	movs	r5, #1
    2f20:	426d      	negs	r5, r5
    2f22:	e039      	b.n	2f98 <HAL_AT_CONN_Start+0xf4>
        at_conn_hal_err( "%s %d - invalid input \r\n", __func__, __LINE__);
    2f24:	22b3      	movs	r2, #179	; 0xb3
    2f26:	0092      	lsls	r2, r2, #2
    2f28:	4968      	ldr	r1, [pc, #416]	; (30cc <HAL_AT_CONN_Start+0x228>)
    2f2a:	310c      	adds	r1, #12
    2f2c:	4870      	ldr	r0, [pc, #448]	; (30f0 <HAL_AT_CONN_Start+0x24c>)
    2f2e:	4c6d      	ldr	r4, [pc, #436]	; (30e4 <HAL_AT_CONN_Start+0x240>)
    2f30:	47a0      	blx	r4
    2f32:	486d      	ldr	r0, [pc, #436]	; (30e8 <HAL_AT_CONN_Start+0x244>)
    2f34:	47a0      	blx	r4
        return -1;
    2f36:	2501      	movs	r5, #1
    2f38:	426d      	negs	r5, r5
    2f3a:	e02d      	b.n	2f98 <HAL_AT_CONN_Start+0xf4>
        g_link[linkid].fd = conn->fd;
    2f3c:	0063      	lsls	r3, r4, #1
    2f3e:	191b      	adds	r3, r3, r4
    2f40:	009b      	lsls	r3, r3, #2
    2f42:	4a65      	ldr	r2, [pc, #404]	; (30d8 <HAL_AT_CONN_Start+0x234>)
    2f44:	6829      	ldr	r1, [r5, #0]
    2f46:	5099      	str	r1, [r3, r2]
    HAL_MutexUnlock(g_link_mutex);
    2f48:	4b61      	ldr	r3, [pc, #388]	; (30d0 <HAL_AT_CONN_Start+0x22c>)
    2f4a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    2f4c:	4b63      	ldr	r3, [pc, #396]	; (30dc <HAL_AT_CONN_Start+0x238>)
    2f4e:	4798      	blx	r3
    if (linkid >= SIM800_MAX_LINK_NUM) {
    2f50:	2c05      	cmp	r4, #5
    2f52:	dcd3      	bgt.n	2efc <HAL_AT_CONN_Start+0x58>
    pccmd = g_pccmd;
    if (NULL == pccmd) {
        at_conn_hal_err( "fail to malloc %d at %s \r\n", SIM800_CONN_CMD_LEN, __func__);
        goto err;
    }
    memset(pccmd, 0, SIM800_CONN_CMD_LEN);
    2f54:	22a0      	movs	r2, #160	; 0xa0
    2f56:	0052      	lsls	r2, r2, #1
    2f58:	2100      	movs	r1, #0
    2f5a:	485d      	ldr	r0, [pc, #372]	; (30d0 <HAL_AT_CONN_Start+0x22c>)
    2f5c:	3058      	adds	r0, #88	; 0x58
    2f5e:	4b5a      	ldr	r3, [pc, #360]	; (30c8 <HAL_AT_CONN_Start+0x224>)
    2f60:	4798      	blx	r3

    switch (conn->type) {
    2f62:	7929      	ldrb	r1, [r5, #4]
    2f64:	2901      	cmp	r1, #1
    2f66:	d048      	beq.n	2ffa <HAL_AT_CONN_Start+0x156>
    2f68:	2900      	cmp	r1, #0
    2f6a:	d018      	beq.n	2f9e <HAL_AT_CONN_Start+0xfa>
    2f6c:	2904      	cmp	r1, #4
    2f6e:	d100      	bne.n	2f72 <HAL_AT_CONN_Start+0xce>
    2f70:	e071      	b.n	3056 <HAL_AT_CONN_Start+0x1b2>
            }
            break;
        case SSL_CLIENT:
        case UDP_BROADCAST:
        default:
            at_conn_hal_err( "sim800 gprs module connect type %d not support \r\n", conn->type);
    2f72:	4860      	ldr	r0, [pc, #384]	; (30f4 <HAL_AT_CONN_Start+0x250>)
    2f74:	4d5b      	ldr	r5, [pc, #364]	; (30e4 <HAL_AT_CONN_Start+0x240>)
    2f76:	47a8      	blx	r5
    2f78:	485b      	ldr	r0, [pc, #364]	; (30e8 <HAL_AT_CONN_Start+0x244>)
    2f7a:	47a8      	blx	r5
            goto err;
    }

    return 0;
err:
    HAL_MutexLock(g_link_mutex);
    2f7c:	4e54      	ldr	r6, [pc, #336]	; (30d0 <HAL_AT_CONN_Start+0x22c>)
    2f7e:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
    2f80:	4b54      	ldr	r3, [pc, #336]	; (30d4 <HAL_AT_CONN_Start+0x230>)
    2f82:	4798      	blx	r3
    g_link[linkid].fd = -1;
    2f84:	0063      	lsls	r3, r4, #1
    2f86:	191c      	adds	r4, r3, r4
    2f88:	00a4      	lsls	r4, r4, #2
    2f8a:	2501      	movs	r5, #1
    2f8c:	426d      	negs	r5, r5
    2f8e:	4b52      	ldr	r3, [pc, #328]	; (30d8 <HAL_AT_CONN_Start+0x234>)
    2f90:	50e5      	str	r5, [r4, r3]
    HAL_MutexUnlock(g_link_mutex);
    2f92:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
    2f94:	4b51      	ldr	r3, [pc, #324]	; (30dc <HAL_AT_CONN_Start+0x238>)
    2f96:	4798      	blx	r3
    return -1;
}
    2f98:	0028      	movs	r0, r5
    2f9a:	b018      	add	sp, #96	; 0x60
    2f9c:	bd70      	pop	{r4, r5, r6, pc}
            HAL_Snprintf(pccmd, SIM800_CONN_CMD_LEN - 1, "%s=%d,%d", AT_CMD_START_TCP_SERVER, 1, conn->l_port);
    2f9e:	4e4c      	ldr	r6, [pc, #304]	; (30d0 <HAL_AT_CONN_Start+0x22c>)
    2fa0:	3658      	adds	r6, #88	; 0x58
    2fa2:	692b      	ldr	r3, [r5, #16]
    2fa4:	9301      	str	r3, [sp, #4]
    2fa6:	2301      	movs	r3, #1
    2fa8:	9300      	str	r3, [sp, #0]
    2faa:	4b53      	ldr	r3, [pc, #332]	; (30f8 <HAL_AT_CONN_Start+0x254>)
    2fac:	4a53      	ldr	r2, [pc, #332]	; (30fc <HAL_AT_CONN_Start+0x258>)
    2fae:	2140      	movs	r1, #64	; 0x40
    2fb0:	31ff      	adds	r1, #255	; 0xff
    2fb2:	0030      	movs	r0, r6
    2fb4:	4d52      	ldr	r5, [pc, #328]	; (3100 <HAL_AT_CONN_Start+0x25c>)
    2fb6:	47a8      	blx	r5
            at_send_wait_reply(pccmd, strlen(pccmd), true, NULL, 0,
    2fb8:	0030      	movs	r0, r6
    2fba:	4b52      	ldr	r3, [pc, #328]	; (3104 <HAL_AT_CONN_Start+0x260>)
    2fbc:	4798      	blx	r3
    2fbe:	0001      	movs	r1, r0
    2fc0:	2300      	movs	r3, #0
    2fc2:	9303      	str	r3, [sp, #12]
    2fc4:	2240      	movs	r2, #64	; 0x40
    2fc6:	9202      	str	r2, [sp, #8]
    2fc8:	ad08      	add	r5, sp, #32
    2fca:	9501      	str	r5, [sp, #4]
    2fcc:	9300      	str	r3, [sp, #0]
    2fce:	3a3f      	subs	r2, #63	; 0x3f
    2fd0:	0030      	movs	r0, r6
    2fd2:	4e4d      	ldr	r6, [pc, #308]	; (3108 <HAL_AT_CONN_Start+0x264>)
    2fd4:	47b0      	blx	r6
            if (strstr(rsp, SIM800_AT_CMD_SUCCESS_RSP) == NULL) {
    2fd6:	494d      	ldr	r1, [pc, #308]	; (310c <HAL_AT_CONN_Start+0x268>)
    2fd8:	0028      	movs	r0, r5
    2fda:	4b4d      	ldr	r3, [pc, #308]	; (3110 <HAL_AT_CONN_Start+0x26c>)
    2fdc:	4798      	blx	r3
    return 0;
    2fde:	2500      	movs	r5, #0
            if (strstr(rsp, SIM800_AT_CMD_SUCCESS_RSP) == NULL) {
    2fe0:	2800      	cmp	r0, #0
    2fe2:	d1d9      	bne.n	2f98 <HAL_AT_CONN_Start+0xf4>
                at_conn_hal_err( "%s %d failed rsp %s\r\n", __func__, __LINE__, rsp);
    2fe4:	ab08      	add	r3, sp, #32
    2fe6:	22bb      	movs	r2, #187	; 0xbb
    2fe8:	0092      	lsls	r2, r2, #2
    2fea:	4938      	ldr	r1, [pc, #224]	; (30cc <HAL_AT_CONN_Start+0x228>)
    2fec:	310c      	adds	r1, #12
    2fee:	4849      	ldr	r0, [pc, #292]	; (3114 <HAL_AT_CONN_Start+0x270>)
    2ff0:	4d3c      	ldr	r5, [pc, #240]	; (30e4 <HAL_AT_CONN_Start+0x240>)
    2ff2:	47a8      	blx	r5
    2ff4:	483c      	ldr	r0, [pc, #240]	; (30e8 <HAL_AT_CONN_Start+0x244>)
    2ff6:	47a8      	blx	r5
                goto err;
    2ff8:	e7c0      	b.n	2f7c <HAL_AT_CONN_Start+0xd8>
            HAL_Snprintf(pccmd, SIM800_CONN_CMD_LEN - 1, "%s=%d,\"TCP\",\"%s\",%d", AT_CMD_START_CLIENT_CONN, linkid, conn->addr,
    2ffa:	4e35      	ldr	r6, [pc, #212]	; (30d0 <HAL_AT_CONN_Start+0x22c>)
    2ffc:	3658      	adds	r6, #88	; 0x58
    2ffe:	68eb      	ldr	r3, [r5, #12]
    3000:	9302      	str	r3, [sp, #8]
    3002:	68ab      	ldr	r3, [r5, #8]
    3004:	9301      	str	r3, [sp, #4]
    3006:	9400      	str	r4, [sp, #0]
    3008:	4b43      	ldr	r3, [pc, #268]	; (3118 <HAL_AT_CONN_Start+0x274>)
    300a:	4a44      	ldr	r2, [pc, #272]	; (311c <HAL_AT_CONN_Start+0x278>)
    300c:	2140      	movs	r1, #64	; 0x40
    300e:	31ff      	adds	r1, #255	; 0xff
    3010:	0030      	movs	r0, r6
    3012:	4d3b      	ldr	r5, [pc, #236]	; (3100 <HAL_AT_CONN_Start+0x25c>)
    3014:	47a8      	blx	r5
            at_send_wait_reply(pccmd, strlen(pccmd), true, NULL, 0, rsp, SIM800_DEFAULT_RSP_LEN, 
    3016:	0030      	movs	r0, r6
    3018:	4b3a      	ldr	r3, [pc, #232]	; (3104 <HAL_AT_CONN_Start+0x260>)
    301a:	4798      	blx	r3
    301c:	0001      	movs	r1, r0
    301e:	ab05      	add	r3, sp, #20
    3020:	9303      	str	r3, [sp, #12]
    3022:	2340      	movs	r3, #64	; 0x40
    3024:	9302      	str	r3, [sp, #8]
    3026:	ad08      	add	r5, sp, #32
    3028:	9501      	str	r5, [sp, #4]
    302a:	2300      	movs	r3, #0
    302c:	9300      	str	r3, [sp, #0]
    302e:	2201      	movs	r2, #1
    3030:	0030      	movs	r0, r6
    3032:	4e35      	ldr	r6, [pc, #212]	; (3108 <HAL_AT_CONN_Start+0x264>)
    3034:	47b0      	blx	r6
            if (strstr(rsp, AT_CMD_CLIENT_CONNECT_FAIL) != NULL) {
    3036:	493a      	ldr	r1, [pc, #232]	; (3120 <HAL_AT_CONN_Start+0x27c>)
    3038:	0028      	movs	r0, r5
    303a:	4b35      	ldr	r3, [pc, #212]	; (3110 <HAL_AT_CONN_Start+0x26c>)
    303c:	4798      	blx	r3
    return 0;
    303e:	2500      	movs	r5, #0
            if (strstr(rsp, AT_CMD_CLIENT_CONNECT_FAIL) != NULL) {
    3040:	2800      	cmp	r0, #0
    3042:	d0a9      	beq.n	2f98 <HAL_AT_CONN_Start+0xf4>
                at_conn_hal_err( "pccmd %s fail, rsp %s \r\n", pccmd, rsp);
    3044:	aa08      	add	r2, sp, #32
    3046:	4922      	ldr	r1, [pc, #136]	; (30d0 <HAL_AT_CONN_Start+0x22c>)
    3048:	3158      	adds	r1, #88	; 0x58
    304a:	4836      	ldr	r0, [pc, #216]	; (3124 <HAL_AT_CONN_Start+0x280>)
    304c:	4d25      	ldr	r5, [pc, #148]	; (30e4 <HAL_AT_CONN_Start+0x240>)
    304e:	47a8      	blx	r5
    3050:	4825      	ldr	r0, [pc, #148]	; (30e8 <HAL_AT_CONN_Start+0x244>)
    3052:	47a8      	blx	r5
                goto err;
    3054:	e792      	b.n	2f7c <HAL_AT_CONN_Start+0xd8>
            HAL_Snprintf(pccmd, SIM800_CONN_CMD_LEN - 1, "%s=%d,\"UDP\",\"%s\",%d", AT_CMD_START_CLIENT_CONN, linkid, conn->addr,
    3056:	4e1e      	ldr	r6, [pc, #120]	; (30d0 <HAL_AT_CONN_Start+0x22c>)
    3058:	3658      	adds	r6, #88	; 0x58
    305a:	68eb      	ldr	r3, [r5, #12]
    305c:	9302      	str	r3, [sp, #8]
    305e:	68ab      	ldr	r3, [r5, #8]
    3060:	9301      	str	r3, [sp, #4]
    3062:	9400      	str	r4, [sp, #0]
    3064:	4b2c      	ldr	r3, [pc, #176]	; (3118 <HAL_AT_CONN_Start+0x274>)
    3066:	4a30      	ldr	r2, [pc, #192]	; (3128 <HAL_AT_CONN_Start+0x284>)
    3068:	2140      	movs	r1, #64	; 0x40
    306a:	31ff      	adds	r1, #255	; 0xff
    306c:	0030      	movs	r0, r6
    306e:	4d24      	ldr	r5, [pc, #144]	; (3100 <HAL_AT_CONN_Start+0x25c>)
    3070:	47a8      	blx	r5
            at_send_wait_reply(pccmd, strlen(pccmd), true, NULL, 0, rsp, SIM800_DEFAULT_RSP_LEN,
    3072:	0030      	movs	r0, r6
    3074:	4b23      	ldr	r3, [pc, #140]	; (3104 <HAL_AT_CONN_Start+0x260>)
    3076:	4798      	blx	r3
    3078:	0001      	movs	r1, r0
    307a:	ab05      	add	r3, sp, #20
    307c:	9303      	str	r3, [sp, #12]
    307e:	2340      	movs	r3, #64	; 0x40
    3080:	9302      	str	r3, [sp, #8]
    3082:	ad08      	add	r5, sp, #32
    3084:	9501      	str	r5, [sp, #4]
    3086:	2300      	movs	r3, #0
    3088:	9300      	str	r3, [sp, #0]
    308a:	2201      	movs	r2, #1
    308c:	0030      	movs	r0, r6
    308e:	4e1e      	ldr	r6, [pc, #120]	; (3108 <HAL_AT_CONN_Start+0x264>)
    3090:	47b0      	blx	r6
            if (strstr(rsp, AT_CMD_CLIENT_CONNECT_FAIL) != NULL) {
    3092:	4923      	ldr	r1, [pc, #140]	; (3120 <HAL_AT_CONN_Start+0x27c>)
    3094:	0028      	movs	r0, r5
    3096:	4b1e      	ldr	r3, [pc, #120]	; (3110 <HAL_AT_CONN_Start+0x26c>)
    3098:	4798      	blx	r3
    return 0;
    309a:	2500      	movs	r5, #0
            if (strstr(rsp, AT_CMD_CLIENT_CONNECT_FAIL) != NULL) {
    309c:	2800      	cmp	r0, #0
    309e:	d100      	bne.n	30a2 <HAL_AT_CONN_Start+0x1fe>
    30a0:	e77a      	b.n	2f98 <HAL_AT_CONN_Start+0xf4>
                at_conn_hal_err( "pccmd %s fail, rsp %s \r\n", pccmd, rsp);
    30a2:	aa08      	add	r2, sp, #32
    30a4:	490a      	ldr	r1, [pc, #40]	; (30d0 <HAL_AT_CONN_Start+0x22c>)
    30a6:	3158      	adds	r1, #88	; 0x58
    30a8:	481e      	ldr	r0, [pc, #120]	; (3124 <HAL_AT_CONN_Start+0x280>)
    30aa:	4d0e      	ldr	r5, [pc, #56]	; (30e4 <HAL_AT_CONN_Start+0x240>)
    30ac:	47a8      	blx	r5
    30ae:	480e      	ldr	r0, [pc, #56]	; (30e8 <HAL_AT_CONN_Start+0x244>)
    30b0:	47a8      	blx	r5
                goto err;
    30b2:	e763      	b.n	2f7c <HAL_AT_CONN_Start+0xd8>
        g_link[linkid].fd = conn->fd;
    30b4:	4b08      	ldr	r3, [pc, #32]	; (30d8 <HAL_AT_CONN_Start+0x234>)
    30b6:	682a      	ldr	r2, [r5, #0]
    30b8:	601a      	str	r2, [r3, #0]
    HAL_MutexUnlock(g_link_mutex);
    30ba:	4b05      	ldr	r3, [pc, #20]	; (30d0 <HAL_AT_CONN_Start+0x22c>)
    30bc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    30be:	4b07      	ldr	r3, [pc, #28]	; (30dc <HAL_AT_CONN_Start+0x238>)
    30c0:	4798      	blx	r3
    for (linkid = 0; linkid < SIM800_MAX_LINK_NUM; linkid++) {
    30c2:	2400      	movs	r4, #0
    30c4:	e746      	b.n	2f54 <HAL_AT_CONN_Start+0xb0>
    30c6:	46c0      	nop			; (mov r8, r8)
    30c8:	000085c9 	.word	0x000085c9
    30cc:	00009a6c 	.word	0x00009a6c
    30d0:	2000085c 	.word	0x2000085c
    30d4:	00007d2f 	.word	0x00007d2f
    30d8:	2000065c 	.word	0x2000065c
    30dc:	00007d31 	.word	0x00007d31
    30e0:	00009f58 	.word	0x00009f58
    30e4:	00007d35 	.word	0x00007d35
    30e8:	00009cb4 	.word	0x00009cb4
    30ec:	00009e94 	.word	0x00009e94
    30f0:	00009f3c 	.word	0x00009f3c
    30f4:	00009ff4 	.word	0x00009ff4
    30f8:	00009f84 	.word	0x00009f84
    30fc:	00009dd8 	.word	0x00009dd8
    3100:	00007d75 	.word	0x00007d75
    3104:	00008991 	.word	0x00008991
    3108:	00001ded 	.word	0x00001ded
    310c:	00009abc 	.word	0x00009abc
    3110:	000089eb 	.word	0x000089eb
    3114:	00009af4 	.word	0x00009af4
    3118:	00009f94 	.word	0x00009f94
    311c:	00009fa0 	.word	0x00009fa0
    3120:	00009fb4 	.word	0x00009fb4
    3124:	00009fc4 	.word	0x00009fc4
    3128:	00009fe0 	.word	0x00009fe0

0000312c <HAL_AT_CONN_Close>:

int HAL_AT_CONN_Close(int fd, int32_t remote_port)
{
    312c:	b570      	push	{r4, r5, r6, lr}
    312e:	b0a4      	sub	sp, #144	; 0x90
    3130:	0006      	movs	r6, r0
    int  linkid = 0;
    int  ret = 0;
    char cmd[SIM800_DEFAULT_CMD_LEN] = {0};
    3132:	2240      	movs	r2, #64	; 0x40
    3134:	2100      	movs	r1, #0
    3136:	a814      	add	r0, sp, #80	; 0x50
    3138:	4c2e      	ldr	r4, [pc, #184]	; (31f4 <HAL_AT_CONN_Close+0xc8>)
    313a:	47a0      	blx	r4
    char rsp[SIM800_DEFAULT_RSP_LEN] = {0};
    313c:	2240      	movs	r2, #64	; 0x40
    313e:	2100      	movs	r1, #0
    3140:	a804      	add	r0, sp, #16
    3142:	47a0      	blx	r4

    if (!inited) {
    3144:	2350      	movs	r3, #80	; 0x50
    3146:	4a2c      	ldr	r2, [pc, #176]	; (31f8 <HAL_AT_CONN_Close+0xcc>)
    3148:	5cd3      	ldrb	r3, [r2, r3]
    314a:	2b00      	cmp	r3, #0
    314c:	d033      	beq.n	31b6 <HAL_AT_CONN_Close+0x8a>
        at_conn_hal_err( "%s sim800 gprs module haven't init yet \r\n", __func__);
        return -1;
    }

    linkid = fd_to_linkid(fd);
    314e:	0030      	movs	r0, r6
    3150:	4b2a      	ldr	r3, [pc, #168]	; (31fc <HAL_AT_CONN_Close+0xd0>)
    3152:	4798      	blx	r3
    3154:	0005      	movs	r5, r0
    if (linkid < 0 || linkid >= SIM800_MAX_LINK_NUM) {
    3156:	2805      	cmp	r0, #5
    3158:	d837      	bhi.n	31ca <HAL_AT_CONN_Close+0x9e>
        at_conn_hal_err( "No connection found for fd (%d) in %s \r\n", fd, __func__);
        return -1;
    }

    HAL_Snprintf(cmd, SIM800_DEFAULT_CMD_LEN - 1, "%s=%d", AT_CMD_STOP_CONN, linkid);
    315a:	9000      	str	r0, [sp, #0]
    315c:	4b28      	ldr	r3, [pc, #160]	; (3200 <HAL_AT_CONN_Close+0xd4>)
    315e:	4a29      	ldr	r2, [pc, #164]	; (3204 <HAL_AT_CONN_Close+0xd8>)
    3160:	213f      	movs	r1, #63	; 0x3f
    3162:	a814      	add	r0, sp, #80	; 0x50
    3164:	4c28      	ldr	r4, [pc, #160]	; (3208 <HAL_AT_CONN_Close+0xdc>)
    3166:	47a0      	blx	r4
    at_send_wait_reply(cmd, strlen(cmd), true, NULL, 0, 
    3168:	a814      	add	r0, sp, #80	; 0x50
    316a:	4b28      	ldr	r3, [pc, #160]	; (320c <HAL_AT_CONN_Close+0xe0>)
    316c:	4798      	blx	r3
    316e:	0001      	movs	r1, r0
    3170:	2300      	movs	r3, #0
    3172:	9303      	str	r3, [sp, #12]
    3174:	2240      	movs	r2, #64	; 0x40
    3176:	9202      	str	r2, [sp, #8]
    3178:	ac04      	add	r4, sp, #16
    317a:	9401      	str	r4, [sp, #4]
    317c:	9300      	str	r3, [sp, #0]
    317e:	3a3f      	subs	r2, #63	; 0x3f
    3180:	a814      	add	r0, sp, #80	; 0x50
    3182:	4e23      	ldr	r6, [pc, #140]	; (3210 <HAL_AT_CONN_Close+0xe4>)
    3184:	47b0      	blx	r6
                       rsp, SIM800_DEFAULT_RSP_LEN, NULL);
    if (strstr(rsp, SIM800_AT_CMD_SUCCESS_RSP) == NULL) {
    3186:	4923      	ldr	r1, [pc, #140]	; (3214 <HAL_AT_CONN_Close+0xe8>)
    3188:	0020      	movs	r0, r4
    318a:	4b23      	ldr	r3, [pc, #140]	; (3218 <HAL_AT_CONN_Close+0xec>)
    318c:	4798      	blx	r3
    int  ret = 0;
    318e:	2400      	movs	r4, #0
    if (strstr(rsp, SIM800_AT_CMD_SUCCESS_RSP) == NULL) {
    3190:	2800      	cmp	r0, #0
    3192:	d025      	beq.n	31e0 <HAL_AT_CONN_Close+0xb4>
        at_conn_hal_err( "cmd %s rsp is %s \r\n", cmd, rsp);
        ret = -1;
    }

    HAL_MutexLock(g_link_mutex);
    3194:	4e18      	ldr	r6, [pc, #96]	; (31f8 <HAL_AT_CONN_Close+0xcc>)
    3196:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
    3198:	4b20      	ldr	r3, [pc, #128]	; (321c <HAL_AT_CONN_Close+0xf0>)
    319a:	4798      	blx	r3
    g_link[linkid].fd = -1;
    319c:	0068      	lsls	r0, r5, #1
    319e:	1940      	adds	r0, r0, r5
    31a0:	0080      	lsls	r0, r0, #2
    31a2:	2201      	movs	r2, #1
    31a4:	4252      	negs	r2, r2
    31a6:	4b1e      	ldr	r3, [pc, #120]	; (3220 <HAL_AT_CONN_Close+0xf4>)
    31a8:	50c2      	str	r2, [r0, r3]
    HAL_MutexUnlock(g_link_mutex);
    31aa:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
    31ac:	4b1d      	ldr	r3, [pc, #116]	; (3224 <HAL_AT_CONN_Close+0xf8>)
    31ae:	4798      	blx	r3

    return ret;
}
    31b0:	0020      	movs	r0, r4
    31b2:	b024      	add	sp, #144	; 0x90
    31b4:	bd70      	pop	{r4, r5, r6, pc}
        at_conn_hal_err( "%s sim800 gprs module haven't init yet \r\n", __func__);
    31b6:	491c      	ldr	r1, [pc, #112]	; (3228 <HAL_AT_CONN_Close+0xfc>)
    31b8:	3120      	adds	r1, #32
    31ba:	481c      	ldr	r0, [pc, #112]	; (322c <HAL_AT_CONN_Close+0x100>)
    31bc:	4c1c      	ldr	r4, [pc, #112]	; (3230 <HAL_AT_CONN_Close+0x104>)
    31be:	47a0      	blx	r4
    31c0:	481c      	ldr	r0, [pc, #112]	; (3234 <HAL_AT_CONN_Close+0x108>)
    31c2:	47a0      	blx	r4
        return -1;
    31c4:	2401      	movs	r4, #1
    31c6:	4264      	negs	r4, r4
    31c8:	e7f2      	b.n	31b0 <HAL_AT_CONN_Close+0x84>
        at_conn_hal_err( "No connection found for fd (%d) in %s \r\n", fd, __func__);
    31ca:	4a17      	ldr	r2, [pc, #92]	; (3228 <HAL_AT_CONN_Close+0xfc>)
    31cc:	3220      	adds	r2, #32
    31ce:	0031      	movs	r1, r6
    31d0:	4819      	ldr	r0, [pc, #100]	; (3238 <HAL_AT_CONN_Close+0x10c>)
    31d2:	4c17      	ldr	r4, [pc, #92]	; (3230 <HAL_AT_CONN_Close+0x104>)
    31d4:	47a0      	blx	r4
    31d6:	4817      	ldr	r0, [pc, #92]	; (3234 <HAL_AT_CONN_Close+0x108>)
    31d8:	47a0      	blx	r4
        return -1;
    31da:	2401      	movs	r4, #1
    31dc:	4264      	negs	r4, r4
    31de:	e7e7      	b.n	31b0 <HAL_AT_CONN_Close+0x84>
        at_conn_hal_err( "cmd %s rsp is %s \r\n", cmd, rsp);
    31e0:	aa04      	add	r2, sp, #16
    31e2:	a914      	add	r1, sp, #80	; 0x50
    31e4:	4815      	ldr	r0, [pc, #84]	; (323c <HAL_AT_CONN_Close+0x110>)
    31e6:	4c12      	ldr	r4, [pc, #72]	; (3230 <HAL_AT_CONN_Close+0x104>)
    31e8:	47a0      	blx	r4
    31ea:	4812      	ldr	r0, [pc, #72]	; (3234 <HAL_AT_CONN_Close+0x108>)
    31ec:	47a0      	blx	r4
        ret = -1;
    31ee:	2401      	movs	r4, #1
    31f0:	4264      	negs	r4, r4
    31f2:	e7cf      	b.n	3194 <HAL_AT_CONN_Close+0x68>
    31f4:	000085c9 	.word	0x000085c9
    31f8:	2000085c 	.word	0x2000085c
    31fc:	00002639 	.word	0x00002639
    3200:	0000a054 	.word	0x0000a054
    3204:	00009cf8 	.word	0x00009cf8
    3208:	00007d75 	.word	0x00007d75
    320c:	00008991 	.word	0x00008991
    3210:	00001ded 	.word	0x00001ded
    3214:	00009abc 	.word	0x00009abc
    3218:	000089eb 	.word	0x000089eb
    321c:	00007d2f 	.word	0x00007d2f
    3220:	2000065c 	.word	0x2000065c
    3224:	00007d31 	.word	0x00007d31
    3228:	00009a6c 	.word	0x00009a6c
    322c:	00009e94 	.word	0x00009e94
    3230:	00007d35 	.word	0x00007d35
    3234:	00009cb4 	.word	0x00009cb4
    3238:	0000a028 	.word	0x0000a028
    323c:	0000a060 	.word	0x0000a060

00003240 <HAL_AT_CONN_Send>:
                 uint8_t *data,
                 uint32_t len,
                 char remote_ip[16],
                 int32_t remote_port,
                 int32_t timeout)
{
    3240:	b5f0      	push	{r4, r5, r6, r7, lr}
    3242:	46ce      	mov	lr, r9
    3244:	4647      	mov	r7, r8
    3246:	b580      	push	{r7, lr}
    3248:	b0a7      	sub	sp, #156	; 0x9c
    324a:	0005      	movs	r5, r0
    324c:	9105      	str	r1, [sp, #20]
    324e:	0017      	movs	r7, r2
    int  linkid;
    char cmd[SIM800_DEFAULT_CMD_LEN] = {0};
    3250:	2240      	movs	r2, #64	; 0x40
    3252:	2100      	movs	r1, #0
    3254:	a816      	add	r0, sp, #88	; 0x58
    3256:	4c33      	ldr	r4, [pc, #204]	; (3324 <HAL_AT_CONN_Send+0xe4>)
    3258:	47a0      	blx	r4
    char rsp[SIM800_DEFAULT_RSP_LEN] = {0};
    325a:	2240      	movs	r2, #64	; 0x40
    325c:	2100      	movs	r1, #0
    325e:	a806      	add	r0, sp, #24
    3260:	47a0      	blx	r4
    int retry = 0;

    if (!inited) {
    3262:	2350      	movs	r3, #80	; 0x50
    3264:	4a30      	ldr	r2, [pc, #192]	; (3328 <HAL_AT_CONN_Send+0xe8>)
    3266:	5cd3      	ldrb	r3, [r2, r3]
    3268:	2b00      	cmp	r3, #0
    326a:	d03c      	beq.n	32e6 <HAL_AT_CONN_Send+0xa6>
        at_conn_hal_err( "%s sim800 gprs module haven't init yet \r\n", __func__);
        return -1;
    }

    linkid = fd_to_linkid(fd);
    326c:	0028      	movs	r0, r5
    326e:	4b2f      	ldr	r3, [pc, #188]	; (332c <HAL_AT_CONN_Send+0xec>)
    3270:	4798      	blx	r3
    if (linkid < 0 || linkid >= SIM800_MAX_LINK_NUM) {
    3272:	2805      	cmp	r0, #5
    3274:	d841      	bhi.n	32fa <HAL_AT_CONN_Send+0xba>
        at_conn_hal_err( "No connection found for fd (%d) in %s \r\n", fd, __func__);
        return -1;
    }

    HAL_Snprintf(cmd, SIM800_DEFAULT_CMD_LEN - 1, "%s=%d,%d", AT_CMD_SEND_DATA, linkid, len);
    3276:	9701      	str	r7, [sp, #4]
    3278:	9000      	str	r0, [sp, #0]
    327a:	4b2d      	ldr	r3, [pc, #180]	; (3330 <HAL_AT_CONN_Send+0xf0>)
    327c:	4a2d      	ldr	r2, [pc, #180]	; (3334 <HAL_AT_CONN_Send+0xf4>)
    327e:	213f      	movs	r1, #63	; 0x3f
    3280:	a816      	add	r0, sp, #88	; 0x58
    3282:	4c2d      	ldr	r4, [pc, #180]	; (3338 <HAL_AT_CONN_Send+0xf8>)
    3284:	47a0      	blx	r4
    int retry = 0;
    3286:	2400      	movs	r4, #0
    
    while (true) {
        retry++;
        /*TODO data send fail rsp is SEND FAIL*/
        at_send_wait_reply((const char *)cmd, strlen(cmd), true, (const char *)data, len,
    3288:	4b2c      	ldr	r3, [pc, #176]	; (333c <HAL_AT_CONN_Send+0xfc>)
    328a:	4699      	mov	r9, r3
            HAL_SleepMs(50);

            if (retry > SIM800_RETRY_MAX) {
                return -1;
            }
            at_conn_hal_err( "cmd %s rsp %s retry %d at %s %d fail \r\n", cmd, rsp, retry, __func__, __LINE__);
    328c:	4b2c      	ldr	r3, [pc, #176]	; (3340 <HAL_AT_CONN_Send+0x100>)
    328e:	2234      	movs	r2, #52	; 0x34
    3290:	4694      	mov	ip, r2
    3292:	4463      	add	r3, ip
    3294:	4698      	mov	r8, r3
        retry++;
    3296:	3401      	adds	r4, #1
        at_send_wait_reply((const char *)cmd, strlen(cmd), true, (const char *)data, len,
    3298:	a816      	add	r0, sp, #88	; 0x58
    329a:	47c8      	blx	r9
    329c:	0001      	movs	r1, r0
    329e:	2300      	movs	r3, #0
    32a0:	9303      	str	r3, [sp, #12]
    32a2:	3340      	adds	r3, #64	; 0x40
    32a4:	9302      	str	r3, [sp, #8]
    32a6:	ad06      	add	r5, sp, #24
    32a8:	9501      	str	r5, [sp, #4]
    32aa:	9700      	str	r7, [sp, #0]
    32ac:	9b05      	ldr	r3, [sp, #20]
    32ae:	2201      	movs	r2, #1
    32b0:	a816      	add	r0, sp, #88	; 0x58
    32b2:	4e24      	ldr	r6, [pc, #144]	; (3344 <HAL_AT_CONN_Send+0x104>)
    32b4:	47b0      	blx	r6
        if (strstr(rsp, SIM800_AT_CMD_SUCCESS_RSP) == NULL) {
    32b6:	4924      	ldr	r1, [pc, #144]	; (3348 <HAL_AT_CONN_Send+0x108>)
    32b8:	0028      	movs	r0, r5
    32ba:	4b24      	ldr	r3, [pc, #144]	; (334c <HAL_AT_CONN_Send+0x10c>)
    32bc:	4798      	blx	r3
    32be:	2800      	cmp	r0, #0
    32c0:	d126      	bne.n	3310 <HAL_AT_CONN_Send+0xd0>
            HAL_SleepMs(50);
    32c2:	3032      	adds	r0, #50	; 0x32
    32c4:	4b22      	ldr	r3, [pc, #136]	; (3350 <HAL_AT_CONN_Send+0x110>)
    32c6:	4798      	blx	r3
            if (retry > SIM800_RETRY_MAX) {
    32c8:	2c33      	cmp	r4, #51	; 0x33
    32ca:	d027      	beq.n	331c <HAL_AT_CONN_Send+0xdc>
            at_conn_hal_err( "cmd %s rsp %s retry %d at %s %d fail \r\n", cmd, rsp, retry, __func__, __LINE__);
    32cc:	4b21      	ldr	r3, [pc, #132]	; (3354 <HAL_AT_CONN_Send+0x114>)
    32ce:	9301      	str	r3, [sp, #4]
    32d0:	4643      	mov	r3, r8
    32d2:	9300      	str	r3, [sp, #0]
    32d4:	0023      	movs	r3, r4
    32d6:	aa06      	add	r2, sp, #24
    32d8:	a916      	add	r1, sp, #88	; 0x58
    32da:	481f      	ldr	r0, [pc, #124]	; (3358 <HAL_AT_CONN_Send+0x118>)
    32dc:	4d1f      	ldr	r5, [pc, #124]	; (335c <HAL_AT_CONN_Send+0x11c>)
    32de:	47a8      	blx	r5
    32e0:	481f      	ldr	r0, [pc, #124]	; (3360 <HAL_AT_CONN_Send+0x120>)
    32e2:	47a8      	blx	r5
        retry++;
    32e4:	e7d7      	b.n	3296 <HAL_AT_CONN_Send+0x56>
        at_conn_hal_err( "%s sim800 gprs module haven't init yet \r\n", __func__);
    32e6:	4916      	ldr	r1, [pc, #88]	; (3340 <HAL_AT_CONN_Send+0x100>)
    32e8:	3134      	adds	r1, #52	; 0x34
    32ea:	481e      	ldr	r0, [pc, #120]	; (3364 <HAL_AT_CONN_Send+0x124>)
    32ec:	4c1b      	ldr	r4, [pc, #108]	; (335c <HAL_AT_CONN_Send+0x11c>)
    32ee:	47a0      	blx	r4
    32f0:	481b      	ldr	r0, [pc, #108]	; (3360 <HAL_AT_CONN_Send+0x120>)
    32f2:	47a0      	blx	r4
        return -1;
    32f4:	2001      	movs	r0, #1
    32f6:	4240      	negs	r0, r0
    32f8:	e00b      	b.n	3312 <HAL_AT_CONN_Send+0xd2>
        at_conn_hal_err( "No connection found for fd (%d) in %s \r\n", fd, __func__);
    32fa:	4a11      	ldr	r2, [pc, #68]	; (3340 <HAL_AT_CONN_Send+0x100>)
    32fc:	3234      	adds	r2, #52	; 0x34
    32fe:	0029      	movs	r1, r5
    3300:	4819      	ldr	r0, [pc, #100]	; (3368 <HAL_AT_CONN_Send+0x128>)
    3302:	4c16      	ldr	r4, [pc, #88]	; (335c <HAL_AT_CONN_Send+0x11c>)
    3304:	47a0      	blx	r4
    3306:	4816      	ldr	r0, [pc, #88]	; (3360 <HAL_AT_CONN_Send+0x120>)
    3308:	47a0      	blx	r4
        return -1;
    330a:	2001      	movs	r0, #1
    330c:	4240      	negs	r0, r0
    330e:	e000      	b.n	3312 <HAL_AT_CONN_Send+0xd2>
        } else {
            break;
        }
    }

    return 0;
    3310:	2000      	movs	r0, #0
}
    3312:	b027      	add	sp, #156	; 0x9c
    3314:	bc0c      	pop	{r2, r3}
    3316:	4690      	mov	r8, r2
    3318:	4699      	mov	r9, r3
    331a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return -1;
    331c:	2001      	movs	r0, #1
    331e:	4240      	negs	r0, r0
    3320:	e7f7      	b.n	3312 <HAL_AT_CONN_Send+0xd2>
    3322:	46c0      	nop			; (mov r8, r8)
    3324:	000085c9 	.word	0x000085c9
    3328:	2000085c 	.word	0x2000085c
    332c:	00002639 	.word	0x00002639
    3330:	0000a074 	.word	0x0000a074
    3334:	00009dd8 	.word	0x00009dd8
    3338:	00007d75 	.word	0x00007d75
    333c:	00008991 	.word	0x00008991
    3340:	00009a6c 	.word	0x00009a6c
    3344:	00001ded 	.word	0x00001ded
    3348:	00009abc 	.word	0x00009abc
    334c:	000089eb 	.word	0x000089eb
    3350:	00007d65 	.word	0x00007d65
    3354:	0000035a 	.word	0x0000035a
    3358:	00009ac0 	.word	0x00009ac0
    335c:	00007d35 	.word	0x00007d35
    3360:	00009cb4 	.word	0x00009cb4
    3364:	00009e94 	.word	0x00009e94
    3368:	0000a028 	.word	0x0000a028

0000336c <IOT_Sign_MQTT>:

    return SUCCESS_RETURN;
}

int32_t IOT_Sign_MQTT(iotx_mqtt_region_types_t region, iotx_dev_meta_info_t *meta, iotx_sign_mqtt_t *signout)
{
    336c:	b5f0      	push	{r4, r5, r6, r7, lr}
    336e:	46de      	mov	lr, fp
    3370:	4657      	mov	r7, sl
    3372:	464e      	mov	r6, r9
    3374:	4645      	mov	r5, r8
    3376:	b5e0      	push	{r5, r6, r7, lr}
    3378:	b0cd      	sub	sp, #308	; 0x134
    337a:	4683      	mov	fp, r0
    337c:	000c      	movs	r4, r1
    337e:	4691      	mov	r9, r2
    uint16_t length = 0;
    char device_id[IOTX_PRODUCT_KEY_LEN + IOTX_DEVICE_NAME_LEN + 1] = {0};
    3380:	2235      	movs	r2, #53	; 0x35
    3382:	2100      	movs	r1, #0
    3384:	a83e      	add	r0, sp, #248	; 0xf8
    3386:	4db0      	ldr	r5, [pc, #704]	; (3648 <IOT_Sign_MQTT+0x2dc>)
    3388:	47a8      	blx	r5
    char signsource[DEV_SIGN_SOURCE_MAXLEN] = {0};
    338a:	22c8      	movs	r2, #200	; 0xc8
    338c:	2100      	movs	r1, #0
    338e:	a80c      	add	r0, sp, #48	; 0x30
    3390:	47a8      	blx	r5
    uint16_t signsource_len = 0;
    uint8_t sign[32] = {0};
    3392:	2220      	movs	r2, #32
    3394:	2100      	movs	r1, #0
    3396:	a804      	add	r0, sp, #16
    3398:	47a8      	blx	r5
    const char *sign_fmt = "clientId%sdeviceName%sproductKey%stimestamp%s";

    if (region >= IOTX_MQTT_DOMAIN_NUMBER || meta == NULL) {
    339a:	465b      	mov	r3, fp
    339c:	2b04      	cmp	r3, #4
    339e:	d900      	bls.n	33a2 <IOT_Sign_MQTT+0x36>
    33a0:	e143      	b.n	362a <IOT_Sign_MQTT+0x2be>
    33a2:	2c00      	cmp	r4, #0
    33a4:	d100      	bne.n	33a8 <IOT_Sign_MQTT+0x3c>
    33a6:	e143      	b.n	3630 <IOT_Sign_MQTT+0x2c4>
        return -1;
    }

    memset(signout, 0, sizeof(iotx_sign_mqtt_t));
    33a8:	22c6      	movs	r2, #198	; 0xc6
    33aa:	0052      	lsls	r2, r2, #1
    33ac:	2100      	movs	r1, #0
    33ae:	4648      	mov	r0, r9
    33b0:	4ba5      	ldr	r3, [pc, #660]	; (3648 <IOT_Sign_MQTT+0x2dc>)
    33b2:	4798      	blx	r3

    memcpy(device_id, meta->product_key, strlen(meta->product_key));
    33b4:	0020      	movs	r0, r4
    33b6:	4fa5      	ldr	r7, [pc, #660]	; (364c <IOT_Sign_MQTT+0x2e0>)
    33b8:	47b8      	blx	r7
    33ba:	0002      	movs	r2, r0
    33bc:	ae3e      	add	r6, sp, #248	; 0xf8
    33be:	0021      	movs	r1, r4
    33c0:	0030      	movs	r0, r6
    33c2:	4da3      	ldr	r5, [pc, #652]	; (3650 <IOT_Sign_MQTT+0x2e4>)
    33c4:	47a8      	blx	r5
    memcpy(device_id + strlen(device_id), ".", strlen("."));
    33c6:	0030      	movs	r0, r6
    33c8:	47b8      	blx	r7
    33ca:	232e      	movs	r3, #46	; 0x2e
    33cc:	5433      	strb	r3, [r6, r0]
    memcpy(device_id + strlen(device_id), meta->device_name, strlen(meta->device_name));
    33ce:	0030      	movs	r0, r6
    33d0:	47b8      	blx	r7
    33d2:	4680      	mov	r8, r0
    33d4:	2356      	movs	r3, #86	; 0x56
    33d6:	469c      	mov	ip, r3
    33d8:	44a4      	add	ip, r4
    33da:	4663      	mov	r3, ip
    33dc:	9302      	str	r3, [sp, #8]
    33de:	4660      	mov	r0, ip
    33e0:	47b8      	blx	r7
    33e2:	0002      	movs	r2, r0
    33e4:	4640      	mov	r0, r8
    33e6:	1830      	adds	r0, r6, r0
    33e8:	9902      	ldr	r1, [sp, #8]
    33ea:	47a8      	blx	r5

    signsource_len = strlen(sign_fmt) + strlen(device_id) + strlen(meta->device_name) + strlen(meta->product_key) + strlen(
    33ec:	0030      	movs	r0, r6
    33ee:	47b8      	blx	r7
    33f0:	0006      	movs	r6, r0
    33f2:	9802      	ldr	r0, [sp, #8]
    33f4:	47b8      	blx	r7
    33f6:	0005      	movs	r5, r0
    33f8:	0020      	movs	r0, r4
    33fa:	47b8      	blx	r7
    33fc:	1976      	adds	r6, r6, r5
    33fe:	363b      	adds	r6, #59	; 0x3b
    3400:	1830      	adds	r0, r6, r0
                                 TIMESTAMP_VALUE) + 1;
    if (signsource_len >= DEV_SIGN_SOURCE_MAXLEN) {
    3402:	b280      	uxth	r0, r0
    3404:	28c7      	cmp	r0, #199	; 0xc7
    3406:	d900      	bls.n	340a <IOT_Sign_MQTT+0x9e>
    3408:	e115      	b.n	3636 <IOT_Sign_MQTT+0x2ca>
        return ERROR_DEV_SIGN_SOURCE_TOO_SHORT;
    }
    memset(signsource, 0, DEV_SIGN_SOURCE_MAXLEN);
    340a:	af0c      	add	r7, sp, #48	; 0x30
    340c:	22c8      	movs	r2, #200	; 0xc8
    340e:	2100      	movs	r1, #0
    3410:	0038      	movs	r0, r7
    3412:	4b8d      	ldr	r3, [pc, #564]	; (3648 <IOT_Sign_MQTT+0x2dc>)
    3414:	4798      	blx	r3
    memcpy(signsource, "clientId", strlen("clientId"));
    3416:	4b8f      	ldr	r3, [pc, #572]	; (3654 <IOT_Sign_MQTT+0x2e8>)
    3418:	003a      	movs	r2, r7
    341a:	cb41      	ldmia	r3!, {r0, r6}
    341c:	c241      	stmia	r2!, {r0, r6}
    memcpy(signsource + strlen(signsource), device_id, strlen(device_id));
    341e:	0038      	movs	r0, r7
    3420:	4d8a      	ldr	r5, [pc, #552]	; (364c <IOT_Sign_MQTT+0x2e0>)
    3422:	47a8      	blx	r5
    3424:	0006      	movs	r6, r0
    3426:	a83e      	add	r0, sp, #248	; 0xf8
    3428:	47a8      	blx	r5
    342a:	0002      	movs	r2, r0
    342c:	19b8      	adds	r0, r7, r6
    342e:	a93e      	add	r1, sp, #248	; 0xf8
    3430:	4e87      	ldr	r6, [pc, #540]	; (3650 <IOT_Sign_MQTT+0x2e4>)
    3432:	47b0      	blx	r6
    memcpy(signsource + strlen(signsource), "deviceName", strlen("deviceName"));
    3434:	0038      	movs	r0, r7
    3436:	47a8      	blx	r5
    3438:	1838      	adds	r0, r7, r0
    343a:	220a      	movs	r2, #10
    343c:	4986      	ldr	r1, [pc, #536]	; (3658 <IOT_Sign_MQTT+0x2ec>)
    343e:	47b0      	blx	r6
    memcpy(signsource + strlen(signsource), meta->device_name, strlen(meta->device_name));
    3440:	0038      	movs	r0, r7
    3442:	47a8      	blx	r5
    3444:	4680      	mov	r8, r0
    3446:	9802      	ldr	r0, [sp, #8]
    3448:	47a8      	blx	r5
    344a:	0002      	movs	r2, r0
    344c:	4640      	mov	r0, r8
    344e:	1838      	adds	r0, r7, r0
    3450:	9902      	ldr	r1, [sp, #8]
    3452:	47b0      	blx	r6
    memcpy(signsource + strlen(signsource), "productKey", strlen("productKey"));
    3454:	0038      	movs	r0, r7
    3456:	47a8      	blx	r5
    3458:	1838      	adds	r0, r7, r0
    345a:	220a      	movs	r2, #10
    345c:	497f      	ldr	r1, [pc, #508]	; (365c <IOT_Sign_MQTT+0x2f0>)
    345e:	47b0      	blx	r6
    memcpy(signsource + strlen(signsource), meta->product_key, strlen(meta->product_key));
    3460:	0038      	movs	r0, r7
    3462:	47a8      	blx	r5
    3464:	4680      	mov	r8, r0
    3466:	0020      	movs	r0, r4
    3468:	47a8      	blx	r5
    346a:	0002      	movs	r2, r0
    346c:	4640      	mov	r0, r8
    346e:	1838      	adds	r0, r7, r0
    3470:	0021      	movs	r1, r4
    3472:	47b0      	blx	r6
    memcpy(signsource + strlen(signsource), "timestamp", strlen("timestamp"));
    3474:	0038      	movs	r0, r7
    3476:	47a8      	blx	r5
    3478:	1838      	adds	r0, r7, r0
    347a:	2209      	movs	r2, #9
    347c:	4978      	ldr	r1, [pc, #480]	; (3660 <IOT_Sign_MQTT+0x2f4>)
    347e:	47b0      	blx	r6
    memcpy(signsource + strlen(signsource), TIMESTAMP_VALUE, strlen(TIMESTAMP_VALUE));
    3480:	0038      	movs	r0, r7
    3482:	47a8      	blx	r5
    3484:	1838      	adds	r0, r7, r0
    3486:	220d      	movs	r2, #13
    3488:	4976      	ldr	r1, [pc, #472]	; (3664 <IOT_Sign_MQTT+0x2f8>)
    348a:	47b0      	blx	r6

    utils_hmac_sha256((uint8_t *)signsource, strlen(signsource), (uint8_t *)meta->device_secret,
    348c:	0038      	movs	r0, r7
    348e:	47a8      	blx	r5
    3490:	9003      	str	r0, [sp, #12]
    3492:	0026      	movs	r6, r4
    3494:	3677      	adds	r6, #119	; 0x77
                      strlen(meta->device_secret), sign);
    3496:	0030      	movs	r0, r6
    3498:	47a8      	blx	r5
    349a:	0003      	movs	r3, r0
    utils_hmac_sha256((uint8_t *)signsource, strlen(signsource), (uint8_t *)meta->device_secret,
    349c:	aa04      	add	r2, sp, #16
    349e:	9200      	str	r2, [sp, #0]
    34a0:	0032      	movs	r2, r6
    34a2:	9903      	ldr	r1, [sp, #12]
    34a4:	0038      	movs	r0, r7
    34a6:	4e70      	ldr	r6, [pc, #448]	; (3668 <IOT_Sign_MQTT+0x2fc>)
    34a8:	47b0      	blx	r6

    /* Get Sign Information For MQTT */
    length = strlen(meta->product_key) + strlen(g_infra_mqtt_domain[region]) + 2;
    34aa:	0020      	movs	r0, r4
    34ac:	47a8      	blx	r5
    34ae:	0006      	movs	r6, r0
    34b0:	465a      	mov	r2, fp
    34b2:	0093      	lsls	r3, r2, #2
    34b4:	4a6d      	ldr	r2, [pc, #436]	; (366c <IOT_Sign_MQTT+0x300>)
    34b6:	5898      	ldr	r0, [r3, r2]
    34b8:	47a8      	blx	r5
    34ba:	1836      	adds	r6, r6, r0
    34bc:	3602      	adds	r6, #2
    if (length >= DEV_SIGN_HOSTNAME_MAXLEN) {
    34be:	b2b6      	uxth	r6, r6
    34c0:	2e3f      	cmp	r6, #63	; 0x3f
    34c2:	d900      	bls.n	34c6 <IOT_Sign_MQTT+0x15a>
    34c4:	e0b9      	b.n	363a <IOT_Sign_MQTT+0x2ce>
        return ERROR_DEV_SIGN_HOST_NAME_TOO_SHORT;
    }

    memset(signout->hostname, 0, DEV_SIGN_HOSTNAME_MAXLEN);
    34c6:	2240      	movs	r2, #64	; 0x40
    34c8:	2100      	movs	r1, #0
    34ca:	4648      	mov	r0, r9
    34cc:	4b5e      	ldr	r3, [pc, #376]	; (3648 <IOT_Sign_MQTT+0x2dc>)
    34ce:	4798      	blx	r3
    memcpy(signout->hostname, meta->product_key, strlen(meta->product_key));
    34d0:	0020      	movs	r0, r4
    34d2:	4f5e      	ldr	r7, [pc, #376]	; (364c <IOT_Sign_MQTT+0x2e0>)
    34d4:	47b8      	blx	r7
    34d6:	0002      	movs	r2, r0
    34d8:	0021      	movs	r1, r4
    34da:	4648      	mov	r0, r9
    34dc:	4e5c      	ldr	r6, [pc, #368]	; (3650 <IOT_Sign_MQTT+0x2e4>)
    34de:	47b0      	blx	r6
    memcpy(signout->hostname + strlen(signout->hostname), ".", strlen("."));
    34e0:	4648      	mov	r0, r9
    34e2:	47b8      	blx	r7
    34e4:	232e      	movs	r3, #46	; 0x2e
    34e6:	4649      	mov	r1, r9
    34e8:	540b      	strb	r3, [r1, r0]
    memcpy(signout->hostname + strlen(signout->hostname), g_infra_mqtt_domain[region],
    34ea:	4648      	mov	r0, r9
    34ec:	47b8      	blx	r7
    34ee:	4680      	mov	r8, r0
    34f0:	465a      	mov	r2, fp
    34f2:	0093      	lsls	r3, r2, #2
    34f4:	4a5d      	ldr	r2, [pc, #372]	; (366c <IOT_Sign_MQTT+0x300>)
    34f6:	589d      	ldr	r5, [r3, r2]
    34f8:	0028      	movs	r0, r5
    34fa:	47b8      	blx	r7
    34fc:	0002      	movs	r2, r0
    34fe:	464b      	mov	r3, r9
    3500:	9303      	str	r3, [sp, #12]
    3502:	0018      	movs	r0, r3
    3504:	4440      	add	r0, r8
    3506:	0029      	movs	r1, r5
    3508:	47b0      	blx	r6
           strlen(g_infra_mqtt_domain[region]));

    length = strlen(meta->device_name) + strlen(meta->product_key) + 2;
    350a:	9d02      	ldr	r5, [sp, #8]
    350c:	0028      	movs	r0, r5
    350e:	47b8      	blx	r7
    3510:	0006      	movs	r6, r0
    3512:	0020      	movs	r0, r4
    3514:	47b8      	blx	r7
    3516:	1836      	adds	r6, r6, r0
    3518:	3602      	adds	r6, #2
    if (length >= DEV_SIGN_USERNAME_MAXLEN) {
    351a:	b2b6      	uxth	r6, r6
    351c:	2e3f      	cmp	r6, #63	; 0x3f
    351e:	d900      	bls.n	3522 <IOT_Sign_MQTT+0x1b6>
    3520:	e08d      	b.n	363e <IOT_Sign_MQTT+0x2d2>
        return ERROR_DEV_SIGN_USERNAME_TOO_SHORT;
    }

    memset(signout->username, 0, DEV_SIGN_USERNAME_MAXLEN);
    3522:	2240      	movs	r2, #64	; 0x40
    3524:	2100      	movs	r1, #0
    3526:	9e03      	ldr	r6, [sp, #12]
    3528:	360b      	adds	r6, #11
    352a:	36ff      	adds	r6, #255	; 0xff
    352c:	0030      	movs	r0, r6
    352e:	4b46      	ldr	r3, [pc, #280]	; (3648 <IOT_Sign_MQTT+0x2dc>)
    3530:	4698      	mov	r8, r3
    3532:	4798      	blx	r3
    memcpy(signout->username, meta->device_name, strlen(meta->device_name));
    3534:	0028      	movs	r0, r5
    3536:	4f45      	ldr	r7, [pc, #276]	; (364c <IOT_Sign_MQTT+0x2e0>)
    3538:	47b8      	blx	r7
    353a:	0002      	movs	r2, r0
    353c:	0029      	movs	r1, r5
    353e:	0030      	movs	r0, r6
    3540:	4d43      	ldr	r5, [pc, #268]	; (3650 <IOT_Sign_MQTT+0x2e4>)
    3542:	47a8      	blx	r5
    memcpy(signout->username + strlen(signout->username), "&", strlen("&"));
    3544:	0030      	movs	r0, r6
    3546:	47b8      	blx	r7
    3548:	2326      	movs	r3, #38	; 0x26
    354a:	5433      	strb	r3, [r6, r0]
    memcpy(signout->username + strlen(signout->username), meta->product_key, strlen(meta->product_key));
    354c:	0030      	movs	r0, r6
    354e:	47b8      	blx	r7
    3550:	4681      	mov	r9, r0
    3552:	0020      	movs	r0, r4
    3554:	47b8      	blx	r7
    3556:	0002      	movs	r2, r0
    3558:	0030      	movs	r0, r6
    355a:	4448      	add	r0, r9
    355c:	0021      	movs	r1, r4
    355e:	47a8      	blx	r5

    memset(signout->password, 0, DEV_SIGN_PASSWORD_MAXLEN);
    3560:	2241      	movs	r2, #65	; 0x41
    3562:	2100      	movs	r1, #0
    3564:	9e03      	ldr	r6, [sp, #12]
    3566:	0034      	movs	r4, r6
    3568:	344b      	adds	r4, #75	; 0x4b
    356a:	34ff      	adds	r4, #255	; 0xff
    356c:	0020      	movs	r0, r4
    356e:	47c0      	blx	r8
    infra_hex2str(sign, 32, signout->password);
    3570:	0022      	movs	r2, r4
    3572:	2120      	movs	r1, #32
    3574:	a804      	add	r0, sp, #16
    3576:	4b3e      	ldr	r3, [pc, #248]	; (3670 <IOT_Sign_MQTT+0x304>)
    3578:	4798      	blx	r3

    if (_sign_get_clientid(signout->clientid, device_id) != SUCCESS_RETURN) {
    357a:	3c09      	subs	r4, #9
    357c:	3cff      	subs	r4, #255	; 0xff
    if (clientid_string == NULL || clientid_kv == NULL) {
    357e:	2c00      	cmp	r4, #0
    3580:	d05f      	beq.n	3642 <IOT_Sign_MQTT+0x2d6>
    memset(clientid_string, 0, DEV_SIGN_CLIENT_ID_MAXLEN);
    3582:	22c8      	movs	r2, #200	; 0xc8
    3584:	2100      	movs	r1, #0
    3586:	0020      	movs	r0, r4
    3588:	4b2f      	ldr	r3, [pc, #188]	; (3648 <IOT_Sign_MQTT+0x2dc>)
    358a:	4798      	blx	r3
    memcpy(clientid_string, device_id, strlen(device_id));
    358c:	a83e      	add	r0, sp, #248	; 0xf8
    358e:	4d2f      	ldr	r5, [pc, #188]	; (364c <IOT_Sign_MQTT+0x2e0>)
    3590:	47a8      	blx	r5
    3592:	0002      	movs	r2, r0
    3594:	a93e      	add	r1, sp, #248	; 0xf8
    3596:	0020      	movs	r0, r4
    3598:	4b2d      	ldr	r3, [pc, #180]	; (3650 <IOT_Sign_MQTT+0x2e4>)
    359a:	4798      	blx	r3
    memcpy(clientid_string + strlen(clientid_string), "|", 1);
    359c:	0020      	movs	r0, r4
    359e:	47a8      	blx	r5
    35a0:	237c      	movs	r3, #124	; 0x7c
    35a2:	5423      	strb	r3, [r4, r0]
    35a4:	4d33      	ldr	r5, [pc, #204]	; (3674 <IOT_Sign_MQTT+0x308>)
    35a6:	3b4c      	subs	r3, #76	; 0x4c
    35a8:	469a      	mov	sl, r3
    35aa:	44aa      	add	sl, r5
        if ((strlen(clientid_string) + strlen(clientid_kv[i][0]) + strlen(clientid_kv[i][1]) + 2) >=
    35ac:	4b27      	ldr	r3, [pc, #156]	; (364c <IOT_Sign_MQTT+0x2e0>)
    35ae:	4699      	mov	r9, r3
        memcpy(clientid_string + strlen(clientid_string), clientid_kv[i][0], strlen(clientid_kv[i][0]));
    35b0:	4b27      	ldr	r3, [pc, #156]	; (3650 <IOT_Sign_MQTT+0x2e4>)
    35b2:	469b      	mov	fp, r3
        memcpy(clientid_string + strlen(clientid_string), "=", 1);
    35b4:	46c8      	mov	r8, r9
        if ((strlen(clientid_string) + strlen(clientid_kv[i][0]) + strlen(clientid_kv[i][1]) + 2) >=
    35b6:	0020      	movs	r0, r4
    35b8:	47c8      	blx	r9
    35ba:	0006      	movs	r6, r0
    35bc:	682b      	ldr	r3, [r5, #0]
    35be:	9302      	str	r3, [sp, #8]
    35c0:	0018      	movs	r0, r3
    35c2:	47c8      	blx	r9
    35c4:	0007      	movs	r7, r0
    35c6:	6868      	ldr	r0, [r5, #4]
    35c8:	47c8      	blx	r9
    35ca:	19f3      	adds	r3, r6, r7
    35cc:	3302      	adds	r3, #2
    35ce:	1818      	adds	r0, r3, r0
    35d0:	28c7      	cmp	r0, #199	; 0xc7
    35d2:	d836      	bhi.n	3642 <IOT_Sign_MQTT+0x2d6>
        memcpy(clientid_string + strlen(clientid_string), clientid_kv[i][0], strlen(clientid_kv[i][0]));
    35d4:	19a0      	adds	r0, r4, r6
    35d6:	003a      	movs	r2, r7
    35d8:	9902      	ldr	r1, [sp, #8]
    35da:	47d8      	blx	fp
        memcpy(clientid_string + strlen(clientid_string), "=", 1);
    35dc:	0020      	movs	r0, r4
    35de:	47c0      	blx	r8
    35e0:	233d      	movs	r3, #61	; 0x3d
    35e2:	5423      	strb	r3, [r4, r0]
        memcpy(clientid_string + strlen(clientid_string), clientid_kv[i][1], strlen(clientid_kv[i][1]));
    35e4:	0020      	movs	r0, r4
    35e6:	47c0      	blx	r8
    35e8:	0007      	movs	r7, r0
    35ea:	686e      	ldr	r6, [r5, #4]
    35ec:	0030      	movs	r0, r6
    35ee:	47c0      	blx	r8
    35f0:	0002      	movs	r2, r0
    35f2:	19e0      	adds	r0, r4, r7
    35f4:	0031      	movs	r1, r6
    35f6:	47d8      	blx	fp
        memcpy(clientid_string + strlen(clientid_string), ",", 1);
    35f8:	0020      	movs	r0, r4
    35fa:	47c0      	blx	r8
    35fc:	232c      	movs	r3, #44	; 0x2c
    35fe:	5423      	strb	r3, [r4, r0]
    3600:	3508      	adds	r5, #8
    for (i = 0; i < (sizeof(clientid_kv) / (sizeof(clientid_kv[0]))); i++) {
    3602:	4555      	cmp	r5, sl
    3604:	d1d7      	bne.n	35b6 <IOT_Sign_MQTT+0x24a>
    memcpy(clientid_string + strlen(clientid_string) - 1, "|", 1);
    3606:	0020      	movs	r0, r4
    3608:	4b10      	ldr	r3, [pc, #64]	; (364c <IOT_Sign_MQTT+0x2e0>)
    360a:	4798      	blx	r3
    360c:	3801      	subs	r0, #1
    360e:	237c      	movs	r3, #124	; 0x7c
    3610:	5423      	strb	r3, [r4, r0]
        return ERROR_DEV_SIGN_CLIENT_ID_TOO_SHORT;
    }
#ifdef SUPPORT_TLS
    signout->port = 443;
#else
    signout->port = 1883;
    3612:	4a19      	ldr	r2, [pc, #100]	; (3678 <IOT_Sign_MQTT+0x30c>)
    3614:	3b3c      	subs	r3, #60	; 0x3c
    3616:	9903      	ldr	r1, [sp, #12]
    3618:	52ca      	strh	r2, [r1, r3]
#endif

    return SUCCESS_RETURN;
    361a:	2000      	movs	r0, #0
}
    361c:	b04d      	add	sp, #308	; 0x134
    361e:	bc3c      	pop	{r2, r3, r4, r5}
    3620:	4690      	mov	r8, r2
    3622:	4699      	mov	r9, r3
    3624:	46a2      	mov	sl, r4
    3626:	46ab      	mov	fp, r5
    3628:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
    362a:	2001      	movs	r0, #1
    362c:	4240      	negs	r0, r0
    362e:	e7f5      	b.n	361c <IOT_Sign_MQTT+0x2b0>
    3630:	2001      	movs	r0, #1
    3632:	4240      	negs	r0, r0
    3634:	e7f2      	b.n	361c <IOT_Sign_MQTT+0x2b0>
        return ERROR_DEV_SIGN_SOURCE_TOO_SHORT;
    3636:	4811      	ldr	r0, [pc, #68]	; (367c <IOT_Sign_MQTT+0x310>)
    3638:	e7f0      	b.n	361c <IOT_Sign_MQTT+0x2b0>
        return ERROR_DEV_SIGN_HOST_NAME_TOO_SHORT;
    363a:	4811      	ldr	r0, [pc, #68]	; (3680 <IOT_Sign_MQTT+0x314>)
    363c:	e7ee      	b.n	361c <IOT_Sign_MQTT+0x2b0>
        return ERROR_DEV_SIGN_USERNAME_TOO_SHORT;
    363e:	4811      	ldr	r0, [pc, #68]	; (3684 <IOT_Sign_MQTT+0x318>)
    3640:	e7ec      	b.n	361c <IOT_Sign_MQTT+0x2b0>
        return ERROR_DEV_SIGN_CLIENT_ID_TOO_SHORT;
    3642:	4811      	ldr	r0, [pc, #68]	; (3688 <IOT_Sign_MQTT+0x31c>)
    3644:	e7ea      	b.n	361c <IOT_Sign_MQTT+0x2b0>
    3646:	46c0      	nop			; (mov r8, r8)
    3648:	000085c9 	.word	0x000085c9
    364c:	00008991 	.word	0x00008991
    3650:	000085b7 	.word	0x000085b7
    3654:	0000a090 	.word	0x0000a090
    3658:	0000a09c 	.word	0x0000a09c
    365c:	0000a0a8 	.word	0x0000a0a8
    3660:	0000a0b4 	.word	0x0000a0b4
    3664:	0000a0c0 	.word	0x0000a0c0
    3668:	00004ac9 	.word	0x00004ac9
    366c:	20000048 	.word	0x20000048
    3670:	00004b95 	.word	0x00004b95
    3674:	20000004 	.word	0x20000004
    3678:	0000075b 	.word	0x0000075b
    367c:	fffffbb0 	.word	0xfffffbb0
    3680:	fffffbb4 	.word	0xfffffbb4
    3684:	fffffbb2 	.word	0xfffffbb2
    3688:	fffffbb3 	.word	0xfffffbb3

0000368c <example_message_arrive>:
        HAL_Printf(fmt, ##__VA_ARGS__); \
        HAL_Printf("%s", "\r\n"); \
    } while(0)

void example_message_arrive(void *pcontext, void *pclient, iotx_mqtt_event_msg_pt msg)
{
    368c:	b570      	push	{r4, r5, r6, lr}
    iotx_mqtt_topic_info_t     *topic_info = (iotx_mqtt_topic_info_pt) msg->msg;

    switch (msg->event_type) {
    368e:	7813      	ldrb	r3, [r2, #0]
    3690:	2b0c      	cmp	r3, #12
    3692:	d000      	beq.n	3696 <example_message_arrive+0xa>
            HAL_Printf("\n");
            break;
        default:
            break;
    }
}
    3694:	bd70      	pop	{r4, r5, r6, pc}
    iotx_mqtt_topic_info_t     *topic_info = (iotx_mqtt_topic_info_pt) msg->msg;
    3696:	6855      	ldr	r5, [r2, #4]
            HAL_Printf("Message Arrived: \n");
    3698:	4806      	ldr	r0, [pc, #24]	; (36b4 <example_message_arrive+0x28>)
    369a:	4c07      	ldr	r4, [pc, #28]	; (36b8 <example_message_arrive+0x2c>)
    369c:	47a0      	blx	r4
            HAL_Printf("Topic  : %.*s\n", topic_info->topic_len, topic_info->ptopic);
    369e:	88e9      	ldrh	r1, [r5, #6]
    36a0:	68ea      	ldr	r2, [r5, #12]
    36a2:	4806      	ldr	r0, [pc, #24]	; (36bc <example_message_arrive+0x30>)
    36a4:	47a0      	blx	r4
            HAL_Printf("Payload: %.*s\n", topic_info->payload_len, topic_info->payload);
    36a6:	692a      	ldr	r2, [r5, #16]
    36a8:	68a9      	ldr	r1, [r5, #8]
    36aa:	4805      	ldr	r0, [pc, #20]	; (36c0 <example_message_arrive+0x34>)
    36ac:	47a0      	blx	r4
            HAL_Printf("\n");
    36ae:	4805      	ldr	r0, [pc, #20]	; (36c4 <example_message_arrive+0x38>)
    36b0:	47a0      	blx	r4
}
    36b2:	e7ef      	b.n	3694 <example_message_arrive+0x8>
    36b4:	0000a120 	.word	0x0000a120
    36b8:	00007d35 	.word	0x00007d35
    36bc:	0000a134 	.word	0x0000a134
    36c0:	0000a144 	.word	0x0000a144
    36c4:	00009d70 	.word	0x00009d70

000036c8 <example_event_handle>:
    HAL_Free(topic);
    return 0;
}

void example_event_handle(void *pcontext, void *pclient, iotx_mqtt_event_msg_pt msg)
{
    36c8:	b510      	push	{r4, lr}
    HAL_Printf("msg->event_type : %d\n", msg->event_type);
    36ca:	7811      	ldrb	r1, [r2, #0]
    36cc:	4801      	ldr	r0, [pc, #4]	; (36d4 <example_event_handle+0xc>)
    36ce:	4b02      	ldr	r3, [pc, #8]	; (36d8 <example_event_handle+0x10>)
    36d0:	4798      	blx	r3
}
    36d2:	bd10      	pop	{r4, pc}
    36d4:	0000a154 	.word	0x0000a154
    36d8:	00007d35 	.word	0x00007d35

000036dc <example_subscribe>:
{
    36dc:	b570      	push	{r4, r5, r6, lr}
    36de:	b090      	sub	sp, #64	; 0x40
    36e0:	0005      	movs	r5, r0
    char product_key[IOTX_PRODUCT_KEY_LEN] = {0};
    36e2:	2214      	movs	r2, #20
    36e4:	2100      	movs	r1, #0
    36e6:	a80b      	add	r0, sp, #44	; 0x2c
    36e8:	4c21      	ldr	r4, [pc, #132]	; (3770 <example_subscribe+0x94>)
    36ea:	47a0      	blx	r4
    char device_name[IOTX_DEVICE_NAME_LEN] = {0};
    36ec:	2220      	movs	r2, #32
    36ee:	2100      	movs	r1, #0
    36f0:	a803      	add	r0, sp, #12
    36f2:	47a0      	blx	r4
    HAL_GetProductKey(product_key);
    36f4:	a80b      	add	r0, sp, #44	; 0x2c
    36f6:	4b1f      	ldr	r3, [pc, #124]	; (3774 <example_subscribe+0x98>)
    36f8:	4798      	blx	r3
    HAL_GetDeviceName(device_name);
    36fa:	a803      	add	r0, sp, #12
    36fc:	4b1e      	ldr	r3, [pc, #120]	; (3778 <example_subscribe+0x9c>)
    36fe:	4798      	blx	r3
    topic_len = strlen(fmt) + strlen(product_key) + strlen(device_name) + 1;
    3700:	a80b      	add	r0, sp, #44	; 0x2c
    3702:	4e1e      	ldr	r6, [pc, #120]	; (377c <example_subscribe+0xa0>)
    3704:	47b0      	blx	r6
    3706:	0004      	movs	r4, r0
    3708:	a803      	add	r0, sp, #12
    370a:	47b0      	blx	r6
    370c:	1824      	adds	r4, r4, r0
    370e:	340b      	adds	r4, #11
    topic = HAL_Malloc(topic_len);
    3710:	0020      	movs	r0, r4
    3712:	4b1b      	ldr	r3, [pc, #108]	; (3780 <example_subscribe+0xa4>)
    3714:	4798      	blx	r3
    3716:	1e06      	subs	r6, r0, #0
    if (topic == NULL) {
    3718:	d01b      	beq.n	3752 <example_subscribe+0x76>
    memset(topic, 0, topic_len);
    371a:	0022      	movs	r2, r4
    371c:	2100      	movs	r1, #0
    371e:	4b14      	ldr	r3, [pc, #80]	; (3770 <example_subscribe+0x94>)
    3720:	4798      	blx	r3
    HAL_Snprintf(topic, topic_len, fmt, product_key, device_name);
    3722:	ab03      	add	r3, sp, #12
    3724:	9300      	str	r3, [sp, #0]
    3726:	ab0b      	add	r3, sp, #44	; 0x2c
    3728:	4a16      	ldr	r2, [pc, #88]	; (3784 <example_subscribe+0xa8>)
    372a:	0021      	movs	r1, r4
    372c:	0030      	movs	r0, r6
    372e:	4c16      	ldr	r4, [pc, #88]	; (3788 <example_subscribe+0xac>)
    3730:	47a0      	blx	r4
    res = IOT_MQTT_Subscribe(handle, topic, IOTX_MQTT_QOS0, example_message_arrive, NULL);
    3732:	2300      	movs	r3, #0
    3734:	9300      	str	r3, [sp, #0]
    3736:	4b15      	ldr	r3, [pc, #84]	; (378c <example_subscribe+0xb0>)
    3738:	2200      	movs	r2, #0
    373a:	0031      	movs	r1, r6
    373c:	0028      	movs	r0, r5
    373e:	4c14      	ldr	r4, [pc, #80]	; (3790 <example_subscribe+0xb4>)
    3740:	47a0      	blx	r4
    if (res < 0) {
    3742:	2800      	cmp	r0, #0
    3744:	db0b      	blt.n	375e <example_subscribe+0x82>
    HAL_Free(topic);
    3746:	0030      	movs	r0, r6
    3748:	4b12      	ldr	r3, [pc, #72]	; (3794 <example_subscribe+0xb8>)
    374a:	4798      	blx	r3
    return 0;
    374c:	2000      	movs	r0, #0
}
    374e:	b010      	add	sp, #64	; 0x40
    3750:	bd70      	pop	{r4, r5, r6, pc}
        HAL_Printf("memory not enough\n");
    3752:	4811      	ldr	r0, [pc, #68]	; (3798 <example_subscribe+0xbc>)
    3754:	4b11      	ldr	r3, [pc, #68]	; (379c <example_subscribe+0xc0>)
    3756:	4798      	blx	r3
        return -1;
    3758:	2001      	movs	r0, #1
    375a:	4240      	negs	r0, r0
    375c:	e7f7      	b.n	374e <example_subscribe+0x72>
        HAL_Printf("subscribe failed\n");
    375e:	4810      	ldr	r0, [pc, #64]	; (37a0 <example_subscribe+0xc4>)
    3760:	4b0e      	ldr	r3, [pc, #56]	; (379c <example_subscribe+0xc0>)
    3762:	4798      	blx	r3
        HAL_Free(topic);
    3764:	0030      	movs	r0, r6
    3766:	4b0b      	ldr	r3, [pc, #44]	; (3794 <example_subscribe+0xb8>)
    3768:	4798      	blx	r3
        return -1;
    376a:	2001      	movs	r0, #1
    376c:	4240      	negs	r0, r0
    376e:	e7ee      	b.n	374e <example_subscribe+0x72>
    3770:	000085c9 	.word	0x000085c9
    3774:	00007cf5 	.word	0x00007cf5
    3778:	00007c69 	.word	0x00007c69
    377c:	00008991 	.word	0x00008991
    3780:	00007d1d 	.word	0x00007d1d
    3784:	0000a180 	.word	0x0000a180
    3788:	00007d75 	.word	0x00007d75
    378c:	0000368d 	.word	0x0000368d
    3790:	00007a79 	.word	0x00007a79
    3794:	00007c5d 	.word	0x00007c5d
    3798:	0000a16c 	.word	0x0000a16c
    379c:	00007d35 	.word	0x00007d35
    37a0:	0000a18c 	.word	0x0000a18c

000037a4 <example_publish>:
{
    37a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    37a6:	b095      	sub	sp, #84	; 0x54
    37a8:	0005      	movs	r5, r0
    char product_key[IOTX_PRODUCT_KEY_LEN] = {0};
    37aa:	2214      	movs	r2, #20
    37ac:	2100      	movs	r1, #0
    37ae:	a80a      	add	r0, sp, #40	; 0x28
    37b0:	4c25      	ldr	r4, [pc, #148]	; (3848 <example_publish+0xa4>)
    37b2:	47a0      	blx	r4
    char device_name[IOTX_DEVICE_NAME_LEN] = {0};
    37b4:	2220      	movs	r2, #32
    37b6:	2100      	movs	r1, #0
    37b8:	a802      	add	r0, sp, #8
    37ba:	47a0      	blx	r4
    HAL_GetProductKey(product_key);
    37bc:	a80a      	add	r0, sp, #40	; 0x28
    37be:	4b23      	ldr	r3, [pc, #140]	; (384c <example_publish+0xa8>)
    37c0:	4798      	blx	r3
    HAL_GetDeviceName(device_name);
    37c2:	a802      	add	r0, sp, #8
    37c4:	4b22      	ldr	r3, [pc, #136]	; (3850 <example_publish+0xac>)
    37c6:	4798      	blx	r3
    topic_len = strlen(fmt) + strlen(product_key) + strlen(device_name) + 1;
    37c8:	a80a      	add	r0, sp, #40	; 0x28
    37ca:	4e22      	ldr	r6, [pc, #136]	; (3854 <example_publish+0xb0>)
    37cc:	47b0      	blx	r6
    37ce:	0004      	movs	r4, r0
    37d0:	a802      	add	r0, sp, #8
    37d2:	47b0      	blx	r6
    37d4:	1824      	adds	r4, r4, r0
    37d6:	340b      	adds	r4, #11
    topic = HAL_Malloc(topic_len);
    37d8:	0020      	movs	r0, r4
    37da:	4b1f      	ldr	r3, [pc, #124]	; (3858 <example_publish+0xb4>)
    37dc:	4798      	blx	r3
    37de:	1e06      	subs	r6, r0, #0
    if (topic == NULL) {
    37e0:	d023      	beq.n	382a <example_publish+0x86>
    memset(topic, 0, topic_len);
    37e2:	0022      	movs	r2, r4
    37e4:	2100      	movs	r1, #0
    37e6:	4f18      	ldr	r7, [pc, #96]	; (3848 <example_publish+0xa4>)
    37e8:	47b8      	blx	r7
    HAL_Snprintf(topic, topic_len, fmt, product_key, device_name);
    37ea:	ab02      	add	r3, sp, #8
    37ec:	9300      	str	r3, [sp, #0]
    37ee:	ab0a      	add	r3, sp, #40	; 0x28
    37f0:	4a1a      	ldr	r2, [pc, #104]	; (385c <example_publish+0xb8>)
    37f2:	0021      	movs	r1, r4
    37f4:	0030      	movs	r0, r6
    37f6:	4c1a      	ldr	r4, [pc, #104]	; (3860 <example_publish+0xbc>)
    37f8:	47a0      	blx	r4
    memset(&topic_msg, 0x0, sizeof(iotx_mqtt_topic_info_t));
    37fa:	ac0f      	add	r4, sp, #60	; 0x3c
    37fc:	2214      	movs	r2, #20
    37fe:	2100      	movs	r1, #0
    3800:	0020      	movs	r0, r4
    3802:	47b8      	blx	r7
    topic_msg.qos = IOTX_MQTT_QOS1;
    3804:	2301      	movs	r3, #1
    3806:	70a3      	strb	r3, [r4, #2]
    topic_msg.payload = (void *)payload;
    3808:	4b16      	ldr	r3, [pc, #88]	; (3864 <example_publish+0xc0>)
    380a:	6123      	str	r3, [r4, #16]
    topic_msg.payload_len = strlen(payload);
    380c:	230b      	movs	r3, #11
    380e:	60a3      	str	r3, [r4, #8]
    res = IOT_MQTT_Publish(handle, topic, &topic_msg);
    3810:	0022      	movs	r2, r4
    3812:	0031      	movs	r1, r6
    3814:	0028      	movs	r0, r5
    3816:	4b14      	ldr	r3, [pc, #80]	; (3868 <example_publish+0xc4>)
    3818:	4798      	blx	r3
    if (res < 0) {
    381a:	2800      	cmp	r0, #0
    381c:	db0b      	blt.n	3836 <example_publish+0x92>
    HAL_Free(topic);
    381e:	0030      	movs	r0, r6
    3820:	4b12      	ldr	r3, [pc, #72]	; (386c <example_publish+0xc8>)
    3822:	4798      	blx	r3
    return 0;
    3824:	2000      	movs	r0, #0
}
    3826:	b015      	add	sp, #84	; 0x54
    3828:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_Printf("memory not enough\n");
    382a:	4811      	ldr	r0, [pc, #68]	; (3870 <example_publish+0xcc>)
    382c:	4b11      	ldr	r3, [pc, #68]	; (3874 <example_publish+0xd0>)
    382e:	4798      	blx	r3
        return -1;
    3830:	2001      	movs	r0, #1
    3832:	4240      	negs	r0, r0
    3834:	e7f7      	b.n	3826 <example_publish+0x82>
        HAL_Printf("publish failed\n");
    3836:	4810      	ldr	r0, [pc, #64]	; (3878 <example_publish+0xd4>)
    3838:	4b0e      	ldr	r3, [pc, #56]	; (3874 <example_publish+0xd0>)
    383a:	4798      	blx	r3
        HAL_Free(topic);
    383c:	0030      	movs	r0, r6
    383e:	4b0b      	ldr	r3, [pc, #44]	; (386c <example_publish+0xc8>)
    3840:	4798      	blx	r3
        return -1;
    3842:	2001      	movs	r0, #1
    3844:	4240      	negs	r0, r0
    3846:	e7ee      	b.n	3826 <example_publish+0x82>
    3848:	000085c9 	.word	0x000085c9
    384c:	00007cf5 	.word	0x00007cf5
    3850:	00007c69 	.word	0x00007c69
    3854:	00008991 	.word	0x00008991
    3858:	00007d1d 	.word	0x00007d1d
    385c:	0000a180 	.word	0x0000a180
    3860:	00007d75 	.word	0x00007d75
    3864:	0000a1a0 	.word	0x0000a1a0
    3868:	00007b05 	.word	0x00007b05
    386c:	00007c5d 	.word	0x00007c5d
    3870:	0000a16c 	.word	0x0000a16c
    3874:	00007d35 	.word	0x00007d35
    3878:	0000a1ac 	.word	0x0000a1ac

0000387c <mqtt_example>:
 *  For new devices created by yourself, pub/sub privilege also required to be granted
 *  to its /${productKey}/${deviceName}/get to run whole example
 */

int mqtt_example(void)
{
    387c:	b5f0      	push	{r4, r5, r6, r7, lr}
    387e:	4c3d      	ldr	r4, [pc, #244]	; (3974 <mqtt_example+0xf8>)
    3880:	44a5      	add	sp, r4
    void *      pclient = NULL;
    3882:	2300      	movs	r3, #0
    3884:	939f      	str	r3, [sp, #636]	; 0x27c
    iotx_sign_mqtt_t            sign_mqtt;
    iotx_dev_meta_info_t        meta;
    iotx_mqtt_param_t           mqtt_params;

#ifdef ATM_ENABLED
    if (IOT_ATM_Init() < 0) {
    3886:	4b3c      	ldr	r3, [pc, #240]	; (3978 <mqtt_example+0xfc>)
    3888:	4798      	blx	r3
    388a:	2800      	cmp	r0, #0
    388c:	db4e      	blt.n	392c <mqtt_example+0xb0>
        HAL_Printf("IOT ATM init failed!\n");
        return -1;
    }
#endif

    HAL_Printf("mqtt example\n");
    388e:	483b      	ldr	r0, [pc, #236]	; (397c <mqtt_example+0x100>)
    3890:	4b3b      	ldr	r3, [pc, #236]	; (3980 <mqtt_example+0x104>)
    3892:	4798      	blx	r3

    memset(&meta, 0, sizeof(iotx_dev_meta_info_t));
    3894:	22b8      	movs	r2, #184	; 0xb8
    3896:	2100      	movs	r1, #0
    3898:	a80e      	add	r0, sp, #56	; 0x38
    389a:	4c3a      	ldr	r4, [pc, #232]	; (3984 <mqtt_example+0x108>)
    389c:	47a0      	blx	r4
    HAL_GetProductKey(meta.product_key);
    389e:	a80e      	add	r0, sp, #56	; 0x38
    38a0:	4b39      	ldr	r3, [pc, #228]	; (3988 <mqtt_example+0x10c>)
    38a2:	4798      	blx	r3
    HAL_GetDeviceName(meta.device_name);
    38a4:	208e      	movs	r0, #142	; 0x8e
    38a6:	4468      	add	r0, sp
    38a8:	4b38      	ldr	r3, [pc, #224]	; (398c <mqtt_example+0x110>)
    38aa:	4798      	blx	r3
    HAL_GetDeviceSecret(meta.device_secret);
    38ac:	20af      	movs	r0, #175	; 0xaf
    38ae:	4468      	add	r0, sp
    38b0:	4b37      	ldr	r3, [pc, #220]	; (3990 <mqtt_example+0x114>)
    38b2:	4798      	blx	r3

    memset(&sign_mqtt, 0x0, sizeof(iotx_sign_mqtt_t));
    38b4:	22c6      	movs	r2, #198	; 0xc6
    38b6:	0052      	lsls	r2, r2, #1
    38b8:	2100      	movs	r1, #0
    38ba:	a83c      	add	r0, sp, #240	; 0xf0
    38bc:	47a0      	blx	r4

    if (IOT_Sign_MQTT(region, &meta, &sign_mqtt) < 0) {
    38be:	aa3c      	add	r2, sp, #240	; 0xf0
    38c0:	a90e      	add	r1, sp, #56	; 0x38
    38c2:	2000      	movs	r0, #0
    38c4:	4b33      	ldr	r3, [pc, #204]	; (3994 <mqtt_example+0x118>)
    38c6:	4798      	blx	r3
    38c8:	2800      	cmp	r0, #0
    38ca:	db32      	blt.n	3932 <mqtt_example+0xb6>
    HAL_Printf("sign_mqtt.password: %s\n", sign_mqtt.password);
    HAL_Printf("sign_mqtt.clientid: %s\n", sign_mqtt.clientid);
#endif

    /* Initialize MQTT parameter */
    memset(&mqtt_params, 0x0, sizeof(mqtt_params));
    38cc:	2234      	movs	r2, #52	; 0x34
    38ce:	2100      	movs	r1, #0
    38d0:	a801      	add	r0, sp, #4
    38d2:	4b2c      	ldr	r3, [pc, #176]	; (3984 <mqtt_example+0x108>)
    38d4:	4798      	blx	r3

    mqtt_params.port = sign_mqtt.port;
    38d6:	ab01      	add	r3, sp, #4
    38d8:	2240      	movs	r2, #64	; 0x40
    38da:	a93c      	add	r1, sp, #240	; 0xf0
    38dc:	5a8a      	ldrh	r2, [r1, r2]
    38de:	801a      	strh	r2, [r3, #0]
    mqtt_params.host = sign_mqtt.hostname;
    38e0:	9102      	str	r1, [sp, #8]
    mqtt_params.client_id = sign_mqtt.clientid;
    38e2:	2299      	movs	r2, #153	; 0x99
    38e4:	0052      	lsls	r2, r2, #1
    38e6:	446a      	add	r2, sp
    38e8:	9203      	str	r2, [sp, #12]
    mqtt_params.username = sign_mqtt.username;
    38ea:	22fd      	movs	r2, #253	; 0xfd
    38ec:	0052      	lsls	r2, r2, #1
    38ee:	446a      	add	r2, sp
    38f0:	9204      	str	r2, [sp, #16]
    mqtt_params.password = sign_mqtt.password;
    38f2:	4a29      	ldr	r2, [pc, #164]	; (3998 <mqtt_example+0x11c>)
    38f4:	446a      	add	r2, sp
    38f6:	9205      	str	r2, [sp, #20]

    mqtt_params.request_timeout_ms = 2000;
    38f8:	22fa      	movs	r2, #250	; 0xfa
    38fa:	00d2      	lsls	r2, r2, #3
    38fc:	9208      	str	r2, [sp, #32]
    mqtt_params.clean_session = 0;
    mqtt_params.keepalive_interval_ms = 60000;
    38fe:	4a27      	ldr	r2, [pc, #156]	; (399c <mqtt_example+0x120>)
    3900:	9209      	str	r2, [sp, #36]	; 0x24
    mqtt_params.read_buf_size = 1024;
    3902:	2280      	movs	r2, #128	; 0x80
    3904:	00d2      	lsls	r2, r2, #3
    3906:	920b      	str	r2, [sp, #44]	; 0x2c
    mqtt_params.write_buf_size = 1024;
    3908:	920a      	str	r2, [sp, #40]	; 0x28

    mqtt_params.handle_event.h_fp = example_event_handle;
    390a:	4a25      	ldr	r2, [pc, #148]	; (39a0 <mqtt_example+0x124>)
    390c:	920c      	str	r2, [sp, #48]	; 0x30
    mqtt_params.handle_event.pcontext = NULL;

    pclient = IOT_MQTT_Construct(&mqtt_params);
    390e:	0018      	movs	r0, r3
    3910:	4b24      	ldr	r3, [pc, #144]	; (39a4 <mqtt_example+0x128>)
    3912:	4798      	blx	r3
    3914:	909f      	str	r0, [sp, #636]	; 0x27c
    if (NULL == pclient) {
    3916:	2800      	cmp	r0, #0
    3918:	d011      	beq.n	393e <mqtt_example+0xc2>
        EXAMPLE_TRACE("MQTT construct failed");
        return -1;
    }

    res = example_subscribe(pclient);
    391a:	4b23      	ldr	r3, [pc, #140]	; (39a8 <mqtt_example+0x12c>)
    391c:	4798      	blx	r3
    391e:	2400      	movs	r4, #0
    if (res < 0) {
    3920:	2800      	cmp	r0, #0
    3922:	db17      	blt.n	3954 <mqtt_example+0xd8>
        IOT_MQTT_Destroy(&pclient);
        return -1;
    }

    while (1) {
        if (0 == loop_cnt % 20) {
    3924:	4e21      	ldr	r6, [pc, #132]	; (39ac <mqtt_example+0x130>)
            example_publish(pclient);
    3926:	4f22      	ldr	r7, [pc, #136]	; (39b0 <mqtt_example+0x134>)
        }

        IOT_MQTT_Yield(pclient, 200);
    3928:	4d22      	ldr	r5, [pc, #136]	; (39b4 <mqtt_example+0x138>)
    392a:	e01b      	b.n	3964 <mqtt_example+0xe8>
        HAL_Printf("IOT ATM init failed!\n");
    392c:	4822      	ldr	r0, [pc, #136]	; (39b8 <mqtt_example+0x13c>)
    392e:	4b14      	ldr	r3, [pc, #80]	; (3980 <mqtt_example+0x104>)
    3930:	4798      	blx	r3

        loop_cnt += 1;
    }

    return 0;
}
    3932:	2001      	movs	r0, #1
    3934:	4240      	negs	r0, r0
    3936:	23a1      	movs	r3, #161	; 0xa1
    3938:	009b      	lsls	r3, r3, #2
    393a:	449d      	add	sp, r3
    393c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        EXAMPLE_TRACE("MQTT construct failed");
    393e:	22c2      	movs	r2, #194	; 0xc2
    3940:	491e      	ldr	r1, [pc, #120]	; (39bc <mqtt_example+0x140>)
    3942:	481f      	ldr	r0, [pc, #124]	; (39c0 <mqtt_example+0x144>)
    3944:	4c0e      	ldr	r4, [pc, #56]	; (3980 <mqtt_example+0x104>)
    3946:	47a0      	blx	r4
    3948:	481e      	ldr	r0, [pc, #120]	; (39c4 <mqtt_example+0x148>)
    394a:	47a0      	blx	r4
    394c:	491e      	ldr	r1, [pc, #120]	; (39c8 <mqtt_example+0x14c>)
    394e:	481f      	ldr	r0, [pc, #124]	; (39cc <mqtt_example+0x150>)
    3950:	47a0      	blx	r4
        return -1;
    3952:	e7ee      	b.n	3932 <mqtt_example+0xb6>
        IOT_MQTT_Destroy(&pclient);
    3954:	a89f      	add	r0, sp, #636	; 0x27c
    3956:	4b1e      	ldr	r3, [pc, #120]	; (39d0 <mqtt_example+0x154>)
    3958:	4798      	blx	r3
        return -1;
    395a:	e7ea      	b.n	3932 <mqtt_example+0xb6>
        IOT_MQTT_Yield(pclient, 200);
    395c:	21c8      	movs	r1, #200	; 0xc8
    395e:	989f      	ldr	r0, [sp, #636]	; 0x27c
    3960:	47a8      	blx	r5
        loop_cnt += 1;
    3962:	3401      	adds	r4, #1
        if (0 == loop_cnt % 20) {
    3964:	2114      	movs	r1, #20
    3966:	0020      	movs	r0, r4
    3968:	47b0      	blx	r6
    396a:	2900      	cmp	r1, #0
    396c:	d1f6      	bne.n	395c <mqtt_example+0xe0>
            example_publish(pclient);
    396e:	989f      	ldr	r0, [sp, #636]	; 0x27c
    3970:	47b8      	blx	r7
    3972:	e7f3      	b.n	395c <mqtt_example+0xe0>
    3974:	fffffd7c 	.word	0xfffffd7c
    3978:	00000e25 	.word	0x00000e25
    397c:	0000a1d4 	.word	0x0000a1d4
    3980:	00007d35 	.word	0x00007d35
    3984:	000085c9 	.word	0x000085c9
    3988:	00007cf5 	.word	0x00007cf5
    398c:	00007c69 	.word	0x00007c69
    3990:	00007c99 	.word	0x00007c99
    3994:	0000336d 	.word	0x0000336d
    3998:	0000023a 	.word	0x0000023a
    399c:	0000ea60 	.word	0x0000ea60
    39a0:	000036c9 	.word	0x000036c9
    39a4:	000076f5 	.word	0x000076f5
    39a8:	000036dd 	.word	0x000036dd
    39ac:	000081d9 	.word	0x000081d9
    39b0:	000037a5 	.word	0x000037a5
    39b4:	00007a5d 	.word	0x00007a5d
    39b8:	0000a1bc 	.word	0x0000a1bc
    39bc:	0000a110 	.word	0x0000a110
    39c0:	0000a1e4 	.word	0x0000a1e4
    39c4:	0000a1f0 	.word	0x0000a1f0
    39c8:	00009cb4 	.word	0x00009cb4
    39cc:	0000b3ac 	.word	0x0000b3ac
    39d0:	00007a09 	.word	0x00007a09

000039d4 <utils_net_read>:
}
#endif  /* #ifdef SUPPORT_TLS */

/****** network interface ******/
int utils_net_read(utils_network_pt pNetwork, char *buffer, uint32_t len, uint32_t timeout_ms)
{
    39d4:	b510      	push	{r4, lr}
#ifdef SUPPORT_TLS
    if (NULL != pNetwork->ca_crt) {
        ret = read_ssl(pNetwork, buffer, len, timeout_ms);
    }
#else
    if (NULL == pNetwork->ca_crt) {
    39d6:	6884      	ldr	r4, [r0, #8]
    39d8:	2c00      	cmp	r4, #0
    39da:	d103      	bne.n	39e4 <utils_net_read+0x10>
    return AT_TCP_Read(pNetwork->handle, buffer, len, timeout_ms);
    39dc:	6900      	ldr	r0, [r0, #16]
    39de:	4c03      	ldr	r4, [pc, #12]	; (39ec <utils_net_read+0x18>)
    39e0:	47a0      	blx	r4
        ret = -1;
        net_err("no method match!");
    }

    return ret;
}
    39e2:	bd10      	pop	{r4, pc}
        ret = -1;
    39e4:	2001      	movs	r0, #1
    39e6:	4240      	negs	r0, r0
    return ret;
    39e8:	e7fb      	b.n	39e2 <utils_net_read+0xe>
    39ea:	46c0      	nop			; (mov r8, r8)
    39ec:	00001fa5 	.word	0x00001fa5

000039f0 <utils_net_write>:

int utils_net_write(utils_network_pt pNetwork, const char *buffer, uint32_t len, uint32_t timeout_ms)
{
    39f0:	b510      	push	{r4, lr}
#ifdef SUPPORT_TLS
    if (NULL != pNetwork->ca_crt) {
        ret = write_ssl(pNetwork, buffer, len, timeout_ms);
    }
#else
    if (NULL == pNetwork->ca_crt) {
    39f2:	6884      	ldr	r4, [r0, #8]
    39f4:	2c00      	cmp	r4, #0
    39f6:	d103      	bne.n	3a00 <utils_net_write+0x10>
    return AT_TCP_Write(pNetwork->handle, buffer, len, timeout_ms);
    39f8:	6900      	ldr	r0, [r0, #16]
    39fa:	4c03      	ldr	r4, [pc, #12]	; (3a08 <utils_net_write+0x18>)
    39fc:	47a0      	blx	r4
        ret = -1;
        net_err("no method match!");
    }

    return ret;
}
    39fe:	bd10      	pop	{r4, pc}
        ret = -1;
    3a00:	2001      	movs	r0, #1
    3a02:	4240      	negs	r0, r0
    return ret;
    3a04:	e7fb      	b.n	39fe <utils_net_write+0xe>
    3a06:	46c0      	nop			; (mov r8, r8)
    3a08:	00001f25 	.word	0x00001f25

00003a0c <iotx_net_disconnect>:

int iotx_net_disconnect(utils_network_pt pNetwork)
{
    3a0c:	b510      	push	{r4, lr}
    3a0e:	0004      	movs	r4, r0
#ifdef SUPPORT_TLS
    if (NULL != pNetwork->ca_crt) {
        ret = disconnect_ssl(pNetwork);
    }
#else
    if (NULL == pNetwork->ca_crt) {
    3a10:	6883      	ldr	r3, [r0, #8]
    3a12:	2b00      	cmp	r3, #0
    3a14:	d109      	bne.n	3a2a <iotx_net_disconnect+0x1e>
    if (pNetwork->handle == (uintptr_t)(-1)) {
    3a16:	6900      	ldr	r0, [r0, #16]
    3a18:	1c43      	adds	r3, r0, #1
    3a1a:	d009      	beq.n	3a30 <iotx_net_disconnect+0x24>
    AT_TCP_Destroy(pNetwork->handle);
    3a1c:	4b06      	ldr	r3, [pc, #24]	; (3a38 <iotx_net_disconnect+0x2c>)
    3a1e:	4798      	blx	r3
    pNetwork->handle = -1;
    3a20:	2301      	movs	r3, #1
    3a22:	425b      	negs	r3, r3
    3a24:	6123      	str	r3, [r4, #16]
    return 0;
    3a26:	2000      	movs	r0, #0
        ret = -1;
        net_err("no method match!");
    }

    return  ret;
}
    3a28:	bd10      	pop	{r4, pc}
        ret = -1;
    3a2a:	2001      	movs	r0, #1
    3a2c:	4240      	negs	r0, r0
    3a2e:	e7fb      	b.n	3a28 <iotx_net_disconnect+0x1c>
        return -1;
    3a30:	2001      	movs	r0, #1
    3a32:	4240      	negs	r0, r0
    return  ret;
    3a34:	e7f8      	b.n	3a28 <iotx_net_disconnect+0x1c>
    3a36:	46c0      	nop			; (mov r8, r8)
    3a38:	00001f01 	.word	0x00001f01

00003a3c <iotx_net_connect>:

int iotx_net_connect(utils_network_pt pNetwork)
{
    3a3c:	b510      	push	{r4, lr}
    3a3e:	0004      	movs	r4, r0
#ifdef SUPPORT_TLS
    if (NULL != pNetwork->ca_crt) {
        ret = connect_ssl(pNetwork);
    }
#else
    if (NULL == pNetwork->ca_crt) {
    3a40:	6883      	ldr	r3, [r0, #8]
    3a42:	2b00      	cmp	r3, #0
    3a44:	d10b      	bne.n	3a5e <iotx_net_connect+0x22>
    if (NULL == pNetwork) {
    3a46:	2800      	cmp	r0, #0
    3a48:	d00c      	beq.n	3a64 <iotx_net_connect+0x28>
    pNetwork->handle = AT_TCP_Establish(pNetwork->pHostAddress, pNetwork->port);
    3a4a:	8881      	ldrh	r1, [r0, #4]
    3a4c:	6800      	ldr	r0, [r0, #0]
    3a4e:	4b06      	ldr	r3, [pc, #24]	; (3a68 <iotx_net_connect+0x2c>)
    3a50:	4798      	blx	r3
    3a52:	6120      	str	r0, [r4, #16]
    if (pNetwork->handle == (uintptr_t)(-1)) {
    3a54:	3001      	adds	r0, #1
    3a56:	4242      	negs	r2, r0
    3a58:	4142      	adcs	r2, r0
    3a5a:	4250      	negs	r0, r2
        ret = -1;
        net_err("no method match!");
    }

    return ret;
}
    3a5c:	bd10      	pop	{r4, pc}
        ret = -1;
    3a5e:	2001      	movs	r0, #1
    3a60:	4240      	negs	r0, r0
    3a62:	e7fb      	b.n	3a5c <iotx_net_connect+0x20>
        return 1;
    3a64:	2001      	movs	r0, #1
    return ret;
    3a66:	e7f9      	b.n	3a5c <iotx_net_connect+0x20>
    3a68:	00001e4d 	.word	0x00001e4d

00003a6c <iotx_net_init>:

int iotx_net_init(utils_network_pt pNetwork, const char *host, uint16_t port, const char *ca_crt)
{
    3a6c:	b510      	push	{r4, lr}
    3a6e:	1e04      	subs	r4, r0, #0
    if (!pNetwork || !host) {
    3a70:	d018      	beq.n	3aa4 <iotx_net_init+0x38>
    3a72:	2900      	cmp	r1, #0
    3a74:	d019      	beq.n	3aaa <iotx_net_init+0x3e>
        net_err("parameter error! pNetwork=%p, host = %p", pNetwork, host);
        return -1;
    }
    pNetwork->pHostAddress = host;
    3a76:	6001      	str	r1, [r0, #0]
    pNetwork->port = port;
    3a78:	8082      	strh	r2, [r0, #4]
    pNetwork->ca_crt = ca_crt;
    3a7a:	6083      	str	r3, [r0, #8]

    if (NULL == ca_crt) {
    3a7c:	2b00      	cmp	r3, #0
    3a7e:	d00f      	beq.n	3aa0 <iotx_net_init+0x34>
        pNetwork->ca_crt_len = 0;
    } else {
        pNetwork->ca_crt_len = strlen(ca_crt);
    3a80:	0018      	movs	r0, r3
    3a82:	4b0b      	ldr	r3, [pc, #44]	; (3ab0 <iotx_net_init+0x44>)
    3a84:	4798      	blx	r3
    3a86:	80e0      	strh	r0, [r4, #6]
    }

    pNetwork->handle = 0;
    3a88:	2300      	movs	r3, #0
    3a8a:	6123      	str	r3, [r4, #16]
    pNetwork->read = utils_net_read;
    3a8c:	4b09      	ldr	r3, [pc, #36]	; (3ab4 <iotx_net_init+0x48>)
    3a8e:	6163      	str	r3, [r4, #20]
    pNetwork->write = utils_net_write;
    3a90:	4b09      	ldr	r3, [pc, #36]	; (3ab8 <iotx_net_init+0x4c>)
    3a92:	61a3      	str	r3, [r4, #24]
    pNetwork->disconnect = iotx_net_disconnect;
    3a94:	4b09      	ldr	r3, [pc, #36]	; (3abc <iotx_net_init+0x50>)
    3a96:	61e3      	str	r3, [r4, #28]
    pNetwork->connect = iotx_net_connect;
    3a98:	4b09      	ldr	r3, [pc, #36]	; (3ac0 <iotx_net_init+0x54>)
    3a9a:	6223      	str	r3, [r4, #32]

    return 0;
    3a9c:	2000      	movs	r0, #0
}
    3a9e:	bd10      	pop	{r4, pc}
        pNetwork->ca_crt_len = 0;
    3aa0:	80c3      	strh	r3, [r0, #6]
    3aa2:	e7f1      	b.n	3a88 <iotx_net_init+0x1c>
        return -1;
    3aa4:	2001      	movs	r0, #1
    3aa6:	4240      	negs	r0, r0
    3aa8:	e7f9      	b.n	3a9e <iotx_net_init+0x32>
    3aaa:	2001      	movs	r0, #1
    3aac:	4240      	negs	r0, r0
    3aae:	e7f6      	b.n	3a9e <iotx_net_init+0x32>
    3ab0:	00008991 	.word	0x00008991
    3ab4:	000039d5 	.word	0x000039d5
    3ab8:	000039f1 	.word	0x000039f1
    3abc:	00003a0d 	.word	0x00003a0d
    3ac0:	00003a3d 	.word	0x00003a3d

00003ac4 <iotx_report_id>:

static unsigned int g_report_id = 0;

int iotx_report_id(void)
{
    return g_report_id++;
    3ac4:	4b02      	ldr	r3, [pc, #8]	; (3ad0 <iotx_report_id+0xc>)
    3ac6:	6818      	ldr	r0, [r3, #0]
    3ac8:	1c42      	adds	r2, r0, #1
    3aca:	601a      	str	r2, [r3, #0]
}
    3acc:	4770      	bx	lr
    3ace:	46c0      	nop			; (mov r8, r8)
    3ad0:	200009f4 	.word	0x200009f4

00003ad4 <iotx_set_report_func>:

static info_report_func_pt info_report_func = NULL;

void iotx_set_report_func(info_report_func_pt func)
{
    info_report_func = func;
    3ad4:	4b01      	ldr	r3, [pc, #4]	; (3adc <iotx_set_report_func+0x8>)
    3ad6:	6058      	str	r0, [r3, #4]
}
    3ad8:	4770      	bx	lr
    3ada:	46c0      	nop			; (mov r8, r8)
    3adc:	200009f4 	.word	0x200009f4

00003ae0 <iotx_report_devinfo>:
                                     "{\"attrKey\":\"SYS_LP_SDK_VERSION\",\"attrValue\":\"%s\",\"domain\":\"SYSTEM\"},"
                                     "{\"attrKey\":\"SYS_SDK_LANGUAGE\",\"attrValue\":\"C\",\"domain\":\"SYSTEM\"}"
                                     "],\"method\":\"thing.deviceinfo.update\"}";

int iotx_report_devinfo(void *pclient)
{
    3ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ae2:	b0b5      	sub	sp, #212	; 0xd4
    3ae4:	0006      	movs	r6, r0
    int ret = 0;
    char topic_name[IOTX_URI_MAX_LEN + 1] = {0};
    3ae6:	2288      	movs	r2, #136	; 0x88
    3ae8:	2100      	movs	r1, #0
    3aea:	a812      	add	r0, sp, #72	; 0x48
    3aec:	4c48      	ldr	r4, [pc, #288]	; (3c10 <iotx_report_devinfo+0x130>)
    3aee:	47a0      	blx	r4
    char product_key[IOTX_PRODUCT_KEY_LEN + 1] = {0};
    3af0:	2215      	movs	r2, #21
    3af2:	2100      	movs	r1, #0
    3af4:	a80c      	add	r0, sp, #48	; 0x30
    3af6:	47a0      	blx	r4
    char device_name[IOTX_DEVICE_NAME_LEN + 1] = {0};
    3af8:	2221      	movs	r2, #33	; 0x21
    3afa:	2100      	movs	r1, #0
    3afc:	a803      	add	r0, sp, #12
    3afe:	47a0      	blx	r4
    char *msg = NULL;
    int  msg_len = 0;


    if (info_report_func == NULL) {
    3b00:	4b44      	ldr	r3, [pc, #272]	; (3c14 <iotx_report_devinfo+0x134>)
    3b02:	685b      	ldr	r3, [r3, #4]
    3b04:	2b00      	cmp	r3, #0
    3b06:	d056      	beq.n	3bb6 <iotx_report_devinfo+0xd6>
        VERSION_ERR("report func not register!");
        return -1;
    }

    HAL_GetProductKey(product_key);
    3b08:	a80c      	add	r0, sp, #48	; 0x30
    3b0a:	4b43      	ldr	r3, [pc, #268]	; (3c18 <iotx_report_devinfo+0x138>)
    3b0c:	4798      	blx	r3
    HAL_GetDeviceName(device_name);
    3b0e:	ac03      	add	r4, sp, #12
    3b10:	0020      	movs	r0, r4
    3b12:	4b42      	ldr	r3, [pc, #264]	; (3c1c <iotx_report_devinfo+0x13c>)
    3b14:	4798      	blx	r3
    VERSION_DEBUG("devinfo report");
    3b16:	4842      	ldr	r0, [pc, #264]	; (3c20 <iotx_report_devinfo+0x140>)
    3b18:	4d42      	ldr	r5, [pc, #264]	; (3c24 <iotx_report_devinfo+0x144>)
    3b1a:	47a8      	blx	r5
    3b1c:	4842      	ldr	r0, [pc, #264]	; (3c28 <iotx_report_devinfo+0x148>)
    3b1e:	47a8      	blx	r5

    /* devinfo update topic name */
    ret = HAL_Snprintf(topic_name,
    3b20:	9400      	str	r4, [sp, #0]
    3b22:	ab0c      	add	r3, sp, #48	; 0x30
    3b24:	4a41      	ldr	r2, [pc, #260]	; (3c2c <iotx_report_devinfo+0x14c>)
    3b26:	2187      	movs	r1, #135	; 0x87
    3b28:	a812      	add	r0, sp, #72	; 0x48
    3b2a:	4c41      	ldr	r4, [pc, #260]	; (3c30 <iotx_report_devinfo+0x150>)
    3b2c:	47a0      	blx	r4
                       IOTX_URI_MAX_LEN,
                       "/sys/%s/%s/thing/deviceinfo/update",
                       product_key,
                       device_name);
    if (ret <= 0) {
    3b2e:	2800      	cmp	r0, #0
    3b30:	dd49      	ble.n	3bc6 <iotx_report_devinfo+0xe6>
        VERSION_ERR("topic generate err");
        return FAIL_RETURN;
    }
    VERSION_DEBUG("devinfo report topic: %s", topic_name);
    3b32:	a912      	add	r1, sp, #72	; 0x48
    3b34:	483f      	ldr	r0, [pc, #252]	; (3c34 <iotx_report_devinfo+0x154>)
    3b36:	4c3b      	ldr	r4, [pc, #236]	; (3c24 <iotx_report_devinfo+0x144>)
    3b38:	47a0      	blx	r4
    3b3a:	483b      	ldr	r0, [pc, #236]	; (3c28 <iotx_report_devinfo+0x148>)
    3b3c:	47a0      	blx	r4

    msg_len = strlen(DEVICE_INFO_UPDATE_FMT) + 10 + strlen(IOTX_SDK_VERSION) + 1;
    3b3e:	4b3e      	ldr	r3, [pc, #248]	; (3c38 <iotx_report_devinfo+0x158>)
    3b40:	6818      	ldr	r0, [r3, #0]
    3b42:	4b3e      	ldr	r3, [pc, #248]	; (3c3c <iotx_report_devinfo+0x15c>)
    3b44:	4798      	blx	r3
    3b46:	3010      	adds	r0, #16
    3b48:	0005      	movs	r5, r0
    msg = (char *)SYS_REPORT_MALLOC(msg_len);
    3b4a:	4b3d      	ldr	r3, [pc, #244]	; (3c40 <iotx_report_devinfo+0x160>)
    3b4c:	4798      	blx	r3
    3b4e:	1e04      	subs	r4, r0, #0
    if (msg == NULL) {
    3b50:	d041      	beq.n	3bd6 <iotx_report_devinfo+0xf6>
        VERSION_ERR("malloc err");
        return FAIL_RETURN;
    }
    memset(msg, 0, msg_len);
    3b52:	002a      	movs	r2, r5
    3b54:	2100      	movs	r1, #0
    3b56:	4b2e      	ldr	r3, [pc, #184]	; (3c10 <iotx_report_devinfo+0x130>)
    3b58:	4798      	blx	r3

    /* devinfo update message */
    ret = HAL_Snprintf(msg,
    3b5a:	4b37      	ldr	r3, [pc, #220]	; (3c38 <iotx_report_devinfo+0x158>)
    3b5c:	681f      	ldr	r7, [r3, #0]
    3b5e:	4b39      	ldr	r3, [pc, #228]	; (3c44 <iotx_report_devinfo+0x164>)
    3b60:	4798      	blx	r3
    3b62:	0003      	movs	r3, r0
    3b64:	4a38      	ldr	r2, [pc, #224]	; (3c48 <iotx_report_devinfo+0x168>)
    3b66:	9200      	str	r2, [sp, #0]
    3b68:	003a      	movs	r2, r7
    3b6a:	0029      	movs	r1, r5
    3b6c:	0020      	movs	r0, r4
    3b6e:	4d30      	ldr	r5, [pc, #192]	; (3c30 <iotx_report_devinfo+0x150>)
    3b70:	47a8      	blx	r5
    3b72:	1e05      	subs	r5, r0, #0
                       msg_len,
                       DEVICE_INFO_UPDATE_FMT,
                       iotx_report_id(),
                       IOTX_SDK_VERSION
                      );
    if (ret <= 0) {
    3b74:	dd37      	ble.n	3be6 <iotx_report_devinfo+0x106>
        VERSION_ERR("topic msg generate err");
        SYS_REPORT_FREE(msg);
        return FAIL_RETURN;
    }
    VERSION_DEBUG("devinfo report data: %s", msg);
    3b76:	0021      	movs	r1, r4
    3b78:	4834      	ldr	r0, [pc, #208]	; (3c4c <iotx_report_devinfo+0x16c>)
    3b7a:	4f2a      	ldr	r7, [pc, #168]	; (3c24 <iotx_report_devinfo+0x144>)
    3b7c:	47b8      	blx	r7
    3b7e:	482a      	ldr	r0, [pc, #168]	; (3c28 <iotx_report_devinfo+0x148>)
    3b80:	47b8      	blx	r7

    if (info_report_func != NULL) {
    3b82:	4b24      	ldr	r3, [pc, #144]	; (3c14 <iotx_report_devinfo+0x134>)
    3b84:	685f      	ldr	r7, [r3, #4]
    3b86:	2f00      	cmp	r7, #0
    3b88:	d008      	beq.n	3b9c <iotx_report_devinfo+0xbc>
        info_report_func(pclient, topic_name, 1, msg, strlen(msg));
    3b8a:	0020      	movs	r0, r4
    3b8c:	4b2b      	ldr	r3, [pc, #172]	; (3c3c <iotx_report_devinfo+0x15c>)
    3b8e:	4798      	blx	r3
    3b90:	9000      	str	r0, [sp, #0]
    3b92:	0023      	movs	r3, r4
    3b94:	2201      	movs	r2, #1
    3b96:	a912      	add	r1, sp, #72	; 0x48
    3b98:	0030      	movs	r0, r6
    3b9a:	47b8      	blx	r7
    }

    SYS_REPORT_FREE(msg);
    3b9c:	0020      	movs	r0, r4
    3b9e:	4b2c      	ldr	r3, [pc, #176]	; (3c50 <iotx_report_devinfo+0x170>)
    3ba0:	4798      	blx	r3
    if (ret < 0) {
    3ba2:	2d00      	cmp	r5, #0
    3ba4:	db2a      	blt.n	3bfc <iotx_report_devinfo+0x11c>
        VERSION_ERR("publish failed, ret = %d", ret);
        return FAIL_RETURN;
    }
    VERSION_DEBUG("devinfo report succeed");
    3ba6:	482b      	ldr	r0, [pc, #172]	; (3c54 <iotx_report_devinfo+0x174>)
    3ba8:	4c1e      	ldr	r4, [pc, #120]	; (3c24 <iotx_report_devinfo+0x144>)
    3baa:	47a0      	blx	r4
    3bac:	481e      	ldr	r0, [pc, #120]	; (3c28 <iotx_report_devinfo+0x148>)
    3bae:	47a0      	blx	r4

    return SUCCESS_RETURN;
    3bb0:	2000      	movs	r0, #0
}
    3bb2:	b035      	add	sp, #212	; 0xd4
    3bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        VERSION_ERR("report func not register!");
    3bb6:	4828      	ldr	r0, [pc, #160]	; (3c58 <iotx_report_devinfo+0x178>)
    3bb8:	4c1a      	ldr	r4, [pc, #104]	; (3c24 <iotx_report_devinfo+0x144>)
    3bba:	47a0      	blx	r4
    3bbc:	481a      	ldr	r0, [pc, #104]	; (3c28 <iotx_report_devinfo+0x148>)
    3bbe:	47a0      	blx	r4
        return -1;
    3bc0:	2001      	movs	r0, #1
    3bc2:	4240      	negs	r0, r0
    3bc4:	e7f5      	b.n	3bb2 <iotx_report_devinfo+0xd2>
        VERSION_ERR("topic generate err");
    3bc6:	4825      	ldr	r0, [pc, #148]	; (3c5c <iotx_report_devinfo+0x17c>)
    3bc8:	4c16      	ldr	r4, [pc, #88]	; (3c24 <iotx_report_devinfo+0x144>)
    3bca:	47a0      	blx	r4
    3bcc:	4816      	ldr	r0, [pc, #88]	; (3c28 <iotx_report_devinfo+0x148>)
    3bce:	47a0      	blx	r4
        return FAIL_RETURN;
    3bd0:	2001      	movs	r0, #1
    3bd2:	4240      	negs	r0, r0
    3bd4:	e7ed      	b.n	3bb2 <iotx_report_devinfo+0xd2>
        VERSION_ERR("malloc err");
    3bd6:	4822      	ldr	r0, [pc, #136]	; (3c60 <iotx_report_devinfo+0x180>)
    3bd8:	4c12      	ldr	r4, [pc, #72]	; (3c24 <iotx_report_devinfo+0x144>)
    3bda:	47a0      	blx	r4
    3bdc:	4812      	ldr	r0, [pc, #72]	; (3c28 <iotx_report_devinfo+0x148>)
    3bde:	47a0      	blx	r4
        return FAIL_RETURN;
    3be0:	2001      	movs	r0, #1
    3be2:	4240      	negs	r0, r0
    3be4:	e7e5      	b.n	3bb2 <iotx_report_devinfo+0xd2>
        VERSION_ERR("topic msg generate err");
    3be6:	481f      	ldr	r0, [pc, #124]	; (3c64 <iotx_report_devinfo+0x184>)
    3be8:	4d0e      	ldr	r5, [pc, #56]	; (3c24 <iotx_report_devinfo+0x144>)
    3bea:	47a8      	blx	r5
    3bec:	480e      	ldr	r0, [pc, #56]	; (3c28 <iotx_report_devinfo+0x148>)
    3bee:	47a8      	blx	r5
        SYS_REPORT_FREE(msg);
    3bf0:	0020      	movs	r0, r4
    3bf2:	4b17      	ldr	r3, [pc, #92]	; (3c50 <iotx_report_devinfo+0x170>)
    3bf4:	4798      	blx	r3
        return FAIL_RETURN;
    3bf6:	2001      	movs	r0, #1
    3bf8:	4240      	negs	r0, r0
    3bfa:	e7da      	b.n	3bb2 <iotx_report_devinfo+0xd2>
        VERSION_ERR("publish failed, ret = %d", ret);
    3bfc:	0029      	movs	r1, r5
    3bfe:	481a      	ldr	r0, [pc, #104]	; (3c68 <iotx_report_devinfo+0x188>)
    3c00:	4c08      	ldr	r4, [pc, #32]	; (3c24 <iotx_report_devinfo+0x144>)
    3c02:	47a0      	blx	r4
    3c04:	4808      	ldr	r0, [pc, #32]	; (3c28 <iotx_report_devinfo+0x148>)
    3c06:	47a0      	blx	r4
        return FAIL_RETURN;
    3c08:	2001      	movs	r0, #1
    3c0a:	4240      	negs	r0, r0
    3c0c:	e7d1      	b.n	3bb2 <iotx_report_devinfo+0xd2>
    3c0e:	46c0      	nop			; (mov r8, r8)
    3c10:	000085c9 	.word	0x000085c9
    3c14:	200009f4 	.word	0x200009f4
    3c18:	00007cf5 	.word	0x00007cf5
    3c1c:	00007c69 	.word	0x00007c69
    3c20:	0000a3bc 	.word	0x0000a3bc
    3c24:	00007d35 	.word	0x00007d35
    3c28:	00009cb4 	.word	0x00009cb4
    3c2c:	0000a3cc 	.word	0x0000a3cc
    3c30:	00007d75 	.word	0x00007d75
    3c34:	0000a3f0 	.word	0x0000a3f0
    3c38:	2000005c 	.word	0x2000005c
    3c3c:	00008991 	.word	0x00008991
    3c40:	00007d1d 	.word	0x00007d1d
    3c44:	00003ac5 	.word	0x00003ac5
    3c48:	0000a384 	.word	0x0000a384
    3c4c:	0000a430 	.word	0x0000a430
    3c50:	00007c5d 	.word	0x00007c5d
    3c54:	0000a464 	.word	0x0000a464
    3c58:	0000a3a0 	.word	0x0000a3a0
    3c5c:	0000a4f4 	.word	0x0000a4f4
    3c60:	0000a40c 	.word	0x0000a40c
    3c64:	0000a418 	.word	0x0000a418
    3c68:	0000a448 	.word	0x0000a448

00003c6c <iotx_report_firmware_version>:

/* report Firmware version */
int iotx_report_firmware_version(void *pclient)
{
    3c6c:	b530      	push	{r4, r5, lr}
    3c6e:	b0cd      	sub	sp, #308	; 0x134
    3c70:	0005      	movs	r5, r0
    int ret;
    char topic_name[IOTX_URI_MAX_LEN + 1] = {0};
    3c72:	2288      	movs	r2, #136	; 0x88
    3c74:	2100      	movs	r1, #0
    3c76:	a82a      	add	r0, sp, #168	; 0xa8
    3c78:	4c42      	ldr	r4, [pc, #264]	; (3d84 <iotx_report_firmware_version+0x118>)
    3c7a:	47a0      	blx	r4
    char msg[FIRMWARE_VERSION_MSG_LEN] = {0};
    3c7c:	2240      	movs	r2, #64	; 0x40
    3c7e:	2100      	movs	r1, #0
    3c80:	a81a      	add	r0, sp, #104	; 0x68
    3c82:	47a0      	blx	r4
    char version[IOTX_FIRMWARE_VERSION_LEN + 1] = {0};
    3c84:	2221      	movs	r2, #33	; 0x21
    3c86:	2100      	movs	r1, #0
    3c88:	a811      	add	r0, sp, #68	; 0x44
    3c8a:	47a0      	blx	r4
    char product_key[IOTX_PRODUCT_KEY_LEN + 1] = {0};
    3c8c:	2215      	movs	r2, #21
    3c8e:	2100      	movs	r1, #0
    3c90:	a80b      	add	r0, sp, #44	; 0x2c
    3c92:	47a0      	blx	r4
    char device_name[IOTX_DEVICE_NAME_LEN + 1] = {0};
    3c94:	2221      	movs	r2, #33	; 0x21
    3c96:	2100      	movs	r1, #0
    3c98:	a802      	add	r0, sp, #8
    3c9a:	47a0      	blx	r4

    if (info_report_func == NULL) {
    3c9c:	4b3a      	ldr	r3, [pc, #232]	; (3d88 <iotx_report_firmware_version+0x11c>)
    3c9e:	685b      	ldr	r3, [r3, #4]
    3ca0:	2b00      	cmp	r3, #0
    3ca2:	d047      	beq.n	3d34 <iotx_report_firmware_version+0xc8>
        VERSION_ERR("report func not register!");
        return -1;
    }

    HAL_GetProductKey(product_key);
    3ca4:	a80b      	add	r0, sp, #44	; 0x2c
    3ca6:	4b39      	ldr	r3, [pc, #228]	; (3d8c <iotx_report_firmware_version+0x120>)
    3ca8:	4798      	blx	r3
    HAL_GetDeviceName(device_name);
    3caa:	a802      	add	r0, sp, #8
    3cac:	4b38      	ldr	r3, [pc, #224]	; (3d90 <iotx_report_firmware_version+0x124>)
    3cae:	4798      	blx	r3

    ret = HAL_GetFirmwareVersion(version);
    3cb0:	a811      	add	r0, sp, #68	; 0x44
    3cb2:	4b38      	ldr	r3, [pc, #224]	; (3d94 <iotx_report_firmware_version+0x128>)
    3cb4:	4798      	blx	r3
    if (ret <= 0) {
    3cb6:	2800      	cmp	r0, #0
    3cb8:	dd44      	ble.n	3d44 <iotx_report_firmware_version+0xd8>
        VERSION_ERR("firmware version does not implement");
        return FAIL_RETURN;
    }

    VERSION_DEBUG("firmware version report start in MQTT");
    3cba:	4837      	ldr	r0, [pc, #220]	; (3d98 <iotx_report_firmware_version+0x12c>)
    3cbc:	4c37      	ldr	r4, [pc, #220]	; (3d9c <iotx_report_firmware_version+0x130>)
    3cbe:	47a0      	blx	r4
    3cc0:	4837      	ldr	r0, [pc, #220]	; (3da0 <iotx_report_firmware_version+0x134>)
    3cc2:	47a0      	blx	r4

    /* firmware report topic name generate */
    ret = HAL_Snprintf(topic_name,
    3cc4:	ab02      	add	r3, sp, #8
    3cc6:	9300      	str	r3, [sp, #0]
    3cc8:	ab0b      	add	r3, sp, #44	; 0x2c
    3cca:	4a36      	ldr	r2, [pc, #216]	; (3da4 <iotx_report_firmware_version+0x138>)
    3ccc:	2187      	movs	r1, #135	; 0x87
    3cce:	a82a      	add	r0, sp, #168	; 0xa8
    3cd0:	4c35      	ldr	r4, [pc, #212]	; (3da8 <iotx_report_firmware_version+0x13c>)
    3cd2:	47a0      	blx	r4
                       IOTX_URI_MAX_LEN,
                       "/ota/device/inform/%s/%s",
                       product_key,
                       device_name
                      );
    if (ret <= 0) {
    3cd4:	2800      	cmp	r0, #0
    3cd6:	dd3d      	ble.n	3d54 <iotx_report_firmware_version+0xe8>
        VERSION_ERR("firmware report topic generate err");
        return FAIL_RETURN;
    }
    VERSION_DEBUG("firmware report topic: %s", topic_name);
    3cd8:	a92a      	add	r1, sp, #168	; 0xa8
    3cda:	4834      	ldr	r0, [pc, #208]	; (3dac <iotx_report_firmware_version+0x140>)
    3cdc:	4c2f      	ldr	r4, [pc, #188]	; (3d9c <iotx_report_firmware_version+0x130>)
    3cde:	47a0      	blx	r4
    3ce0:	482f      	ldr	r0, [pc, #188]	; (3da0 <iotx_report_firmware_version+0x134>)
    3ce2:	47a0      	blx	r4

    /* firmware report message json data generate */
    ret = HAL_Snprintf(msg,
    3ce4:	4b32      	ldr	r3, [pc, #200]	; (3db0 <iotx_report_firmware_version+0x144>)
    3ce6:	4798      	blx	r3
    3ce8:	0003      	movs	r3, r0
    3cea:	aa11      	add	r2, sp, #68	; 0x44
    3cec:	9200      	str	r2, [sp, #0]
    3cee:	4a31      	ldr	r2, [pc, #196]	; (3db4 <iotx_report_firmware_version+0x148>)
    3cf0:	2140      	movs	r1, #64	; 0x40
    3cf2:	a81a      	add	r0, sp, #104	; 0x68
    3cf4:	4c2c      	ldr	r4, [pc, #176]	; (3da8 <iotx_report_firmware_version+0x13c>)
    3cf6:	47a0      	blx	r4
                       FIRMWARE_VERSION_MSG_LEN,
                       "{\"id\":\"%d\",\"params\":{\"version\":\"%s\"}}",
                       iotx_report_id(),
                       version
                      );
    if (ret <= 0) {
    3cf8:	2800      	cmp	r0, #0
    3cfa:	dd33      	ble.n	3d64 <iotx_report_firmware_version+0xf8>
        VERSION_ERR("firmware report message json data generate err");
        return FAIL_RETURN;
    }
    VERSION_DEBUG("firmware report data: %s", msg);
    3cfc:	a91a      	add	r1, sp, #104	; 0x68
    3cfe:	482e      	ldr	r0, [pc, #184]	; (3db8 <iotx_report_firmware_version+0x14c>)
    3d00:	4c26      	ldr	r4, [pc, #152]	; (3d9c <iotx_report_firmware_version+0x130>)
    3d02:	47a0      	blx	r4
    3d04:	4826      	ldr	r0, [pc, #152]	; (3da0 <iotx_report_firmware_version+0x134>)
    3d06:	47a0      	blx	r4

    ret = info_report_func(pclient, topic_name, 1, msg, strlen(msg));
    3d08:	a81a      	add	r0, sp, #104	; 0x68
    3d0a:	4b2c      	ldr	r3, [pc, #176]	; (3dbc <iotx_report_firmware_version+0x150>)
    3d0c:	4798      	blx	r3
    3d0e:	9000      	str	r0, [sp, #0]
    3d10:	4b1d      	ldr	r3, [pc, #116]	; (3d88 <iotx_report_firmware_version+0x11c>)
    3d12:	685c      	ldr	r4, [r3, #4]
    3d14:	ab1a      	add	r3, sp, #104	; 0x68
    3d16:	2201      	movs	r2, #1
    3d18:	a92a      	add	r1, sp, #168	; 0xa8
    3d1a:	0028      	movs	r0, r5
    3d1c:	47a0      	blx	r4

    if (ret < 0) {
    3d1e:	2800      	cmp	r0, #0
    3d20:	db28      	blt.n	3d74 <iotx_report_firmware_version+0x108>
        VERSION_ERR("publish failed");
        return FAIL_RETURN;
    }

    VERSION_DEBUG("firmware version report finished, iotx_publish() = %d", ret);
    3d22:	0001      	movs	r1, r0
    3d24:	4826      	ldr	r0, [pc, #152]	; (3dc0 <iotx_report_firmware_version+0x154>)
    3d26:	4c1d      	ldr	r4, [pc, #116]	; (3d9c <iotx_report_firmware_version+0x130>)
    3d28:	47a0      	blx	r4
    3d2a:	481d      	ldr	r0, [pc, #116]	; (3da0 <iotx_report_firmware_version+0x134>)
    3d2c:	47a0      	blx	r4
    return SUCCESS_RETURN;
    3d2e:	2000      	movs	r0, #0
}
    3d30:	b04d      	add	sp, #308	; 0x134
    3d32:	bd30      	pop	{r4, r5, pc}
        VERSION_ERR("report func not register!");
    3d34:	4823      	ldr	r0, [pc, #140]	; (3dc4 <iotx_report_firmware_version+0x158>)
    3d36:	4c19      	ldr	r4, [pc, #100]	; (3d9c <iotx_report_firmware_version+0x130>)
    3d38:	47a0      	blx	r4
    3d3a:	4819      	ldr	r0, [pc, #100]	; (3da0 <iotx_report_firmware_version+0x134>)
    3d3c:	47a0      	blx	r4
        return -1;
    3d3e:	2001      	movs	r0, #1
    3d40:	4240      	negs	r0, r0
    3d42:	e7f5      	b.n	3d30 <iotx_report_firmware_version+0xc4>
        VERSION_ERR("firmware version does not implement");
    3d44:	4820      	ldr	r0, [pc, #128]	; (3dc8 <iotx_report_firmware_version+0x15c>)
    3d46:	4c15      	ldr	r4, [pc, #84]	; (3d9c <iotx_report_firmware_version+0x130>)
    3d48:	47a0      	blx	r4
    3d4a:	4815      	ldr	r0, [pc, #84]	; (3da0 <iotx_report_firmware_version+0x134>)
    3d4c:	47a0      	blx	r4
        return FAIL_RETURN;
    3d4e:	2001      	movs	r0, #1
    3d50:	4240      	negs	r0, r0
    3d52:	e7ed      	b.n	3d30 <iotx_report_firmware_version+0xc4>
        VERSION_ERR("firmware report topic generate err");
    3d54:	481d      	ldr	r0, [pc, #116]	; (3dcc <iotx_report_firmware_version+0x160>)
    3d56:	4c11      	ldr	r4, [pc, #68]	; (3d9c <iotx_report_firmware_version+0x130>)
    3d58:	47a0      	blx	r4
    3d5a:	4811      	ldr	r0, [pc, #68]	; (3da0 <iotx_report_firmware_version+0x134>)
    3d5c:	47a0      	blx	r4
        return FAIL_RETURN;
    3d5e:	2001      	movs	r0, #1
    3d60:	4240      	negs	r0, r0
    3d62:	e7e5      	b.n	3d30 <iotx_report_firmware_version+0xc4>
        VERSION_ERR("firmware report message json data generate err");
    3d64:	481a      	ldr	r0, [pc, #104]	; (3dd0 <iotx_report_firmware_version+0x164>)
    3d66:	4c0d      	ldr	r4, [pc, #52]	; (3d9c <iotx_report_firmware_version+0x130>)
    3d68:	47a0      	blx	r4
    3d6a:	480d      	ldr	r0, [pc, #52]	; (3da0 <iotx_report_firmware_version+0x134>)
    3d6c:	47a0      	blx	r4
        return FAIL_RETURN;
    3d6e:	2001      	movs	r0, #1
    3d70:	4240      	negs	r0, r0
    3d72:	e7dd      	b.n	3d30 <iotx_report_firmware_version+0xc4>
        VERSION_ERR("publish failed");
    3d74:	4817      	ldr	r0, [pc, #92]	; (3dd4 <iotx_report_firmware_version+0x168>)
    3d76:	4c09      	ldr	r4, [pc, #36]	; (3d9c <iotx_report_firmware_version+0x130>)
    3d78:	47a0      	blx	r4
    3d7a:	4809      	ldr	r0, [pc, #36]	; (3da0 <iotx_report_firmware_version+0x134>)
    3d7c:	47a0      	blx	r4
        return FAIL_RETURN;
    3d7e:	2001      	movs	r0, #1
    3d80:	4240      	negs	r0, r0
    3d82:	e7d5      	b.n	3d30 <iotx_report_firmware_version+0xc4>
    3d84:	000085c9 	.word	0x000085c9
    3d88:	200009f4 	.word	0x200009f4
    3d8c:	00007cf5 	.word	0x00007cf5
    3d90:	00007c69 	.word	0x00007c69
    3d94:	00007cc1 	.word	0x00007cc1
    3d98:	0000a4a0 	.word	0x0000a4a0
    3d9c:	00007d35 	.word	0x00007d35
    3da0:	00009cb4 	.word	0x00009cb4
    3da4:	0000a4c8 	.word	0x0000a4c8
    3da8:	00007d75 	.word	0x00007d75
    3dac:	0000a508 	.word	0x0000a508
    3db0:	00003ac5 	.word	0x00003ac5
    3db4:	0000a524 	.word	0x0000a524
    3db8:	0000a57c 	.word	0x0000a57c
    3dbc:	00008991 	.word	0x00008991
    3dc0:	0000a5a8 	.word	0x0000a5a8
    3dc4:	0000a3a0 	.word	0x0000a3a0
    3dc8:	0000a47c 	.word	0x0000a47c
    3dcc:	0000a4e4 	.word	0x0000a4e4
    3dd0:	0000a54c 	.word	0x0000a54c
    3dd4:	0000a598 	.word	0x0000a598

00003dd8 <iotx_report_mid>:

/* report ModuleID */
int iotx_report_mid(void *pclient)
{
    return SUCCESS_RETURN;
}
    3dd8:	2000      	movs	r0, #0
    3dda:	4770      	bx	lr

00003ddc <utils_sha256_init>:
    while (n--) {
        *p++ = 0;
    }
}
void utils_sha256_init(iot_sha256_context *ctx)
{
    3ddc:	b510      	push	{r4, lr}
    memset(ctx, 0, sizeof(iot_sha256_context));
    3dde:	226c      	movs	r2, #108	; 0x6c
    3de0:	2100      	movs	r1, #0
    3de2:	4b01      	ldr	r3, [pc, #4]	; (3de8 <utils_sha256_init+0xc>)
    3de4:	4798      	blx	r3
}
    3de6:	bd10      	pop	{r4, pc}
    3de8:	000085c9 	.word	0x000085c9

00003dec <utils_sha256_starts>:
    *dst = *src;
}
void utils_sha256_starts(iot_sha256_context *ctx)
{
	int is224 = 0;
    ctx->total[0] = 0;
    3dec:	2300      	movs	r3, #0
    3dee:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
    3df0:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
    3df2:	4a09      	ldr	r2, [pc, #36]	; (3e18 <utils_sha256_starts+0x2c>)
    3df4:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
    3df6:	4a09      	ldr	r2, [pc, #36]	; (3e1c <utils_sha256_starts+0x30>)
    3df8:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
    3dfa:	4a09      	ldr	r2, [pc, #36]	; (3e20 <utils_sha256_starts+0x34>)
    3dfc:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
    3dfe:	4a09      	ldr	r2, [pc, #36]	; (3e24 <utils_sha256_starts+0x38>)
    3e00:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
    3e02:	4a09      	ldr	r2, [pc, #36]	; (3e28 <utils_sha256_starts+0x3c>)
    3e04:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
    3e06:	4a09      	ldr	r2, [pc, #36]	; (3e2c <utils_sha256_starts+0x40>)
    3e08:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
    3e0a:	4a09      	ldr	r2, [pc, #36]	; (3e30 <utils_sha256_starts+0x44>)
    3e0c:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    3e0e:	4a09      	ldr	r2, [pc, #36]	; (3e34 <utils_sha256_starts+0x48>)
    3e10:	6242      	str	r2, [r0, #36]	; 0x24
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    }

    ctx->is224 = is224;
    3e12:	6683      	str	r3, [r0, #104]	; 0x68
}
    3e14:	4770      	bx	lr
    3e16:	46c0      	nop			; (mov r8, r8)
    3e18:	6a09e667 	.word	0x6a09e667
    3e1c:	bb67ae85 	.word	0xbb67ae85
    3e20:	3c6ef372 	.word	0x3c6ef372
    3e24:	a54ff53a 	.word	0xa54ff53a
    3e28:	510e527f 	.word	0x510e527f
    3e2c:	9b05688c 	.word	0x9b05688c
    3e30:	1f83d9ab 	.word	0x1f83d9ab
    3e34:	5be0cd19 	.word	0x5be0cd19

00003e38 <utils_sha256_process>:
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

void utils_sha256_process(iot_sha256_context *ctx, const unsigned char data[64])
{
    3e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e3a:	46de      	mov	lr, fp
    3e3c:	4657      	mov	r7, sl
    3e3e:	464e      	mov	r6, r9
    3e40:	4645      	mov	r5, r8
    3e42:	b5e0      	push	{r5, r6, r7, lr}
    3e44:	b0d1      	sub	sp, #324	; 0x144
    3e46:	9007      	str	r0, [sp, #28]
    3e48:	2300      	movs	r3, #0
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
        A[i] = ctx->state[i];
    3e4a:	18c2      	adds	r2, r0, r3
    3e4c:	6892      	ldr	r2, [r2, #8]
    3e4e:	ac08      	add	r4, sp, #32
    3e50:	511a      	str	r2, [r3, r4]
    3e52:	3304      	adds	r3, #4
    for( i = 0; i < 8; i++ )
    3e54:	2b20      	cmp	r3, #32
    3e56:	d1f8      	bne.n	3e4a <utils_sha256_process+0x12>
    3e58:	000c      	movs	r4, r1
    3e5a:	ab10      	add	r3, sp, #64	; 0x40
    3e5c:	469c      	mov	ip, r3
    3e5e:	3140      	adds	r1, #64	; 0x40
    3e60:	001d      	movs	r5, r3
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* INFRA_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
    3e62:	7823      	ldrb	r3, [r4, #0]
    3e64:	061b      	lsls	r3, r3, #24
    3e66:	7862      	ldrb	r2, [r4, #1]
    3e68:	0412      	lsls	r2, r2, #16
    3e6a:	4313      	orrs	r3, r2
    3e6c:	78e2      	ldrb	r2, [r4, #3]
    3e6e:	4313      	orrs	r3, r2
    3e70:	78a2      	ldrb	r2, [r4, #2]
    3e72:	0212      	lsls	r2, r2, #8
    3e74:	4313      	orrs	r3, r2
    3e76:	c508      	stmia	r5!, {r3}
    3e78:	3404      	adds	r4, #4
    for( i = 0; i < 16; i++ )
    3e7a:	428c      	cmp	r4, r1
    3e7c:	d1f1      	bne.n	3e62 <utils_sha256_process+0x2a>
    3e7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3e80:	001d      	movs	r5, r3
    3e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3e84:	0018      	movs	r0, r3
    3e86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3e88:	0019      	movs	r1, r3
    3e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3e8c:	469a      	mov	sl, r3
    3e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3e90:	9e09      	ldr	r6, [sp, #36]	; 0x24
    3e92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3e94:	0014      	movs	r4, r2
    3e96:	9a08      	ldr	r2, [sp, #32]
    3e98:	4f05      	ldr	r7, [pc, #20]	; (3eb0 <utils_sha256_process+0x78>)
    3e9a:	46b8      	mov	r8, r7
    3e9c:	46e3      	mov	fp, ip

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
    3e9e:	4667      	mov	r7, ip
    3ea0:	9703      	str	r7, [sp, #12]
    3ea2:	9502      	str	r5, [sp, #8]
    3ea4:	468c      	mov	ip, r1
    3ea6:	4651      	mov	r1, sl
    3ea8:	4645      	mov	r5, r8
    3eaa:	9500      	str	r5, [sp, #0]
    3eac:	e002      	b.n	3eb4 <utils_sha256_process+0x7c>
    3eae:	46c0      	nop			; (mov r8, r8)
    3eb0:	0000a6dc 	.word	0x0000a6dc
    3eb4:	0027      	movs	r7, r4
    3eb6:	2506      	movs	r5, #6
    3eb8:	41ef      	rors	r7, r5
    3eba:	46b8      	mov	r8, r7
    3ebc:	0027      	movs	r7, r4
    3ebe:	3505      	adds	r5, #5
    3ec0:	41ef      	rors	r7, r5
    3ec2:	46b9      	mov	r9, r7
    3ec4:	4647      	mov	r7, r8
    3ec6:	464d      	mov	r5, r9
    3ec8:	406f      	eors	r7, r5
    3eca:	46b8      	mov	r8, r7
    3ecc:	0027      	movs	r7, r4
    3ece:	2519      	movs	r5, #25
    3ed0:	41ef      	rors	r7, r5
    3ed2:	46b9      	mov	r9, r7
    3ed4:	4647      	mov	r7, r8
    3ed6:	464d      	mov	r5, r9
    3ed8:	406f      	eors	r7, r5
    3eda:	46b8      	mov	r8, r7
    3edc:	465d      	mov	r5, fp
    3ede:	9f00      	ldr	r7, [sp, #0]
    3ee0:	683f      	ldr	r7, [r7, #0]
    3ee2:	682d      	ldr	r5, [r5, #0]
    3ee4:	46aa      	mov	sl, r5
    3ee6:	4457      	add	r7, sl
    3ee8:	46b9      	mov	r9, r7
    3eea:	44c8      	add	r8, r9
    3eec:	4667      	mov	r7, ip
    3eee:	405f      	eors	r7, r3
    3ef0:	4027      	ands	r7, r4
    3ef2:	4665      	mov	r5, ip
    3ef4:	406f      	eors	r7, r5
    3ef6:	46b9      	mov	r9, r7
    3ef8:	44c8      	add	r8, r9
    3efa:	9d02      	ldr	r5, [sp, #8]
    3efc:	4445      	add	r5, r8
    3efe:	1828      	adds	r0, r5, r0
    3f00:	9001      	str	r0, [sp, #4]
    3f02:	0017      	movs	r7, r2
    3f04:	2002      	movs	r0, #2
    3f06:	41c7      	rors	r7, r0
    3f08:	46b8      	mov	r8, r7
    3f0a:	0017      	movs	r7, r2
    3f0c:	300b      	adds	r0, #11
    3f0e:	41c7      	rors	r7, r0
    3f10:	46b9      	mov	r9, r7
    3f12:	4647      	mov	r7, r8
    3f14:	4648      	mov	r0, r9
    3f16:	4047      	eors	r7, r0
    3f18:	46b8      	mov	r8, r7
    3f1a:	0017      	movs	r7, r2
    3f1c:	2016      	movs	r0, #22
    3f1e:	41c7      	rors	r7, r0
    3f20:	46b9      	mov	r9, r7
    3f22:	4647      	mov	r7, r8
    3f24:	4648      	mov	r0, r9
    3f26:	4047      	eors	r7, r0
    3f28:	46b8      	mov	r8, r7
    3f2a:	0017      	movs	r7, r2
    3f2c:	4337      	orrs	r7, r6
    3f2e:	400f      	ands	r7, r1
    3f30:	46b9      	mov	r9, r7
    3f32:	0037      	movs	r7, r6
    3f34:	4017      	ands	r7, r2
    3f36:	46ba      	mov	sl, r7
    3f38:	464f      	mov	r7, r9
    3f3a:	4650      	mov	r0, sl
    3f3c:	4307      	orrs	r7, r0
    3f3e:	46b9      	mov	r9, r7
    3f40:	44c8      	add	r8, r9
    3f42:	4445      	add	r5, r8
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
    3f44:	4658      	mov	r0, fp
    3f46:	9f00      	ldr	r7, [sp, #0]
    3f48:	687f      	ldr	r7, [r7, #4]
    3f4a:	6840      	ldr	r0, [r0, #4]
    3f4c:	4681      	mov	r9, r0
    3f4e:	444f      	add	r7, r9
    3f50:	46b8      	mov	r8, r7
    3f52:	44c4      	add	ip, r8
    3f54:	0027      	movs	r7, r4
    3f56:	405f      	eors	r7, r3
    3f58:	9801      	ldr	r0, [sp, #4]
    3f5a:	4007      	ands	r7, r0
    3f5c:	405f      	eors	r7, r3
    3f5e:	46b8      	mov	r8, r7
    3f60:	44c4      	add	ip, r8
    3f62:	0007      	movs	r7, r0
    3f64:	2006      	movs	r0, #6
    3f66:	41c7      	rors	r7, r0
    3f68:	46b8      	mov	r8, r7
    3f6a:	9f01      	ldr	r7, [sp, #4]
    3f6c:	3005      	adds	r0, #5
    3f6e:	41c7      	rors	r7, r0
    3f70:	46b9      	mov	r9, r7
    3f72:	4647      	mov	r7, r8
    3f74:	4648      	mov	r0, r9
    3f76:	4047      	eors	r7, r0
    3f78:	46b8      	mov	r8, r7
    3f7a:	9f01      	ldr	r7, [sp, #4]
    3f7c:	2019      	movs	r0, #25
    3f7e:	41c7      	rors	r7, r0
    3f80:	46b9      	mov	r9, r7
    3f82:	4647      	mov	r7, r8
    3f84:	4648      	mov	r0, r9
    3f86:	4047      	eors	r7, r0
    3f88:	46b8      	mov	r8, r7
    3f8a:	44e0      	add	r8, ip
    3f8c:	4441      	add	r1, r8
    3f8e:	002f      	movs	r7, r5
    3f90:	2002      	movs	r0, #2
    3f92:	41c7      	rors	r7, r0
    3f94:	46bc      	mov	ip, r7
    3f96:	002f      	movs	r7, r5
    3f98:	300b      	adds	r0, #11
    3f9a:	41c7      	rors	r7, r0
    3f9c:	46b9      	mov	r9, r7
    3f9e:	4667      	mov	r7, ip
    3fa0:	4648      	mov	r0, r9
    3fa2:	4047      	eors	r7, r0
    3fa4:	46bc      	mov	ip, r7
    3fa6:	002f      	movs	r7, r5
    3fa8:	2016      	movs	r0, #22
    3faa:	41c7      	rors	r7, r0
    3fac:	46b9      	mov	r9, r7
    3fae:	4667      	mov	r7, ip
    3fb0:	4648      	mov	r0, r9
    3fb2:	4047      	eors	r7, r0
    3fb4:	46bc      	mov	ip, r7
    3fb6:	002f      	movs	r7, r5
    3fb8:	4317      	orrs	r7, r2
    3fba:	4037      	ands	r7, r6
    3fbc:	46b9      	mov	r9, r7
    3fbe:	0017      	movs	r7, r2
    3fc0:	402f      	ands	r7, r5
    3fc2:	46ba      	mov	sl, r7
    3fc4:	464f      	mov	r7, r9
    3fc6:	4650      	mov	r0, sl
    3fc8:	4307      	orrs	r7, r0
    3fca:	46b9      	mov	r9, r7
    3fcc:	44cc      	add	ip, r9
    3fce:	44c4      	add	ip, r8
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
    3fd0:	4658      	mov	r0, fp
    3fd2:	9f00      	ldr	r7, [sp, #0]
    3fd4:	68bf      	ldr	r7, [r7, #8]
    3fd6:	6880      	ldr	r0, [r0, #8]
    3fd8:	4681      	mov	r9, r0
    3fda:	444f      	add	r7, r9
    3fdc:	46b8      	mov	r8, r7
    3fde:	4498      	add	r8, r3
    3fe0:	9b01      	ldr	r3, [sp, #4]
    3fe2:	4063      	eors	r3, r4
    3fe4:	400b      	ands	r3, r1
    3fe6:	4063      	eors	r3, r4
    3fe8:	4443      	add	r3, r8
    3fea:	000f      	movs	r7, r1
    3fec:	2006      	movs	r0, #6
    3fee:	41c7      	rors	r7, r0
    3ff0:	46b8      	mov	r8, r7
    3ff2:	000f      	movs	r7, r1
    3ff4:	3005      	adds	r0, #5
    3ff6:	41c7      	rors	r7, r0
    3ff8:	46b9      	mov	r9, r7
    3ffa:	4647      	mov	r7, r8
    3ffc:	4648      	mov	r0, r9
    3ffe:	4047      	eors	r7, r0
    4000:	46b8      	mov	r8, r7
    4002:	000f      	movs	r7, r1
    4004:	2019      	movs	r0, #25
    4006:	41c7      	rors	r7, r0
    4008:	46b9      	mov	r9, r7
    400a:	4647      	mov	r7, r8
    400c:	4648      	mov	r0, r9
    400e:	4047      	eors	r7, r0
    4010:	46b8      	mov	r8, r7
    4012:	4443      	add	r3, r8
    4014:	199e      	adds	r6, r3, r6
    4016:	4667      	mov	r7, ip
    4018:	2002      	movs	r0, #2
    401a:	41c7      	rors	r7, r0
    401c:	46b8      	mov	r8, r7
    401e:	4667      	mov	r7, ip
    4020:	300b      	adds	r0, #11
    4022:	41c7      	rors	r7, r0
    4024:	46b9      	mov	r9, r7
    4026:	4647      	mov	r7, r8
    4028:	4648      	mov	r0, r9
    402a:	4047      	eors	r7, r0
    402c:	46b8      	mov	r8, r7
    402e:	4667      	mov	r7, ip
    4030:	2016      	movs	r0, #22
    4032:	41c7      	rors	r7, r0
    4034:	46b9      	mov	r9, r7
    4036:	4647      	mov	r7, r8
    4038:	4648      	mov	r0, r9
    403a:	4047      	eors	r7, r0
    403c:	46b8      	mov	r8, r7
    403e:	4667      	mov	r7, ip
    4040:	432f      	orrs	r7, r5
    4042:	4017      	ands	r7, r2
    4044:	46b9      	mov	r9, r7
    4046:	4667      	mov	r7, ip
    4048:	402f      	ands	r7, r5
    404a:	46ba      	mov	sl, r7
    404c:	464f      	mov	r7, r9
    404e:	4650      	mov	r0, sl
    4050:	4307      	orrs	r7, r0
    4052:	46b9      	mov	r9, r7
    4054:	44c8      	add	r8, r9
    4056:	4443      	add	r3, r8
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
    4058:	4658      	mov	r0, fp
    405a:	9f00      	ldr	r7, [sp, #0]
    405c:	68ff      	ldr	r7, [r7, #12]
    405e:	68c0      	ldr	r0, [r0, #12]
    4060:	4681      	mov	r9, r0
    4062:	444f      	add	r7, r9
    4064:	46b8      	mov	r8, r7
    4066:	44a0      	add	r8, r4
    4068:	9801      	ldr	r0, [sp, #4]
    406a:	0004      	movs	r4, r0
    406c:	404c      	eors	r4, r1
    406e:	4034      	ands	r4, r6
    4070:	4044      	eors	r4, r0
    4072:	4444      	add	r4, r8
    4074:	0037      	movs	r7, r6
    4076:	2006      	movs	r0, #6
    4078:	41c7      	rors	r7, r0
    407a:	46b8      	mov	r8, r7
    407c:	0037      	movs	r7, r6
    407e:	3005      	adds	r0, #5
    4080:	41c7      	rors	r7, r0
    4082:	46b9      	mov	r9, r7
    4084:	4647      	mov	r7, r8
    4086:	4648      	mov	r0, r9
    4088:	4047      	eors	r7, r0
    408a:	46b8      	mov	r8, r7
    408c:	0037      	movs	r7, r6
    408e:	2019      	movs	r0, #25
    4090:	41c7      	rors	r7, r0
    4092:	46b9      	mov	r9, r7
    4094:	4647      	mov	r7, r8
    4096:	4648      	mov	r0, r9
    4098:	4047      	eors	r7, r0
    409a:	46b8      	mov	r8, r7
    409c:	4444      	add	r4, r8
    409e:	18a2      	adds	r2, r4, r2
    40a0:	001f      	movs	r7, r3
    40a2:	2002      	movs	r0, #2
    40a4:	41c7      	rors	r7, r0
    40a6:	46b8      	mov	r8, r7
    40a8:	001f      	movs	r7, r3
    40aa:	300b      	adds	r0, #11
    40ac:	41c7      	rors	r7, r0
    40ae:	46b9      	mov	r9, r7
    40b0:	4647      	mov	r7, r8
    40b2:	4648      	mov	r0, r9
    40b4:	4047      	eors	r7, r0
    40b6:	46b8      	mov	r8, r7
    40b8:	001f      	movs	r7, r3
    40ba:	2016      	movs	r0, #22
    40bc:	41c7      	rors	r7, r0
    40be:	46b9      	mov	r9, r7
    40c0:	4647      	mov	r7, r8
    40c2:	4648      	mov	r0, r9
    40c4:	4047      	eors	r7, r0
    40c6:	46b8      	mov	r8, r7
    40c8:	4667      	mov	r7, ip
    40ca:	431f      	orrs	r7, r3
    40cc:	402f      	ands	r7, r5
    40ce:	46b9      	mov	r9, r7
    40d0:	4667      	mov	r7, ip
    40d2:	401f      	ands	r7, r3
    40d4:	46ba      	mov	sl, r7
    40d6:	464f      	mov	r7, r9
    40d8:	4650      	mov	r0, sl
    40da:	4307      	orrs	r7, r0
    40dc:	46b9      	mov	r9, r7
    40de:	44c8      	add	r8, r9
    40e0:	4444      	add	r4, r8
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
    40e2:	4658      	mov	r0, fp
    40e4:	9f00      	ldr	r7, [sp, #0]
    40e6:	693f      	ldr	r7, [r7, #16]
    40e8:	6900      	ldr	r0, [r0, #16]
    40ea:	4681      	mov	r9, r0
    40ec:	444f      	add	r7, r9
    40ee:	46b8      	mov	r8, r7
    40f0:	9801      	ldr	r0, [sp, #4]
    40f2:	4681      	mov	r9, r0
    40f4:	44c8      	add	r8, r9
    40f6:	0008      	movs	r0, r1
    40f8:	4070      	eors	r0, r6
    40fa:	4010      	ands	r0, r2
    40fc:	4048      	eors	r0, r1
    40fe:	4440      	add	r0, r8
    4100:	4682      	mov	sl, r0
    4102:	0017      	movs	r7, r2
    4104:	2006      	movs	r0, #6
    4106:	41c7      	rors	r7, r0
    4108:	46b8      	mov	r8, r7
    410a:	0017      	movs	r7, r2
    410c:	3005      	adds	r0, #5
    410e:	41c7      	rors	r7, r0
    4110:	46b9      	mov	r9, r7
    4112:	4647      	mov	r7, r8
    4114:	4648      	mov	r0, r9
    4116:	4047      	eors	r7, r0
    4118:	46b8      	mov	r8, r7
    411a:	0017      	movs	r7, r2
    411c:	2019      	movs	r0, #25
    411e:	41c7      	rors	r7, r0
    4120:	46b9      	mov	r9, r7
    4122:	4647      	mov	r7, r8
    4124:	4648      	mov	r0, r9
    4126:	4047      	eors	r7, r0
    4128:	46b8      	mov	r8, r7
    412a:	4650      	mov	r0, sl
    412c:	4440      	add	r0, r8
    412e:	182d      	adds	r5, r5, r0
    4130:	9502      	str	r5, [sp, #8]
    4132:	0027      	movs	r7, r4
    4134:	2502      	movs	r5, #2
    4136:	41ef      	rors	r7, r5
    4138:	46b8      	mov	r8, r7
    413a:	0027      	movs	r7, r4
    413c:	350b      	adds	r5, #11
    413e:	41ef      	rors	r7, r5
    4140:	46b9      	mov	r9, r7
    4142:	4647      	mov	r7, r8
    4144:	464d      	mov	r5, r9
    4146:	406f      	eors	r7, r5
    4148:	46b8      	mov	r8, r7
    414a:	0027      	movs	r7, r4
    414c:	2516      	movs	r5, #22
    414e:	41ef      	rors	r7, r5
    4150:	46b9      	mov	r9, r7
    4152:	4647      	mov	r7, r8
    4154:	464d      	mov	r5, r9
    4156:	406f      	eors	r7, r5
    4158:	46b8      	mov	r8, r7
    415a:	001f      	movs	r7, r3
    415c:	4327      	orrs	r7, r4
    415e:	4665      	mov	r5, ip
    4160:	402f      	ands	r7, r5
    4162:	46b9      	mov	r9, r7
    4164:	0027      	movs	r7, r4
    4166:	401f      	ands	r7, r3
    4168:	46ba      	mov	sl, r7
    416a:	464f      	mov	r7, r9
    416c:	4655      	mov	r5, sl
    416e:	432f      	orrs	r7, r5
    4170:	46b9      	mov	r9, r7
    4172:	44c8      	add	r8, r9
    4174:	4440      	add	r0, r8
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
    4176:	465d      	mov	r5, fp
    4178:	9f00      	ldr	r7, [sp, #0]
    417a:	697f      	ldr	r7, [r7, #20]
    417c:	696d      	ldr	r5, [r5, #20]
    417e:	46a9      	mov	r9, r5
    4180:	444f      	add	r7, r9
    4182:	46b8      	mov	r8, r7
    4184:	4488      	add	r8, r1
    4186:	0031      	movs	r1, r6
    4188:	4051      	eors	r1, r2
    418a:	9d02      	ldr	r5, [sp, #8]
    418c:	4029      	ands	r1, r5
    418e:	4071      	eors	r1, r6
    4190:	4441      	add	r1, r8
    4192:	002f      	movs	r7, r5
    4194:	2506      	movs	r5, #6
    4196:	41ef      	rors	r7, r5
    4198:	46b8      	mov	r8, r7
    419a:	9f02      	ldr	r7, [sp, #8]
    419c:	3505      	adds	r5, #5
    419e:	41ef      	rors	r7, r5
    41a0:	46b9      	mov	r9, r7
    41a2:	4647      	mov	r7, r8
    41a4:	464d      	mov	r5, r9
    41a6:	406f      	eors	r7, r5
    41a8:	46b8      	mov	r8, r7
    41aa:	9f02      	ldr	r7, [sp, #8]
    41ac:	2519      	movs	r5, #25
    41ae:	41ef      	rors	r7, r5
    41b0:	46b9      	mov	r9, r7
    41b2:	4647      	mov	r7, r8
    41b4:	464d      	mov	r5, r9
    41b6:	406f      	eors	r7, r5
    41b8:	46b8      	mov	r8, r7
    41ba:	4441      	add	r1, r8
    41bc:	448c      	add	ip, r1
    41be:	0007      	movs	r7, r0
    41c0:	2502      	movs	r5, #2
    41c2:	41ef      	rors	r7, r5
    41c4:	46b8      	mov	r8, r7
    41c6:	0007      	movs	r7, r0
    41c8:	350b      	adds	r5, #11
    41ca:	41ef      	rors	r7, r5
    41cc:	46b9      	mov	r9, r7
    41ce:	4647      	mov	r7, r8
    41d0:	464d      	mov	r5, r9
    41d2:	406f      	eors	r7, r5
    41d4:	46b8      	mov	r8, r7
    41d6:	0007      	movs	r7, r0
    41d8:	2516      	movs	r5, #22
    41da:	41ef      	rors	r7, r5
    41dc:	46b9      	mov	r9, r7
    41de:	4647      	mov	r7, r8
    41e0:	464d      	mov	r5, r9
    41e2:	406f      	eors	r7, r5
    41e4:	46b8      	mov	r8, r7
    41e6:	0027      	movs	r7, r4
    41e8:	4307      	orrs	r7, r0
    41ea:	401f      	ands	r7, r3
    41ec:	46b9      	mov	r9, r7
    41ee:	0007      	movs	r7, r0
    41f0:	4027      	ands	r7, r4
    41f2:	46ba      	mov	sl, r7
    41f4:	464f      	mov	r7, r9
    41f6:	4655      	mov	r5, sl
    41f8:	432f      	orrs	r7, r5
    41fa:	46b9      	mov	r9, r7
    41fc:	44c8      	add	r8, r9
    41fe:	4441      	add	r1, r8
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
    4200:	465d      	mov	r5, fp
    4202:	9f00      	ldr	r7, [sp, #0]
    4204:	69bf      	ldr	r7, [r7, #24]
    4206:	69ad      	ldr	r5, [r5, #24]
    4208:	46a9      	mov	r9, r5
    420a:	444f      	add	r7, r9
    420c:	46b8      	mov	r8, r7
    420e:	44b0      	add	r8, r6
    4210:	0016      	movs	r6, r2
    4212:	9d02      	ldr	r5, [sp, #8]
    4214:	406e      	eors	r6, r5
    4216:	4665      	mov	r5, ip
    4218:	402e      	ands	r6, r5
    421a:	4056      	eors	r6, r2
    421c:	4446      	add	r6, r8
    421e:	4667      	mov	r7, ip
    4220:	2506      	movs	r5, #6
    4222:	41ef      	rors	r7, r5
    4224:	46b8      	mov	r8, r7
    4226:	4667      	mov	r7, ip
    4228:	3505      	adds	r5, #5
    422a:	41ef      	rors	r7, r5
    422c:	46b9      	mov	r9, r7
    422e:	4647      	mov	r7, r8
    4230:	464d      	mov	r5, r9
    4232:	406f      	eors	r7, r5
    4234:	46b8      	mov	r8, r7
    4236:	4667      	mov	r7, ip
    4238:	2519      	movs	r5, #25
    423a:	41ef      	rors	r7, r5
    423c:	46b9      	mov	r9, r7
    423e:	4647      	mov	r7, r8
    4240:	464d      	mov	r5, r9
    4242:	406f      	eors	r7, r5
    4244:	46b8      	mov	r8, r7
    4246:	4446      	add	r6, r8
    4248:	199b      	adds	r3, r3, r6
    424a:	000f      	movs	r7, r1
    424c:	2502      	movs	r5, #2
    424e:	41ef      	rors	r7, r5
    4250:	46b8      	mov	r8, r7
    4252:	000f      	movs	r7, r1
    4254:	350b      	adds	r5, #11
    4256:	41ef      	rors	r7, r5
    4258:	46b9      	mov	r9, r7
    425a:	4647      	mov	r7, r8
    425c:	464d      	mov	r5, r9
    425e:	406f      	eors	r7, r5
    4260:	46b8      	mov	r8, r7
    4262:	000f      	movs	r7, r1
    4264:	2516      	movs	r5, #22
    4266:	41ef      	rors	r7, r5
    4268:	46b9      	mov	r9, r7
    426a:	4647      	mov	r7, r8
    426c:	464d      	mov	r5, r9
    426e:	406f      	eors	r7, r5
    4270:	46b8      	mov	r8, r7
    4272:	0007      	movs	r7, r0
    4274:	430f      	orrs	r7, r1
    4276:	4027      	ands	r7, r4
    4278:	46b9      	mov	r9, r7
    427a:	000f      	movs	r7, r1
    427c:	4007      	ands	r7, r0
    427e:	46ba      	mov	sl, r7
    4280:	464f      	mov	r7, r9
    4282:	4655      	mov	r5, sl
    4284:	432f      	orrs	r7, r5
    4286:	46b9      	mov	r9, r7
    4288:	44c8      	add	r8, r9
    428a:	4446      	add	r6, r8
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    428c:	465d      	mov	r5, fp
    428e:	9f00      	ldr	r7, [sp, #0]
    4290:	69ff      	ldr	r7, [r7, #28]
    4292:	69ed      	ldr	r5, [r5, #28]
    4294:	46a9      	mov	r9, r5
    4296:	444f      	add	r7, r9
    4298:	46b8      	mov	r8, r7
    429a:	4490      	add	r8, r2
    429c:	4662      	mov	r2, ip
    429e:	9d02      	ldr	r5, [sp, #8]
    42a0:	406a      	eors	r2, r5
    42a2:	401a      	ands	r2, r3
    42a4:	406a      	eors	r2, r5
    42a6:	4442      	add	r2, r8
    42a8:	001f      	movs	r7, r3
    42aa:	2506      	movs	r5, #6
    42ac:	41ef      	rors	r7, r5
    42ae:	46b8      	mov	r8, r7
    42b0:	001f      	movs	r7, r3
    42b2:	3505      	adds	r5, #5
    42b4:	41ef      	rors	r7, r5
    42b6:	46b9      	mov	r9, r7
    42b8:	4647      	mov	r7, r8
    42ba:	464d      	mov	r5, r9
    42bc:	406f      	eors	r7, r5
    42be:	46b8      	mov	r8, r7
    42c0:	001f      	movs	r7, r3
    42c2:	2519      	movs	r5, #25
    42c4:	41ef      	rors	r7, r5
    42c6:	46b9      	mov	r9, r7
    42c8:	4647      	mov	r7, r8
    42ca:	464d      	mov	r5, r9
    42cc:	406f      	eors	r7, r5
    42ce:	46b8      	mov	r8, r7
    42d0:	4442      	add	r2, r8
    42d2:	18a4      	adds	r4, r4, r2
    42d4:	0037      	movs	r7, r6
    42d6:	2502      	movs	r5, #2
    42d8:	41ef      	rors	r7, r5
    42da:	46b8      	mov	r8, r7
    42dc:	0037      	movs	r7, r6
    42de:	350b      	adds	r5, #11
    42e0:	41ef      	rors	r7, r5
    42e2:	46b9      	mov	r9, r7
    42e4:	4647      	mov	r7, r8
    42e6:	464d      	mov	r5, r9
    42e8:	406f      	eors	r7, r5
    42ea:	46b8      	mov	r8, r7
    42ec:	0037      	movs	r7, r6
    42ee:	2516      	movs	r5, #22
    42f0:	41ef      	rors	r7, r5
    42f2:	46b9      	mov	r9, r7
    42f4:	4647      	mov	r7, r8
    42f6:	464d      	mov	r5, r9
    42f8:	406f      	eors	r7, r5
    42fa:	46b8      	mov	r8, r7
    42fc:	000f      	movs	r7, r1
    42fe:	4337      	orrs	r7, r6
    4300:	4007      	ands	r7, r0
    4302:	46b9      	mov	r9, r7
    4304:	0037      	movs	r7, r6
    4306:	400f      	ands	r7, r1
    4308:	46ba      	mov	sl, r7
    430a:	464f      	mov	r7, r9
    430c:	4655      	mov	r5, sl
    430e:	432f      	orrs	r7, r5
    4310:	46b9      	mov	r9, r7
    4312:	44c8      	add	r8, r9
    4314:	4442      	add	r2, r8
    4316:	9f00      	ldr	r7, [sp, #0]
    4318:	3720      	adds	r7, #32
    431a:	9700      	str	r7, [sp, #0]
    431c:	2520      	movs	r5, #32
    431e:	46a8      	mov	r8, r5
    4320:	44c3      	add	fp, r8
    for( i = 0; i < 16; i += 8 )
    4322:	4d0a      	ldr	r5, [pc, #40]	; (434c <utils_sha256_process+0x514>)
    4324:	42bd      	cmp	r5, r7
    4326:	d000      	beq.n	432a <utils_sha256_process+0x4f2>
    4328:	e5c4      	b.n	3eb4 <utils_sha256_process+0x7c>
    432a:	4665      	mov	r5, ip
    432c:	9504      	str	r5, [sp, #16]
    432e:	9d03      	ldr	r5, [sp, #12]
    4330:	468a      	mov	sl, r1
    4332:	0007      	movs	r7, r0
    4334:	9900      	ldr	r1, [sp, #0]
    4336:	4688      	mov	r8, r1
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
    4338:	0028      	movs	r0, r5
    433a:	46a1      	mov	r9, r4
    433c:	001d      	movs	r5, r3
    433e:	4693      	mov	fp, r2
    4340:	9603      	str	r6, [sp, #12]
    4342:	4653      	mov	r3, sl
    4344:	9301      	str	r3, [sp, #4]
    4346:	46ba      	mov	sl, r7
    4348:	e002      	b.n	4350 <utils_sha256_process+0x518>
    434a:	46c0      	nop			; (mov r8, r8)
    434c:	0000a71c 	.word	0x0000a71c
    4350:	6b82      	ldr	r2, [r0, #56]	; 0x38
    4352:	2311      	movs	r3, #17
    4354:	41da      	rors	r2, r3
    4356:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4358:	2413      	movs	r4, #19
    435a:	41e3      	rors	r3, r4
    435c:	405a      	eors	r2, r3
    435e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4360:	0a9b      	lsrs	r3, r3, #10
    4362:	4053      	eors	r3, r2
    4364:	6a42      	ldr	r2, [r0, #36]	; 0x24
    4366:	6806      	ldr	r6, [r0, #0]
    4368:	46b4      	mov	ip, r6
    436a:	4462      	add	r2, ip
    436c:	189b      	adds	r3, r3, r2
    436e:	6844      	ldr	r4, [r0, #4]
    4370:	2207      	movs	r2, #7
    4372:	41d4      	rors	r4, r2
    4374:	6842      	ldr	r2, [r0, #4]
    4376:	2612      	movs	r6, #18
    4378:	41f2      	rors	r2, r6
    437a:	4062      	eors	r2, r4
    437c:	6844      	ldr	r4, [r0, #4]
    437e:	08e4      	lsrs	r4, r4, #3
    4380:	4062      	eors	r2, r4
    4382:	189b      	adds	r3, r3, r2
    4384:	001e      	movs	r6, r3
    4386:	464a      	mov	r2, r9
    4388:	2306      	movs	r3, #6
    438a:	41da      	rors	r2, r3
    438c:	464b      	mov	r3, r9
    438e:	240b      	movs	r4, #11
    4390:	41e3      	rors	r3, r4
    4392:	4053      	eors	r3, r2
    4394:	464a      	mov	r2, r9
    4396:	340e      	adds	r4, #14
    4398:	41e2      	rors	r2, r4
    439a:	4053      	eors	r3, r2
    439c:	9c04      	ldr	r4, [sp, #16]
    439e:	0022      	movs	r2, r4
    43a0:	406a      	eors	r2, r5
    43a2:	464f      	mov	r7, r9
    43a4:	403a      	ands	r2, r7
    43a6:	4062      	eors	r2, r4
    43a8:	189b      	adds	r3, r3, r2
    43aa:	4647      	mov	r7, r8
    43ac:	683f      	ldr	r7, [r7, #0]
    43ae:	46bc      	mov	ip, r7
    43b0:	4463      	add	r3, ip
    43b2:	46b4      	mov	ip, r6
    43b4:	4463      	add	r3, ip
    43b6:	9605      	str	r6, [sp, #20]
    43b8:	6406      	str	r6, [r0, #64]	; 0x40
    43ba:	9f02      	ldr	r7, [sp, #8]
    43bc:	46bc      	mov	ip, r7
    43be:	4463      	add	r3, ip
    43c0:	449a      	add	sl, r3
    43c2:	4651      	mov	r1, sl
    43c4:	465c      	mov	r4, fp
    43c6:	2702      	movs	r7, #2
    43c8:	41fc      	rors	r4, r7
    43ca:	465f      	mov	r7, fp
    43cc:	220d      	movs	r2, #13
    43ce:	41d7      	rors	r7, r2
    43d0:	003a      	movs	r2, r7
    43d2:	4062      	eors	r2, r4
    43d4:	465c      	mov	r4, fp
    43d6:	2716      	movs	r7, #22
    43d8:	41fc      	rors	r4, r7
    43da:	4062      	eors	r2, r4
    43dc:	465c      	mov	r4, fp
    43de:	9e03      	ldr	r6, [sp, #12]
    43e0:	4334      	orrs	r4, r6
    43e2:	9f01      	ldr	r7, [sp, #4]
    43e4:	403c      	ands	r4, r7
    43e6:	465f      	mov	r7, fp
    43e8:	4037      	ands	r7, r6
    43ea:	433c      	orrs	r4, r7
    43ec:	1914      	adds	r4, r2, r4
    43ee:	46a4      	mov	ip, r4
    43f0:	449c      	add	ip, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
    43f2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    43f4:	2711      	movs	r7, #17
    43f6:	41fb      	rors	r3, r7
    43f8:	001c      	movs	r4, r3
    43fa:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    43fc:	3702      	adds	r7, #2
    43fe:	41fb      	rors	r3, r7
    4400:	4063      	eors	r3, r4
    4402:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
    4404:	0abc      	lsrs	r4, r7, #10
    4406:	405c      	eors	r4, r3
    4408:	6843      	ldr	r3, [r0, #4]
    440a:	6a87      	ldr	r7, [r0, #40]	; 0x28
    440c:	46ba      	mov	sl, r7
    440e:	4453      	add	r3, sl
    4410:	18e4      	adds	r4, r4, r3
    4412:	6883      	ldr	r3, [r0, #8]
    4414:	2707      	movs	r7, #7
    4416:	41fb      	rors	r3, r7
    4418:	6887      	ldr	r7, [r0, #8]
    441a:	2212      	movs	r2, #18
    441c:	41d7      	rors	r7, r2
    441e:	003a      	movs	r2, r7
    4420:	405a      	eors	r2, r3
    4422:	6883      	ldr	r3, [r0, #8]
    4424:	08db      	lsrs	r3, r3, #3
    4426:	405a      	eors	r2, r3
    4428:	18a4      	adds	r4, r4, r2
    442a:	464b      	mov	r3, r9
    442c:	406b      	eors	r3, r5
    442e:	000e      	movs	r6, r1
    4430:	400b      	ands	r3, r1
    4432:	406b      	eors	r3, r5
    4434:	4641      	mov	r1, r8
    4436:	9a04      	ldr	r2, [sp, #16]
    4438:	6849      	ldr	r1, [r1, #4]
    443a:	468a      	mov	sl, r1
    443c:	4452      	add	r2, sl
    443e:	1912      	adds	r2, r2, r4
    4440:	189a      	adds	r2, r3, r2
    4442:	6444      	str	r4, [r0, #68]	; 0x44
    4444:	0033      	movs	r3, r6
    4446:	2106      	movs	r1, #6
    4448:	41cb      	rors	r3, r1
    444a:	0037      	movs	r7, r6
    444c:	3105      	adds	r1, #5
    444e:	41cf      	rors	r7, r1
    4450:	405f      	eors	r7, r3
    4452:	9602      	str	r6, [sp, #8]
    4454:	0033      	movs	r3, r6
    4456:	310e      	adds	r1, #14
    4458:	41cb      	rors	r3, r1
    445a:	407b      	eors	r3, r7
    445c:	189b      	adds	r3, r3, r2
    445e:	9901      	ldr	r1, [sp, #4]
    4460:	18ca      	adds	r2, r1, r3
    4462:	9201      	str	r2, [sp, #4]
    4464:	4662      	mov	r2, ip
    4466:	2102      	movs	r1, #2
    4468:	41ca      	rors	r2, r1
    446a:	4667      	mov	r7, ip
    446c:	310b      	adds	r1, #11
    446e:	41cf      	rors	r7, r1
    4470:	4057      	eors	r7, r2
    4472:	4662      	mov	r2, ip
    4474:	3109      	adds	r1, #9
    4476:	41ca      	rors	r2, r1
    4478:	4057      	eors	r7, r2
    447a:	465a      	mov	r2, fp
    447c:	4661      	mov	r1, ip
    447e:	430a      	orrs	r2, r1
    4480:	9903      	ldr	r1, [sp, #12]
    4482:	400a      	ands	r2, r1
    4484:	4659      	mov	r1, fp
    4486:	4666      	mov	r6, ip
    4488:	4031      	ands	r1, r6
    448a:	430a      	orrs	r2, r1
    448c:	18bf      	adds	r7, r7, r2
    448e:	18ff      	adds	r7, r7, r3
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
    4490:	9b05      	ldr	r3, [sp, #20]
    4492:	0019      	movs	r1, r3
    4494:	2211      	movs	r2, #17
    4496:	41d1      	rors	r1, r2
    4498:	001e      	movs	r6, r3
    449a:	3202      	adds	r2, #2
    449c:	41d6      	rors	r6, r2
    449e:	0032      	movs	r2, r6
    44a0:	404a      	eors	r2, r1
    44a2:	0a99      	lsrs	r1, r3, #10
    44a4:	4051      	eors	r1, r2
    44a6:	6882      	ldr	r2, [r0, #8]
    44a8:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
    44aa:	46b2      	mov	sl, r6
    44ac:	4452      	add	r2, sl
    44ae:	1889      	adds	r1, r1, r2
    44b0:	68c2      	ldr	r2, [r0, #12]
    44b2:	2607      	movs	r6, #7
    44b4:	41f2      	rors	r2, r6
    44b6:	68c3      	ldr	r3, [r0, #12]
    44b8:	360b      	adds	r6, #11
    44ba:	41f3      	rors	r3, r6
    44bc:	4053      	eors	r3, r2
    44be:	68c2      	ldr	r2, [r0, #12]
    44c0:	08d2      	lsrs	r2, r2, #3
    44c2:	4053      	eors	r3, r2
    44c4:	18ca      	adds	r2, r1, r3
    44c6:	0016      	movs	r6, r2
    44c8:	4642      	mov	r2, r8
    44ca:	6892      	ldr	r2, [r2, #8]
    44cc:	4692      	mov	sl, r2
    44ce:	4455      	add	r5, sl
    44d0:	46b2      	mov	sl, r6
    44d2:	4455      	add	r5, sl
    44d4:	464a      	mov	r2, r9
    44d6:	9b02      	ldr	r3, [sp, #8]
    44d8:	405a      	eors	r2, r3
    44da:	9901      	ldr	r1, [sp, #4]
    44dc:	400a      	ands	r2, r1
    44de:	464b      	mov	r3, r9
    44e0:	405a      	eors	r2, r3
    44e2:	18aa      	adds	r2, r5, r2
    44e4:	9604      	str	r6, [sp, #16]
    44e6:	6486      	str	r6, [r0, #72]	; 0x48
    44e8:	000d      	movs	r5, r1
    44ea:	2306      	movs	r3, #6
    44ec:	41dd      	rors	r5, r3
    44ee:	002b      	movs	r3, r5
    44f0:	000d      	movs	r5, r1
    44f2:	260b      	movs	r6, #11
    44f4:	41f5      	rors	r5, r6
    44f6:	405d      	eors	r5, r3
    44f8:	000b      	movs	r3, r1
    44fa:	2119      	movs	r1, #25
    44fc:	41cb      	rors	r3, r1
    44fe:	406b      	eors	r3, r5
    4500:	189b      	adds	r3, r3, r2
    4502:	9a03      	ldr	r2, [sp, #12]
    4504:	18d6      	adds	r6, r2, r3
    4506:	003a      	movs	r2, r7
    4508:	3917      	subs	r1, #23
    450a:	41ca      	rors	r2, r1
    450c:	003d      	movs	r5, r7
    450e:	310b      	adds	r1, #11
    4510:	41cd      	rors	r5, r1
    4512:	4055      	eors	r5, r2
    4514:	003a      	movs	r2, r7
    4516:	3109      	adds	r1, #9
    4518:	41ca      	rors	r2, r1
    451a:	4055      	eors	r5, r2
    451c:	4662      	mov	r2, ip
    451e:	433a      	orrs	r2, r7
    4520:	4659      	mov	r1, fp
    4522:	400a      	ands	r2, r1
    4524:	4661      	mov	r1, ip
    4526:	4039      	ands	r1, r7
    4528:	430a      	orrs	r2, r1
    452a:	18ad      	adds	r5, r5, r2
    452c:	18ed      	adds	r5, r5, r3
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
    452e:	0022      	movs	r2, r4
    4530:	2111      	movs	r1, #17
    4532:	41ca      	rors	r2, r1
    4534:	0021      	movs	r1, r4
    4536:	2313      	movs	r3, #19
    4538:	41d9      	rors	r1, r3
    453a:	000b      	movs	r3, r1
    453c:	4053      	eors	r3, r2
    453e:	0aa4      	lsrs	r4, r4, #10
    4540:	4063      	eors	r3, r4
    4542:	68c2      	ldr	r2, [r0, #12]
    4544:	6b01      	ldr	r1, [r0, #48]	; 0x30
    4546:	468a      	mov	sl, r1
    4548:	4452      	add	r2, sl
    454a:	189b      	adds	r3, r3, r2
    454c:	6902      	ldr	r2, [r0, #16]
    454e:	2107      	movs	r1, #7
    4550:	41ca      	rors	r2, r1
    4552:	0014      	movs	r4, r2
    4554:	6902      	ldr	r2, [r0, #16]
    4556:	310b      	adds	r1, #11
    4558:	41ca      	rors	r2, r1
    455a:	4062      	eors	r2, r4
    455c:	6901      	ldr	r1, [r0, #16]
    455e:	08cc      	lsrs	r4, r1, #3
    4560:	4062      	eors	r2, r4
    4562:	1899      	adds	r1, r3, r2
    4564:	9103      	str	r1, [sp, #12]
    4566:	9c02      	ldr	r4, [sp, #8]
    4568:	0022      	movs	r2, r4
    456a:	9901      	ldr	r1, [sp, #4]
    456c:	404a      	eors	r2, r1
    456e:	4032      	ands	r2, r6
    4570:	4062      	eors	r2, r4
    4572:	4643      	mov	r3, r8
    4574:	68db      	ldr	r3, [r3, #12]
    4576:	444b      	add	r3, r9
    4578:	001c      	movs	r4, r3
    457a:	9b03      	ldr	r3, [sp, #12]
    457c:	4699      	mov	r9, r3
    457e:	444c      	add	r4, r9
    4580:	1912      	adds	r2, r2, r4
    4582:	64c3      	str	r3, [r0, #76]	; 0x4c
    4584:	0033      	movs	r3, r6
    4586:	2106      	movs	r1, #6
    4588:	41cb      	rors	r3, r1
    458a:	4699      	mov	r9, r3
    458c:	0033      	movs	r3, r6
    458e:	3105      	adds	r1, #5
    4590:	41cb      	rors	r3, r1
    4592:	001c      	movs	r4, r3
    4594:	464b      	mov	r3, r9
    4596:	405c      	eors	r4, r3
    4598:	0033      	movs	r3, r6
    459a:	310e      	adds	r1, #14
    459c:	41cb      	rors	r3, r1
    459e:	405c      	eors	r4, r3
    45a0:	18a2      	adds	r2, r4, r2
    45a2:	46d9      	mov	r9, fp
    45a4:	4491      	add	r9, r2
    45a6:	002b      	movs	r3, r5
    45a8:	3917      	subs	r1, #23
    45aa:	41cb      	rors	r3, r1
    45ac:	469a      	mov	sl, r3
    45ae:	002b      	movs	r3, r5
    45b0:	310b      	adds	r1, #11
    45b2:	41cb      	rors	r3, r1
    45b4:	001c      	movs	r4, r3
    45b6:	4653      	mov	r3, sl
    45b8:	405c      	eors	r4, r3
    45ba:	002b      	movs	r3, r5
    45bc:	3109      	adds	r1, #9
    45be:	41cb      	rors	r3, r1
    45c0:	405c      	eors	r4, r3
    45c2:	003b      	movs	r3, r7
    45c4:	432b      	orrs	r3, r5
    45c6:	4661      	mov	r1, ip
    45c8:	400b      	ands	r3, r1
    45ca:	469a      	mov	sl, r3
    45cc:	002b      	movs	r3, r5
    45ce:	403b      	ands	r3, r7
    45d0:	469b      	mov	fp, r3
    45d2:	4653      	mov	r3, sl
    45d4:	4659      	mov	r1, fp
    45d6:	430b      	orrs	r3, r1
    45d8:	469a      	mov	sl, r3
    45da:	4454      	add	r4, sl
    45dc:	18a2      	adds	r2, r4, r2
    45de:	9200      	str	r2, [sp, #0]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
    45e0:	9c04      	ldr	r4, [sp, #16]
    45e2:	0023      	movs	r3, r4
    45e4:	2211      	movs	r2, #17
    45e6:	41d3      	rors	r3, r2
    45e8:	469a      	mov	sl, r3
    45ea:	0022      	movs	r2, r4
    45ec:	2313      	movs	r3, #19
    45ee:	41da      	rors	r2, r3
    45f0:	4653      	mov	r3, sl
    45f2:	405a      	eors	r2, r3
    45f4:	0aa1      	lsrs	r1, r4, #10
    45f6:	404a      	eors	r2, r1
    45f8:	6903      	ldr	r3, [r0, #16]
    45fa:	469b      	mov	fp, r3
    45fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    45fe:	469a      	mov	sl, r3
    4600:	44d3      	add	fp, sl
    4602:	4659      	mov	r1, fp
    4604:	1852      	adds	r2, r2, r1
    4606:	6943      	ldr	r3, [r0, #20]
    4608:	2107      	movs	r1, #7
    460a:	41cb      	rors	r3, r1
    460c:	469a      	mov	sl, r3
    460e:	6943      	ldr	r3, [r0, #20]
    4610:	310b      	adds	r1, #11
    4612:	41cb      	rors	r3, r1
    4614:	0019      	movs	r1, r3
    4616:	4653      	mov	r3, sl
    4618:	4059      	eors	r1, r3
    461a:	6943      	ldr	r3, [r0, #20]
    461c:	08db      	lsrs	r3, r3, #3
    461e:	4059      	eors	r1, r3
    4620:	1854      	adds	r4, r2, r1
    4622:	0022      	movs	r2, r4
    4624:	4643      	mov	r3, r8
    4626:	691b      	ldr	r3, [r3, #16]
    4628:	18e1      	adds	r1, r4, r3
    462a:	9c02      	ldr	r4, [sp, #8]
    462c:	46a2      	mov	sl, r4
    462e:	448a      	add	sl, r1
    4630:	9c01      	ldr	r4, [sp, #4]
    4632:	0021      	movs	r1, r4
    4634:	4071      	eors	r1, r6
    4636:	464b      	mov	r3, r9
    4638:	4019      	ands	r1, r3
    463a:	4061      	eors	r1, r4
    463c:	4451      	add	r1, sl
    463e:	9204      	str	r2, [sp, #16]
    4640:	6502      	str	r2, [r0, #80]	; 0x50
    4642:	464b      	mov	r3, r9
    4644:	2206      	movs	r2, #6
    4646:	41d3      	rors	r3, r2
    4648:	469b      	mov	fp, r3
    464a:	464b      	mov	r3, r9
    464c:	3205      	adds	r2, #5
    464e:	41d3      	rors	r3, r2
    4650:	469a      	mov	sl, r3
    4652:	465b      	mov	r3, fp
    4654:	4652      	mov	r2, sl
    4656:	4053      	eors	r3, r2
    4658:	469a      	mov	sl, r3
    465a:	464b      	mov	r3, r9
    465c:	2219      	movs	r2, #25
    465e:	41d3      	rors	r3, r2
    4660:	469b      	mov	fp, r3
    4662:	4653      	mov	r3, sl
    4664:	465a      	mov	r2, fp
    4666:	4053      	eors	r3, r2
    4668:	469a      	mov	sl, r3
    466a:	4451      	add	r1, sl
    466c:	448c      	add	ip, r1
    466e:	4663      	mov	r3, ip
    4670:	9302      	str	r3, [sp, #8]
    4672:	9b00      	ldr	r3, [sp, #0]
    4674:	2202      	movs	r2, #2
    4676:	41d3      	rors	r3, r2
    4678:	469a      	mov	sl, r3
    467a:	9b00      	ldr	r3, [sp, #0]
    467c:	320b      	adds	r2, #11
    467e:	41d3      	rors	r3, r2
    4680:	469c      	mov	ip, r3
    4682:	4653      	mov	r3, sl
    4684:	4662      	mov	r2, ip
    4686:	4053      	eors	r3, r2
    4688:	469c      	mov	ip, r3
    468a:	9b00      	ldr	r3, [sp, #0]
    468c:	2216      	movs	r2, #22
    468e:	41d3      	rors	r3, r2
    4690:	469a      	mov	sl, r3
    4692:	4663      	mov	r3, ip
    4694:	4652      	mov	r2, sl
    4696:	4053      	eors	r3, r2
    4698:	469c      	mov	ip, r3
    469a:	002b      	movs	r3, r5
    469c:	9a00      	ldr	r2, [sp, #0]
    469e:	4313      	orrs	r3, r2
    46a0:	403b      	ands	r3, r7
    46a2:	469a      	mov	sl, r3
    46a4:	0013      	movs	r3, r2
    46a6:	402b      	ands	r3, r5
    46a8:	469b      	mov	fp, r3
    46aa:	4653      	mov	r3, sl
    46ac:	465a      	mov	r2, fp
    46ae:	4313      	orrs	r3, r2
    46b0:	469a      	mov	sl, r3
    46b2:	44e2      	add	sl, ip
    46b4:	448a      	add	sl, r1
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
    46b6:	9b03      	ldr	r3, [sp, #12]
    46b8:	0019      	movs	r1, r3
    46ba:	2211      	movs	r2, #17
    46bc:	41d1      	rors	r1, r2
    46be:	468c      	mov	ip, r1
    46c0:	0019      	movs	r1, r3
    46c2:	3202      	adds	r2, #2
    46c4:	41d1      	rors	r1, r2
    46c6:	4662      	mov	r2, ip
    46c8:	4051      	eors	r1, r2
    46ca:	0a9b      	lsrs	r3, r3, #10
    46cc:	404b      	eors	r3, r1
    46ce:	6b82      	ldr	r2, [r0, #56]	; 0x38
    46d0:	0011      	movs	r1, r2
    46d2:	6942      	ldr	r2, [r0, #20]
    46d4:	4694      	mov	ip, r2
    46d6:	4461      	add	r1, ip
    46d8:	185b      	adds	r3, r3, r1
    46da:	6981      	ldr	r1, [r0, #24]
    46dc:	2207      	movs	r2, #7
    46de:	41d1      	rors	r1, r2
    46e0:	468c      	mov	ip, r1
    46e2:	6981      	ldr	r1, [r0, #24]
    46e4:	320b      	adds	r2, #11
    46e6:	41d1      	rors	r1, r2
    46e8:	4662      	mov	r2, ip
    46ea:	4051      	eors	r1, r2
    46ec:	6982      	ldr	r2, [r0, #24]
    46ee:	08d2      	lsrs	r2, r2, #3
    46f0:	4051      	eors	r1, r2
    46f2:	185b      	adds	r3, r3, r1
    46f4:	4642      	mov	r2, r8
    46f6:	6952      	ldr	r2, [r2, #20]
    46f8:	1899      	adds	r1, r3, r2
    46fa:	46a4      	mov	ip, r4
    46fc:	448c      	add	ip, r1
    46fe:	4649      	mov	r1, r9
    4700:	4071      	eors	r1, r6
    4702:	9c02      	ldr	r4, [sp, #8]
    4704:	4021      	ands	r1, r4
    4706:	4071      	eors	r1, r6
    4708:	4461      	add	r1, ip
    470a:	9306      	str	r3, [sp, #24]
    470c:	6543      	str	r3, [r0, #84]	; 0x54
    470e:	0023      	movs	r3, r4
    4710:	2206      	movs	r2, #6
    4712:	41d4      	rors	r4, r2
    4714:	46a3      	mov	fp, r4
    4716:	001c      	movs	r4, r3
    4718:	3205      	adds	r2, #5
    471a:	41d4      	rors	r4, r2
    471c:	465b      	mov	r3, fp
    471e:	4063      	eors	r3, r4
    4720:	469c      	mov	ip, r3
    4722:	9c02      	ldr	r4, [sp, #8]
    4724:	2319      	movs	r3, #25
    4726:	41dc      	rors	r4, r3
    4728:	4663      	mov	r3, ip
    472a:	4063      	eors	r3, r4
    472c:	469c      	mov	ip, r3
    472e:	4461      	add	r1, ip
    4730:	187f      	adds	r7, r7, r1
    4732:	003b      	movs	r3, r7
    4734:	4657      	mov	r7, sl
    4736:	2202      	movs	r2, #2
    4738:	41d7      	rors	r7, r2
    473a:	46bc      	mov	ip, r7
    473c:	4657      	mov	r7, sl
    473e:	320b      	adds	r2, #11
    4740:	41d7      	rors	r7, r2
    4742:	4662      	mov	r2, ip
    4744:	4057      	eors	r7, r2
    4746:	4654      	mov	r4, sl
    4748:	2216      	movs	r2, #22
    474a:	41d4      	rors	r4, r2
    474c:	4067      	eors	r7, r4
    474e:	4654      	mov	r4, sl
    4750:	9a00      	ldr	r2, [sp, #0]
    4752:	4314      	orrs	r4, r2
    4754:	402c      	ands	r4, r5
    4756:	46a4      	mov	ip, r4
    4758:	4654      	mov	r4, sl
    475a:	4014      	ands	r4, r2
    475c:	46a3      	mov	fp, r4
    475e:	4664      	mov	r4, ip
    4760:	465a      	mov	r2, fp
    4762:	4314      	orrs	r4, r2
    4764:	46a4      	mov	ip, r4
    4766:	4467      	add	r7, ip
    4768:	1879      	adds	r1, r7, r1
    476a:	9101      	str	r1, [sp, #4]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
    476c:	9c04      	ldr	r4, [sp, #16]
    476e:	0027      	movs	r7, r4
    4770:	2111      	movs	r1, #17
    4772:	41cf      	rors	r7, r1
    4774:	46bc      	mov	ip, r7
    4776:	0027      	movs	r7, r4
    4778:	3102      	adds	r1, #2
    477a:	41cf      	rors	r7, r1
    477c:	4661      	mov	r1, ip
    477e:	404f      	eors	r7, r1
    4780:	0aa2      	lsrs	r2, r4, #10
    4782:	407a      	eors	r2, r7
    4784:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    4786:	000f      	movs	r7, r1
    4788:	6981      	ldr	r1, [r0, #24]
    478a:	468c      	mov	ip, r1
    478c:	4467      	add	r7, ip
    478e:	19d2      	adds	r2, r2, r7
    4790:	69c7      	ldr	r7, [r0, #28]
    4792:	2107      	movs	r1, #7
    4794:	41cf      	rors	r7, r1
    4796:	46bc      	mov	ip, r7
    4798:	69c7      	ldr	r7, [r0, #28]
    479a:	310b      	adds	r1, #11
    479c:	41cf      	rors	r7, r1
    479e:	4661      	mov	r1, ip
    47a0:	404f      	eors	r7, r1
    47a2:	69c1      	ldr	r1, [r0, #28]
    47a4:	08c9      	lsrs	r1, r1, #3
    47a6:	404f      	eors	r7, r1
    47a8:	19d2      	adds	r2, r2, r7
    47aa:	4641      	mov	r1, r8
    47ac:	6989      	ldr	r1, [r1, #24]
    47ae:	1857      	adds	r7, r2, r1
    47b0:	19be      	adds	r6, r7, r6
    47b2:	464f      	mov	r7, r9
    47b4:	9c02      	ldr	r4, [sp, #8]
    47b6:	4067      	eors	r7, r4
    47b8:	401f      	ands	r7, r3
    47ba:	4649      	mov	r1, r9
    47bc:	404f      	eors	r7, r1
    47be:	19f7      	adds	r7, r6, r7
    47c0:	6582      	str	r2, [r0, #88]	; 0x58
    47c2:	001a      	movs	r2, r3
    47c4:	2106      	movs	r1, #6
    47c6:	41ca      	rors	r2, r1
    47c8:	001e      	movs	r6, r3
    47ca:	3105      	adds	r1, #5
    47cc:	41ce      	rors	r6, r1
    47ce:	4056      	eors	r6, r2
    47d0:	9304      	str	r3, [sp, #16]
    47d2:	001a      	movs	r2, r3
    47d4:	2319      	movs	r3, #25
    47d6:	41da      	rors	r2, r3
    47d8:	4072      	eors	r2, r6
    47da:	19d2      	adds	r2, r2, r7
    47dc:	18ad      	adds	r5, r5, r2
    47de:	9e01      	ldr	r6, [sp, #4]
    47e0:	0033      	movs	r3, r6
    47e2:	3909      	subs	r1, #9
    47e4:	41cb      	rors	r3, r1
    47e6:	001f      	movs	r7, r3
    47e8:	0033      	movs	r3, r6
    47ea:	310b      	adds	r1, #11
    47ec:	41cb      	rors	r3, r1
    47ee:	001e      	movs	r6, r3
    47f0:	407e      	eors	r6, r7
    47f2:	9b01      	ldr	r3, [sp, #4]
    47f4:	3109      	adds	r1, #9
    47f6:	41cb      	rors	r3, r1
    47f8:	405e      	eors	r6, r3
    47fa:	4653      	mov	r3, sl
    47fc:	9901      	ldr	r1, [sp, #4]
    47fe:	430b      	orrs	r3, r1
    4800:	001f      	movs	r7, r3
    4802:	9b00      	ldr	r3, [sp, #0]
    4804:	401f      	ands	r7, r3
    4806:	4653      	mov	r3, sl
    4808:	400b      	ands	r3, r1
    480a:	431f      	orrs	r7, r3
    480c:	19f6      	adds	r6, r6, r7
    480e:	18b7      	adds	r7, r6, r2
    4810:	9703      	str	r7, [sp, #12]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    4812:	6a02      	ldr	r2, [r0, #32]
    4814:	9e06      	ldr	r6, [sp, #24]
    4816:	0033      	movs	r3, r6
    4818:	2111      	movs	r1, #17
    481a:	41cb      	rors	r3, r1
    481c:	469c      	mov	ip, r3
    481e:	0033      	movs	r3, r6
    4820:	3102      	adds	r1, #2
    4822:	41cb      	rors	r3, r1
    4824:	001f      	movs	r7, r3
    4826:	4663      	mov	r3, ip
    4828:	405f      	eors	r7, r3
    482a:	0ab3      	lsrs	r3, r6, #10
    482c:	407b      	eors	r3, r7
    482e:	9f05      	ldr	r7, [sp, #20]
    4830:	69c1      	ldr	r1, [r0, #28]
    4832:	468c      	mov	ip, r1
    4834:	4467      	add	r7, ip
    4836:	19db      	adds	r3, r3, r7
    4838:	0017      	movs	r7, r2
    483a:	2107      	movs	r1, #7
    483c:	41cf      	rors	r7, r1
    483e:	46bc      	mov	ip, r7
    4840:	0017      	movs	r7, r2
    4842:	310b      	adds	r1, #11
    4844:	41cf      	rors	r7, r1
    4846:	4661      	mov	r1, ip
    4848:	404f      	eors	r7, r1
    484a:	08d2      	lsrs	r2, r2, #3
    484c:	4057      	eors	r7, r2
    484e:	19db      	adds	r3, r3, r7
    4850:	4641      	mov	r1, r8
    4852:	69c9      	ldr	r1, [r1, #28]
    4854:	185f      	adds	r7, r3, r1
    4856:	444f      	add	r7, r9
    4858:	0022      	movs	r2, r4
    485a:	9e04      	ldr	r6, [sp, #16]
    485c:	4072      	eors	r2, r6
    485e:	402a      	ands	r2, r5
    4860:	4062      	eors	r2, r4
    4862:	18ba      	adds	r2, r7, r2
    4864:	65c3      	str	r3, [r0, #92]	; 0x5c
    4866:	002f      	movs	r7, r5
    4868:	2306      	movs	r3, #6
    486a:	41df      	rors	r7, r3
    486c:	002b      	movs	r3, r5
    486e:	210b      	movs	r1, #11
    4870:	41cb      	rors	r3, r1
    4872:	407b      	eors	r3, r7
    4874:	002f      	movs	r7, r5
    4876:	310e      	adds	r1, #14
    4878:	41cf      	rors	r7, r1
    487a:	407b      	eors	r3, r7
    487c:	189a      	adds	r2, r3, r2
    487e:	9b00      	ldr	r3, [sp, #0]
    4880:	4699      	mov	r9, r3
    4882:	4491      	add	r9, r2
    4884:	9f03      	ldr	r7, [sp, #12]
    4886:	003b      	movs	r3, r7
    4888:	3917      	subs	r1, #23
    488a:	41cb      	rors	r3, r1
    488c:	003c      	movs	r4, r7
    488e:	310b      	adds	r1, #11
    4890:	41cc      	rors	r4, r1
    4892:	4063      	eors	r3, r4
    4894:	003c      	movs	r4, r7
    4896:	3109      	adds	r1, #9
    4898:	41cc      	rors	r4, r1
    489a:	4063      	eors	r3, r4
    489c:	9e01      	ldr	r6, [sp, #4]
    489e:	0034      	movs	r4, r6
    48a0:	433c      	orrs	r4, r7
    48a2:	4651      	mov	r1, sl
    48a4:	400c      	ands	r4, r1
    48a6:	4037      	ands	r7, r6
    48a8:	433c      	orrs	r4, r7
    48aa:	191b      	adds	r3, r3, r4
    48ac:	469b      	mov	fp, r3
    48ae:	4493      	add	fp, r2
    48b0:	2320      	movs	r3, #32
    48b2:	469c      	mov	ip, r3
    48b4:	44e0      	add	r8, ip
    48b6:	3020      	adds	r0, #32
    for( i = 16; i < 64; i += 8 )
    48b8:	ab40      	add	r3, sp, #256	; 0x100
    48ba:	4298      	cmp	r0, r3
    48bc:	d000      	beq.n	48c0 <utils_sha256_process+0xa88>
    48be:	e547      	b.n	4350 <utils_sha256_process+0x518>
    48c0:	464b      	mov	r3, r9
    48c2:	465a      	mov	r2, fp
    48c4:	9e03      	ldr	r6, [sp, #12]
    48c6:	4651      	mov	r1, sl
    48c8:	9801      	ldr	r0, [sp, #4]
    48ca:	4682      	mov	sl, r0
    48cc:	9802      	ldr	r0, [sp, #8]
    48ce:	900f      	str	r0, [sp, #60]	; 0x3c
    48d0:	930c      	str	r3, [sp, #48]	; 0x30
    48d2:	9b04      	ldr	r3, [sp, #16]
    48d4:	930e      	str	r3, [sp, #56]	; 0x38
    48d6:	950d      	str	r5, [sp, #52]	; 0x34
    48d8:	9208      	str	r2, [sp, #32]
    48da:	9609      	str	r6, [sp, #36]	; 0x24
    48dc:	4653      	mov	r3, sl
    48de:	930a      	str	r3, [sp, #40]	; 0x28
    48e0:	910b      	str	r1, [sp, #44]	; 0x2c
    48e2:	9807      	ldr	r0, [sp, #28]
    48e4:	0002      	movs	r2, r0
    48e6:	3208      	adds	r2, #8
    48e8:	a908      	add	r1, sp, #32
    48ea:	3028      	adds	r0, #40	; 0x28
    }
#endif /* INFRA_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
    48ec:	c908      	ldmia	r1!, {r3}
    48ee:	6814      	ldr	r4, [r2, #0]
    48f0:	46a4      	mov	ip, r4
    48f2:	4463      	add	r3, ip
    48f4:	c208      	stmia	r2!, {r3}
    for( i = 0; i < 8; i++ )
    48f6:	4282      	cmp	r2, r0
    48f8:	d1f8      	bne.n	48ec <utils_sha256_process+0xab4>
}
    48fa:	b051      	add	sp, #324	; 0x144
    48fc:	bc3c      	pop	{r2, r3, r4, r5}
    48fe:	4690      	mov	r8, r2
    4900:	4699      	mov	r9, r3
    4902:	46a2      	mov	sl, r4
    4904:	46ab      	mov	fp, r5
    4906:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004908 <utils_sha256_update>:
void utils_sha256_update(iot_sha256_context *ctx, const unsigned char *input, uint32_t ilen)
{
    4908:	b5f0      	push	{r4, r5, r6, r7, lr}
    490a:	46d6      	mov	lr, sl
    490c:	464f      	mov	r7, r9
    490e:	b580      	push	{r7, lr}
    4910:	b083      	sub	sp, #12
    4912:	0006      	movs	r6, r0
    4914:	9101      	str	r1, [sp, #4]
    4916:	1e17      	subs	r7, r2, #0
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
    4918:	d02b      	beq.n	4972 <utils_sha256_update+0x6a>
        return;

    left = ctx->total[0] & 0x3F;
    491a:	6803      	ldr	r3, [r0, #0]
    491c:	203f      	movs	r0, #63	; 0x3f
    491e:	4018      	ands	r0, r3
    4920:	4682      	mov	sl, r0
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
    4922:	18d3      	adds	r3, r2, r3
    4924:	6033      	str	r3, [r6, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
    4926:	429a      	cmp	r2, r3
    4928:	d902      	bls.n	4930 <utils_sha256_update+0x28>
        ctx->total[1]++;
    492a:	6873      	ldr	r3, [r6, #4]
    492c:	3301      	adds	r3, #1
    492e:	6073      	str	r3, [r6, #4]

    if( left && ilen >= fill )
    4930:	4653      	mov	r3, sl
    4932:	2b00      	cmp	r3, #0
    4934:	d003      	beq.n	493e <utils_sha256_update+0x36>
    fill = 64 - left;
    4936:	2440      	movs	r4, #64	; 0x40
    4938:	1ae4      	subs	r4, r4, r3
    if( left && ilen >= fill )
    493a:	42a7      	cmp	r7, r4
    493c:	d21e      	bcs.n	497c <utils_sha256_update+0x74>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
    493e:	2f3f      	cmp	r7, #63	; 0x3f
    4940:	d935      	bls.n	49ae <utils_sha256_update+0xa6>
        left = 0;
    4942:	003d      	movs	r5, r7
    4944:	9c01      	ldr	r4, [sp, #4]
    {
        utils_sha256_process( ctx, input );
    4946:	4b1e      	ldr	r3, [pc, #120]	; (49c0 <utils_sha256_update+0xb8>)
    4948:	4699      	mov	r9, r3
    494a:	0021      	movs	r1, r4
    494c:	0030      	movs	r0, r6
    494e:	47c8      	blx	r9
        input += 64;
    4950:	3440      	adds	r4, #64	; 0x40
        ilen  -= 64;
    4952:	3d40      	subs	r5, #64	; 0x40
    while( ilen >= 64 )
    4954:	2d3f      	cmp	r5, #63	; 0x3f
    4956:	d8f8      	bhi.n	494a <utils_sha256_update+0x42>
    4958:	003b      	movs	r3, r7
    495a:	3b40      	subs	r3, #64	; 0x40
    495c:	223f      	movs	r2, #63	; 0x3f
    495e:	4393      	bics	r3, r2
    4960:	3340      	adds	r3, #64	; 0x40
    4962:	9901      	ldr	r1, [sp, #4]
    4964:	468c      	mov	ip, r1
    4966:	449c      	add	ip, r3
    4968:	4663      	mov	r3, ip
    496a:	9301      	str	r3, [sp, #4]
    496c:	4017      	ands	r7, r2
    }

    if( ilen > 0 )
    496e:	2f00      	cmp	r7, #0
    4970:	d11d      	bne.n	49ae <utils_sha256_update+0xa6>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
}
    4972:	b003      	add	sp, #12
    4974:	bc0c      	pop	{r2, r3}
    4976:	4691      	mov	r9, r2
    4978:	469a      	mov	sl, r3
    497a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        memcpy( (void *) (ctx->buffer + left), input, fill );
    497c:	0035      	movs	r5, r6
    497e:	3528      	adds	r5, #40	; 0x28
    4980:	18e8      	adds	r0, r5, r3
    4982:	0022      	movs	r2, r4
    4984:	9901      	ldr	r1, [sp, #4]
    4986:	4b0f      	ldr	r3, [pc, #60]	; (49c4 <utils_sha256_update+0xbc>)
    4988:	4798      	blx	r3
        utils_sha256_process( ctx, ctx->buffer );
    498a:	0029      	movs	r1, r5
    498c:	0030      	movs	r0, r6
    498e:	4b0c      	ldr	r3, [pc, #48]	; (49c0 <utils_sha256_update+0xb8>)
    4990:	4798      	blx	r3
        input += fill;
    4992:	9b01      	ldr	r3, [sp, #4]
    4994:	469c      	mov	ip, r3
    4996:	44a4      	add	ip, r4
    4998:	4663      	mov	r3, ip
    499a:	9301      	str	r3, [sp, #4]
        ilen  -= fill;
    499c:	1b3f      	subs	r7, r7, r4
    while( ilen >= 64 )
    499e:	2f3f      	cmp	r7, #63	; 0x3f
    49a0:	d902      	bls.n	49a8 <utils_sha256_update+0xa0>
        left = 0;
    49a2:	2300      	movs	r3, #0
    49a4:	469a      	mov	sl, r3
    49a6:	e7cc      	b.n	4942 <utils_sha256_update+0x3a>
    49a8:	2300      	movs	r3, #0
    49aa:	469a      	mov	sl, r3
    49ac:	e7df      	b.n	496e <utils_sha256_update+0x66>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    49ae:	0030      	movs	r0, r6
    49b0:	3028      	adds	r0, #40	; 0x28
    49b2:	4450      	add	r0, sl
    49b4:	003a      	movs	r2, r7
    49b6:	9901      	ldr	r1, [sp, #4]
    49b8:	4b02      	ldr	r3, [pc, #8]	; (49c4 <utils_sha256_update+0xbc>)
    49ba:	4798      	blx	r3
    49bc:	e7d9      	b.n	4972 <utils_sha256_update+0x6a>
    49be:	46c0      	nop			; (mov r8, r8)
    49c0:	00003e39 	.word	0x00003e39
    49c4:	000085b7 	.word	0x000085b7

000049c8 <utils_sha256_finish>:
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

void utils_sha256_finish(iot_sha256_context *ctx, uint8_t output[32])
{
    49c8:	b570      	push	{r4, r5, r6, lr}
    49ca:	b082      	sub	sp, #8
    49cc:	0004      	movs	r4, r0
    49ce:	000d      	movs	r5, r1
    uint32_t last, padn;
    uint32_t high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
    49d0:	6800      	ldr	r0, [r0, #0]
         | ( ctx->total[1] <<  3 );
    49d2:	6863      	ldr	r3, [r4, #4]
    49d4:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
    49d6:	0f42      	lsrs	r2, r0, #29
    49d8:	4313      	orrs	r3, r2
    low  = ( ctx->total[0] <<  3 );
    49da:	00c1      	lsls	r1, r0, #3

    PUT_UINT32_BE( high, msglen, 0 );
    49dc:	0e1a      	lsrs	r2, r3, #24
    49de:	466e      	mov	r6, sp
    49e0:	7032      	strb	r2, [r6, #0]
    49e2:	0c1a      	lsrs	r2, r3, #16
    49e4:	7072      	strb	r2, [r6, #1]
    49e6:	0a1a      	lsrs	r2, r3, #8
    49e8:	70b2      	strb	r2, [r6, #2]
    49ea:	70f3      	strb	r3, [r6, #3]
    PUT_UINT32_BE( low,  msglen, 4 );
    49ec:	0e0b      	lsrs	r3, r1, #24
    49ee:	7133      	strb	r3, [r6, #4]
    49f0:	0c0b      	lsrs	r3, r1, #16
    49f2:	7173      	strb	r3, [r6, #5]
    49f4:	0a0b      	lsrs	r3, r1, #8
    49f6:	71b3      	strb	r3, [r6, #6]
    49f8:	71f1      	strb	r1, [r6, #7]

    last = ctx->total[0] & 0x3F;
    49fa:	223f      	movs	r2, #63	; 0x3f
    49fc:	4002      	ands	r2, r0
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
    49fe:	2a37      	cmp	r2, #55	; 0x37
    4a00:	d85a      	bhi.n	4ab8 <utils_sha256_finish+0xf0>
    4a02:	2338      	movs	r3, #56	; 0x38
    4a04:	1a9a      	subs	r2, r3, r2

    utils_sha256_update( ctx, sha256_padding, padn );
    4a06:	492e      	ldr	r1, [pc, #184]	; (4ac0 <utils_sha256_finish+0xf8>)
    4a08:	0020      	movs	r0, r4
    4a0a:	4e2e      	ldr	r6, [pc, #184]	; (4ac4 <utils_sha256_finish+0xfc>)
    4a0c:	47b0      	blx	r6
    utils_sha256_update( ctx, msglen, 8 );
    4a0e:	2208      	movs	r2, #8
    4a10:	4669      	mov	r1, sp
    4a12:	0020      	movs	r0, r4
    4a14:	47b0      	blx	r6

    PUT_UINT32_BE( ctx->state[0], output,  0 );
    4a16:	7ae3      	ldrb	r3, [r4, #11]
    4a18:	702b      	strb	r3, [r5, #0]
    4a1a:	8963      	ldrh	r3, [r4, #10]
    4a1c:	706b      	strb	r3, [r5, #1]
    4a1e:	68a3      	ldr	r3, [r4, #8]
    4a20:	0a1b      	lsrs	r3, r3, #8
    4a22:	70ab      	strb	r3, [r5, #2]
    4a24:	7a23      	ldrb	r3, [r4, #8]
    4a26:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    4a28:	7be3      	ldrb	r3, [r4, #15]
    4a2a:	712b      	strb	r3, [r5, #4]
    4a2c:	89e3      	ldrh	r3, [r4, #14]
    4a2e:	716b      	strb	r3, [r5, #5]
    4a30:	68e3      	ldr	r3, [r4, #12]
    4a32:	0a1b      	lsrs	r3, r3, #8
    4a34:	71ab      	strb	r3, [r5, #6]
    4a36:	7b23      	ldrb	r3, [r4, #12]
    4a38:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    4a3a:	7ce3      	ldrb	r3, [r4, #19]
    4a3c:	722b      	strb	r3, [r5, #8]
    4a3e:	8a63      	ldrh	r3, [r4, #18]
    4a40:	726b      	strb	r3, [r5, #9]
    4a42:	6923      	ldr	r3, [r4, #16]
    4a44:	0a1b      	lsrs	r3, r3, #8
    4a46:	72ab      	strb	r3, [r5, #10]
    4a48:	7c23      	ldrb	r3, [r4, #16]
    4a4a:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    4a4c:	7de3      	ldrb	r3, [r4, #23]
    4a4e:	732b      	strb	r3, [r5, #12]
    4a50:	8ae3      	ldrh	r3, [r4, #22]
    4a52:	736b      	strb	r3, [r5, #13]
    4a54:	6963      	ldr	r3, [r4, #20]
    4a56:	0a1b      	lsrs	r3, r3, #8
    4a58:	73ab      	strb	r3, [r5, #14]
    4a5a:	7d23      	ldrb	r3, [r4, #20]
    4a5c:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    4a5e:	7ee3      	ldrb	r3, [r4, #27]
    4a60:	742b      	strb	r3, [r5, #16]
    4a62:	8b63      	ldrh	r3, [r4, #26]
    4a64:	746b      	strb	r3, [r5, #17]
    4a66:	69a3      	ldr	r3, [r4, #24]
    4a68:	0a1b      	lsrs	r3, r3, #8
    4a6a:	74ab      	strb	r3, [r5, #18]
    4a6c:	7e23      	ldrb	r3, [r4, #24]
    4a6e:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    4a70:	7fe3      	ldrb	r3, [r4, #31]
    4a72:	752b      	strb	r3, [r5, #20]
    4a74:	8be3      	ldrh	r3, [r4, #30]
    4a76:	756b      	strb	r3, [r5, #21]
    4a78:	69e3      	ldr	r3, [r4, #28]
    4a7a:	0a1b      	lsrs	r3, r3, #8
    4a7c:	75ab      	strb	r3, [r5, #22]
    4a7e:	7f23      	ldrb	r3, [r4, #28]
    4a80:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    4a82:	6a23      	ldr	r3, [r4, #32]
    4a84:	0e1b      	lsrs	r3, r3, #24
    4a86:	762b      	strb	r3, [r5, #24]
    4a88:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    4a8a:	766b      	strb	r3, [r5, #25]
    4a8c:	6a23      	ldr	r3, [r4, #32]
    4a8e:	0a1b      	lsrs	r3, r3, #8
    4a90:	76ab      	strb	r3, [r5, #26]
    4a92:	2320      	movs	r3, #32
    4a94:	18e3      	adds	r3, r4, r3
    4a96:	781b      	ldrb	r3, [r3, #0]
    4a98:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
    4a9a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    4a9c:	2b00      	cmp	r3, #0
    4a9e:	d109      	bne.n	4ab4 <utils_sha256_finish+0xec>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    4aa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4aa2:	0e1b      	lsrs	r3, r3, #24
    4aa4:	772b      	strb	r3, [r5, #28]
    4aa6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    4aa8:	776b      	strb	r3, [r5, #29]
    4aaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4aac:	0a1b      	lsrs	r3, r3, #8
    4aae:	77ab      	strb	r3, [r5, #30]
    4ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4ab2:	77eb      	strb	r3, [r5, #31]
}
    4ab4:	b002      	add	sp, #8
    4ab6:	bd70      	pop	{r4, r5, r6, pc}
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
    4ab8:	2378      	movs	r3, #120	; 0x78
    4aba:	1a9a      	subs	r2, r3, r2
    4abc:	e7a3      	b.n	4a06 <utils_sha256_finish+0x3e>
    4abe:	46c0      	nop			; (mov r8, r8)
    4ac0:	0000a7dc 	.word	0x0000a7dc
    4ac4:	00004909 	.word	0x00004909

00004ac8 <utils_hmac_sha256>:
    utils_sha256_finish(&ctx, output);
    utils_sha256_free(&ctx);
}

void utils_hmac_sha256(const uint8_t *msg, uint32_t msg_len, const uint8_t *key, uint32_t key_len, uint8_t output[32])
{
    4ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4aca:	46c6      	mov	lr, r8
    4acc:	b500      	push	{lr}
    4ace:	b0be      	sub	sp, #248	; 0xf8
    4ad0:	0005      	movs	r5, r0
    4ad2:	9101      	str	r1, [sp, #4]
    4ad4:	0016      	movs	r6, r2
    4ad6:	001f      	movs	r7, r3
    iot_sha256_context context;
    uint8_t k_ipad[SHA256_KEY_IOPAD_SIZE];    /* inner padding - key XORd with ipad  */
    uint8_t k_opad[SHA256_KEY_IOPAD_SIZE];    /* outer padding - key XORd with opad */
    int32_t i;

    if ((NULL == msg) || (NULL == key) || (NULL == output)) {
    4ad8:	2800      	cmp	r0, #0
    4ada:	d006      	beq.n	4aea <utils_hmac_sha256+0x22>
    4adc:	2a00      	cmp	r2, #0
    4ade:	d004      	beq.n	4aea <utils_hmac_sha256+0x22>
    4ae0:	9b44      	ldr	r3, [sp, #272]	; 0x110
    4ae2:	2b00      	cmp	r3, #0
    4ae4:	d001      	beq.n	4aea <utils_hmac_sha256+0x22>
        return;
    }

    if (key_len > SHA256_KEY_IOPAD_SIZE) {
    4ae6:	2f40      	cmp	r7, #64	; 0x40
    4ae8:	d903      	bls.n	4af2 <utils_hmac_sha256+0x2a>
    utils_sha256_init(&context);                              /* init context for 2nd pass */
    utils_sha256_starts(&context);                            /* setup context for 2nd pass */
    utils_sha256_update(&context, k_opad, SHA256_KEY_IOPAD_SIZE);    /* start with outer pad */
    utils_sha256_update(&context, output, SHA256_DIGEST_SIZE);     /* then results of 1st hash */
    utils_sha256_finish(&context, output);                       /* finish up 2nd pass */
}
    4aea:	b03e      	add	sp, #248	; 0xf8
    4aec:	bc04      	pop	{r2}
    4aee:	4690      	mov	r8, r2
    4af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memset(k_ipad, 0, sizeof(k_ipad));
    4af2:	2240      	movs	r2, #64	; 0x40
    4af4:	2100      	movs	r1, #0
    4af6:	a813      	add	r0, sp, #76	; 0x4c
    4af8:	4c20      	ldr	r4, [pc, #128]	; (4b7c <utils_hmac_sha256+0xb4>)
    4afa:	47a0      	blx	r4
    memset(k_opad, 0, sizeof(k_opad));
    4afc:	2240      	movs	r2, #64	; 0x40
    4afe:	2100      	movs	r1, #0
    4b00:	a803      	add	r0, sp, #12
    4b02:	47a0      	blx	r4
    memcpy(k_ipad, key, key_len);
    4b04:	003a      	movs	r2, r7
    4b06:	0031      	movs	r1, r6
    4b08:	a813      	add	r0, sp, #76	; 0x4c
    4b0a:	4c1d      	ldr	r4, [pc, #116]	; (4b80 <utils_hmac_sha256+0xb8>)
    4b0c:	47a0      	blx	r4
    memcpy(k_opad, key, key_len);
    4b0e:	003a      	movs	r2, r7
    4b10:	0031      	movs	r1, r6
    4b12:	a803      	add	r0, sp, #12
    4b14:	47a0      	blx	r4
    for (i = 0; i < SHA256_KEY_IOPAD_SIZE; i++) {
    4b16:	2300      	movs	r3, #0
        k_ipad[i] ^= 0x36;
    4b18:	a813      	add	r0, sp, #76	; 0x4c
    4b1a:	2736      	movs	r7, #54	; 0x36
        k_opad[i] ^= 0x5c;
    4b1c:	a903      	add	r1, sp, #12
    4b1e:	265c      	movs	r6, #92	; 0x5c
        k_ipad[i] ^= 0x36;
    4b20:	5c1a      	ldrb	r2, [r3, r0]
    4b22:	407a      	eors	r2, r7
    4b24:	541a      	strb	r2, [r3, r0]
        k_opad[i] ^= 0x5c;
    4b26:	5c5a      	ldrb	r2, [r3, r1]
    4b28:	4072      	eors	r2, r6
    4b2a:	545a      	strb	r2, [r3, r1]
    for (i = 0; i < SHA256_KEY_IOPAD_SIZE; i++) {
    4b2c:	3301      	adds	r3, #1
    4b2e:	2b40      	cmp	r3, #64	; 0x40
    4b30:	d1f6      	bne.n	4b20 <utils_hmac_sha256+0x58>
    utils_sha256_init(&context);                                      /* init context for 1st pass */
    4b32:	a823      	add	r0, sp, #140	; 0x8c
    4b34:	4b13      	ldr	r3, [pc, #76]	; (4b84 <utils_hmac_sha256+0xbc>)
    4b36:	4698      	mov	r8, r3
    4b38:	4798      	blx	r3
    utils_sha256_starts(&context);                                    /* setup context for 1st pass */
    4b3a:	a823      	add	r0, sp, #140	; 0x8c
    4b3c:	4f12      	ldr	r7, [pc, #72]	; (4b88 <utils_hmac_sha256+0xc0>)
    4b3e:	47b8      	blx	r7
    utils_sha256_update(&context, k_ipad, SHA256_KEY_IOPAD_SIZE);     /* start with inner pad */
    4b40:	2240      	movs	r2, #64	; 0x40
    4b42:	a913      	add	r1, sp, #76	; 0x4c
    4b44:	a823      	add	r0, sp, #140	; 0x8c
    4b46:	4e11      	ldr	r6, [pc, #68]	; (4b8c <utils_hmac_sha256+0xc4>)
    4b48:	47b0      	blx	r6
    utils_sha256_update(&context, msg, msg_len);                      /* then text of datagram */	
    4b4a:	9a01      	ldr	r2, [sp, #4]
    4b4c:	0029      	movs	r1, r5
    4b4e:	a823      	add	r0, sp, #140	; 0x8c
    4b50:	47b0      	blx	r6
    utils_sha256_finish(&context, output);                            /* finish up 1st pass */
    4b52:	9944      	ldr	r1, [sp, #272]	; 0x110
    4b54:	a823      	add	r0, sp, #140	; 0x8c
    4b56:	4c0e      	ldr	r4, [pc, #56]	; (4b90 <utils_hmac_sha256+0xc8>)
    4b58:	47a0      	blx	r4
    utils_sha256_init(&context);                              /* init context for 2nd pass */
    4b5a:	a823      	add	r0, sp, #140	; 0x8c
    4b5c:	47c0      	blx	r8
    utils_sha256_starts(&context);                            /* setup context for 2nd pass */
    4b5e:	a823      	add	r0, sp, #140	; 0x8c
    4b60:	47b8      	blx	r7
    utils_sha256_update(&context, k_opad, SHA256_KEY_IOPAD_SIZE);    /* start with outer pad */
    4b62:	2240      	movs	r2, #64	; 0x40
    4b64:	a903      	add	r1, sp, #12
    4b66:	a823      	add	r0, sp, #140	; 0x8c
    4b68:	47b0      	blx	r6
    utils_sha256_update(&context, output, SHA256_DIGEST_SIZE);     /* then results of 1st hash */
    4b6a:	2220      	movs	r2, #32
    4b6c:	9944      	ldr	r1, [sp, #272]	; 0x110
    4b6e:	a823      	add	r0, sp, #140	; 0x8c
    4b70:	47b0      	blx	r6
    utils_sha256_finish(&context, output);                       /* finish up 2nd pass */
    4b72:	9944      	ldr	r1, [sp, #272]	; 0x110
    4b74:	a823      	add	r0, sp, #140	; 0x8c
    4b76:	47a0      	blx	r4
    4b78:	e7b7      	b.n	4aea <utils_hmac_sha256+0x22>
    4b7a:	46c0      	nop			; (mov r8, r8)
    4b7c:	000085c9 	.word	0x000085c9
    4b80:	000085b7 	.word	0x000085b7
    4b84:	00003ddd 	.word	0x00003ddd
    4b88:	00003ded 	.word	0x00003ded
    4b8c:	00004909 	.word	0x00004909
    4b90:	000049c9 	.word	0x000049c9

00004b94 <infra_hex2str>:
    hex = hex & 0xF;
    return (int8_t)(hex < 10 ? '0' + hex : hex - 10 + 'a');
}

void infra_hex2str(uint8_t *input, uint16_t input_len, char *output)
{
    4b94:	b530      	push	{r4, r5, lr}
    char *zEncode = "0123456789ABCDEF";
    int i = 0, j = 0;

    for (i = 0; i < input_len; i++) {
    4b96:	2900      	cmp	r1, #0
    4b98:	dd0f      	ble.n	4bba <infra_hex2str+0x26>
    4b9a:	0003      	movs	r3, r0
    4b9c:	1841      	adds	r1, r0, r1
        output[j++] = zEncode[(input[i] >> 4) & 0xf];
    4b9e:	4d07      	ldr	r5, [pc, #28]	; (4bbc <infra_hex2str+0x28>)
        output[j++] = zEncode[(input[i]) & 0xf];
    4ba0:	200f      	movs	r0, #15
        output[j++] = zEncode[(input[i] >> 4) & 0xf];
    4ba2:	781c      	ldrb	r4, [r3, #0]
    4ba4:	0924      	lsrs	r4, r4, #4
    4ba6:	5d2c      	ldrb	r4, [r5, r4]
    4ba8:	7014      	strb	r4, [r2, #0]
        output[j++] = zEncode[(input[i]) & 0xf];
    4baa:	781c      	ldrb	r4, [r3, #0]
    4bac:	4004      	ands	r4, r0
    4bae:	5d2c      	ldrb	r4, [r5, r4]
    4bb0:	7054      	strb	r4, [r2, #1]
    4bb2:	3301      	adds	r3, #1
    4bb4:	3202      	adds	r2, #2
    for (i = 0; i < input_len; i++) {
    4bb6:	428b      	cmp	r3, r1
    4bb8:	d1f3      	bne.n	4ba2 <infra_hex2str+0xe>
    }
}
    4bba:	bd30      	pop	{r4, r5, pc}
    4bbc:	0000a81c 	.word	0x0000a81c

00004bc0 <infra_strtok>:
        output[--i] = tmp[j++];
    }while(i > 0);
}

char *infra_strtok(char *str, const char *delim)
{
    4bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bc2:	46de      	mov	lr, fp
    4bc4:	4657      	mov	r7, sl
    4bc6:	464e      	mov	r6, r9
    4bc8:	4645      	mov	r5, r8
    4bca:	b5e0      	push	{r5, r6, r7, lr}
    4bcc:	b085      	sub	sp, #20
    4bce:	1e04      	subs	r4, r0, #0
    4bd0:	9102      	str	r1, [sp, #8]
    int only_delim = 1;
    static char *pos = NULL;
    static char *target = NULL;

    pos = (str == NULL)?(pos):(str);
    4bd2:	d016      	beq.n	4c02 <infra_strtok+0x42>
    4bd4:	4b32      	ldr	r3, [pc, #200]	; (4ca0 <infra_strtok+0xe0>)
    4bd6:	6018      	str	r0, [r3, #0]

    if (pos == NULL || delim == NULL ||
    4bd8:	9f02      	ldr	r7, [sp, #8]
    4bda:	2f00      	cmp	r7, #0
    4bdc:	d05a      	beq.n	4c94 <infra_strtok+0xd4>
        strlen(pos) <= strlen(delim)) {
    4bde:	0020      	movs	r0, r4
    4be0:	4d30      	ldr	r5, [pc, #192]	; (4ca4 <infra_strtok+0xe4>)
    4be2:	47a8      	blx	r5
    4be4:	0006      	movs	r6, r0
    4be6:	0038      	movs	r0, r7
    4be8:	47a8      	blx	r5
    if (pos == NULL || delim == NULL ||
    4bea:	4286      	cmp	r6, r0
    4bec:	d954      	bls.n	4c98 <infra_strtok+0xd8>
        return NULL;
    }

    target = pos;
    4bee:	4b2c      	ldr	r3, [pc, #176]	; (4ca0 <infra_strtok+0xe0>)
    4bf0:	605c      	str	r4, [r3, #4]
    int only_delim = 1;
    4bf2:	2301      	movs	r3, #1
    4bf4:	9303      	str	r3, [sp, #12]
    while (strlen(pos) >= strlen(delim)) {
    4bf6:	4b2a      	ldr	r3, [pc, #168]	; (4ca0 <infra_strtok+0xe0>)
    4bf8:	4699      	mov	r9, r3
                return NULL;
            }
            return target;
        }

        if (target == pos) {
    4bfa:	469b      	mov	fp, r3
            pos += strlen(delim);
    4bfc:	469a      	mov	sl, r3
            pos++;
    4bfe:	4698      	mov	r8, r3
    while (strlen(pos) >= strlen(delim)) {
    4c00:	e011      	b.n	4c26 <infra_strtok+0x66>
    pos = (str == NULL)?(pos):(str);
    4c02:	4b27      	ldr	r3, [pc, #156]	; (4ca0 <infra_strtok+0xe0>)
    4c04:	681c      	ldr	r4, [r3, #0]
    if (pos == NULL || delim == NULL ||
    4c06:	2c00      	cmp	r4, #0
    4c08:	d1e6      	bne.n	4bd8 <infra_strtok+0x18>
        return NULL;
    4c0a:	0020      	movs	r0, r4
    4c0c:	e03b      	b.n	4c86 <infra_strtok+0xc6>
        if (strlen(pos) == strlen(delim)) {
    4c0e:	42be      	cmp	r6, r7
    4c10:	d021      	beq.n	4c56 <infra_strtok+0x96>
        if (target == pos) {
    4c12:	465b      	mov	r3, fp
    4c14:	685b      	ldr	r3, [r3, #4]
    4c16:	429c      	cmp	r4, r3
    4c18:	d128      	bne.n	4c6c <infra_strtok+0xac>
            pos += strlen(delim);
    4c1a:	9b01      	ldr	r3, [sp, #4]
    4c1c:	469c      	mov	ip, r3
    4c1e:	4464      	add	r4, ip
    4c20:	4653      	mov	r3, sl
    4c22:	601c      	str	r4, [r3, #0]
            target = pos;
    4c24:	605c      	str	r4, [r3, #4]
    while (strlen(pos) >= strlen(delim)) {
    4c26:	464b      	mov	r3, r9
    4c28:	681c      	ldr	r4, [r3, #0]
    4c2a:	0020      	movs	r0, r4
    4c2c:	47a8      	blx	r5
    4c2e:	0006      	movs	r6, r0
    4c30:	9802      	ldr	r0, [sp, #8]
    4c32:	47a8      	blx	r5
    4c34:	9001      	str	r0, [sp, #4]
    4c36:	0007      	movs	r7, r0
    4c38:	4286      	cmp	r6, r0
    4c3a:	d322      	bcc.n	4c82 <infra_strtok+0xc2>
        if (memcmp(pos,delim,strlen(delim)) != 0) {
    4c3c:	9a01      	ldr	r2, [sp, #4]
    4c3e:	9902      	ldr	r1, [sp, #8]
    4c40:	0020      	movs	r0, r4
    4c42:	4b19      	ldr	r3, [pc, #100]	; (4ca8 <infra_strtok+0xe8>)
    4c44:	4798      	blx	r3
    4c46:	2800      	cmp	r0, #0
    4c48:	d0e1      	beq.n	4c0e <infra_strtok+0x4e>
            pos++;
    4c4a:	3401      	adds	r4, #1
    4c4c:	4643      	mov	r3, r8
    4c4e:	601c      	str	r4, [r3, #0]
            only_delim = 0;
    4c50:	2300      	movs	r3, #0
    4c52:	9303      	str	r3, [sp, #12]
            continue;
    4c54:	e7e7      	b.n	4c26 <infra_strtok+0x66>
            memset(pos,0,strlen(delim));
    4c56:	0032      	movs	r2, r6
    4c58:	2100      	movs	r1, #0
    4c5a:	0020      	movs	r0, r4
    4c5c:	4b13      	ldr	r3, [pc, #76]	; (4cac <infra_strtok+0xec>)
    4c5e:	4798      	blx	r3
            if (only_delim) {
    4c60:	9b03      	ldr	r3, [sp, #12]
    4c62:	2b00      	cmp	r3, #0
    4c64:	d11a      	bne.n	4c9c <infra_strtok+0xdc>
            return target;
    4c66:	4b0e      	ldr	r3, [pc, #56]	; (4ca0 <infra_strtok+0xe0>)
    4c68:	6858      	ldr	r0, [r3, #4]
    4c6a:	e00c      	b.n	4c86 <infra_strtok+0xc6>
        }else{
            memset(pos,0,strlen(delim));
    4c6c:	003a      	movs	r2, r7
    4c6e:	2100      	movs	r1, #0
    4c70:	0020      	movs	r0, r4
    4c72:	4b0e      	ldr	r3, [pc, #56]	; (4cac <infra_strtok+0xec>)
    4c74:	4798      	blx	r3
            pos += strlen(delim);
    4c76:	9802      	ldr	r0, [sp, #8]
    4c78:	4b0a      	ldr	r3, [pc, #40]	; (4ca4 <infra_strtok+0xe4>)
    4c7a:	4798      	blx	r3
    4c7c:	1824      	adds	r4, r4, r0
    4c7e:	4b08      	ldr	r3, [pc, #32]	; (4ca0 <infra_strtok+0xe0>)
    4c80:	601c      	str	r4, [r3, #0]
            break;
        }
    }

    if (target) {
    4c82:	4b07      	ldr	r3, [pc, #28]	; (4ca0 <infra_strtok+0xe0>)
    4c84:	6858      	ldr	r0, [r3, #4]
        return target;
    }

    return NULL;
}
    4c86:	b005      	add	sp, #20
    4c88:	bc3c      	pop	{r2, r3, r4, r5}
    4c8a:	4690      	mov	r8, r2
    4c8c:	4699      	mov	r9, r3
    4c8e:	46a2      	mov	sl, r4
    4c90:	46ab      	mov	fp, r5
    4c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return NULL;
    4c94:	2000      	movs	r0, #0
    4c96:	e7f6      	b.n	4c86 <infra_strtok+0xc6>
    4c98:	2000      	movs	r0, #0
    4c9a:	e7f4      	b.n	4c86 <infra_strtok+0xc6>
                return NULL;
    4c9c:	2000      	movs	r0, #0
    4c9e:	e7f2      	b.n	4c86 <infra_strtok+0xc6>
    4ca0:	200009fc 	.word	0x200009fc
    4ca4:	00008991 	.word	0x00008991
    4ca8:	00008599 	.word	0x00008599
    4cac:	000085c9 	.word	0x000085c9

00004cb0 <iotx_time_start>:
#include "infra_timer.h"

uint64_t HAL_UptimeMs(void);

void iotx_time_start(iotx_time_t *timer)
{
    4cb0:	b510      	push	{r4, lr}
    4cb2:	1e04      	subs	r4, r0, #0
    if (!timer) {
    4cb4:	d002      	beq.n	4cbc <iotx_time_start+0xc>
        return;
    }

    timer->time = HAL_UptimeMs();
    4cb6:	4b02      	ldr	r3, [pc, #8]	; (4cc0 <iotx_time_start+0x10>)
    4cb8:	4798      	blx	r3
    4cba:	6020      	str	r0, [r4, #0]
}
    4cbc:	bd10      	pop	{r4, pc}
    4cbe:	46c0      	nop			; (mov r8, r8)
    4cc0:	00007d95 	.word	0x00007d95

00004cc4 <utils_time_spend>:

uint32_t utils_time_spend(iotx_time_t *start)
{
    4cc4:	b510      	push	{r4, lr}
    4cc6:	1e04      	subs	r4, r0, #0
    uint32_t now, res;

    if (!start) {
    4cc8:	d004      	beq.n	4cd4 <utils_time_spend+0x10>
        return 0;
    }

    now = HAL_UptimeMs();
    4cca:	4b03      	ldr	r3, [pc, #12]	; (4cd8 <utils_time_spend+0x14>)
    4ccc:	4798      	blx	r3
    res = now - start->time;
    4cce:	6823      	ldr	r3, [r4, #0]
    4cd0:	1ac0      	subs	r0, r0, r3
    return res;
}
    4cd2:	bd10      	pop	{r4, pc}
        return 0;
    4cd4:	2000      	movs	r0, #0
    4cd6:	e7fc      	b.n	4cd2 <utils_time_spend+0xe>
    4cd8:	00007d95 	.word	0x00007d95

00004cdc <utils_time_is_expired>:
    res = end->time - now;
    return res;
}

uint32_t utils_time_is_expired(iotx_time_t *timer)
{
    4cdc:	b510      	push	{r4, lr}
    4cde:	1e04      	subs	r4, r0, #0
    uint32_t cur_time;

    if (!timer) {
    4ce0:	d008      	beq.n	4cf4 <utils_time_is_expired+0x18>
        return 1;
    }

    cur_time = HAL_UptimeMs();
    4ce2:	4b05      	ldr	r3, [pc, #20]	; (4cf8 <utils_time_is_expired+0x1c>)
    4ce4:	4798      	blx	r3
    /*
     *  WARNING: Do NOT change the following code until you know exactly what it do!
     *
     *  check whether it reach destination time or not.
     */
    if ((cur_time - timer->time) < (UINT32_MAX / 2)) {
    4ce6:	6823      	ldr	r3, [r4, #0]
    4ce8:	1ac3      	subs	r3, r0, r3
    4cea:	2000      	movs	r0, #0
    4cec:	4a03      	ldr	r2, [pc, #12]	; (4cfc <utils_time_is_expired+0x20>)
    4cee:	429a      	cmp	r2, r3
    4cf0:	4140      	adcs	r0, r0
        return 1;
    } else {
        return 0;
    }
}
    4cf2:	bd10      	pop	{r4, pc}
        return 1;
    4cf4:	2001      	movs	r0, #1
    4cf6:	e7fc      	b.n	4cf2 <utils_time_is_expired+0x16>
    4cf8:	00007d95 	.word	0x00007d95
    4cfc:	7ffffffe 	.word	0x7ffffffe

00004d00 <iotx_time_left>:
{
    4d00:	b510      	push	{r4, lr}
    4d02:	1e04      	subs	r4, r0, #0
    if (!end) {
    4d04:	d00b      	beq.n	4d1e <iotx_time_left+0x1e>
    if (utils_time_is_expired(end)) {
    4d06:	4b07      	ldr	r3, [pc, #28]	; (4d24 <iotx_time_left+0x24>)
    4d08:	4798      	blx	r3
        return 0;
    4d0a:	2300      	movs	r3, #0
    if (utils_time_is_expired(end)) {
    4d0c:	2800      	cmp	r0, #0
    4d0e:	d001      	beq.n	4d14 <iotx_time_left+0x14>
}
    4d10:	0018      	movs	r0, r3
    4d12:	bd10      	pop	{r4, pc}
    now = HAL_UptimeMs();
    4d14:	4b04      	ldr	r3, [pc, #16]	; (4d28 <iotx_time_left+0x28>)
    4d16:	4798      	blx	r3
    res = end->time - now;
    4d18:	6823      	ldr	r3, [r4, #0]
    4d1a:	1a1b      	subs	r3, r3, r0
    return res;
    4d1c:	e7f8      	b.n	4d10 <iotx_time_left+0x10>
        return 0;
    4d1e:	2300      	movs	r3, #0
    4d20:	e7f6      	b.n	4d10 <iotx_time_left+0x10>
    4d22:	46c0      	nop			; (mov r8, r8)
    4d24:	00004cdd 	.word	0x00004cdd
    4d28:	00007d95 	.word	0x00007d95

00004d2c <iotx_time_init>:

void iotx_time_init(iotx_time_t *timer)
{
    if (!timer) {
    4d2c:	2800      	cmp	r0, #0
    4d2e:	d001      	beq.n	4d34 <iotx_time_init+0x8>
        return;
    }

    timer->time = 0;
    4d30:	2300      	movs	r3, #0
    4d32:	6003      	str	r3, [r0, #0]
}
    4d34:	4770      	bx	lr
	...

00004d38 <utils_time_countdown_ms>:

void utils_time_countdown_ms(iotx_time_t *timer, uint32_t millisecond)
{
    4d38:	b570      	push	{r4, r5, r6, lr}
    4d3a:	0005      	movs	r5, r0
    4d3c:	000c      	movs	r4, r1
    if (!timer) {
    4d3e:	2800      	cmp	r0, #0
    4d40:	d003      	beq.n	4d4a <utils_time_countdown_ms+0x12>
        return;
    }

    timer->time = HAL_UptimeMs() + millisecond;
    4d42:	4b02      	ldr	r3, [pc, #8]	; (4d4c <utils_time_countdown_ms+0x14>)
    4d44:	4798      	blx	r3
    4d46:	1824      	adds	r4, r4, r0
    4d48:	602c      	str	r4, [r5, #0]
}
    4d4a:	bd70      	pop	{r4, r5, r6, pc}
    4d4c:	00007d95 	.word	0x00007d95

00004d50 <_handle_event>:
    return 0;
}
#endif

static int _handle_event(iotx_mqtt_event_handle_pt handle, iotx_mc_client_t *c, iotx_mqtt_event_msg_pt msg)
{
    4d50:	b570      	push	{r4, r5, r6, lr}
    if (handle == NULL || handle->h_fp == NULL) {
    4d52:	2800      	cmp	r0, #0
    4d54:	d00b      	beq.n	4d6e <_handle_event+0x1e>
    4d56:	6803      	ldr	r3, [r0, #0]
    4d58:	2b00      	cmp	r3, #0
    4d5a:	d00b      	beq.n	4d74 <_handle_event+0x24>
        return FAIL_RETURN;
    }

    _in_yield_cb = 1;
    4d5c:	4c07      	ldr	r4, [pc, #28]	; (4d7c <_handle_event+0x2c>)
    4d5e:	2501      	movs	r5, #1
    4d60:	6025      	str	r5, [r4, #0]
    handle->h_fp(handle->pcontext, c, msg);
    4d62:	6840      	ldr	r0, [r0, #4]
    4d64:	4798      	blx	r3
    _in_yield_cb = 0;
    4d66:	2300      	movs	r3, #0
    4d68:	6023      	str	r3, [r4, #0]
    return 0;
    4d6a:	2000      	movs	r0, #0
}
    4d6c:	bd70      	pop	{r4, r5, r6, pc}
        return FAIL_RETURN;
    4d6e:	2001      	movs	r0, #1
    4d70:	4240      	negs	r0, r0
    4d72:	e7fb      	b.n	4d6c <_handle_event+0x1c>
    4d74:	2001      	movs	r0, #1
    4d76:	4240      	negs	r0, r0
    4d78:	e7f8      	b.n	4d6c <_handle_event+0x1c>
    4d7a:	46c0      	nop			; (mov r8, r8)
    4d7c:	20000a04 	.word	0x20000a04

00004d80 <iotx_mc_is_topic_matched>:
    return SUCCESS_RETURN;
}

/* check whether the topic is matched or not */
static char iotx_mc_is_topic_matched(char *topicFilter, MQTTString *topicName)
{
    4d80:	b530      	push	{r4, r5, lr}
    char *curf;
    char *curn;
    char *curn_end;

    if (!topicFilter || !topicName) {
    4d82:	2800      	cmp	r0, #0
    4d84:	d037      	beq.n	4df6 <iotx_mc_is_topic_matched+0x76>
    4d86:	2900      	cmp	r1, #0
    4d88:	d037      	beq.n	4dfa <iotx_mc_is_topic_matched+0x7a>
        return 0;
    }

    curf = topicFilter;
    curn = topicName->lenstring.data;
    4d8a:	688b      	ldr	r3, [r1, #8]
    curn_end = curn + topicName->lenstring.len;
    4d8c:	684d      	ldr	r5, [r1, #4]
    4d8e:	195d      	adds	r5, r3, r5

    while (*curf && curn < curn_end) {
    4d90:	7802      	ldrb	r2, [r0, #0]
    4d92:	2a00      	cmp	r2, #0
    4d94:	d03f      	beq.n	4e16 <iotx_mc_is_topic_matched+0x96>
    4d96:	42ab      	cmp	r3, r5
    4d98:	d22b      	bcs.n	4df2 <iotx_mc_is_topic_matched+0x72>
    4d9a:	3001      	adds	r0, #1
    4d9c:	1e69      	subs	r1, r5, #1
    4d9e:	e008      	b.n	4db2 <iotx_mc_is_topic_matched+0x32>
        if (*curn == '/' && *curf != '/') {
    4da0:	2a2f      	cmp	r2, #47	; 0x2f
    4da2:	d10f      	bne.n	4dc4 <iotx_mc_is_topic_matched+0x44>
            }
        } else if (*curf == '#') {
            curn = curn_end - 1;    /* skip until end of string */
        }
        curf++;
        curn++;
    4da4:	3301      	adds	r3, #1
    while (*curf && curn < curn_end) {
    4da6:	7802      	ldrb	r2, [r0, #0]
    4da8:	2a00      	cmp	r2, #0
    4daa:	d034      	beq.n	4e16 <iotx_mc_is_topic_matched+0x96>
    4dac:	429d      	cmp	r5, r3
    4dae:	d91e      	bls.n	4dee <iotx_mc_is_topic_matched+0x6e>
    4db0:	3001      	adds	r0, #1
        if (*curn == '/' && *curf != '/') {
    4db2:	781c      	ldrb	r4, [r3, #0]
    4db4:	2c2f      	cmp	r4, #47	; 0x2f
    4db6:	d0f3      	beq.n	4da0 <iotx_mc_is_topic_matched+0x20>
        if (*curf != '+' && *curf != '#' && *curf != *curn) {
    4db8:	2a2b      	cmp	r2, #43	; 0x2b
    4dba:	d009      	beq.n	4dd0 <iotx_mc_is_topic_matched+0x50>
    4dbc:	2a23      	cmp	r2, #35	; 0x23
    4dbe:	d014      	beq.n	4dea <iotx_mc_is_topic_matched+0x6a>
    4dc0:	4294      	cmp	r4, r2
    4dc2:	d0ef      	beq.n	4da4 <iotx_mc_is_topic_matched+0x24>
    }

    return (curn == curn_end) && (*curf == '\0');
    4dc4:	2000      	movs	r0, #0
    4dc6:	429d      	cmp	r5, r3
    4dc8:	d128      	bne.n	4e1c <iotx_mc_is_topic_matched+0x9c>
    4dca:	4250      	negs	r0, r2
    4dcc:	4150      	adcs	r0, r2
    4dce:	e025      	b.n	4e1c <iotx_mc_is_topic_matched+0x9c>
            char *nextpos = curn + 1;
    4dd0:	1c5c      	adds	r4, r3, #1
            while (nextpos < curn_end && *nextpos != '/') {
    4dd2:	42a5      	cmp	r5, r4
    4dd4:	d91a      	bls.n	4e0c <iotx_mc_is_topic_matched+0x8c>
    4dd6:	785a      	ldrb	r2, [r3, #1]
    4dd8:	2a2f      	cmp	r2, #47	; 0x2f
    4dda:	d010      	beq.n	4dfe <iotx_mc_is_topic_matched+0x7e>
                nextpos = ++curn + 1;
    4ddc:	3301      	adds	r3, #1
            while (nextpos < curn_end && *nextpos != '/') {
    4dde:	428b      	cmp	r3, r1
    4de0:	d0e0      	beq.n	4da4 <iotx_mc_is_topic_matched+0x24>
    4de2:	785a      	ldrb	r2, [r3, #1]
    4de4:	2a2f      	cmp	r2, #47	; 0x2f
    4de6:	d1f9      	bne.n	4ddc <iotx_mc_is_topic_matched+0x5c>
    4de8:	e7dc      	b.n	4da4 <iotx_mc_is_topic_matched+0x24>
            curn = curn_end - 1;    /* skip until end of string */
    4dea:	1e6b      	subs	r3, r5, #1
    4dec:	e7da      	b.n	4da4 <iotx_mc_is_topic_matched+0x24>
    return (curn == curn_end) && (*curf == '\0');
    4dee:	2000      	movs	r0, #0
    4df0:	e014      	b.n	4e1c <iotx_mc_is_topic_matched+0x9c>
    4df2:	2000      	movs	r0, #0
    4df4:	e012      	b.n	4e1c <iotx_mc_is_topic_matched+0x9c>
        return 0;
    4df6:	2000      	movs	r0, #0
    4df8:	e011      	b.n	4e1e <iotx_mc_is_topic_matched+0x9e>
    4dfa:	2000      	movs	r0, #0
    4dfc:	e00f      	b.n	4e1e <iotx_mc_is_topic_matched+0x9e>
    while (*curf && curn < curn_end) {
    4dfe:	7802      	ldrb	r2, [r0, #0]
    4e00:	2a00      	cmp	r2, #0
    4e02:	d001      	beq.n	4e08 <iotx_mc_is_topic_matched+0x88>
        curn++;
    4e04:	0023      	movs	r3, r4
    4e06:	e7d3      	b.n	4db0 <iotx_mc_is_topic_matched+0x30>
    return (curn == curn_end) && (*curf == '\0');
    4e08:	2000      	movs	r0, #0
    4e0a:	e007      	b.n	4e1c <iotx_mc_is_topic_matched+0x9c>
        curn++;
    4e0c:	3301      	adds	r3, #1
    while (*curf && curn < curn_end) {
    4e0e:	7802      	ldrb	r2, [r0, #0]
    return (curn == curn_end) && (*curf == '\0');
    4e10:	2000      	movs	r0, #0
    while (*curf && curn < curn_end) {
    4e12:	2a00      	cmp	r2, #0
    4e14:	d102      	bne.n	4e1c <iotx_mc_is_topic_matched+0x9c>
    return (curn == curn_end) && (*curf == '\0');
    4e16:	1aeb      	subs	r3, r5, r3
    4e18:	4258      	negs	r0, r3
    4e1a:	4158      	adcs	r0, r3
    4e1c:	b2c0      	uxtb	r0, r0
}
    4e1e:	bd30      	pop	{r4, r5, pc}

00004e20 <iotx_mc_set_client_state>:
}


/* set state of MQTT client */
static void iotx_mc_set_client_state(iotx_mc_client_t *pClient, iotx_mc_state_t newState)
{
    4e20:	b570      	push	{r4, r5, r6, lr}
    4e22:	0004      	movs	r4, r0
    4e24:	000d      	movs	r5, r1

    HAL_MutexLock(pClient->lock_generic);
    4e26:	6800      	ldr	r0, [r0, #0]
    4e28:	4b03      	ldr	r3, [pc, #12]	; (4e38 <iotx_mc_set_client_state+0x18>)
    4e2a:	4798      	blx	r3
    pClient->client_state = newState;
    4e2c:	2334      	movs	r3, #52	; 0x34
    4e2e:	54e5      	strb	r5, [r4, r3]
    HAL_MutexUnlock(pClient->lock_generic);
    4e30:	6820      	ldr	r0, [r4, #0]
    4e32:	4b02      	ldr	r3, [pc, #8]	; (4e3c <iotx_mc_set_client_state+0x1c>)
    4e34:	4798      	blx	r3
}
    4e36:	bd70      	pop	{r4, r5, r6, pc}
    4e38:	00007d2f 	.word	0x00007d2f
    4e3c:	00007d31 	.word	0x00007d31

00004e40 <iotx_mc_get_client_state>:
{
    4e40:	b570      	push	{r4, r5, r6, lr}
    4e42:	0004      	movs	r4, r0
    HAL_MutexLock(pClient->lock_generic);
    4e44:	6800      	ldr	r0, [r0, #0]
    4e46:	4b04      	ldr	r3, [pc, #16]	; (4e58 <iotx_mc_get_client_state+0x18>)
    4e48:	4798      	blx	r3
    state = pClient->client_state;
    4e4a:	2334      	movs	r3, #52	; 0x34
    4e4c:	5ce5      	ldrb	r5, [r4, r3]
    HAL_MutexUnlock(pClient->lock_generic);
    4e4e:	6820      	ldr	r0, [r4, #0]
    4e50:	4b02      	ldr	r3, [pc, #8]	; (4e5c <iotx_mc_get_client_state+0x1c>)
    4e52:	4798      	blx	r3
}
    4e54:	0028      	movs	r0, r5
    4e56:	bd70      	pop	{r4, r5, r6, pc}
    4e58:	00007d2f 	.word	0x00007d2f
    4e5c:	00007d31 	.word	0x00007d31

00004e60 <iotx_mc_get_next_packetid>:
{
    4e60:	b570      	push	{r4, r5, r6, lr}
    4e62:	1e05      	subs	r5, r0, #0
    if (!c) {
    4e64:	d00f      	beq.n	4e86 <iotx_mc_get_next_packetid+0x26>
    HAL_MutexLock(c->lock_generic);
    4e66:	6800      	ldr	r0, [r0, #0]
    4e68:	4b08      	ldr	r3, [pc, #32]	; (4e8c <iotx_mc_get_next_packetid+0x2c>)
    4e6a:	4798      	blx	r3
    c->packet_id = (c->packet_id == IOTX_MC_PACKET_ID_MAX) ? 1 : c->packet_id + 1;
    4e6c:	686c      	ldr	r4, [r5, #4]
    4e6e:	4b08      	ldr	r3, [pc, #32]	; (4e90 <iotx_mc_get_next_packetid+0x30>)
    4e70:	429c      	cmp	r4, r3
    4e72:	d006      	beq.n	4e82 <iotx_mc_get_next_packetid+0x22>
    4e74:	3401      	adds	r4, #1
    4e76:	606c      	str	r4, [r5, #4]
    HAL_MutexUnlock(c->lock_generic);
    4e78:	6828      	ldr	r0, [r5, #0]
    4e7a:	4b06      	ldr	r3, [pc, #24]	; (4e94 <iotx_mc_get_next_packetid+0x34>)
    4e7c:	4798      	blx	r3
    return id;
    4e7e:	0020      	movs	r0, r4
}
    4e80:	bd70      	pop	{r4, r5, r6, pc}
    c->packet_id = (c->packet_id == IOTX_MC_PACKET_ID_MAX) ? 1 : c->packet_id + 1;
    4e82:	2401      	movs	r4, #1
    4e84:	e7f7      	b.n	4e76 <iotx_mc_get_next_packetid+0x16>
        return FAIL_RETURN;
    4e86:	2001      	movs	r0, #1
    4e88:	4240      	negs	r0, r0
    4e8a:	e7f9      	b.n	4e80 <iotx_mc_get_next_packetid+0x20>
    4e8c:	00007d2f 	.word	0x00007d2f
    4e90:	0000ffff 	.word	0x0000ffff
    4e94:	00007d31 	.word	0x00007d31

00004e98 <iotx_mc_send_packet>:
{
    4e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e9a:	46d6      	mov	lr, sl
    4e9c:	464f      	mov	r7, r9
    4e9e:	4646      	mov	r6, r8
    4ea0:	b5c0      	push	{r6, r7, lr}
    4ea2:	b082      	sub	sp, #8
    4ea4:	4689      	mov	r9, r1
    4ea6:	0015      	movs	r5, r2
    4ea8:	9301      	str	r3, [sp, #4]
    if (!c || !buf || !time) {
    4eaa:	2800      	cmp	r0, #0
    4eac:	d02c      	beq.n	4f08 <iotx_mc_send_packet+0x70>
    4eae:	2900      	cmp	r1, #0
    4eb0:	d02d      	beq.n	4f0e <iotx_mc_send_packet+0x76>
    4eb2:	2b00      	cmp	r3, #0
    4eb4:	d02e      	beq.n	4f14 <iotx_mc_send_packet+0x7c>
    while (sent < length && !utils_time_is_expired(time)) {
    4eb6:	2400      	movs	r4, #0
    4eb8:	2d00      	cmp	r5, #0
    4eba:	dd1a      	ble.n	4ef2 <iotx_mc_send_packet+0x5a>
    4ebc:	4b17      	ldr	r3, [pc, #92]	; (4f1c <iotx_mc_send_packet+0x84>)
    4ebe:	469a      	mov	sl, r3
        left_t = iotx_time_left(time);
    4ec0:	4b17      	ldr	r3, [pc, #92]	; (4f20 <iotx_mc_send_packet+0x88>)
    4ec2:	4698      	mov	r8, r3
        left_t = (left_t == 0) ? 1 : left_t;
    4ec4:	0007      	movs	r7, r0
    4ec6:	e00a      	b.n	4ede <iotx_mc_send_packet+0x46>
        rc = c->ipstack->write(c->ipstack, &buf[sent], length, left_t);
    4ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    4eca:	464a      	mov	r2, r9
    4ecc:	1911      	adds	r1, r2, r4
    4ece:	6986      	ldr	r6, [r0, #24]
    4ed0:	002a      	movs	r2, r5
    4ed2:	47b0      	blx	r6
        if (rc < 0) { /* there was an error writing the data */
    4ed4:	2800      	cmp	r0, #0
    4ed6:	db0c      	blt.n	4ef2 <iotx_mc_send_packet+0x5a>
        sent += rc;
    4ed8:	1824      	adds	r4, r4, r0
    while (sent < length && !utils_time_is_expired(time)) {
    4eda:	42a5      	cmp	r5, r4
    4edc:	dd09      	ble.n	4ef2 <iotx_mc_send_packet+0x5a>
    4ede:	9801      	ldr	r0, [sp, #4]
    4ee0:	47d0      	blx	sl
    4ee2:	2800      	cmp	r0, #0
    4ee4:	d105      	bne.n	4ef2 <iotx_mc_send_packet+0x5a>
        left_t = iotx_time_left(time);
    4ee6:	9801      	ldr	r0, [sp, #4]
    4ee8:	47c0      	blx	r8
    4eea:	1e03      	subs	r3, r0, #0
        left_t = (left_t == 0) ? 1 : left_t;
    4eec:	d1ec      	bne.n	4ec8 <iotx_mc_send_packet+0x30>
    4eee:	3301      	adds	r3, #1
    4ef0:	e7ea      	b.n	4ec8 <iotx_mc_send_packet+0x30>
        rc = SUCCESS_RETURN;
    4ef2:	2000      	movs	r0, #0
    if (sent == length) {
    4ef4:	42a5      	cmp	r5, r4
    4ef6:	d105      	bne.n	4f04 <iotx_mc_send_packet+0x6c>
}
    4ef8:	b002      	add	sp, #8
    4efa:	bc1c      	pop	{r2, r3, r4}
    4efc:	4690      	mov	r8, r2
    4efe:	4699      	mov	r9, r3
    4f00:	46a2      	mov	sl, r4
    4f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = MQTT_NETWORK_ERROR;
    4f04:	380e      	subs	r0, #14
    4f06:	e7f7      	b.n	4ef8 <iotx_mc_send_packet+0x60>
        return rc;
    4f08:	2001      	movs	r0, #1
    4f0a:	4240      	negs	r0, r0
    4f0c:	e7f4      	b.n	4ef8 <iotx_mc_send_packet+0x60>
    4f0e:	2001      	movs	r0, #1
    4f10:	4240      	negs	r0, r0
    4f12:	e7f1      	b.n	4ef8 <iotx_mc_send_packet+0x60>
    4f14:	2001      	movs	r0, #1
    4f16:	4240      	negs	r0, r0
    4f18:	e7ee      	b.n	4ef8 <iotx_mc_send_packet+0x60>
    4f1a:	46c0      	nop			; (mov r8, r8)
    4f1c:	00004cdd 	.word	0x00004cdd
    4f20:	00004d01 	.word	0x00004d01

00004f24 <iotx_mc_check_rule>:
{
    4f24:	b570      	push	{r4, r5, r6, lr}
    4f26:	0004      	movs	r4, r0
    4f28:	000d      	movs	r5, r1
    if (NULL == iterm) {
    4f2a:	2800      	cmp	r0, #0
    4f2c:	d007      	beq.n	4f3e <iotx_mc_check_rule+0x1a>
    len = strlen(iterm);
    4f2e:	4b1d      	ldr	r3, [pc, #116]	; (4fa4 <iotx_mc_check_rule+0x80>)
    4f30:	4798      	blx	r3
    4f32:	1e06      	subs	r6, r0, #0
    for (i = 0; i < len; i++) {
    4f34:	dd26      	ble.n	4f84 <iotx_mc_check_rule+0x60>
    4f36:	0023      	movs	r3, r4
    4f38:	1820      	adds	r0, r4, r0
            if ('+' == iterm[i] || '#' == iterm[i]) {
    4f3a:	2108      	movs	r1, #8
    4f3c:	e012      	b.n	4f64 <iotx_mc_check_rule+0x40>
        mqtt_err("iterm is NULL");
    4f3e:	481a      	ldr	r0, [pc, #104]	; (4fa8 <iotx_mc_check_rule+0x84>)
    4f40:	4c1a      	ldr	r4, [pc, #104]	; (4fac <iotx_mc_check_rule+0x88>)
    4f42:	47a0      	blx	r4
    4f44:	481a      	ldr	r0, [pc, #104]	; (4fb0 <iotx_mc_check_rule+0x8c>)
    4f46:	47a0      	blx	r4
        return FAIL_RETURN;
    4f48:	2001      	movs	r0, #1
    4f4a:	4240      	negs	r0, r0
    4f4c:	e017      	b.n	4f7e <iotx_mc_check_rule+0x5a>
            if ('+' == iterm[i] || '#' == iterm[i]) {
    4f4e:	781a      	ldrb	r2, [r3, #0]
    4f50:	438a      	bics	r2, r1
    4f52:	2a23      	cmp	r2, #35	; 0x23
    4f54:	d01b      	beq.n	4f8e <iotx_mc_check_rule+0x6a>
        if (iterm[i] < 32 || iterm[i] >= 127) {
    4f56:	781a      	ldrb	r2, [r3, #0]
    4f58:	3a20      	subs	r2, #32
    4f5a:	2a5e      	cmp	r2, #94	; 0x5e
    4f5c:	d814      	bhi.n	4f88 <iotx_mc_check_rule+0x64>
    4f5e:	3301      	adds	r3, #1
    for (i = 0; i < len; i++) {
    4f60:	4298      	cmp	r0, r3
    4f62:	d00d      	beq.n	4f80 <iotx_mc_check_rule+0x5c>
        if (TOPIC_FILTER_TYPE == type) {
    4f64:	2d01      	cmp	r5, #1
    4f66:	d0f2      	beq.n	4f4e <iotx_mc_check_rule+0x2a>
            if ('+' == iterm[i] || '#' == iterm[i]) {
    4f68:	781a      	ldrb	r2, [r3, #0]
    4f6a:	438a      	bics	r2, r1
    4f6c:	2a23      	cmp	r2, #35	; 0x23
    4f6e:	d1f2      	bne.n	4f56 <iotx_mc_check_rule+0x32>
                mqtt_err("has character # and + is error");
    4f70:	4810      	ldr	r0, [pc, #64]	; (4fb4 <iotx_mc_check_rule+0x90>)
    4f72:	4c0e      	ldr	r4, [pc, #56]	; (4fac <iotx_mc_check_rule+0x88>)
    4f74:	47a0      	blx	r4
    4f76:	480e      	ldr	r0, [pc, #56]	; (4fb0 <iotx_mc_check_rule+0x8c>)
    4f78:	47a0      	blx	r4
                return FAIL_RETURN;
    4f7a:	2001      	movs	r0, #1
    4f7c:	4240      	negs	r0, r0
}
    4f7e:	bd70      	pop	{r4, r5, r6, pc}
    return SUCCESS_RETURN;
    4f80:	2000      	movs	r0, #0
    4f82:	e7fc      	b.n	4f7e <iotx_mc_check_rule+0x5a>
    4f84:	2000      	movs	r0, #0
    4f86:	e7fa      	b.n	4f7e <iotx_mc_check_rule+0x5a>
            return FAIL_RETURN;
    4f88:	2001      	movs	r0, #1
    4f8a:	4240      	negs	r0, r0
    4f8c:	e7f7      	b.n	4f7e <iotx_mc_check_rule+0x5a>
                if (1 != len) {
    4f8e:	2e01      	cmp	r6, #1
    4f90:	d0e5      	beq.n	4f5e <iotx_mc_check_rule+0x3a>
                    mqtt_err("the character # and + is error");
    4f92:	4809      	ldr	r0, [pc, #36]	; (4fb8 <iotx_mc_check_rule+0x94>)
    4f94:	4c05      	ldr	r4, [pc, #20]	; (4fac <iotx_mc_check_rule+0x88>)
    4f96:	47a0      	blx	r4
    4f98:	4805      	ldr	r0, [pc, #20]	; (4fb0 <iotx_mc_check_rule+0x8c>)
    4f9a:	47a0      	blx	r4
                    return FAIL_RETURN;
    4f9c:	2001      	movs	r0, #1
    4f9e:	4240      	negs	r0, r0
    4fa0:	e7ed      	b.n	4f7e <iotx_mc_check_rule+0x5a>
    4fa2:	46c0      	nop			; (mov r8, r8)
    4fa4:	00008991 	.word	0x00008991
    4fa8:	0000a8d8 	.word	0x0000a8d8
    4fac:	00007d35 	.word	0x00007d35
    4fb0:	00009cb4 	.word	0x00009cb4
    4fb4:	0000a908 	.word	0x0000a908
    4fb8:	0000a8e8 	.word	0x0000a8e8

00004fbc <iotx_mc_check_topic>:
{
    4fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fbe:	b0a3      	sub	sp, #140	; 0x8c
    4fc0:	1e04      	subs	r4, r0, #0
    4fc2:	9100      	str	r1, [sp, #0]
    if (NULL == topicName || '/' != topicName[0]) {
    4fc4:	d052      	beq.n	506c <iotx_mc_check_topic+0xb0>
    4fc6:	7803      	ldrb	r3, [r0, #0]
    4fc8:	2b2f      	cmp	r3, #47	; 0x2f
    4fca:	d153      	bne.n	5074 <iotx_mc_check_topic+0xb8>
    if (strlen(topicName) > IOTX_MC_TOPIC_NAME_MAX_LEN) {
    4fcc:	4b2b      	ldr	r3, [pc, #172]	; (507c <iotx_mc_check_topic+0xc0>)
    4fce:	4798      	blx	r3
    4fd0:	2880      	cmp	r0, #128	; 0x80
    4fd2:	d825      	bhi.n	5020 <iotx_mc_check_topic+0x64>
    memset(topicString, 0x0, IOTX_MC_TOPIC_NAME_MAX_LEN);
    4fd4:	2280      	movs	r2, #128	; 0x80
    4fd6:	2100      	movs	r1, #0
    4fd8:	a802      	add	r0, sp, #8
    4fda:	4b29      	ldr	r3, [pc, #164]	; (5080 <iotx_mc_check_topic+0xc4>)
    4fdc:	4798      	blx	r3
    strncpy(topicString, topicName, IOTX_MC_TOPIC_NAME_MAX_LEN - 1);
    4fde:	227f      	movs	r2, #127	; 0x7f
    4fe0:	0021      	movs	r1, r4
    4fe2:	a802      	add	r0, sp, #8
    4fe4:	4b27      	ldr	r3, [pc, #156]	; (5084 <iotx_mc_check_topic+0xc8>)
    4fe6:	4798      	blx	r3
    iterm = infra_strtok(topicString, delim);
    4fe8:	4927      	ldr	r1, [pc, #156]	; (5088 <iotx_mc_check_topic+0xcc>)
    4fea:	a802      	add	r0, sp, #8
    4fec:	4b27      	ldr	r3, [pc, #156]	; (508c <iotx_mc_check_topic+0xd0>)
    4fee:	4798      	blx	r3
    if (SUCCESS_RETURN != iotx_mc_check_rule(iterm, type)) {
    4ff0:	9900      	ldr	r1, [sp, #0]
    4ff2:	4b27      	ldr	r3, [pc, #156]	; (5090 <iotx_mc_check_topic+0xd4>)
    4ff4:	4798      	blx	r3
    4ff6:	9001      	str	r0, [sp, #4]
    4ff8:	1e04      	subs	r4, r0, #0
    4ffa:	d11a      	bne.n	5032 <iotx_mc_check_topic+0x76>
        iterm = infra_strtok(NULL, delim);
    4ffc:	4f23      	ldr	r7, [pc, #140]	; (508c <iotx_mc_check_topic+0xd0>)
        if (SUCCESS_RETURN != iotx_mc_check_rule(iterm, type)) {
    4ffe:	4d24      	ldr	r5, [pc, #144]	; (5090 <iotx_mc_check_topic+0xd4>)
        iterm = infra_strtok(NULL, delim);
    5000:	4921      	ldr	r1, [pc, #132]	; (5088 <iotx_mc_check_topic+0xcc>)
    5002:	2000      	movs	r0, #0
    5004:	47b8      	blx	r7
    5006:	1e06      	subs	r6, r0, #0
        if (iterm == NULL) {
    5008:	d024      	beq.n	5054 <iotx_mc_check_topic+0x98>
        if (1 == mask) {
    500a:	2c01      	cmp	r4, #1
    500c:	d01a      	beq.n	5044 <iotx_mc_check_topic+0x88>
        if (SUCCESS_RETURN != iotx_mc_check_rule(iterm, type)) {
    500e:	9900      	ldr	r1, [sp, #0]
    5010:	47a8      	blx	r5
    5012:	2800      	cmp	r0, #0
    5014:	d121      	bne.n	505a <iotx_mc_check_topic+0x9e>
        if (iterm[0] == '#') {
    5016:	7834      	ldrb	r4, [r6, #0]
    5018:	3c23      	subs	r4, #35	; 0x23
    501a:	4263      	negs	r3, r4
    501c:	415c      	adcs	r4, r3
    501e:	e7ef      	b.n	5000 <iotx_mc_check_topic+0x44>
        mqtt_err("len of topicName exceeds 64");
    5020:	481c      	ldr	r0, [pc, #112]	; (5094 <iotx_mc_check_topic+0xd8>)
    5022:	4c1d      	ldr	r4, [pc, #116]	; (5098 <iotx_mc_check_topic+0xdc>)
    5024:	47a0      	blx	r4
    5026:	481d      	ldr	r0, [pc, #116]	; (509c <iotx_mc_check_topic+0xe0>)
    5028:	47a0      	blx	r4
        return FAIL_RETURN;
    502a:	2301      	movs	r3, #1
    502c:	425b      	negs	r3, r3
    502e:	9301      	str	r3, [sp, #4]
    5030:	e010      	b.n	5054 <iotx_mc_check_topic+0x98>
        mqtt_err("run iotx_check_rule error");
    5032:	481b      	ldr	r0, [pc, #108]	; (50a0 <iotx_mc_check_topic+0xe4>)
    5034:	4c18      	ldr	r4, [pc, #96]	; (5098 <iotx_mc_check_topic+0xdc>)
    5036:	47a0      	blx	r4
    5038:	4818      	ldr	r0, [pc, #96]	; (509c <iotx_mc_check_topic+0xe0>)
    503a:	47a0      	blx	r4
        return FAIL_RETURN;
    503c:	2301      	movs	r3, #1
    503e:	425b      	negs	r3, r3
    5040:	9301      	str	r3, [sp, #4]
    5042:	e007      	b.n	5054 <iotx_mc_check_topic+0x98>
            mqtt_err("the character # is error");
    5044:	4817      	ldr	r0, [pc, #92]	; (50a4 <iotx_mc_check_topic+0xe8>)
    5046:	4c14      	ldr	r4, [pc, #80]	; (5098 <iotx_mc_check_topic+0xdc>)
    5048:	47a0      	blx	r4
    504a:	4814      	ldr	r0, [pc, #80]	; (509c <iotx_mc_check_topic+0xe0>)
    504c:	47a0      	blx	r4
            return FAIL_RETURN;
    504e:	2301      	movs	r3, #1
    5050:	425b      	negs	r3, r3
    5052:	9301      	str	r3, [sp, #4]
}
    5054:	9801      	ldr	r0, [sp, #4]
    5056:	b023      	add	sp, #140	; 0x8c
    5058:	bdf0      	pop	{r4, r5, r6, r7, pc}
            mqtt_err("run iotx_check_rule error");
    505a:	4811      	ldr	r0, [pc, #68]	; (50a0 <iotx_mc_check_topic+0xe4>)
    505c:	4c0e      	ldr	r4, [pc, #56]	; (5098 <iotx_mc_check_topic+0xdc>)
    505e:	47a0      	blx	r4
    5060:	480e      	ldr	r0, [pc, #56]	; (509c <iotx_mc_check_topic+0xe0>)
    5062:	47a0      	blx	r4
            return FAIL_RETURN;
    5064:	2301      	movs	r3, #1
    5066:	425b      	negs	r3, r3
    5068:	9301      	str	r3, [sp, #4]
    506a:	e7f3      	b.n	5054 <iotx_mc_check_topic+0x98>
        return FAIL_RETURN;
    506c:	2301      	movs	r3, #1
    506e:	425b      	negs	r3, r3
    5070:	9301      	str	r3, [sp, #4]
    5072:	e7ef      	b.n	5054 <iotx_mc_check_topic+0x98>
    5074:	2301      	movs	r3, #1
    5076:	425b      	negs	r3, r3
    5078:	9301      	str	r3, [sp, #4]
    507a:	e7eb      	b.n	5054 <iotx_mc_check_topic+0x98>
    507c:	00008991 	.word	0x00008991
    5080:	000085c9 	.word	0x000085c9
    5084:	000089c1 	.word	0x000089c1
    5088:	0000a944 	.word	0x0000a944
    508c:	00004bc1 	.word	0x00004bc1
    5090:	00004f25 	.word	0x00004f25
    5094:	0000a928 	.word	0x0000a928
    5098:	00007d35 	.word	0x00007d35
    509c:	00009cb4 	.word	0x00009cb4
    50a0:	0000a948 	.word	0x0000a948
    50a4:	0000a964 	.word	0x0000a964

000050a8 <iotx_mc_read_packet>:
{
    50a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    50aa:	46de      	mov	lr, fp
    50ac:	4657      	mov	r7, sl
    50ae:	464e      	mov	r6, r9
    50b0:	4645      	mov	r5, r8
    50b2:	b5e0      	push	{r5, r6, r7, lr}
    50b4:	b085      	sub	sp, #20
    50b6:	0005      	movs	r5, r0
    50b8:	000c      	movs	r4, r1
    50ba:	9101      	str	r1, [sp, #4]
    50bc:	4693      	mov	fp, r2
    if (!c || !timer || !packet_type) {
    50be:	2800      	cmp	r0, #0
    50c0:	d100      	bne.n	50c4 <iotx_mc_read_packet+0x1c>
    50c2:	e111      	b.n	52e8 <iotx_mc_read_packet+0x240>
    50c4:	2900      	cmp	r1, #0
    50c6:	d100      	bne.n	50ca <iotx_mc_read_packet+0x22>
    50c8:	e111      	b.n	52ee <iotx_mc_read_packet+0x246>
    50ca:	2a00      	cmp	r2, #0
    50cc:	d100      	bne.n	50d0 <iotx_mc_read_packet+0x28>
    50ce:	e111      	b.n	52f4 <iotx_mc_read_packet+0x24c>
    HAL_MutexLock(c->lock_read_buf);
    50d0:	23a8      	movs	r3, #168	; 0xa8
    50d2:	58c0      	ldr	r0, [r0, r3]
    50d4:	4b8d      	ldr	r3, [pc, #564]	; (530c <iotx_mc_read_packet+0x264>)
    50d6:	4798      	blx	r3
    left_t = iotx_time_left(timer);
    50d8:	0020      	movs	r0, r4
    50da:	4b8d      	ldr	r3, [pc, #564]	; (5310 <iotx_mc_read_packet+0x268>)
    50dc:	4798      	blx	r3
    50de:	1e03      	subs	r3, r0, #0
    left_t = (left_t == 0) ? 1 : left_t;
    50e0:	d100      	bne.n	50e4 <iotx_mc_read_packet+0x3c>
    50e2:	3301      	adds	r3, #1
    rc = c->ipstack->read(c->ipstack, c->buf_read, 1, left_t);
    50e4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    50e6:	6944      	ldr	r4, [r0, #20]
    50e8:	2201      	movs	r2, #1
    50ea:	6a29      	ldr	r1, [r5, #32]
    50ec:	47a0      	blx	r4
    50ee:	1e04      	subs	r4, r0, #0
    if (0 == rc) { /* timeout */
    50f0:	d034      	beq.n	515c <iotx_mc_read_packet+0xb4>
    } else if (1 != rc) {
    50f2:	2801      	cmp	r0, #1
    50f4:	d13a      	bne.n	516c <iotx_mc_read_packet+0xc4>
    left_t = iotx_time_left(timer);
    50f6:	9801      	ldr	r0, [sp, #4]
    50f8:	4b85      	ldr	r3, [pc, #532]	; (5310 <iotx_mc_read_packet+0x268>)
    50fa:	4798      	blx	r3
    left_t = (left_t == 0) ? 1 : left_t;
    50fc:	2800      	cmp	r0, #0
    50fe:	d100      	bne.n	5102 <iotx_mc_read_packet+0x5a>
    5100:	3001      	adds	r0, #1
    5102:	2301      	movs	r3, #1
    5104:	2800      	cmp	r0, #0
    5106:	d000      	beq.n	510a <iotx_mc_read_packet+0x62>
    5108:	0003      	movs	r3, r0
    510a:	9300      	str	r3, [sp, #0]
    int multiplier = 1;
    510c:	0027      	movs	r7, r4
    *value = 0;
    510e:	2600      	movs	r6, #0
        *value += (i & 127) * multiplier;
    5110:	237f      	movs	r3, #127	; 0x7f
    5112:	469a      	mov	sl, r3
        rc = c->ipstack->read(c->ipstack, &i, 1, timeout == 0 ? 1 : timeout);
    5114:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5116:	6943      	ldr	r3, [r0, #20]
    5118:	4698      	mov	r8, r3
    511a:	9b00      	ldr	r3, [sp, #0]
    511c:	2201      	movs	r2, #1
    511e:	a902      	add	r1, sp, #8
    5120:	47c0      	blx	r8
        if (rc != 1) {
    5122:	2801      	cmp	r0, #1
    5124:	d000      	beq.n	5128 <iotx_mc_read_packet+0x80>
    5126:	e0ea      	b.n	52fe <iotx_mc_read_packet+0x256>
        *value += (i & 127) * multiplier;
    5128:	ab02      	add	r3, sp, #8
    512a:	781b      	ldrb	r3, [r3, #0]
    512c:	4652      	mov	r2, sl
    512e:	401a      	ands	r2, r3
    5130:	437a      	muls	r2, r7
    5132:	18b6      	adds	r6, r6, r2
        multiplier *= 128;
    5134:	01ff      	lsls	r7, r7, #7
    } while ((i & 128) != 0);
    5136:	b25b      	sxtb	r3, r3
    5138:	2b00      	cmp	r3, #0
    513a:	da24      	bge.n	5186 <iotx_mc_read_packet+0xde>
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES) {
    513c:	3401      	adds	r4, #1
    513e:	2c05      	cmp	r4, #5
    5140:	d1e8      	bne.n	5114 <iotx_mc_read_packet+0x6c>
            return MQTTPACKET_READ_ERROR; /* bad data */
    5142:	2401      	movs	r4, #1
    5144:	4264      	negs	r4, r4
        mqtt_err("decodePacket error,rc = %d", rc);
    5146:	0021      	movs	r1, r4
    5148:	4872      	ldr	r0, [pc, #456]	; (5314 <iotx_mc_read_packet+0x26c>)
    514a:	4e73      	ldr	r6, [pc, #460]	; (5318 <iotx_mc_read_packet+0x270>)
    514c:	47b0      	blx	r6
    514e:	4873      	ldr	r0, [pc, #460]	; (531c <iotx_mc_read_packet+0x274>)
    5150:	47b0      	blx	r6
        HAL_MutexUnlock(c->lock_read_buf);
    5152:	23a8      	movs	r3, #168	; 0xa8
    5154:	58e8      	ldr	r0, [r5, r3]
    5156:	4b72      	ldr	r3, [pc, #456]	; (5320 <iotx_mc_read_packet+0x278>)
    5158:	4798      	blx	r3
        return rc;
    515a:	e046      	b.n	51ea <iotx_mc_read_packet+0x142>
        *packet_type = 0;
    515c:	2300      	movs	r3, #0
    515e:	465a      	mov	r2, fp
    5160:	6013      	str	r3, [r2, #0]
        HAL_MutexUnlock(c->lock_read_buf);
    5162:	33a8      	adds	r3, #168	; 0xa8
    5164:	58e8      	ldr	r0, [r5, r3]
    5166:	4b6e      	ldr	r3, [pc, #440]	; (5320 <iotx_mc_read_packet+0x278>)
    5168:	4798      	blx	r3
        return SUCCESS_RETURN;
    516a:	e03e      	b.n	51ea <iotx_mc_read_packet+0x142>
        mqtt_debug("mqtt read error, rc=%d", rc);
    516c:	0001      	movs	r1, r0
    516e:	486d      	ldr	r0, [pc, #436]	; (5324 <iotx_mc_read_packet+0x27c>)
    5170:	4c69      	ldr	r4, [pc, #420]	; (5318 <iotx_mc_read_packet+0x270>)
    5172:	47a0      	blx	r4
    5174:	4869      	ldr	r0, [pc, #420]	; (531c <iotx_mc_read_packet+0x274>)
    5176:	47a0      	blx	r4
        HAL_MutexUnlock(c->lock_read_buf);
    5178:	23a8      	movs	r3, #168	; 0xa8
    517a:	58e8      	ldr	r0, [r5, r3]
    517c:	4b68      	ldr	r3, [pc, #416]	; (5320 <iotx_mc_read_packet+0x278>)
    517e:	4798      	blx	r3
        return FAIL_RETURN;
    5180:	2401      	movs	r4, #1
    5182:	4264      	negs	r4, r4
    5184:	e031      	b.n	51ea <iotx_mc_read_packet+0x142>
    if ((rc = iotx_mc_decode_packet(c, &rem_len, left_t)) < 0) {
    5186:	2c00      	cmp	r4, #0
    5188:	dbdd      	blt.n	5146 <iotx_mc_read_packet+0x9e>
    len += MQTTPacket_encode((unsigned char *)c->buf_read + 1,
    518a:	6a2b      	ldr	r3, [r5, #32]
    518c:	1c58      	adds	r0, r3, #1
    518e:	0031      	movs	r1, r6
    5190:	4b65      	ldr	r3, [pc, #404]	; (5328 <iotx_mc_read_packet+0x280>)
    5192:	4798      	blx	r3
    5194:	1c44      	adds	r4, r0, #1
    rc = _alloc_recv_buffer(c, rem_len + len);
    5196:	19a3      	adds	r3, r4, r6
    5198:	4698      	mov	r8, r3
    if ((rem_len > 0) && ((rem_len + len) > c->buf_size_read)) {
    519a:	2e00      	cmp	r6, #0
    519c:	dc00      	bgt.n	51a0 <iotx_mc_read_packet+0xf8>
    519e:	e0b1      	b.n	5304 <iotx_mc_read_packet+0x25c>
    51a0:	6969      	ldr	r1, [r5, #20]
    51a2:	428b      	cmp	r3, r1
    51a4:	d829      	bhi.n	51fa <iotx_mc_read_packet+0x152>
    left_t = iotx_time_left(timer);
    51a6:	9801      	ldr	r0, [sp, #4]
    51a8:	4b59      	ldr	r3, [pc, #356]	; (5310 <iotx_mc_read_packet+0x268>)
    51aa:	4798      	blx	r3
    left_t = (left_t == 0) ? 1 : left_t;
    51ac:	2800      	cmp	r0, #0
    51ae:	d100      	bne.n	51b2 <iotx_mc_read_packet+0x10a>
    51b0:	3001      	adds	r0, #1
    if (rem_len > 0 && (c->ipstack->read(c->ipstack, c->buf_read + len, rem_len, left_t) != rem_len)) {
    51b2:	6aaf      	ldr	r7, [r5, #40]	; 0x28
    51b4:	6a2b      	ldr	r3, [r5, #32]
    51b6:	1919      	adds	r1, r3, r4
    51b8:	697c      	ldr	r4, [r7, #20]
    51ba:	0003      	movs	r3, r0
    51bc:	0032      	movs	r2, r6
    51be:	0038      	movs	r0, r7
    51c0:	47a0      	blx	r4
    51c2:	42b0      	cmp	r0, r6
    51c4:	d000      	beq.n	51c8 <iotx_mc_read_packet+0x120>
    51c6:	e083      	b.n	52d0 <iotx_mc_read_packet+0x228>
    header.byte = c->buf_read[0];
    51c8:	6a2b      	ldr	r3, [r5, #32]
    51ca:	781b      	ldrb	r3, [r3, #0]
    *packet_type = header.bits.type;
    51cc:	091b      	lsrs	r3, r3, #4
    51ce:	465a      	mov	r2, fp
    51d0:	6013      	str	r3, [r2, #0]
    if ((len + rem_len) < c->buf_size_read) {
    51d2:	696b      	ldr	r3, [r5, #20]
    51d4:	4598      	cmp	r8, r3
    51d6:	d203      	bcs.n	51e0 <iotx_mc_read_packet+0x138>
        c->buf_read[len + rem_len] = '\0';
    51d8:	2300      	movs	r3, #0
    51da:	6a2a      	ldr	r2, [r5, #32]
    51dc:	4641      	mov	r1, r8
    51de:	5453      	strb	r3, [r2, r1]
    HAL_MutexUnlock(c->lock_read_buf);
    51e0:	23a8      	movs	r3, #168	; 0xa8
    51e2:	58e8      	ldr	r0, [r5, r3]
    51e4:	4b4e      	ldr	r3, [pc, #312]	; (5320 <iotx_mc_read_packet+0x278>)
    51e6:	4798      	blx	r3
    return SUCCESS_RETURN;
    51e8:	2400      	movs	r4, #0
}
    51ea:	0020      	movs	r0, r4
    51ec:	b005      	add	sp, #20
    51ee:	bc3c      	pop	{r2, r3, r4, r5}
    51f0:	4690      	mov	r8, r2
    51f2:	4699      	mov	r9, r3
    51f4:	46a2      	mov	sl, r4
    51f6:	46ab      	mov	fp, r5
    51f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mqtt_err("mqtt read buffer is too short, mqttReadBufLen : %u, remainDataLen : %d", c->buf_size_read, rem_len);
    51fa:	0032      	movs	r2, r6
    51fc:	484b      	ldr	r0, [pc, #300]	; (532c <iotx_mc_read_packet+0x284>)
    51fe:	4b46      	ldr	r3, [pc, #280]	; (5318 <iotx_mc_read_packet+0x270>)
    5200:	4698      	mov	r8, r3
    5202:	4798      	blx	r3
    5204:	4845      	ldr	r0, [pc, #276]	; (531c <iotx_mc_read_packet+0x274>)
    5206:	47c0      	blx	r8
        needReadLen = c->buf_size_read - len;
    5208:	696b      	ldr	r3, [r5, #20]
    520a:	1b1b      	subs	r3, r3, r4
    520c:	4698      	mov	r8, r3
    520e:	4699      	mov	r9, r3
        left_t = iotx_time_left(timer);
    5210:	9801      	ldr	r0, [sp, #4]
    5212:	4b3f      	ldr	r3, [pc, #252]	; (5310 <iotx_mc_read_packet+0x268>)
    5214:	4798      	blx	r3
    5216:	1e03      	subs	r3, r0, #0
        left_t = (left_t == 0) ? 1 : left_t;
    5218:	d100      	bne.n	521c <iotx_mc_read_packet+0x174>
    521a:	3301      	adds	r3, #1
        if (c->ipstack->read(c->ipstack, c->buf_read + len, needReadLen, left_t) != needReadLen) {
    521c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    521e:	6a2a      	ldr	r2, [r5, #32]
    5220:	1911      	adds	r1, r2, r4
    5222:	6944      	ldr	r4, [r0, #20]
    5224:	4642      	mov	r2, r8
    5226:	47a0      	blx	r4
    5228:	4581      	cmp	r9, r0
    522a:	d12a      	bne.n	5282 <iotx_mc_read_packet+0x1da>
        remainDataLen = rem_len - needReadLen;
    522c:	4643      	mov	r3, r8
    522e:	1af6      	subs	r6, r6, r3
        remainDataBuf = mqtt_malloc(remainDataLen + 1);
    5230:	1c70      	adds	r0, r6, #1
    5232:	4b3f      	ldr	r3, [pc, #252]	; (5330 <iotx_mc_read_packet+0x288>)
    5234:	4798      	blx	r3
    5236:	1e04      	subs	r4, r0, #0
        if (!remainDataBuf) {
    5238:	d02f      	beq.n	529a <iotx_mc_read_packet+0x1f2>
        left_t = iotx_time_left(timer);
    523a:	9801      	ldr	r0, [sp, #4]
    523c:	4b34      	ldr	r3, [pc, #208]	; (5310 <iotx_mc_read_packet+0x268>)
    523e:	4798      	blx	r3
    5240:	1e03      	subs	r3, r0, #0
        left_t = (left_t == 0) ? 1 : left_t;
    5242:	d100      	bne.n	5246 <iotx_mc_read_packet+0x19e>
    5244:	3301      	adds	r3, #1
        if (c->ipstack->read(c->ipstack, remainDataBuf, remainDataLen, left_t) != remainDataLen) {
    5246:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5248:	6947      	ldr	r7, [r0, #20]
    524a:	0032      	movs	r2, r6
    524c:	0021      	movs	r1, r4
    524e:	47b8      	blx	r7
    5250:	4286      	cmp	r6, r0
    5252:	d12e      	bne.n	52b2 <iotx_mc_read_packet+0x20a>
        mqtt_free(remainDataBuf);
    5254:	0020      	movs	r0, r4
    5256:	4b37      	ldr	r3, [pc, #220]	; (5334 <iotx_mc_read_packet+0x28c>)
    5258:	4798      	blx	r3
        HAL_MutexUnlock(c->lock_read_buf);
    525a:	23a8      	movs	r3, #168	; 0xa8
    525c:	58e8      	ldr	r0, [r5, r3]
    525e:	4b30      	ldr	r3, [pc, #192]	; (5320 <iotx_mc_read_packet+0x278>)
    5260:	4798      	blx	r3
        if (NULL != c->handle_event.h_fp) {
    5262:	23b0      	movs	r3, #176	; 0xb0
    5264:	58eb      	ldr	r3, [r5, r3]
    5266:	2b00      	cmp	r3, #0
    5268:	d047      	beq.n	52fa <iotx_mc_read_packet+0x252>
            msg.event_type = IOTX_MQTT_EVENT_BUFFER_OVERFLOW;
    526a:	230d      	movs	r3, #13
    526c:	aa02      	add	r2, sp, #8
    526e:	7013      	strb	r3, [r2, #0]
            msg.msg = "mqtt read buffer is too short";
    5270:	4b31      	ldr	r3, [pc, #196]	; (5338 <iotx_mc_read_packet+0x290>)
    5272:	9303      	str	r3, [sp, #12]
            _handle_event(&c->handle_event, c, &msg);
    5274:	0028      	movs	r0, r5
    5276:	30b0      	adds	r0, #176	; 0xb0
    5278:	0029      	movs	r1, r5
    527a:	4b30      	ldr	r3, [pc, #192]	; (533c <iotx_mc_read_packet+0x294>)
    527c:	4798      	blx	r3
        return SUCCESS_RETURN;
    527e:	2400      	movs	r4, #0
    5280:	e7b3      	b.n	51ea <iotx_mc_read_packet+0x142>
            mqtt_err("mqtt read error");
    5282:	482f      	ldr	r0, [pc, #188]	; (5340 <iotx_mc_read_packet+0x298>)
    5284:	4c24      	ldr	r4, [pc, #144]	; (5318 <iotx_mc_read_packet+0x270>)
    5286:	47a0      	blx	r4
    5288:	4824      	ldr	r0, [pc, #144]	; (531c <iotx_mc_read_packet+0x274>)
    528a:	47a0      	blx	r4
            HAL_MutexUnlock(c->lock_read_buf);
    528c:	23a8      	movs	r3, #168	; 0xa8
    528e:	58e8      	ldr	r0, [r5, r3]
    5290:	4b23      	ldr	r3, [pc, #140]	; (5320 <iotx_mc_read_packet+0x278>)
    5292:	4798      	blx	r3
            return FAIL_RETURN;
    5294:	2401      	movs	r4, #1
    5296:	4264      	negs	r4, r4
    5298:	e7a7      	b.n	51ea <iotx_mc_read_packet+0x142>
            mqtt_err("allocate remain buffer failed");
    529a:	482a      	ldr	r0, [pc, #168]	; (5344 <iotx_mc_read_packet+0x29c>)
    529c:	4c1e      	ldr	r4, [pc, #120]	; (5318 <iotx_mc_read_packet+0x270>)
    529e:	47a0      	blx	r4
    52a0:	481e      	ldr	r0, [pc, #120]	; (531c <iotx_mc_read_packet+0x274>)
    52a2:	47a0      	blx	r4
            HAL_MutexUnlock(c->lock_read_buf);
    52a4:	23a8      	movs	r3, #168	; 0xa8
    52a6:	58e8      	ldr	r0, [r5, r3]
    52a8:	4b1d      	ldr	r3, [pc, #116]	; (5320 <iotx_mc_read_packet+0x278>)
    52aa:	4798      	blx	r3
            return FAIL_RETURN;
    52ac:	2401      	movs	r4, #1
    52ae:	4264      	negs	r4, r4
    52b0:	e79b      	b.n	51ea <iotx_mc_read_packet+0x142>
            mqtt_err("mqtt read error");
    52b2:	4823      	ldr	r0, [pc, #140]	; (5340 <iotx_mc_read_packet+0x298>)
    52b4:	4e18      	ldr	r6, [pc, #96]	; (5318 <iotx_mc_read_packet+0x270>)
    52b6:	47b0      	blx	r6
    52b8:	4818      	ldr	r0, [pc, #96]	; (531c <iotx_mc_read_packet+0x274>)
    52ba:	47b0      	blx	r6
            mqtt_free(remainDataBuf);
    52bc:	0020      	movs	r0, r4
    52be:	4b1d      	ldr	r3, [pc, #116]	; (5334 <iotx_mc_read_packet+0x28c>)
    52c0:	4798      	blx	r3
            HAL_MutexUnlock(c->lock_read_buf);
    52c2:	23a8      	movs	r3, #168	; 0xa8
    52c4:	58e8      	ldr	r0, [r5, r3]
    52c6:	4b16      	ldr	r3, [pc, #88]	; (5320 <iotx_mc_read_packet+0x278>)
    52c8:	4798      	blx	r3
            return FAIL_RETURN;
    52ca:	2401      	movs	r4, #1
    52cc:	4264      	negs	r4, r4
    52ce:	e78c      	b.n	51ea <iotx_mc_read_packet+0x142>
        mqtt_err("mqtt read error");
    52d0:	481b      	ldr	r0, [pc, #108]	; (5340 <iotx_mc_read_packet+0x298>)
    52d2:	4c11      	ldr	r4, [pc, #68]	; (5318 <iotx_mc_read_packet+0x270>)
    52d4:	47a0      	blx	r4
    52d6:	4811      	ldr	r0, [pc, #68]	; (531c <iotx_mc_read_packet+0x274>)
    52d8:	47a0      	blx	r4
        HAL_MutexUnlock(c->lock_read_buf);
    52da:	23a8      	movs	r3, #168	; 0xa8
    52dc:	58e8      	ldr	r0, [r5, r3]
    52de:	4b10      	ldr	r3, [pc, #64]	; (5320 <iotx_mc_read_packet+0x278>)
    52e0:	4798      	blx	r3
        return FAIL_RETURN;
    52e2:	2401      	movs	r4, #1
    52e4:	4264      	negs	r4, r4
    52e6:	e780      	b.n	51ea <iotx_mc_read_packet+0x142>
        return FAIL_RETURN;
    52e8:	2401      	movs	r4, #1
    52ea:	4264      	negs	r4, r4
    52ec:	e77d      	b.n	51ea <iotx_mc_read_packet+0x142>
    52ee:	2401      	movs	r4, #1
    52f0:	4264      	negs	r4, r4
    52f2:	e77a      	b.n	51ea <iotx_mc_read_packet+0x142>
    52f4:	2401      	movs	r4, #1
    52f6:	4264      	negs	r4, r4
    52f8:	e777      	b.n	51ea <iotx_mc_read_packet+0x142>
        return SUCCESS_RETURN;
    52fa:	2400      	movs	r4, #0
    52fc:	e775      	b.n	51ea <iotx_mc_read_packet+0x142>
            return MQTT_NETWORK_ERROR;
    52fe:	240e      	movs	r4, #14
    5300:	4264      	negs	r4, r4
    5302:	e720      	b.n	5146 <iotx_mc_read_packet+0x9e>
    left_t = iotx_time_left(timer);
    5304:	9801      	ldr	r0, [sp, #4]
    5306:	4b02      	ldr	r3, [pc, #8]	; (5310 <iotx_mc_read_packet+0x268>)
    5308:	4798      	blx	r3
    530a:	e75d      	b.n	51c8 <iotx_mc_read_packet+0x120>
    530c:	00007d2f 	.word	0x00007d2f
    5310:	00004d01 	.word	0x00004d01
    5314:	0000a998 	.word	0x0000a998
    5318:	00007d35 	.word	0x00007d35
    531c:	00009cb4 	.word	0x00009cb4
    5320:	00007d31 	.word	0x00007d31
    5324:	0000a980 	.word	0x0000a980
    5328:	00006ff9 	.word	0x00006ff9
    532c:	0000a9b4 	.word	0x0000a9b4
    5330:	00007d1d 	.word	0x00007d1d
    5334:	00007c5d 	.word	0x00007c5d
    5338:	0000aa2c 	.word	0x0000aa2c
    533c:	00004d51 	.word	0x00004d51
    5340:	0000a9fc 	.word	0x0000a9fc
    5344:	0000aa0c 	.word	0x0000aa0c

00005348 <MQTTConnect>:
{
    5348:	b530      	push	{r4, r5, lr}
    534a:	b083      	sub	sp, #12
    534c:	1e04      	subs	r4, r0, #0
    if (!pClient) {
    534e:	d03a      	beq.n	53c6 <MQTTConnect+0x7e>
    HAL_MutexLock(pClient->lock_write_buf);
    5350:	23a4      	movs	r3, #164	; 0xa4
    5352:	58c0      	ldr	r0, [r0, r3]
    5354:	4b1d      	ldr	r3, [pc, #116]	; (53cc <MQTTConnect+0x84>)
    5356:	4798      	blx	r3
    pConnectParams = &pClient->connect_data;
    5358:	0022      	movs	r2, r4
    535a:	3240      	adds	r2, #64	; 0x40
    if ((len = MQTTSerialize_connect((unsigned char *)pClient->buf_send, pClient->buf_size_send, pConnectParams)) <= 0) {
    535c:	6921      	ldr	r1, [r4, #16]
    535e:	69e0      	ldr	r0, [r4, #28]
    5360:	4b1b      	ldr	r3, [pc, #108]	; (53d0 <MQTTConnect+0x88>)
    5362:	4798      	blx	r3
    5364:	1e05      	subs	r5, r0, #0
    5366:	dd15      	ble.n	5394 <MQTTConnect+0x4c>
    iotx_time_init(&connectTimer);
    5368:	a801      	add	r0, sp, #4
    536a:	4b1a      	ldr	r3, [pc, #104]	; (53d4 <MQTTConnect+0x8c>)
    536c:	4798      	blx	r3
    utils_time_countdown_ms(&connectTimer, pClient->request_timeout_ms);
    536e:	68a1      	ldr	r1, [r4, #8]
    5370:	a801      	add	r0, sp, #4
    5372:	4b19      	ldr	r3, [pc, #100]	; (53d8 <MQTTConnect+0x90>)
    5374:	4798      	blx	r3
    if ((iotx_mc_send_packet(pClient, pClient->buf_send, len, &connectTimer)) != SUCCESS_RETURN) {
    5376:	ab01      	add	r3, sp, #4
    5378:	002a      	movs	r2, r5
    537a:	69e1      	ldr	r1, [r4, #28]
    537c:	0020      	movs	r0, r4
    537e:	4d17      	ldr	r5, [pc, #92]	; (53dc <MQTTConnect+0x94>)
    5380:	47a8      	blx	r5
    5382:	1e05      	subs	r5, r0, #0
    5384:	d113      	bne.n	53ae <MQTTConnect+0x66>
    HAL_MutexUnlock(pClient->lock_write_buf);
    5386:	23a4      	movs	r3, #164	; 0xa4
    5388:	58e0      	ldr	r0, [r4, r3]
    538a:	4b15      	ldr	r3, [pc, #84]	; (53e0 <MQTTConnect+0x98>)
    538c:	4798      	blx	r3
}
    538e:	0028      	movs	r0, r5
    5390:	b003      	add	sp, #12
    5392:	bd30      	pop	{r4, r5, pc}
        mqtt_err("Serialize connect packet failed, len = %d", len);
    5394:	0001      	movs	r1, r0
    5396:	4813      	ldr	r0, [pc, #76]	; (53e4 <MQTTConnect+0x9c>)
    5398:	4d13      	ldr	r5, [pc, #76]	; (53e8 <MQTTConnect+0xa0>)
    539a:	47a8      	blx	r5
    539c:	4813      	ldr	r0, [pc, #76]	; (53ec <MQTTConnect+0xa4>)
    539e:	47a8      	blx	r5
        HAL_MutexUnlock(pClient->lock_write_buf);
    53a0:	23a4      	movs	r3, #164	; 0xa4
    53a2:	58e0      	ldr	r0, [r4, r3]
    53a4:	4b0e      	ldr	r3, [pc, #56]	; (53e0 <MQTTConnect+0x98>)
    53a6:	4798      	blx	r3
        return MQTT_CONNECT_PACKET_ERROR;
    53a8:	251e      	movs	r5, #30
    53aa:	426d      	negs	r5, r5
    53ac:	e7ef      	b.n	538e <MQTTConnect+0x46>
        mqtt_err("send connect packet failed");
    53ae:	4810      	ldr	r0, [pc, #64]	; (53f0 <MQTTConnect+0xa8>)
    53b0:	4d0d      	ldr	r5, [pc, #52]	; (53e8 <MQTTConnect+0xa0>)
    53b2:	47a8      	blx	r5
    53b4:	480d      	ldr	r0, [pc, #52]	; (53ec <MQTTConnect+0xa4>)
    53b6:	47a8      	blx	r5
        HAL_MutexUnlock(pClient->lock_write_buf);
    53b8:	23a4      	movs	r3, #164	; 0xa4
    53ba:	58e0      	ldr	r0, [r4, r3]
    53bc:	4b08      	ldr	r3, [pc, #32]	; (53e0 <MQTTConnect+0x98>)
    53be:	4798      	blx	r3
        return MQTT_NETWORK_ERROR;
    53c0:	250e      	movs	r5, #14
    53c2:	426d      	negs	r5, r5
    53c4:	e7e3      	b.n	538e <MQTTConnect+0x46>
        return FAIL_RETURN;
    53c6:	2501      	movs	r5, #1
    53c8:	426d      	negs	r5, r5
    53ca:	e7e0      	b.n	538e <MQTTConnect+0x46>
    53cc:	00007d2f 	.word	0x00007d2f
    53d0:	00006cfd 	.word	0x00006cfd
    53d4:	00004d2d 	.word	0x00004d2d
    53d8:	00004d39 	.word	0x00004d39
    53dc:	00004e99 	.word	0x00004e99
    53e0:	00007d31 	.word	0x00007d31
    53e4:	0000aa4c 	.word	0x0000aa4c
    53e8:	00007d35 	.word	0x00007d35
    53ec:	00009cb4 	.word	0x00009cb4
    53f0:	0000aa78 	.word	0x0000aa78

000053f4 <MQTTPublish>:
{
    53f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    53f6:	46ce      	mov	lr, r9
    53f8:	4647      	mov	r7, r8
    53fa:	b580      	push	{r7, lr}
    53fc:	b08d      	sub	sp, #52	; 0x34
    53fe:	0004      	movs	r4, r0
    5400:	0015      	movs	r5, r2
    MQTTString          topic = MQTTString_initializer;
    5402:	2300      	movs	r3, #0
    5404:	9309      	str	r3, [sp, #36]	; 0x24
    5406:	930a      	str	r3, [sp, #40]	; 0x28
    if (!c || !topicName || !topic_msg) {
    5408:	2800      	cmp	r0, #0
    540a:	d100      	bne.n	540e <MQTTPublish+0x1a>
    540c:	e0bf      	b.n	558e <MQTTPublish+0x19a>
    540e:	2900      	cmp	r1, #0
    5410:	d100      	bne.n	5414 <MQTTPublish+0x20>
    5412:	e0bf      	b.n	5594 <MQTTPublish+0x1a0>
    5414:	2a00      	cmp	r2, #0
    5416:	d100      	bne.n	541a <MQTTPublish+0x26>
    5418:	e0bf      	b.n	559a <MQTTPublish+0x1a6>
    topic.cstring = (char *)topicName;
    541a:	ae08      	add	r6, sp, #32
    541c:	9108      	str	r1, [sp, #32]
    iotx_time_init(&timer);
    541e:	a80b      	add	r0, sp, #44	; 0x2c
    5420:	4b5f      	ldr	r3, [pc, #380]	; (55a0 <MQTTPublish+0x1ac>)
    5422:	4798      	blx	r3
    utils_time_countdown_ms(&timer, c->request_timeout_ms);
    5424:	68a1      	ldr	r1, [r4, #8]
    5426:	a80b      	add	r0, sp, #44	; 0x2c
    5428:	4b5e      	ldr	r3, [pc, #376]	; (55a4 <MQTTPublish+0x1b0>)
    542a:	4798      	blx	r3
    HAL_MutexLock(c->lock_list_pub);
    542c:	23a0      	movs	r3, #160	; 0xa0
    542e:	58e0      	ldr	r0, [r4, r3]
    5430:	4f5d      	ldr	r7, [pc, #372]	; (55a8 <MQTTPublish+0x1b4>)
    5432:	47b8      	blx	r7
    HAL_MutexLock(c->lock_write_buf);
    5434:	23a4      	movs	r3, #164	; 0xa4
    5436:	58e0      	ldr	r0, [r4, r3]
    5438:	47b8      	blx	r7
    len = MQTTSerialize_publish((unsigned char *)c->buf_send,
    543a:	78ab      	ldrb	r3, [r5, #2]
    543c:	68aa      	ldr	r2, [r5, #8]
    543e:	9206      	str	r2, [sp, #24]
    5440:	692a      	ldr	r2, [r5, #16]
    5442:	9205      	str	r2, [sp, #20]
    5444:	aa02      	add	r2, sp, #8
    5446:	ce83      	ldmia	r6!, {r0, r1, r7}
    5448:	c283      	stmia	r2!, {r0, r1, r7}
    544a:	882a      	ldrh	r2, [r5, #0]
    544c:	9201      	str	r2, [sp, #4]
    544e:	792a      	ldrb	r2, [r5, #4]
    5450:	9200      	str	r2, [sp, #0]
    5452:	2200      	movs	r2, #0
    5454:	6921      	ldr	r1, [r4, #16]
    5456:	69e0      	ldr	r0, [r4, #28]
    5458:	4e54      	ldr	r6, [pc, #336]	; (55ac <MQTTPublish+0x1b8>)
    545a:	47b0      	blx	r6
    545c:	4680      	mov	r8, r0
    if (len <= 0) {
    545e:	2800      	cmp	r0, #0
    5460:	dd36      	ble.n	54d0 <MQTTPublish+0xdc>
    if (topic_msg->qos > IOTX_MQTT_QOS0) {
    5462:	78ab      	ldrb	r3, [r5, #2]
    5464:	2b00      	cmp	r3, #0
    5466:	d067      	beq.n	5538 <MQTTPublish+0x144>
        if (SUCCESS_RETURN != iotx_mc_push_pubInfo_to(c, len, topic_msg->packet_id, &node)) {
    5468:	882b      	ldrh	r3, [r5, #0]
    546a:	4699      	mov	r9, r3
    list_number = list_entry_number(&c->list_pub_wait_ack);
    546c:	0026      	movs	r6, r4
    546e:	3698      	adds	r6, #152	; 0x98
 */
static inline int __dlist_entry_number(dlist_t *queue)
{
    int num;
    dlist_t *cur = queue;
    for (num = 0; cur->next != queue; cur = cur->next, num++)
    5470:	6873      	ldr	r3, [r6, #4]
    5472:	42b3      	cmp	r3, r6
    5474:	d03e      	beq.n	54f4 <MQTTPublish+0x100>
    5476:	2100      	movs	r1, #0
    5478:	3101      	adds	r1, #1
    547a:	685b      	ldr	r3, [r3, #4]
    547c:	429e      	cmp	r6, r3
    547e:	d1fb      	bne.n	5478 <MQTTPublish+0x84>
    if ((len < 0) || (len > c->buf_size_send)) {
    5480:	4643      	mov	r3, r8
    5482:	2b00      	cmp	r3, #0
    5484:	db38      	blt.n	54f8 <MQTTPublish+0x104>
    5486:	6923      	ldr	r3, [r4, #16]
    5488:	4543      	cmp	r3, r8
    548a:	d335      	bcc.n	54f8 <MQTTPublish+0x104>
    if (list_number >= IOTX_MC_REPUB_NUM_MAX) {
    548c:	2913      	cmp	r1, #19
    548e:	dc47      	bgt.n	5520 <MQTTPublish+0x12c>
    repubInfo = (iotx_mc_pub_info_t *)mqtt_malloc(sizeof(iotx_mc_pub_info_t) + len);
    5490:	4640      	mov	r0, r8
    5492:	3018      	adds	r0, #24
    5494:	4b46      	ldr	r3, [pc, #280]	; (55b0 <MQTTPublish+0x1bc>)
    5496:	4798      	blx	r3
    5498:	1e07      	subs	r7, r0, #0
    if (NULL == repubInfo) {
    549a:	d047      	beq.n	552c <MQTTPublish+0x138>
    repubInfo->node_state = IOTX_MC_NODE_STATE_NORMANL;
    549c:	2300      	movs	r3, #0
    549e:	7103      	strb	r3, [r0, #4]
    repubInfo->msg_id = msgId;
    54a0:	464b      	mov	r3, r9
    54a2:	80c3      	strh	r3, [r0, #6]
    repubInfo->len = len;
    54a4:	4643      	mov	r3, r8
    54a6:	6083      	str	r3, [r0, #8]
    iotx_time_start(&repubInfo->pub_start_time);
    54a8:	4b42      	ldr	r3, [pc, #264]	; (55b4 <MQTTPublish+0x1c0>)
    54aa:	4798      	blx	r3
    repubInfo->buf = (unsigned char *)repubInfo + sizeof(iotx_mc_pub_info_t);
    54ac:	0038      	movs	r0, r7
    54ae:	3018      	adds	r0, #24
    54b0:	60f8      	str	r0, [r7, #12]
    memcpy(repubInfo->buf, c->buf_send, len);
    54b2:	4642      	mov	r2, r8
    54b4:	69e1      	ldr	r1, [r4, #28]
    54b6:	4b40      	ldr	r3, [pc, #256]	; (55b8 <MQTTPublish+0x1c4>)
    54b8:	4798      	blx	r3
    INIT_LIST_HEAD(&repubInfo->linked_list);
    54ba:	003b      	movs	r3, r7
    54bc:	3310      	adds	r3, #16
    list->next = list;
    54be:	617b      	str	r3, [r7, #20]
    list->prev = list;
    54c0:	613b      	str	r3, [r7, #16]
    __dlist_add(node, queue->prev, queue);
    54c2:	2298      	movs	r2, #152	; 0x98
    54c4:	58a1      	ldr	r1, [r4, r2]
    node->next = next;
    54c6:	617e      	str	r6, [r7, #20]
    node->prev = prev;
    54c8:	6139      	str	r1, [r7, #16]
    prev->next = node;
    54ca:	604b      	str	r3, [r1, #4]
    next->prev = node;
    54cc:	50a3      	str	r3, [r4, r2]
    54ce:	e034      	b.n	553a <MQTTPublish+0x146>
        mqtt_err("MQTTSerialize_publish is error, len=%d, buf_size_send=%u, payloadlen=%u",
    54d0:	68ab      	ldr	r3, [r5, #8]
    54d2:	6922      	ldr	r2, [r4, #16]
    54d4:	0001      	movs	r1, r0
    54d6:	4839      	ldr	r0, [pc, #228]	; (55bc <MQTTPublish+0x1c8>)
    54d8:	4d39      	ldr	r5, [pc, #228]	; (55c0 <MQTTPublish+0x1cc>)
    54da:	47a8      	blx	r5
    54dc:	4839      	ldr	r0, [pc, #228]	; (55c4 <MQTTPublish+0x1d0>)
    54de:	47a8      	blx	r5
        HAL_MutexUnlock(c->lock_write_buf);
    54e0:	23a4      	movs	r3, #164	; 0xa4
    54e2:	58e0      	ldr	r0, [r4, r3]
    54e4:	4d38      	ldr	r5, [pc, #224]	; (55c8 <MQTTPublish+0x1d4>)
    54e6:	47a8      	blx	r5
        HAL_MutexUnlock(c->lock_list_pub);
    54e8:	23a0      	movs	r3, #160	; 0xa0
    54ea:	58e0      	ldr	r0, [r4, r3]
    54ec:	47a8      	blx	r5
        return MQTT_PUBLISH_PACKET_ERROR;
    54ee:	2615      	movs	r6, #21
    54f0:	4276      	negs	r6, r6
    54f2:	e031      	b.n	5558 <MQTTPublish+0x164>
    for (num = 0; cur->next != queue; cur = cur->next, num++)
    54f4:	2100      	movs	r1, #0
    54f6:	e7c3      	b.n	5480 <MQTTPublish+0x8c>
        mqtt_err("the param of len is error!");
    54f8:	4834      	ldr	r0, [pc, #208]	; (55cc <MQTTPublish+0x1d8>)
    54fa:	4d31      	ldr	r5, [pc, #196]	; (55c0 <MQTTPublish+0x1cc>)
    54fc:	47a8      	blx	r5
    54fe:	4831      	ldr	r0, [pc, #196]	; (55c4 <MQTTPublish+0x1d0>)
    5500:	47a8      	blx	r5
            mqtt_err("push publish into to pubInfolist failed!");
    5502:	4833      	ldr	r0, [pc, #204]	; (55d0 <MQTTPublish+0x1dc>)
    5504:	4d2e      	ldr	r5, [pc, #184]	; (55c0 <MQTTPublish+0x1cc>)
    5506:	47a8      	blx	r5
    5508:	482e      	ldr	r0, [pc, #184]	; (55c4 <MQTTPublish+0x1d0>)
    550a:	47a8      	blx	r5
            HAL_MutexUnlock(c->lock_write_buf);
    550c:	23a4      	movs	r3, #164	; 0xa4
    550e:	58e0      	ldr	r0, [r4, r3]
    5510:	4d2d      	ldr	r5, [pc, #180]	; (55c8 <MQTTPublish+0x1d4>)
    5512:	47a8      	blx	r5
            HAL_MutexUnlock(c->lock_list_pub);
    5514:	23a0      	movs	r3, #160	; 0xa0
    5516:	58e0      	ldr	r0, [r4, r3]
    5518:	47a8      	blx	r5
            return MQTT_PUSH_TO_LIST_ERROR;
    551a:	262a      	movs	r6, #42	; 0x2a
    551c:	4276      	negs	r6, r6
    551e:	e01b      	b.n	5558 <MQTTPublish+0x164>
        mqtt_err("more than %u elements in republish list. List overflow!", list_number);
    5520:	482c      	ldr	r0, [pc, #176]	; (55d4 <MQTTPublish+0x1e0>)
    5522:	4d27      	ldr	r5, [pc, #156]	; (55c0 <MQTTPublish+0x1cc>)
    5524:	47a8      	blx	r5
    5526:	4827      	ldr	r0, [pc, #156]	; (55c4 <MQTTPublish+0x1d0>)
    5528:	47a8      	blx	r5
    552a:	e7ea      	b.n	5502 <MQTTPublish+0x10e>
        mqtt_err("run iotx_memory_malloc is error!");
    552c:	482a      	ldr	r0, [pc, #168]	; (55d8 <MQTTPublish+0x1e4>)
    552e:	4d24      	ldr	r5, [pc, #144]	; (55c0 <MQTTPublish+0x1cc>)
    5530:	47a8      	blx	r5
    5532:	4824      	ldr	r0, [pc, #144]	; (55c4 <MQTTPublish+0x1d0>)
    5534:	47a8      	blx	r5
    5536:	e7e4      	b.n	5502 <MQTTPublish+0x10e>
    node = NULL;
    5538:	2700      	movs	r7, #0
    if (iotx_mc_send_packet(c, c->buf_send, len, &timer) != SUCCESS_RETURN) {
    553a:	ab0b      	add	r3, sp, #44	; 0x2c
    553c:	4642      	mov	r2, r8
    553e:	69e1      	ldr	r1, [r4, #28]
    5540:	0020      	movs	r0, r4
    5542:	4e26      	ldr	r6, [pc, #152]	; (55dc <MQTTPublish+0x1e8>)
    5544:	47b0      	blx	r6
    5546:	1e06      	subs	r6, r0, #0
    5548:	d10c      	bne.n	5564 <MQTTPublish+0x170>
    HAL_MutexUnlock(c->lock_write_buf);
    554a:	23a4      	movs	r3, #164	; 0xa4
    554c:	58e0      	ldr	r0, [r4, r3]
    554e:	4d1e      	ldr	r5, [pc, #120]	; (55c8 <MQTTPublish+0x1d4>)
    5550:	47a8      	blx	r5
    HAL_MutexUnlock(c->lock_list_pub);
    5552:	23a0      	movs	r3, #160	; 0xa0
    5554:	58e0      	ldr	r0, [r4, r3]
    5556:	47a8      	blx	r5
}
    5558:	0030      	movs	r0, r6
    555a:	b00d      	add	sp, #52	; 0x34
    555c:	bc0c      	pop	{r2, r3}
    555e:	4690      	mov	r8, r2
    5560:	4699      	mov	r9, r3
    5562:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (topic_msg->qos > IOTX_MQTT_QOS0) {
    5564:	78ab      	ldrb	r3, [r5, #2]
    5566:	2b00      	cmp	r3, #0
    5568:	d109      	bne.n	557e <MQTTPublish+0x18a>
        HAL_MutexUnlock(c->lock_write_buf);
    556a:	23a4      	movs	r3, #164	; 0xa4
    556c:	58e0      	ldr	r0, [r4, r3]
    556e:	4d16      	ldr	r5, [pc, #88]	; (55c8 <MQTTPublish+0x1d4>)
    5570:	47a8      	blx	r5
        HAL_MutexUnlock(c->lock_list_pub);
    5572:	23a0      	movs	r3, #160	; 0xa0
    5574:	58e0      	ldr	r0, [r4, r3]
    5576:	47a8      	blx	r5
        return MQTT_NETWORK_ERROR;
    5578:	260e      	movs	r6, #14
    557a:	4276      	negs	r6, r6
    557c:	e7ec      	b.n	5558 <MQTTPublish+0x164>
    dlist_t *prev = node->prev;
    557e:	693a      	ldr	r2, [r7, #16]
    dlist_t *next = node->next;
    5580:	697b      	ldr	r3, [r7, #20]
    prev->next = next;
    5582:	6053      	str	r3, [r2, #4]
    next->prev = prev;
    5584:	601a      	str	r2, [r3, #0]
            mqtt_free(node);
    5586:	0038      	movs	r0, r7
    5588:	4b15      	ldr	r3, [pc, #84]	; (55e0 <MQTTPublish+0x1ec>)
    558a:	4798      	blx	r3
    558c:	e7ed      	b.n	556a <MQTTPublish+0x176>
        return FAIL_RETURN;
    558e:	2601      	movs	r6, #1
    5590:	4276      	negs	r6, r6
    5592:	e7e1      	b.n	5558 <MQTTPublish+0x164>
    5594:	2601      	movs	r6, #1
    5596:	4276      	negs	r6, r6
    5598:	e7de      	b.n	5558 <MQTTPublish+0x164>
    559a:	2601      	movs	r6, #1
    559c:	4276      	negs	r6, r6
    559e:	e7db      	b.n	5558 <MQTTPublish+0x164>
    55a0:	00004d2d 	.word	0x00004d2d
    55a4:	00004d39 	.word	0x00004d39
    55a8:	00007d2f 	.word	0x00007d2f
    55ac:	00007265 	.word	0x00007265
    55b0:	00007d1d 	.word	0x00007d1d
    55b4:	00004cb1 	.word	0x00004cb1
    55b8:	000085b7 	.word	0x000085b7
    55bc:	0000aa94 	.word	0x0000aa94
    55c0:	00007d35 	.word	0x00007d35
    55c4:	00009cb4 	.word	0x00009cb4
    55c8:	00007d31 	.word	0x00007d31
    55cc:	0000aadc 	.word	0x0000aadc
    55d0:	0000ab54 	.word	0x0000ab54
    55d4:	0000aaf8 	.word	0x0000aaf8
    55d8:	0000ab30 	.word	0x0000ab30
    55dc:	00004e99 	.word	0x00004e99
    55e0:	00007c5d 	.word	0x00007c5d

000055e4 <wrapper_mqtt_init>:
    HAL_MutexUnlock(client->lock_generic);
}

/************************  Public Interface ************************/
void *wrapper_mqtt_init(iotx_mqtt_param_t *mqtt_params)
{
    55e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    55e6:	46de      	mov	lr, fp
    55e8:	4657      	mov	r7, sl
    55ea:	464e      	mov	r6, r9
    55ec:	4645      	mov	r5, r8
    55ee:	b5e0      	push	{r5, r6, r7, lr}
    55f0:	b099      	sub	sp, #100	; 0x64
    55f2:	0005      	movs	r5, r0
    int err;

    iotx_mc_client_t *pclient = (iotx_mc_client_t *)mqtt_malloc(sizeof(iotx_mc_client_t));
    55f4:	20b8      	movs	r0, #184	; 0xb8
    55f6:	4bb8      	ldr	r3, [pc, #736]	; (58d8 <wrapper_mqtt_init+0x2f4>)
    55f8:	4798      	blx	r3
    55fa:	1e04      	subs	r4, r0, #0
    if (NULL == pclient) {
    55fc:	d100      	bne.n	5600 <wrapper_mqtt_init+0x1c>
    55fe:	e11e      	b.n	583e <wrapper_mqtt_init+0x25a>
    MQTTPacket_connectData connectdata = MQTTPacket_connectData_initializer;
    5600:	2258      	movs	r2, #88	; 0x58
    5602:	49b6      	ldr	r1, [pc, #728]	; (58dc <wrapper_mqtt_init+0x2f8>)
    5604:	a802      	add	r0, sp, #8
    5606:	4bb6      	ldr	r3, [pc, #728]	; (58e0 <wrapper_mqtt_init+0x2fc>)
    5608:	4798      	blx	r3
    if (pClient == NULL || pInitParams == NULL || pInitParams->write_buf_size == 0 || pInitParams->read_buf_size == 0) {
    560a:	2d00      	cmp	r5, #0
    560c:	d100      	bne.n	5610 <wrapper_mqtt_init+0x2c>
    560e:	e106      	b.n	581e <wrapper_mqtt_init+0x23a>
    5610:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    5612:	2b00      	cmp	r3, #0
    5614:	d100      	bne.n	5618 <wrapper_mqtt_init+0x34>
    5616:	e102      	b.n	581e <wrapper_mqtt_init+0x23a>
    5618:	6aab      	ldr	r3, [r5, #40]	; 0x28
    561a:	2b00      	cmp	r3, #0
    561c:	d100      	bne.n	5620 <wrapper_mqtt_init+0x3c>
    561e:	e0fe      	b.n	581e <wrapper_mqtt_init+0x23a>
    memset(pClient, 0x0, sizeof(iotx_mc_client_t));
    5620:	22b8      	movs	r2, #184	; 0xb8
    5622:	2100      	movs	r1, #0
    5624:	0020      	movs	r0, r4
    5626:	4baf      	ldr	r3, [pc, #700]	; (58e4 <wrapper_mqtt_init+0x300>)
    5628:	4798      	blx	r3
    pClient->lock_generic = HAL_MutexCreate();
    562a:	4baf      	ldr	r3, [pc, #700]	; (58e8 <wrapper_mqtt_init+0x304>)
    562c:	4798      	blx	r3
    562e:	6020      	str	r0, [r4, #0]
    if (!pClient->lock_generic) {
    5630:	2800      	cmp	r0, #0
    5632:	d100      	bne.n	5636 <wrapper_mqtt_init+0x52>
    5634:	e0f3      	b.n	581e <wrapper_mqtt_init+0x23a>
    pClient->lock_list_pub = HAL_MutexCreate();
    5636:	4bac      	ldr	r3, [pc, #688]	; (58e8 <wrapper_mqtt_init+0x304>)
    5638:	4798      	blx	r3
    563a:	23a0      	movs	r3, #160	; 0xa0
    563c:	50e0      	str	r0, [r4, r3]
    if (!pClient->lock_list_pub) {
    563e:	2800      	cmp	r0, #0
    5640:	d100      	bne.n	5644 <wrapper_mqtt_init+0x60>
    5642:	e0af      	b.n	57a4 <wrapper_mqtt_init+0x1c0>
    pClient->lock_yield = HAL_MutexCreate();
    5644:	4ba8      	ldr	r3, [pc, #672]	; (58e8 <wrapper_mqtt_init+0x304>)
    5646:	4798      	blx	r3
    5648:	23ac      	movs	r3, #172	; 0xac
    564a:	50e0      	str	r0, [r4, r3]
    if (!pClient->lock_yield) {
    564c:	2800      	cmp	r0, #0
    564e:	d100      	bne.n	5652 <wrapper_mqtt_init+0x6e>
    5650:	e0a8      	b.n	57a4 <wrapper_mqtt_init+0x1c0>
    pClient->lock_write_buf = HAL_MutexCreate();
    5652:	4ba5      	ldr	r3, [pc, #660]	; (58e8 <wrapper_mqtt_init+0x304>)
    5654:	4798      	blx	r3
    5656:	23a4      	movs	r3, #164	; 0xa4
    5658:	50e0      	str	r0, [r4, r3]
    if (!pClient->lock_write_buf) {
    565a:	2800      	cmp	r0, #0
    565c:	d100      	bne.n	5660 <wrapper_mqtt_init+0x7c>
    565e:	e0a1      	b.n	57a4 <wrapper_mqtt_init+0x1c0>
    pClient->lock_read_buf = HAL_MutexCreate();
    5660:	4ba1      	ldr	r3, [pc, #644]	; (58e8 <wrapper_mqtt_init+0x304>)
    5662:	4798      	blx	r3
    5664:	23a8      	movs	r3, #168	; 0xa8
    5666:	50e0      	str	r0, [r4, r3]
    if (!pClient->lock_read_buf) {
    5668:	2800      	cmp	r0, #0
    566a:	d100      	bne.n	566e <wrapper_mqtt_init+0x8a>
    566c:	e09a      	b.n	57a4 <wrapper_mqtt_init+0x1c0>
    connectdata.keepAliveInterval = pInitParams->keepalive_interval_ms / 1000;
    566e:	6a2e      	ldr	r6, [r5, #32]
    connectdata.clientID.cstring = (char *)pInitParams->client_id;
    5670:	68ab      	ldr	r3, [r5, #8]
    5672:	469b      	mov	fp, r3
    connectdata.username.cstring = (char *)pInitParams->username;
    5674:	68eb      	ldr	r3, [r5, #12]
    5676:	4699      	mov	r9, r3
    connectdata.password.cstring = (char *)pInitParams->password;
    5678:	692b      	ldr	r3, [r5, #16]
    567a:	4698      	mov	r8, r3
    connectdata.cleansession = pInitParams->clean_session;
    567c:	7e2b      	ldrb	r3, [r5, #24]
    567e:	469a      	mov	sl, r3
    if (pInitParams->request_timeout_ms < IOTX_MC_REQUEST_TIMEOUT_MIN_MS
    5680:	69eb      	ldr	r3, [r5, #28]
        || pInitParams->request_timeout_ms > IOTX_MC_REQUEST_TIMEOUT_MAX_MS) {
    5682:	0019      	movs	r1, r3
    5684:	39f5      	subs	r1, #245	; 0xf5
    5686:	39ff      	subs	r1, #255	; 0xff
    if (pInitParams->request_timeout_ms < IOTX_MC_REQUEST_TIMEOUT_MIN_MS
    5688:	4a98      	ldr	r2, [pc, #608]	; (58ec <wrapper_mqtt_init+0x308>)
    568a:	4291      	cmp	r1, r2
    568c:	d800      	bhi.n	5690 <wrapper_mqtt_init+0xac>
    568e:	e0e2      	b.n	5856 <wrapper_mqtt_init+0x272>
        pClient->request_timeout_ms = IOTX_MC_REQUEST_TIMEOUT_DEFAULT_MS;
    5690:	23fa      	movs	r3, #250	; 0xfa
    5692:	00db      	lsls	r3, r3, #3
    5694:	60a3      	str	r3, [r4, #8]
    pClient->buf_send = mqtt_malloc(pInitParams->write_buf_size);
    5696:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5698:	4b8f      	ldr	r3, [pc, #572]	; (58d8 <wrapper_mqtt_init+0x2f4>)
    569a:	4798      	blx	r3
    569c:	61e0      	str	r0, [r4, #28]
    if (pClient->buf_send == NULL) {
    569e:	2800      	cmp	r0, #0
    56a0:	d100      	bne.n	56a4 <wrapper_mqtt_init+0xc0>
    56a2:	e07f      	b.n	57a4 <wrapper_mqtt_init+0x1c0>
    pClient->buf_size_send = pInitParams->write_buf_size;
    56a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    56a6:	6123      	str	r3, [r4, #16]
    pClient->buf_read = mqtt_malloc(pInitParams->read_buf_size);
    56a8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    56aa:	4b8b      	ldr	r3, [pc, #556]	; (58d8 <wrapper_mqtt_init+0x2f4>)
    56ac:	4798      	blx	r3
    56ae:	6220      	str	r0, [r4, #32]
    if (pClient->buf_read == NULL) {
    56b0:	2800      	cmp	r0, #0
    56b2:	d077      	beq.n	57a4 <wrapper_mqtt_init+0x1c0>
    connectdata.keepAliveInterval = pInitParams->keepalive_interval_ms / 1000;
    56b4:	21fa      	movs	r1, #250	; 0xfa
    56b6:	0089      	lsls	r1, r1, #2
    56b8:	0030      	movs	r0, r6
    56ba:	4b8d      	ldr	r3, [pc, #564]	; (58f0 <wrapper_mqtt_init+0x30c>)
    56bc:	4798      	blx	r3
    56be:	9001      	str	r0, [sp, #4]
    56c0:	b283      	uxth	r3, r0
    56c2:	9300      	str	r3, [sp, #0]
    pClient->buf_size_read = pInitParams->read_buf_size;
    56c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    56c6:	6163      	str	r3, [r4, #20]
    pClient->keepalive_probes = 0;
    56c8:	2600      	movs	r6, #0
    56ca:	7626      	strb	r6, [r4, #24]
    pClient->handle_event.h_fp = pInitParams->handle_event.h_fp;
    56cc:	23b0      	movs	r3, #176	; 0xb0
    56ce:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    56d0:	50e2      	str	r2, [r4, r3]
    pClient->handle_event.pcontext = pInitParams->handle_event.pcontext;
    56d2:	3304      	adds	r3, #4
    56d4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    56d6:	50e2      	str	r2, [r4, r3]
    pClient->reconnect_param.reconnect_time_interval_ms = IOTX_MC_RECONNECT_INTERVAL_MIN_MS;
    56d8:	23fa      	movs	r3, #250	; 0xfa
    56da:	009b      	lsls	r3, r3, #2
    56dc:	63e3      	str	r3, [r4, #60]	; 0x3c
    INIT_LIST_HEAD(&pClient->list_pub_wait_ack);
    56de:	0023      	movs	r3, r4
    56e0:	3398      	adds	r3, #152	; 0x98
    list->next = list;
    56e2:	605b      	str	r3, [r3, #4]
    list->prev = list;
    56e4:	2298      	movs	r2, #152	; 0x98
    56e6:	50a3      	str	r3, [r4, r2]
    memcpy(pClient->connect_data.struct_id, pConnectParams->struct_id, 4);
    56e8:	0020      	movs	r0, r4
    56ea:	3040      	adds	r0, #64	; 0x40
    56ec:	3a94      	subs	r2, #148	; 0x94
    56ee:	a902      	add	r1, sp, #8
    56f0:	4b7b      	ldr	r3, [pc, #492]	; (58e0 <wrapper_mqtt_init+0x2fc>)
    56f2:	4798      	blx	r3
    pClient->connect_data.struct_version = pConnectParams->struct_version;
    56f4:	6466      	str	r6, [r4, #68]	; 0x44
    pClient->connect_data.MQTTVersion = pConnectParams->MQTTVersion;
    56f6:	2348      	movs	r3, #72	; 0x48
    56f8:	2204      	movs	r2, #4
    56fa:	54e2      	strb	r2, [r4, r3]
    pClient->connect_data.clientID = pConnectParams->clientID;
    56fc:	465b      	mov	r3, fp
    56fe:	9305      	str	r3, [sp, #20]
    5700:	0023      	movs	r3, r4
    5702:	334c      	adds	r3, #76	; 0x4c
    5704:	aa05      	add	r2, sp, #20
    5706:	ca83      	ldmia	r2!, {r0, r1, r7}
    5708:	c383      	stmia	r3!, {r0, r1, r7}
    pClient->connect_data.cleansession = pConnectParams->cleansession;
    570a:	235a      	movs	r3, #90	; 0x5a
    570c:	4652      	mov	r2, sl
    570e:	54e2      	strb	r2, [r4, r3]
    pClient->connect_data.willFlag = pConnectParams->willFlag;
    5710:	3301      	adds	r3, #1
    5712:	54e6      	strb	r6, [r4, r3]
    pClient->connect_data.username = pConnectParams->username;
    5714:	464b      	mov	r3, r9
    5716:	9312      	str	r3, [sp, #72]	; 0x48
    5718:	0023      	movs	r3, r4
    571a:	3380      	adds	r3, #128	; 0x80
    571c:	aa12      	add	r2, sp, #72	; 0x48
    571e:	ca83      	ldmia	r2!, {r0, r1, r7}
    5720:	c383      	stmia	r3!, {r0, r1, r7}
    pClient->connect_data.password = pConnectParams->password;
    5722:	4643      	mov	r3, r8
    5724:	9315      	str	r3, [sp, #84]	; 0x54
    5726:	0023      	movs	r3, r4
    5728:	338c      	adds	r3, #140	; 0x8c
    572a:	aa15      	add	r2, sp, #84	; 0x54
    572c:	ca83      	ldmia	r2!, {r0, r1, r7}
    572e:	c383      	stmia	r3!, {r0, r1, r7}
    memcpy(pClient->connect_data.will.struct_id, pConnectParams->will.struct_id, 4);
    5730:	0020      	movs	r0, r4
    5732:	305c      	adds	r0, #92	; 0x5c
    5734:	2204      	movs	r2, #4
    5736:	a909      	add	r1, sp, #36	; 0x24
    5738:	4b69      	ldr	r3, [pc, #420]	; (58e0 <wrapper_mqtt_init+0x2fc>)
    573a:	4798      	blx	r3
    pClient->connect_data.will.struct_version = pConnectParams->will.struct_version;
    573c:	6626      	str	r6, [r4, #96]	; 0x60
    pClient->connect_data.will.topicName = pConnectParams->will.topicName;
    573e:	0023      	movs	r3, r4
    5740:	3364      	adds	r3, #100	; 0x64
    5742:	aa0b      	add	r2, sp, #44	; 0x2c
    5744:	ca83      	ldmia	r2!, {r0, r1, r7}
    5746:	c383      	stmia	r3!, {r0, r1, r7}
    pClient->connect_data.will.message = pConnectParams->will.message;
    5748:	aa0e      	add	r2, sp, #56	; 0x38
    574a:	ca83      	ldmia	r2!, {r0, r1, r7}
    574c:	c383      	stmia	r3!, {r0, r1, r7}
    pClient->connect_data.will.qos = pConnectParams->will.qos;
    574e:	237d      	movs	r3, #125	; 0x7d
    5750:	54e6      	strb	r6, [r4, r3]
    pClient->connect_data.will.retained = pConnectParams->will.retained;
    5752:	3b01      	subs	r3, #1
    5754:	54e6      	strb	r6, [r4, r3]
    if (pConnectParams->keepAliveInterval < KEEP_ALIVE_INTERVAL_DEFAULT_MIN) {
    5756:	9b00      	ldr	r3, [sp, #0]
    5758:	2b1d      	cmp	r3, #29
    575a:	d800      	bhi.n	575e <wrapper_mqtt_init+0x17a>
    575c:	e07d      	b.n	585a <wrapper_mqtt_init+0x276>
    } else if (pConnectParams->keepAliveInterval > KEEP_ALIVE_INTERVAL_DEFAULT_MAX) {
    575e:	9b00      	ldr	r3, [sp, #0]
    5760:	2bb4      	cmp	r3, #180	; 0xb4
    5762:	d900      	bls.n	5766 <wrapper_mqtt_init+0x182>
    5764:	e08f      	b.n	5886 <wrapper_mqtt_init+0x2a2>
        pClient->connect_data.keepAliveInterval = pConnectParams->keepAliveInterval;
    5766:	2358      	movs	r3, #88	; 0x58
    5768:	466a      	mov	r2, sp
    576a:	8812      	ldrh	r2, [r2, #0]
    576c:	52e2      	strh	r2, [r4, r3]
    iotx_time_init(&pClient->next_ping_time);
    576e:	0020      	movs	r0, r4
    5770:	302c      	adds	r0, #44	; 0x2c
    5772:	4e60      	ldr	r6, [pc, #384]	; (58f4 <wrapper_mqtt_init+0x310>)
    5774:	47b0      	blx	r6
    iotx_time_init(&pClient->reconnect_param.reconnect_next_time);
    5776:	0020      	movs	r0, r4
    5778:	3038      	adds	r0, #56	; 0x38
    577a:	47b0      	blx	r6
    pClient->ipstack = (utils_network_pt)mqtt_malloc(sizeof(utils_network_t));
    577c:	2024      	movs	r0, #36	; 0x24
    577e:	4b56      	ldr	r3, [pc, #344]	; (58d8 <wrapper_mqtt_init+0x2f4>)
    5780:	4798      	blx	r3
    5782:	62a0      	str	r0, [r4, #40]	; 0x28
    if (NULL == pClient->ipstack) {
    5784:	2800      	cmp	r0, #0
    5786:	d100      	bne.n	578a <wrapper_mqtt_init+0x1a6>
    5788:	e093      	b.n	58b2 <wrapper_mqtt_init+0x2ce>
    memset(pClient->ipstack, 0x0, sizeof(utils_network_t));
    578a:	2224      	movs	r2, #36	; 0x24
    578c:	2100      	movs	r1, #0
    578e:	4b55      	ldr	r3, [pc, #340]	; (58e4 <wrapper_mqtt_init+0x300>)
    5790:	4798      	blx	r3
    rc = iotx_net_init(pClient->ipstack, pInitParams->host, pInitParams->port, pInitParams->pub_key);
    5792:	696b      	ldr	r3, [r5, #20]
    5794:	882a      	ldrh	r2, [r5, #0]
    5796:	6869      	ldr	r1, [r5, #4]
    5798:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    579a:	4d57      	ldr	r5, [pc, #348]	; (58f8 <wrapper_mqtt_init+0x314>)
    579c:	47a8      	blx	r5
    if (SUCCESS_RETURN != rc) {
    579e:	2800      	cmp	r0, #0
    57a0:	d100      	bne.n	57a4 <wrapper_mqtt_init+0x1c0>
    57a2:	e08c      	b.n	58be <wrapper_mqtt_init+0x2da>
    iotx_mc_set_client_state(pClient, mc_state);
    57a4:	2100      	movs	r1, #0
    57a6:	0020      	movs	r0, r4
    57a8:	4b54      	ldr	r3, [pc, #336]	; (58fc <wrapper_mqtt_init+0x318>)
    57aa:	4798      	blx	r3
        if (pClient->buf_send != NULL) {
    57ac:	69e0      	ldr	r0, [r4, #28]
    57ae:	2800      	cmp	r0, #0
    57b0:	d003      	beq.n	57ba <wrapper_mqtt_init+0x1d6>
            mqtt_free(pClient->buf_send);
    57b2:	4b53      	ldr	r3, [pc, #332]	; (5900 <wrapper_mqtt_init+0x31c>)
    57b4:	4798      	blx	r3
    57b6:	2300      	movs	r3, #0
    57b8:	61e3      	str	r3, [r4, #28]
        if (pClient->buf_read != NULL) {
    57ba:	6a20      	ldr	r0, [r4, #32]
    57bc:	2800      	cmp	r0, #0
    57be:	d003      	beq.n	57c8 <wrapper_mqtt_init+0x1e4>
            mqtt_free(pClient->buf_read);
    57c0:	4b4f      	ldr	r3, [pc, #316]	; (5900 <wrapper_mqtt_init+0x31c>)
    57c2:	4798      	blx	r3
    57c4:	2300      	movs	r3, #0
    57c6:	6223      	str	r3, [r4, #32]
        if (pClient->ipstack) {
    57c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    57ca:	2800      	cmp	r0, #0
    57cc:	d003      	beq.n	57d6 <wrapper_mqtt_init+0x1f2>
            mqtt_free(pClient->ipstack);
    57ce:	4b4c      	ldr	r3, [pc, #304]	; (5900 <wrapper_mqtt_init+0x31c>)
    57d0:	4798      	blx	r3
    57d2:	2300      	movs	r3, #0
    57d4:	62a3      	str	r3, [r4, #40]	; 0x28
        if (pClient->lock_list_pub) {
    57d6:	23a0      	movs	r3, #160	; 0xa0
    57d8:	58e0      	ldr	r0, [r4, r3]
    57da:	2800      	cmp	r0, #0
    57dc:	d004      	beq.n	57e8 <wrapper_mqtt_init+0x204>
            HAL_MutexDestroy(pClient->lock_list_pub);
    57de:	4b49      	ldr	r3, [pc, #292]	; (5904 <wrapper_mqtt_init+0x320>)
    57e0:	4798      	blx	r3
            pClient->lock_list_pub = NULL;
    57e2:	2200      	movs	r2, #0
    57e4:	23a0      	movs	r3, #160	; 0xa0
    57e6:	50e2      	str	r2, [r4, r3]
        if (pClient->lock_write_buf) {
    57e8:	23a4      	movs	r3, #164	; 0xa4
    57ea:	58e0      	ldr	r0, [r4, r3]
    57ec:	2800      	cmp	r0, #0
    57ee:	d004      	beq.n	57fa <wrapper_mqtt_init+0x216>
            HAL_MutexDestroy(pClient->lock_write_buf);
    57f0:	4b44      	ldr	r3, [pc, #272]	; (5904 <wrapper_mqtt_init+0x320>)
    57f2:	4798      	blx	r3
            pClient->lock_write_buf = NULL;
    57f4:	2200      	movs	r2, #0
    57f6:	23a4      	movs	r3, #164	; 0xa4
    57f8:	50e2      	str	r2, [r4, r3]
        if (pClient->lock_read_buf) {
    57fa:	23a8      	movs	r3, #168	; 0xa8
    57fc:	58e0      	ldr	r0, [r4, r3]
    57fe:	2800      	cmp	r0, #0
    5800:	d004      	beq.n	580c <wrapper_mqtt_init+0x228>
            HAL_MutexDestroy(pClient->lock_read_buf);
    5802:	4b40      	ldr	r3, [pc, #256]	; (5904 <wrapper_mqtt_init+0x320>)
    5804:	4798      	blx	r3
            pClient->lock_read_buf = NULL;
    5806:	2200      	movs	r2, #0
    5808:	23a8      	movs	r3, #168	; 0xa8
    580a:	50e2      	str	r2, [r4, r3]
        if (pClient->lock_yield) {
    580c:	23ac      	movs	r3, #172	; 0xac
    580e:	58e0      	ldr	r0, [r4, r3]
    5810:	2800      	cmp	r0, #0
    5812:	d004      	beq.n	581e <wrapper_mqtt_init+0x23a>
            HAL_MutexDestroy(pClient->lock_yield);
    5814:	4b3b      	ldr	r3, [pc, #236]	; (5904 <wrapper_mqtt_init+0x320>)
    5816:	4798      	blx	r3
            pClient->lock_yield = NULL;
    5818:	2200      	movs	r2, #0
    581a:	23ac      	movs	r3, #172	; 0xac
    581c:	50e2      	str	r2, [r4, r3]
    }

    err = iotx_mc_init(pclient, mqtt_params);

    if (SUCCESS_RETURN != err) {
        mqtt_err("iotx_mc_init failed");
    581e:	483a      	ldr	r0, [pc, #232]	; (5908 <wrapper_mqtt_init+0x324>)
    5820:	4d3a      	ldr	r5, [pc, #232]	; (590c <wrapper_mqtt_init+0x328>)
    5822:	47a8      	blx	r5
    5824:	483a      	ldr	r0, [pc, #232]	; (5910 <wrapper_mqtt_init+0x32c>)
    5826:	47a8      	blx	r5
        mqtt_free(pclient);
    5828:	0020      	movs	r0, r4
    582a:	4b35      	ldr	r3, [pc, #212]	; (5900 <wrapper_mqtt_init+0x31c>)
    582c:	4798      	blx	r3
        return NULL;
    582e:	2000      	movs	r0, #0
    }

    return pclient;
}
    5830:	b019      	add	sp, #100	; 0x64
    5832:	bc3c      	pop	{r2, r3, r4, r5}
    5834:	4690      	mov	r8, r2
    5836:	4699      	mov	r9, r3
    5838:	46a2      	mov	sl, r4
    583a:	46ab      	mov	fp, r5
    583c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mqtt_err("not enough memory.");
    583e:	4835      	ldr	r0, [pc, #212]	; (5914 <wrapper_mqtt_init+0x330>)
    5840:	4c32      	ldr	r4, [pc, #200]	; (590c <wrapper_mqtt_init+0x328>)
    5842:	47a0      	blx	r4
    5844:	4832      	ldr	r0, [pc, #200]	; (5910 <wrapper_mqtt_init+0x32c>)
    5846:	47a0      	blx	r4
        if (mqtt_params != NULL) {
    5848:	2d00      	cmp	r5, #0
    584a:	d043      	beq.n	58d4 <wrapper_mqtt_init+0x2f0>
            mqtt_free(mqtt_params);
    584c:	0028      	movs	r0, r5
    584e:	4b2c      	ldr	r3, [pc, #176]	; (5900 <wrapper_mqtt_init+0x31c>)
    5850:	4798      	blx	r3
        return NULL;
    5852:	2000      	movs	r0, #0
    5854:	e7ec      	b.n	5830 <wrapper_mqtt_init+0x24c>
        pClient->request_timeout_ms = pInitParams->request_timeout_ms;
    5856:	60a3      	str	r3, [r4, #8]
    5858:	e71d      	b.n	5696 <wrapper_mqtt_init+0xb2>
        mqtt_warning("Input heartbeat interval(%d ms) < Allowed minimum(%d ms)",
    585a:	9b01      	ldr	r3, [sp, #4]
    585c:	041b      	lsls	r3, r3, #16
    585e:	0c1b      	lsrs	r3, r3, #16
    5860:	21fa      	movs	r1, #250	; 0xfa
    5862:	0089      	lsls	r1, r1, #2
    5864:	4359      	muls	r1, r3
    5866:	4a2c      	ldr	r2, [pc, #176]	; (5918 <wrapper_mqtt_init+0x334>)
    5868:	482c      	ldr	r0, [pc, #176]	; (591c <wrapper_mqtt_init+0x338>)
    586a:	4e28      	ldr	r6, [pc, #160]	; (590c <wrapper_mqtt_init+0x328>)
    586c:	47b0      	blx	r6
    586e:	4f28      	ldr	r7, [pc, #160]	; (5910 <wrapper_mqtt_init+0x32c>)
    5870:	0038      	movs	r0, r7
    5872:	47b0      	blx	r6
        mqtt_warning("Reset heartbeat interval => %d Millisecond",
    5874:	4928      	ldr	r1, [pc, #160]	; (5918 <wrapper_mqtt_init+0x334>)
    5876:	482a      	ldr	r0, [pc, #168]	; (5920 <wrapper_mqtt_init+0x33c>)
    5878:	47b0      	blx	r6
    587a:	0038      	movs	r0, r7
    587c:	47b0      	blx	r6
        pClient->connect_data.keepAliveInterval = KEEP_ALIVE_INTERVAL_DEFAULT_MIN;
    587e:	221e      	movs	r2, #30
    5880:	2358      	movs	r3, #88	; 0x58
    5882:	52e2      	strh	r2, [r4, r3]
    5884:	e773      	b.n	576e <wrapper_mqtt_init+0x18a>
        mqtt_warning("Input heartbeat interval(%d ms) > Allowed maximum(%d ms)",
    5886:	9b01      	ldr	r3, [sp, #4]
    5888:	0419      	lsls	r1, r3, #16
    588a:	0c09      	lsrs	r1, r1, #16
    588c:	23fa      	movs	r3, #250	; 0xfa
    588e:	009b      	lsls	r3, r3, #2
    5890:	4359      	muls	r1, r3
    5892:	4a24      	ldr	r2, [pc, #144]	; (5924 <wrapper_mqtt_init+0x340>)
    5894:	4824      	ldr	r0, [pc, #144]	; (5928 <wrapper_mqtt_init+0x344>)
    5896:	4e1d      	ldr	r6, [pc, #116]	; (590c <wrapper_mqtt_init+0x328>)
    5898:	47b0      	blx	r6
    589a:	4f1d      	ldr	r7, [pc, #116]	; (5910 <wrapper_mqtt_init+0x32c>)
    589c:	0038      	movs	r0, r7
    589e:	47b0      	blx	r6
        mqtt_warning("Reset heartbeat interval => %d Millisecond",
    58a0:	4920      	ldr	r1, [pc, #128]	; (5924 <wrapper_mqtt_init+0x340>)
    58a2:	481f      	ldr	r0, [pc, #124]	; (5920 <wrapper_mqtt_init+0x33c>)
    58a4:	47b0      	blx	r6
    58a6:	0038      	movs	r0, r7
    58a8:	47b0      	blx	r6
        pClient->connect_data.keepAliveInterval = KEEP_ALIVE_INTERVAL_DEFAULT_MAX;
    58aa:	22b4      	movs	r2, #180	; 0xb4
    58ac:	2358      	movs	r3, #88	; 0x58
    58ae:	52e2      	strh	r2, [r4, r3]
    58b0:	e75d      	b.n	576e <wrapper_mqtt_init+0x18a>
        mqtt_err("allocate Network struct failed");
    58b2:	481e      	ldr	r0, [pc, #120]	; (592c <wrapper_mqtt_init+0x348>)
    58b4:	4d15      	ldr	r5, [pc, #84]	; (590c <wrapper_mqtt_init+0x328>)
    58b6:	47a8      	blx	r5
    58b8:	4815      	ldr	r0, [pc, #84]	; (5910 <wrapper_mqtt_init+0x32c>)
    58ba:	47a8      	blx	r5
    58bc:	e772      	b.n	57a4 <wrapper_mqtt_init+0x1c0>
    mqtt_info("MQTT init success!");
    58be:	481c      	ldr	r0, [pc, #112]	; (5930 <wrapper_mqtt_init+0x34c>)
    58c0:	4d12      	ldr	r5, [pc, #72]	; (590c <wrapper_mqtt_init+0x328>)
    58c2:	47a8      	blx	r5
    58c4:	4812      	ldr	r0, [pc, #72]	; (5910 <wrapper_mqtt_init+0x32c>)
    58c6:	47a8      	blx	r5
    iotx_mc_set_client_state(pClient, mc_state);
    58c8:	2101      	movs	r1, #1
    58ca:	0020      	movs	r0, r4
    58cc:	4b0b      	ldr	r3, [pc, #44]	; (58fc <wrapper_mqtt_init+0x318>)
    58ce:	4798      	blx	r3
    return pclient;
    58d0:	0020      	movs	r0, r4
    58d2:	e7ad      	b.n	5830 <wrapper_mqtt_init+0x24c>
        return NULL;
    58d4:	2000      	movs	r0, #0
    58d6:	e7ab      	b.n	5830 <wrapper_mqtt_init+0x24c>
    58d8:	00007d1d 	.word	0x00007d1d
    58dc:	0000a880 	.word	0x0000a880
    58e0:	000085b7 	.word	0x000085b7
    58e4:	000085c9 	.word	0x000085c9
    58e8:	00007d29 	.word	0x00007d29
    58ec:	00001194 	.word	0x00001194
    58f0:	00007ef9 	.word	0x00007ef9
    58f4:	00004d2d 	.word	0x00004d2d
    58f8:	00003a6d 	.word	0x00003a6d
    58fc:	00004e21 	.word	0x00004e21
    5900:	00007c5d 	.word	0x00007c5d
    5904:	00007d2d 	.word	0x00007d2d
    5908:	0000ac6c 	.word	0x0000ac6c
    590c:	00007d35 	.word	0x00007d35
    5910:	00009cb4 	.word	0x00009cb4
    5914:	0000ab80 	.word	0x0000ab80
    5918:	00007530 	.word	0x00007530
    591c:	0000ab94 	.word	0x0000ab94
    5920:	0000abd0 	.word	0x0000abd0
    5924:	0002bf20 	.word	0x0002bf20
    5928:	0000abfc 	.word	0x0000abfc
    592c:	0000ac38 	.word	0x0000ac38
    5930:	0000ac58 	.word	0x0000ac58

00005934 <wrapper_mqtt_connect>:
    return SUCCESS_RETURN;
}

/* connect */
int wrapper_mqtt_connect(void *client)
{
    5934:	b5f0      	push	{r4, r5, r6, r7, lr}
    5936:	46ce      	mov	lr, r9
    5938:	4647      	mov	r7, r8
    593a:	b580      	push	{r7, lr}
    593c:	b085      	sub	sp, #20
    593e:	1e05      	subs	r5, r0, #0
    int rc = FAIL_RETURN;
    iotx_mc_client_t *pClient = (iotx_mc_client_t *)client;

    if (NULL == pClient) {
    5940:	d100      	bne.n	5944 <wrapper_mqtt_connect+0x10>
    5942:	e0cf      	b.n	5ae4 <wrapper_mqtt_connect+0x1b0>
        return NULL_VALUE_ERROR;
    }

    /* Establish TCP or TLS connection */
    rc = pClient->ipstack->connect(pClient->ipstack);
    5944:	6a80      	ldr	r0, [r0, #40]	; 0x28
    5946:	6a03      	ldr	r3, [r0, #32]
    5948:	4798      	blx	r3
    594a:	1e04      	subs	r4, r0, #0
    if (SUCCESS_RETURN != rc) {
    594c:	d014      	beq.n	5978 <wrapper_mqtt_connect+0x44>
        pClient->ipstack->disconnect(pClient->ipstack);
    594e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5950:	69c3      	ldr	r3, [r0, #28]
    5952:	4798      	blx	r3
        mqtt_err("TCP or TLS Connection failed");
    5954:	487d      	ldr	r0, [pc, #500]	; (5b4c <wrapper_mqtt_connect+0x218>)
    5956:	4d7e      	ldr	r5, [pc, #504]	; (5b50 <wrapper_mqtt_connect+0x21c>)
    5958:	47a8      	blx	r5
    595a:	487e      	ldr	r0, [pc, #504]	; (5b54 <wrapper_mqtt_connect+0x220>)
    595c:	47a8      	blx	r5

        if (ERROR_CERTIFICATE_EXPIRED == rc) {
    595e:	4b7e      	ldr	r3, [pc, #504]	; (5b58 <wrapper_mqtt_connect+0x224>)
    5960:	429c      	cmp	r4, r3
    5962:	d002      	beq.n	596a <wrapper_mqtt_connect+0x36>
            mqtt_err("certificate is expired!");
            return ERROR_CERT_VERIFY_FAIL;
        } else {
            return MQTT_NETWORK_CONNECT_ERROR;
    5964:	261c      	movs	r6, #28
    5966:	4276      	negs	r6, r6
    5968:	e0b6      	b.n	5ad8 <wrapper_mqtt_connect+0x1a4>
            mqtt_err("certificate is expired!");
    596a:	487c      	ldr	r0, [pc, #496]	; (5b5c <wrapper_mqtt_connect+0x228>)
    596c:	4c78      	ldr	r4, [pc, #480]	; (5b50 <wrapper_mqtt_connect+0x21c>)
    596e:	47a0      	blx	r4
    5970:	4878      	ldr	r0, [pc, #480]	; (5b54 <wrapper_mqtt_connect+0x220>)
    5972:	47a0      	blx	r4
            return ERROR_CERT_VERIFY_FAIL;
    5974:	4e7a      	ldr	r6, [pc, #488]	; (5b60 <wrapper_mqtt_connect+0x22c>)
    5976:	e0af      	b.n	5ad8 <wrapper_mqtt_connect+0x1a4>
    5978:	2301      	movs	r3, #1
    597a:	4699      	mov	r9, r3
        rc = MQTTConnect(pClient);
    597c:	4b79      	ldr	r3, [pc, #484]	; (5b64 <wrapper_mqtt_connect+0x230>)
    597e:	4698      	mov	r8, r3
    5980:	0028      	movs	r0, r5
    5982:	47c0      	blx	r8
    5984:	1e06      	subs	r6, r0, #0
        if (rc != SUCCESS_RETURN) {
    5986:	d134      	bne.n	59f2 <wrapper_mqtt_connect+0xbe>
    unsigned int packetType = 0;
    5988:	2300      	movs	r3, #0
    598a:	9302      	str	r3, [sp, #8]
    iotx_time_init(&timer);
    598c:	a803      	add	r0, sp, #12
    598e:	4b76      	ldr	r3, [pc, #472]	; (5b68 <wrapper_mqtt_connect+0x234>)
    5990:	4798      	blx	r3
    utils_time_countdown_ms(&timer, c->request_timeout_ms);
    5992:	68a9      	ldr	r1, [r5, #8]
    5994:	a803      	add	r0, sp, #12
    5996:	4b75      	ldr	r3, [pc, #468]	; (5b6c <wrapper_mqtt_connect+0x238>)
    5998:	4798      	blx	r3
    599a:	240b      	movs	r4, #11
        rc = iotx_mc_read_packet(c, &timer, &packetType);
    599c:	4f74      	ldr	r7, [pc, #464]	; (5b70 <wrapper_mqtt_connect+0x23c>)
    599e:	aa02      	add	r2, sp, #8
    59a0:	a903      	add	r1, sp, #12
    59a2:	0028      	movs	r0, r5
    59a4:	47b8      	blx	r7
    59a6:	1e06      	subs	r6, r0, #0
        if (rc != SUCCESS_RETURN) {
    59a8:	d12d      	bne.n	5a06 <wrapper_mqtt_connect+0xd2>
    59aa:	3c01      	subs	r4, #1
    59ac:	b2e4      	uxtb	r4, r4
        if (++wait_connack > WAIT_CONNACK_MAX) {
    59ae:	2c00      	cmp	r4, #0
    59b0:	d037      	beq.n	5a22 <wrapper_mqtt_connect+0xee>
    } while (packetType != CONNACK);
    59b2:	9b02      	ldr	r3, [sp, #8]
    59b4:	2b02      	cmp	r3, #2
    59b6:	d1f2      	bne.n	599e <wrapper_mqtt_connect+0x6a>
    HAL_MutexLock(c->lock_read_buf);
    59b8:	33a6      	adds	r3, #166	; 0xa6
    59ba:	58e8      	ldr	r0, [r5, r3]
    59bc:	4b6d      	ldr	r3, [pc, #436]	; (5b74 <wrapper_mqtt_connect+0x240>)
    59be:	4798      	blx	r3
    unsigned char connack_rc = 255;
    59c0:	466b      	mov	r3, sp
    59c2:	1d99      	adds	r1, r3, #6
    59c4:	23ff      	movs	r3, #255	; 0xff
    59c6:	700b      	strb	r3, [r1, #0]
    char sessionPresent = 0;
    59c8:	466b      	mov	r3, sp
    59ca:	1dd8      	adds	r0, r3, #7
    59cc:	2300      	movs	r3, #0
    59ce:	7003      	strb	r3, [r0, #0]
    if (MQTTDeserialize_connack((unsigned char *)&sessionPresent, &connack_rc, (unsigned char *)c->buf_read,
    59d0:	696b      	ldr	r3, [r5, #20]
    59d2:	6a2a      	ldr	r2, [r5, #32]
    59d4:	4c68      	ldr	r4, [pc, #416]	; (5b78 <wrapper_mqtt_connect+0x244>)
    59d6:	47a0      	blx	r4
    59d8:	2801      	cmp	r0, #1
    59da:	d14f      	bne.n	5a7c <wrapper_mqtt_connect+0x148>
    switch (connack_rc) {
    59dc:	466b      	mov	r3, sp
    59de:	799b      	ldrb	r3, [r3, #6]
    59e0:	2b05      	cmp	r3, #5
    59e2:	d900      	bls.n	59e6 <wrapper_mqtt_connect+0xb2>
    59e4:	e0af      	b.n	5b46 <wrapper_mqtt_connect+0x212>
    59e6:	466b      	mov	r3, sp
    59e8:	799b      	ldrb	r3, [r3, #6]
    59ea:	009b      	lsls	r3, r3, #2
    59ec:	4a63      	ldr	r2, [pc, #396]	; (5b7c <wrapper_mqtt_connect+0x248>)
    59ee:	58d3      	ldr	r3, [r2, r3]
    59f0:	469f      	mov	pc, r3
            pClient->ipstack->disconnect(pClient->ipstack);
    59f2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    59f4:	69c3      	ldr	r3, [r0, #28]
    59f6:	4798      	blx	r3
            mqtt_err("send connect packet failed, rc = %d", rc);
    59f8:	0031      	movs	r1, r6
    59fa:	4861      	ldr	r0, [pc, #388]	; (5b80 <wrapper_mqtt_connect+0x24c>)
    59fc:	4c54      	ldr	r4, [pc, #336]	; (5b50 <wrapper_mqtt_connect+0x21c>)
    59fe:	47a0      	blx	r4
    5a00:	4854      	ldr	r0, [pc, #336]	; (5b54 <wrapper_mqtt_connect+0x220>)
    5a02:	47a0      	blx	r4
    5a04:	e068      	b.n	5ad8 <wrapper_mqtt_connect+0x1a4>
            mqtt_err("readPacket error,result = %d", rc);
    5a06:	0001      	movs	r1, r0
    5a08:	485e      	ldr	r0, [pc, #376]	; (5b84 <wrapper_mqtt_connect+0x250>)
    5a0a:	4c51      	ldr	r4, [pc, #324]	; (5b50 <wrapper_mqtt_connect+0x21c>)
    5a0c:	47a0      	blx	r4
    5a0e:	4851      	ldr	r0, [pc, #324]	; (5b54 <wrapper_mqtt_connect+0x220>)
    5a10:	47a0      	blx	r4
            HAL_MutexLock(c->lock_read_buf);
    5a12:	24a8      	movs	r4, #168	; 0xa8
    5a14:	5928      	ldr	r0, [r5, r4]
    5a16:	4b57      	ldr	r3, [pc, #348]	; (5b74 <wrapper_mqtt_connect+0x240>)
    5a18:	4798      	blx	r3
            HAL_MutexUnlock(c->lock_read_buf);
    5a1a:	5928      	ldr	r0, [r5, r4]
    5a1c:	4b5a      	ldr	r3, [pc, #360]	; (5b88 <wrapper_mqtt_connect+0x254>)
    5a1e:	4798      	blx	r3
    5a20:	e00b      	b.n	5a3a <wrapper_mqtt_connect+0x106>
            mqtt_err("wait connack timeout");
    5a22:	485a      	ldr	r0, [pc, #360]	; (5b8c <wrapper_mqtt_connect+0x258>)
    5a24:	4c4a      	ldr	r4, [pc, #296]	; (5b50 <wrapper_mqtt_connect+0x21c>)
    5a26:	47a0      	blx	r4
    5a28:	484a      	ldr	r0, [pc, #296]	; (5b54 <wrapper_mqtt_connect+0x220>)
    5a2a:	47a0      	blx	r4
            HAL_MutexLock(c->lock_read_buf);
    5a2c:	24a8      	movs	r4, #168	; 0xa8
    5a2e:	5928      	ldr	r0, [r5, r4]
    5a30:	4b50      	ldr	r3, [pc, #320]	; (5b74 <wrapper_mqtt_connect+0x240>)
    5a32:	4798      	blx	r3
            HAL_MutexUnlock(c->lock_read_buf);
    5a34:	5928      	ldr	r0, [r5, r4]
    5a36:	4b54      	ldr	r3, [pc, #336]	; (5b88 <wrapper_mqtt_connect+0x254>)
    5a38:	4798      	blx	r3
    5a3a:	240e      	movs	r4, #14
    5a3c:	4264      	negs	r4, r4
            mqtt_err("wait connect ACK timeout! rc = %d", rc);
    5a3e:	0021      	movs	r1, r4
    5a40:	4853      	ldr	r0, [pc, #332]	; (5b90 <wrapper_mqtt_connect+0x25c>)
    5a42:	4c43      	ldr	r4, [pc, #268]	; (5b50 <wrapper_mqtt_connect+0x21c>)
    5a44:	47a0      	blx	r4
    5a46:	4e43      	ldr	r6, [pc, #268]	; (5b54 <wrapper_mqtt_connect+0x220>)
    5a48:	0030      	movs	r0, r6
    5a4a:	47a0      	blx	r4
            mqtt_warning("tried [%d/%d] times CONN, waiting for %d ms...", try_count, RETRY_TIME_LIMIT - 1, RETRY_INTV_PERIOD);
    5a4c:	27fa      	movs	r7, #250	; 0xfa
    5a4e:	00ff      	lsls	r7, r7, #3
    5a50:	003b      	movs	r3, r7
    5a52:	2208      	movs	r2, #8
    5a54:	4649      	mov	r1, r9
    5a56:	484f      	ldr	r0, [pc, #316]	; (5b94 <wrapper_mqtt_connect+0x260>)
    5a58:	47a0      	blx	r4
    5a5a:	0030      	movs	r0, r6
    5a5c:	47a0      	blx	r4
            HAL_SleepMs(RETRY_INTV_PERIOD);
    5a5e:	0038      	movs	r0, r7
    5a60:	4b4d      	ldr	r3, [pc, #308]	; (5b98 <wrapper_mqtt_connect+0x264>)
    5a62:	4798      	blx	r3
            pClient->ipstack->disconnect(pClient->ipstack);
    5a64:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5a66:	69c3      	ldr	r3, [r0, #28]
    5a68:	4798      	blx	r3
    } while (++try_count < RETRY_TIME_LIMIT);
    5a6a:	2301      	movs	r3, #1
    5a6c:	469c      	mov	ip, r3
    5a6e:	44e1      	add	r9, ip
    5a70:	464b      	mov	r3, r9
    5a72:	2b09      	cmp	r3, #9
    5a74:	d184      	bne.n	5980 <wrapper_mqtt_connect+0x4c>
        return MQTT_CONNECT_ERROR;
    5a76:	2621      	movs	r6, #33	; 0x21
    5a78:	4276      	negs	r6, r6
    5a7a:	e02d      	b.n	5ad8 <wrapper_mqtt_connect+0x1a4>
        mqtt_err("connect ack is error");
    5a7c:	4847      	ldr	r0, [pc, #284]	; (5b9c <wrapper_mqtt_connect+0x268>)
    5a7e:	4c34      	ldr	r4, [pc, #208]	; (5b50 <wrapper_mqtt_connect+0x21c>)
    5a80:	47a0      	blx	r4
    5a82:	4834      	ldr	r0, [pc, #208]	; (5b54 <wrapper_mqtt_connect+0x220>)
    5a84:	47a0      	blx	r4
        return MQTT_CONNECT_ACK_PACKET_ERROR;
    5a86:	241d      	movs	r4, #29
    5a88:	4264      	negs	r4, r4
    HAL_MutexUnlock(c->lock_read_buf);
    5a8a:	23a8      	movs	r3, #168	; 0xa8
    5a8c:	58e8      	ldr	r0, [r5, r3]
    5a8e:	4b3e      	ldr	r3, [pc, #248]	; (5b88 <wrapper_mqtt_connect+0x254>)
    5a90:	4798      	blx	r3
        mqtt_err("recvConnackProc error,result = %d", rc);
    5a92:	0021      	movs	r1, r4
    5a94:	4842      	ldr	r0, [pc, #264]	; (5ba0 <wrapper_mqtt_connect+0x26c>)
    5a96:	4e2e      	ldr	r6, [pc, #184]	; (5b50 <wrapper_mqtt_connect+0x21c>)
    5a98:	47b0      	blx	r6
    5a9a:	482e      	ldr	r0, [pc, #184]	; (5b54 <wrapper_mqtt_connect+0x220>)
    5a9c:	47b0      	blx	r6
    5a9e:	e7ce      	b.n	5a3e <wrapper_mqtt_connect+0x10a>
            rc = MQTT_CONNACK_NOT_AUTHORIZED_ERROR;
    5aa0:	2622      	movs	r6, #34	; 0x22
    5aa2:	4276      	negs	r6, r6
    5aa4:	e039      	b.n	5b1a <wrapper_mqtt_connect+0x1e6>
    HAL_MutexUnlock(c->lock_read_buf);
    5aa6:	23a8      	movs	r3, #168	; 0xa8
    5aa8:	58e8      	ldr	r0, [r5, r3]
    5aaa:	4b37      	ldr	r3, [pc, #220]	; (5b88 <wrapper_mqtt_connect+0x254>)
    5aac:	4798      	blx	r3
    if (try_count == RETRY_TIME_LIMIT) {
    5aae:	464b      	mov	r3, r9
    5ab0:	2b09      	cmp	r3, #9
    5ab2:	d01a      	beq.n	5aea <wrapper_mqtt_connect+0x1b6>
    iotx_mc_set_client_state(pClient, IOTX_MC_STATE_CONNECTED);
    5ab4:	2102      	movs	r1, #2
    5ab6:	0028      	movs	r0, r5
    5ab8:	4b3a      	ldr	r3, [pc, #232]	; (5ba4 <wrapper_mqtt_connect+0x270>)
    5aba:	4798      	blx	r3
    utils_time_countdown_ms(&pClient->next_ping_time, pClient->connect_data.keepAliveInterval * 1000);
    5abc:	2358      	movs	r3, #88	; 0x58
    5abe:	5aeb      	ldrh	r3, [r5, r3]
    5ac0:	21fa      	movs	r1, #250	; 0xfa
    5ac2:	0089      	lsls	r1, r1, #2
    5ac4:	4359      	muls	r1, r3
    5ac6:	0028      	movs	r0, r5
    5ac8:	302c      	adds	r0, #44	; 0x2c
    5aca:	4b28      	ldr	r3, [pc, #160]	; (5b6c <wrapper_mqtt_connect+0x238>)
    5acc:	4798      	blx	r3
    mqtt_info("mqtt connect success!");
    5ace:	4836      	ldr	r0, [pc, #216]	; (5ba8 <wrapper_mqtt_connect+0x274>)
    5ad0:	4c1f      	ldr	r4, [pc, #124]	; (5b50 <wrapper_mqtt_connect+0x21c>)
    5ad2:	47a0      	blx	r4
    5ad4:	481f      	ldr	r0, [pc, #124]	; (5b54 <wrapper_mqtt_connect+0x220>)
    5ad6:	47a0      	blx	r4
    rc = MQTT_CONNECT_BLOCK;
#else
    rc = _mqtt_connect(pClient);
#endif
    return rc;
}
    5ad8:	0030      	movs	r0, r6
    5ada:	b005      	add	sp, #20
    5adc:	bc0c      	pop	{r2, r3}
    5ade:	4690      	mov	r8, r2
    5ae0:	4699      	mov	r9, r3
    5ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return NULL_VALUE_ERROR;
    5ae4:	2602      	movs	r6, #2
    5ae6:	4276      	negs	r6, r6
    5ae8:	e7f6      	b.n	5ad8 <wrapper_mqtt_connect+0x1a4>
        return MQTT_CONNECT_ERROR;
    5aea:	2621      	movs	r6, #33	; 0x21
    5aec:	4276      	negs	r6, r6
    5aee:	e7f3      	b.n	5ad8 <wrapper_mqtt_connect+0x1a4>
            rc = MQTT_CONANCK_UNACCEPTABLE_PROTOCOL_VERSION_ERROR;
    5af0:	2626      	movs	r6, #38	; 0x26
    5af2:	4276      	negs	r6, r6
    5af4:	e011      	b.n	5b1a <wrapper_mqtt_connect+0x1e6>
    HAL_MutexUnlock(c->lock_read_buf);
    5af6:	23a8      	movs	r3, #168	; 0xa8
    5af8:	58e8      	ldr	r0, [r5, r3]
    5afa:	4b23      	ldr	r3, [pc, #140]	; (5b88 <wrapper_mqtt_connect+0x254>)
    5afc:	4798      	blx	r3
        mqtt_err("recvConnackProc error,result = %d", rc);
    5afe:	2625      	movs	r6, #37	; 0x25
    5b00:	4276      	negs	r6, r6
    5b02:	0031      	movs	r1, r6
    5b04:	4826      	ldr	r0, [pc, #152]	; (5ba0 <wrapper_mqtt_connect+0x26c>)
    5b06:	4c12      	ldr	r4, [pc, #72]	; (5b50 <wrapper_mqtt_connect+0x21c>)
    5b08:	47a0      	blx	r4
    5b0a:	4812      	ldr	r0, [pc, #72]	; (5b54 <wrapper_mqtt_connect+0x220>)
    5b0c:	47a0      	blx	r4
    5b0e:	e00e      	b.n	5b2e <wrapper_mqtt_connect+0x1fa>
            rc = MQTT_CONNACK_SERVER_UNAVAILABLE_ERROR;
    5b10:	2624      	movs	r6, #36	; 0x24
    5b12:	4276      	negs	r6, r6
    5b14:	e001      	b.n	5b1a <wrapper_mqtt_connect+0x1e6>
            rc = MQTT_CONNACK_BAD_USERDATA_ERROR;
    5b16:	2623      	movs	r6, #35	; 0x23
    5b18:	4276      	negs	r6, r6
    HAL_MutexUnlock(c->lock_read_buf);
    5b1a:	23a8      	movs	r3, #168	; 0xa8
    5b1c:	58e8      	ldr	r0, [r5, r3]
    5b1e:	4b1a      	ldr	r3, [pc, #104]	; (5b88 <wrapper_mqtt_connect+0x254>)
    5b20:	4798      	blx	r3
        mqtt_err("recvConnackProc error,result = %d", rc);
    5b22:	0031      	movs	r1, r6
    5b24:	481e      	ldr	r0, [pc, #120]	; (5ba0 <wrapper_mqtt_connect+0x26c>)
    5b26:	4c0a      	ldr	r4, [pc, #40]	; (5b50 <wrapper_mqtt_connect+0x21c>)
    5b28:	47a0      	blx	r4
    5b2a:	480a      	ldr	r0, [pc, #40]	; (5b54 <wrapper_mqtt_connect+0x220>)
    5b2c:	47a0      	blx	r4
            mqtt_err("received reject ACK from MQTT server! rc = %d", rc);
    5b2e:	0031      	movs	r1, r6
    5b30:	481e      	ldr	r0, [pc, #120]	; (5bac <wrapper_mqtt_connect+0x278>)
    5b32:	4c07      	ldr	r4, [pc, #28]	; (5b50 <wrapper_mqtt_connect+0x21c>)
    5b34:	47a0      	blx	r4
    5b36:	4807      	ldr	r0, [pc, #28]	; (5b54 <wrapper_mqtt_connect+0x220>)
    5b38:	47a0      	blx	r4
            pClient->ipstack->disconnect(pClient->ipstack);
    5b3a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5b3c:	69c3      	ldr	r3, [r0, #28]
    5b3e:	4798      	blx	r3
            return MQTT_CONNECT_ERROR;
    5b40:	2621      	movs	r6, #33	; 0x21
    5b42:	4276      	negs	r6, r6
    5b44:	e7c8      	b.n	5ad8 <wrapper_mqtt_connect+0x1a4>
            rc = MQTT_CONNACK_UNKNOWN_ERROR;
    5b46:	2427      	movs	r4, #39	; 0x27
    5b48:	4264      	negs	r4, r4
    5b4a:	e79e      	b.n	5a8a <wrapper_mqtt_connect+0x156>
    5b4c:	0000ac80 	.word	0x0000ac80
    5b50:	00007d35 	.word	0x00007d35
    5b54:	00009cb4 	.word	0x00009cb4
    5b58:	fffffc09 	.word	0xfffffc09
    5b5c:	0000aca0 	.word	0x0000aca0
    5b60:	fffffecb 	.word	0xfffffecb
    5b64:	00005349 	.word	0x00005349
    5b68:	00004d2d 	.word	0x00004d2d
    5b6c:	00004d39 	.word	0x00004d39
    5b70:	000050a9 	.word	0x000050a9
    5b74:	00007d2f 	.word	0x00007d2f
    5b78:	00006e45 	.word	0x00006e45
    5b7c:	0000a830 	.word	0x0000a830
    5b80:	0000acb8 	.word	0x0000acb8
    5b84:	0000acdc 	.word	0x0000acdc
    5b88:	00007d31 	.word	0x00007d31
    5b8c:	0000acfc 	.word	0x0000acfc
    5b90:	0000ad5c 	.word	0x0000ad5c
    5b94:	0000ad80 	.word	0x0000ad80
    5b98:	00007d65 	.word	0x00007d65
    5b9c:	0000ad14 	.word	0x0000ad14
    5ba0:	0000adc8 	.word	0x0000adc8
    5ba4:	00004e21 	.word	0x00004e21
    5ba8:	0000adb0 	.word	0x0000adb0
    5bac:	0000ad2c 	.word	0x0000ad2c

00005bb0 <_mqtt_cycle>:
    return SUCCESS_RETURN;

}

void _mqtt_cycle(void *client)
{
    5bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bb2:	46de      	mov	lr, fp
    5bb4:	4657      	mov	r7, sl
    5bb6:	464e      	mov	r6, r9
    5bb8:	4645      	mov	r5, r8
    5bba:	b5e0      	push	{r5, r6, r7, lr}
    5bbc:	b099      	sub	sp, #100	; 0x64
    5bbe:	0005      	movs	r5, r0
    int                 rc = SUCCESS_RETURN;
    iotx_time_t         time;
    iotx_mc_client_t *pClient = (iotx_mc_client_t *)client;

    iotx_time_init(&time);
    5bc0:	a817      	add	r0, sp, #92	; 0x5c
    5bc2:	4bd7      	ldr	r3, [pc, #860]	; (5f20 <_mqtt_cycle+0x370>)
    5bc4:	4798      	blx	r3
    utils_time_countdown_ms(&time, pClient->cycle_timeout_ms);
    5bc6:	68e9      	ldr	r1, [r5, #12]
    5bc8:	a817      	add	r0, sp, #92	; 0x5c
    5bca:	4bd6      	ldr	r3, [pc, #856]	; (5f24 <_mqtt_cycle+0x374>)
    5bcc:	4798      	blx	r3

        if (SUCCESS_RETURN != rc) {
            mqtt_err("error occur rc=%d", rc);
        }

        HAL_MutexLock(pClient->lock_yield);
    5bce:	23ac      	movs	r3, #172	; 0xac
    5bd0:	4699      	mov	r9, r3
        state = iotx_mc_get_client_state(pClient);
    5bd2:	4fd5      	ldr	r7, [pc, #852]	; (5f28 <_mqtt_cycle+0x378>)
    5bd4:	e31e      	b.n	6214 <_mqtt_cycle+0x664>
            mqtt_err("error occur rc=%d", rc);
    5bd6:	4641      	mov	r1, r8
    5bd8:	48d4      	ldr	r0, [pc, #848]	; (5f2c <_mqtt_cycle+0x37c>)
    5bda:	4cd5      	ldr	r4, [pc, #852]	; (5f30 <_mqtt_cycle+0x380>)
    5bdc:	47a0      	blx	r4
    5bde:	48d5      	ldr	r0, [pc, #852]	; (5f34 <_mqtt_cycle+0x384>)
    5be0:	47a0      	blx	r4
    5be2:	e317      	b.n	6214 <_mqtt_cycle+0x664>
        mqtt_debug("state = %d", state);
    5be4:	0001      	movs	r1, r0
    5be6:	48d4      	ldr	r0, [pc, #848]	; (5f38 <_mqtt_cycle+0x388>)
    5be8:	4cd1      	ldr	r4, [pc, #836]	; (5f30 <_mqtt_cycle+0x380>)
    5bea:	47a0      	blx	r4
    5bec:	48d1      	ldr	r0, [pc, #836]	; (5f34 <_mqtt_cycle+0x384>)
    5bee:	47a0      	blx	r4
        return MQTT_STATE_ERROR;
    5bf0:	231b      	movs	r3, #27
    5bf2:	425b      	negs	r3, r3
    5bf4:	4698      	mov	r8, r3
    5bf6:	e2f8      	b.n	61ea <_mqtt_cycle+0x63a>
        HAL_MutexLock(c->lock_read_buf);
    5bf8:	24a8      	movs	r4, #168	; 0xa8
    5bfa:	5928      	ldr	r0, [r5, r4]
    5bfc:	4bcf      	ldr	r3, [pc, #828]	; (5f3c <_mqtt_cycle+0x38c>)
    5bfe:	4798      	blx	r3
        HAL_MutexUnlock(c->lock_read_buf);
    5c00:	5928      	ldr	r0, [r5, r4]
    5c02:	4bcf      	ldr	r3, [pc, #828]	; (5f40 <_mqtt_cycle+0x390>)
    5c04:	4798      	blx	r3
        iotx_mc_set_client_state(c, IOTX_MC_STATE_DISCONNECTED);
    5c06:	2103      	movs	r1, #3
    5c08:	0028      	movs	r0, r5
    5c0a:	4bce      	ldr	r3, [pc, #824]	; (5f44 <_mqtt_cycle+0x394>)
    5c0c:	4798      	blx	r3
        mqtt_debug("readPacket error,result = %d", rc);
    5c0e:	4641      	mov	r1, r8
    5c10:	48cd      	ldr	r0, [pc, #820]	; (5f48 <_mqtt_cycle+0x398>)
    5c12:	4cc7      	ldr	r4, [pc, #796]	; (5f30 <_mqtt_cycle+0x380>)
    5c14:	47a0      	blx	r4
    5c16:	48c7      	ldr	r0, [pc, #796]	; (5f34 <_mqtt_cycle+0x384>)
    5c18:	47a0      	blx	r4
        return MQTT_NETWORK_ERROR;
    5c1a:	230e      	movs	r3, #14
    5c1c:	425b      	negs	r3, r3
    5c1e:	4698      	mov	r8, r3
    5c20:	e2e3      	b.n	61ea <_mqtt_cycle+0x63a>
        HAL_MutexLock(c->lock_read_buf);
    5c22:	24a8      	movs	r4, #168	; 0xa8
    5c24:	5928      	ldr	r0, [r5, r4]
    5c26:	4bc5      	ldr	r3, [pc, #788]	; (5f3c <_mqtt_cycle+0x38c>)
    5c28:	4798      	blx	r3
        HAL_MutexUnlock(c->lock_read_buf);
    5c2a:	5928      	ldr	r0, [r5, r4]
    5c2c:	4bc4      	ldr	r3, [pc, #784]	; (5f40 <_mqtt_cycle+0x390>)
    5c2e:	4798      	blx	r3
    5c30:	e008      	b.n	5c44 <_mqtt_cycle+0x94>
            mqtt_debug("CONNACK");
    5c32:	48c6      	ldr	r0, [pc, #792]	; (5f4c <_mqtt_cycle+0x39c>)
    5c34:	4cbe      	ldr	r4, [pc, #760]	; (5f30 <_mqtt_cycle+0x380>)
    5c36:	47a0      	blx	r4
    5c38:	48be      	ldr	r0, [pc, #760]	; (5f34 <_mqtt_cycle+0x384>)
    5c3a:	47a0      	blx	r4
    HAL_MutexUnlock(c->lock_read_buf);
    5c3c:	23a8      	movs	r3, #168	; 0xa8
    5c3e:	58e8      	ldr	r0, [r5, r3]
    5c40:	4bbf      	ldr	r3, [pc, #764]	; (5f40 <_mqtt_cycle+0x390>)
    5c42:	4798      	blx	r3
    HAL_MutexLock(pClient->lock_list_pub);
    5c44:	23a0      	movs	r3, #160	; 0xa0
    5c46:	58e8      	ldr	r0, [r5, r3]
    5c48:	4bbc      	ldr	r3, [pc, #752]	; (5f3c <_mqtt_cycle+0x38c>)
    5c4a:	4798      	blx	r3
    list_for_each_entry_safe(node, next_node, &pClient->list_pub_wait_ack, linked_list, iotx_mc_pub_info_t) {
    5c4c:	239c      	movs	r3, #156	; 0x9c
    5c4e:	58eb      	ldr	r3, [r5, r3]
    5c50:	001e      	movs	r6, r3
    5c52:	3e10      	subs	r6, #16
    5c54:	6974      	ldr	r4, [r6, #20]
    5c56:	3c10      	subs	r4, #16
    5c58:	2298      	movs	r2, #152	; 0x98
    5c5a:	4692      	mov	sl, r2
    5c5c:	44aa      	add	sl, r5
    5c5e:	459a      	cmp	sl, r3
    5c60:	d100      	bne.n	5c64 <_mqtt_cycle+0xb4>
    5c62:	e2be      	b.n	61e2 <_mqtt_cycle+0x632>
    5c64:	002b      	movs	r3, r5
    5c66:	4655      	mov	r5, sl
    5c68:	469a      	mov	sl, r3
    5c6a:	e27b      	b.n	6164 <_mqtt_cycle+0x5b4>
            mqtt_debug("PUBACK");
    5c6c:	48b8      	ldr	r0, [pc, #736]	; (5f50 <_mqtt_cycle+0x3a0>)
    5c6e:	4cb0      	ldr	r4, [pc, #704]	; (5f30 <_mqtt_cycle+0x380>)
    5c70:	47a0      	blx	r4
    5c72:	48b0      	ldr	r0, [pc, #704]	; (5f34 <_mqtt_cycle+0x384>)
    5c74:	47a0      	blx	r4
    unsigned char dup = 0;
    5c76:	a90c      	add	r1, sp, #48	; 0x30
    5c78:	2300      	movs	r3, #0
    5c7a:	700b      	strb	r3, [r1, #0]
    unsigned char type = 0;
    5c7c:	a80d      	add	r0, sp, #52	; 0x34
    5c7e:	7003      	strb	r3, [r0, #0]
    if (MQTTDeserialize_ack(&type, &dup, &mypacketid, (unsigned char *)c->buf_read, c->buf_size_read) != 1) {
    5c80:	696b      	ldr	r3, [r5, #20]
    5c82:	9300      	str	r3, [sp, #0]
    5c84:	6a2b      	ldr	r3, [r5, #32]
    5c86:	aa0f      	add	r2, sp, #60	; 0x3c
    5c88:	4cb2      	ldr	r4, [pc, #712]	; (5f54 <_mqtt_cycle+0x3a4>)
    5c8a:	47a0      	blx	r4
    5c8c:	2801      	cmp	r0, #1
    5c8e:	d000      	beq.n	5c92 <_mqtt_cycle+0xe2>
    5c90:	e300      	b.n	6294 <_mqtt_cycle+0x6e4>
    (void)iotx_mc_mask_pubInfo_from(c, mypacketid);
    5c92:	ab0f      	add	r3, sp, #60	; 0x3c
    5c94:	881c      	ldrh	r4, [r3, #0]
    HAL_MutexLock(c->lock_list_pub);
    5c96:	23a0      	movs	r3, #160	; 0xa0
    5c98:	58e8      	ldr	r0, [r5, r3]
    5c9a:	4ba8      	ldr	r3, [pc, #672]	; (5f3c <_mqtt_cycle+0x38c>)
    5c9c:	4798      	blx	r3
    list_for_each_entry(node, &c->list_pub_wait_ack, linked_list, iotx_mc_pub_info_t) {
    5c9e:	239c      	movs	r3, #156	; 0x9c
    5ca0:	58ea      	ldr	r2, [r5, r3]
    5ca2:	0013      	movs	r3, r2
    5ca4:	3b10      	subs	r3, #16
    5ca6:	0029      	movs	r1, r5
    5ca8:	3198      	adds	r1, #152	; 0x98
    5caa:	4291      	cmp	r1, r2
    5cac:	d00b      	beq.n	5cc6 <_mqtt_cycle+0x116>
            node->node_state = IOTX_MC_NODE_STATE_INVALID; /* mark as invalid node */
    5cae:	2001      	movs	r0, #1
    5cb0:	e004      	b.n	5cbc <_mqtt_cycle+0x10c>
    list_for_each_entry(node, &c->list_pub_wait_ack, linked_list, iotx_mc_pub_info_t) {
    5cb2:	695a      	ldr	r2, [r3, #20]
    5cb4:	0013      	movs	r3, r2
    5cb6:	3b10      	subs	r3, #16
    5cb8:	4291      	cmp	r1, r2
    5cba:	d004      	beq.n	5cc6 <_mqtt_cycle+0x116>
        if (node->msg_id == msgId) {
    5cbc:	88da      	ldrh	r2, [r3, #6]
    5cbe:	42a2      	cmp	r2, r4
    5cc0:	d1f7      	bne.n	5cb2 <_mqtt_cycle+0x102>
            node->node_state = IOTX_MC_NODE_STATE_INVALID; /* mark as invalid node */
    5cc2:	7118      	strb	r0, [r3, #4]
    5cc4:	e7f5      	b.n	5cb2 <_mqtt_cycle+0x102>
    HAL_MutexUnlock(c->lock_list_pub);
    5cc6:	23a0      	movs	r3, #160	; 0xa0
    5cc8:	58e8      	ldr	r0, [r5, r3]
    5cca:	4b9d      	ldr	r3, [pc, #628]	; (5f40 <_mqtt_cycle+0x390>)
    5ccc:	4798      	blx	r3
    if (NULL != c->handle_event.h_fp) {
    5cce:	23b0      	movs	r3, #176	; 0xb0
    5cd0:	58eb      	ldr	r3, [r5, r3]
    5cd2:	2b00      	cmp	r3, #0
    5cd4:	d0b2      	beq.n	5c3c <_mqtt_cycle+0x8c>
        msg.event_type = IOTX_MQTT_EVENT_PUBLISH_SUCCESS;
    5cd6:	aa12      	add	r2, sp, #72	; 0x48
    5cd8:	2309      	movs	r3, #9
    5cda:	7013      	strb	r3, [r2, #0]
        msg.msg = (void *)(uintptr_t)mypacketid;
    5cdc:	ab0f      	add	r3, sp, #60	; 0x3c
    5cde:	881b      	ldrh	r3, [r3, #0]
    5ce0:	6053      	str	r3, [r2, #4]
        _handle_event(&c->handle_event, c, &msg);
    5ce2:	0028      	movs	r0, r5
    5ce4:	30b0      	adds	r0, #176	; 0xb0
    5ce6:	0029      	movs	r1, r5
    5ce8:	4b9b      	ldr	r3, [pc, #620]	; (5f58 <_mqtt_cycle+0x3a8>)
    5cea:	4798      	blx	r3
    5cec:	e7a6      	b.n	5c3c <_mqtt_cycle+0x8c>
            mqtt_debug("SUBACK");
    5cee:	489b      	ldr	r0, [pc, #620]	; (5f5c <_mqtt_cycle+0x3ac>)
    5cf0:	4c8f      	ldr	r4, [pc, #572]	; (5f30 <_mqtt_cycle+0x380>)
    5cf2:	47a0      	blx	r4
    5cf4:	488f      	ldr	r0, [pc, #572]	; (5f34 <_mqtt_cycle+0x384>)
    5cf6:	47a0      	blx	r4
    int i = 0, count = 0, fail_flag = -1, j = 0;
    5cf8:	2300      	movs	r3, #0
    5cfa:	930d      	str	r3, [sp, #52]	; 0x34
    rc = MQTTDeserialize_suback(&mypacketid, MUTLI_SUBSCIRBE_MAX, &count, grantedQoS, (unsigned char *)c->buf_read,
    5cfc:	696b      	ldr	r3, [r5, #20]
    5cfe:	9301      	str	r3, [sp, #4]
    5d00:	6a2b      	ldr	r3, [r5, #32]
    5d02:	9300      	str	r3, [sp, #0]
    5d04:	ab12      	add	r3, sp, #72	; 0x48
    5d06:	aa0d      	add	r2, sp, #52	; 0x34
    5d08:	2105      	movs	r1, #5
    5d0a:	a80c      	add	r0, sp, #48	; 0x30
    5d0c:	4c94      	ldr	r4, [pc, #592]	; (5f60 <_mqtt_cycle+0x3b0>)
    5d0e:	47a0      	blx	r4
    if (rc < 0) {
    5d10:	2800      	cmp	r0, #0
    5d12:	db55      	blt.n	5dc0 <_mqtt_cycle+0x210>
    mqtt_debug("%20s : %d", "Return Value", rc);
    5d14:	4e93      	ldr	r6, [pc, #588]	; (5f64 <_mqtt_cycle+0x3b4>)
    5d16:	0002      	movs	r2, r0
    5d18:	4993      	ldr	r1, [pc, #588]	; (5f68 <_mqtt_cycle+0x3b8>)
    5d1a:	0030      	movs	r0, r6
    5d1c:	4c84      	ldr	r4, [pc, #528]	; (5f30 <_mqtt_cycle+0x380>)
    5d1e:	47a0      	blx	r4
    5d20:	4884      	ldr	r0, [pc, #528]	; (5f34 <_mqtt_cycle+0x384>)
    5d22:	47a0      	blx	r4
    mqtt_debug("%20s : %d", "Packet ID", mypacketid);
    5d24:	ab0c      	add	r3, sp, #48	; 0x30
    5d26:	881a      	ldrh	r2, [r3, #0]
    5d28:	4990      	ldr	r1, [pc, #576]	; (5f6c <_mqtt_cycle+0x3bc>)
    5d2a:	0030      	movs	r0, r6
    5d2c:	47a0      	blx	r4
    5d2e:	4881      	ldr	r0, [pc, #516]	; (5f34 <_mqtt_cycle+0x384>)
    5d30:	47a0      	blx	r4
    mqtt_debug("%20s : %d", "Count", count);
    5d32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5d34:	498e      	ldr	r1, [pc, #568]	; (5f70 <_mqtt_cycle+0x3c0>)
    5d36:	0030      	movs	r0, r6
    5d38:	47a0      	blx	r4
    5d3a:	487e      	ldr	r0, [pc, #504]	; (5f34 <_mqtt_cycle+0x384>)
    5d3c:	47a0      	blx	r4
    for (i = 0; i < count; ++i) {
    5d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5d40:	2b00      	cmp	r3, #0
    5d42:	dc00      	bgt.n	5d46 <_mqtt_cycle+0x196>
    5d44:	e2dd      	b.n	6302 <_mqtt_cycle+0x752>
    5d46:	4646      	mov	r6, r8
        mqtt_debug("%16s[%02d] : %d", "Granted QoS", i, grantedQoS[i]);
    5d48:	4c79      	ldr	r4, [pc, #484]	; (5f30 <_mqtt_cycle+0x380>)
    5d4a:	00b2      	lsls	r2, r6, #2
    5d4c:	ab12      	add	r3, sp, #72	; 0x48
    5d4e:	58d3      	ldr	r3, [r2, r3]
    5d50:	0032      	movs	r2, r6
    5d52:	4988      	ldr	r1, [pc, #544]	; (5f74 <_mqtt_cycle+0x3c4>)
    5d54:	4888      	ldr	r0, [pc, #544]	; (5f78 <_mqtt_cycle+0x3c8>)
    5d56:	47a0      	blx	r4
    5d58:	4876      	ldr	r0, [pc, #472]	; (5f34 <_mqtt_cycle+0x384>)
    5d5a:	47a0      	blx	r4
    for (i = 0; i < count; ++i) {
    5d5c:	3601      	adds	r6, #1
    5d5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5d60:	429e      	cmp	r6, r3
    5d62:	dbf2      	blt.n	5d4a <_mqtt_cycle+0x19a>
    for (j = 0; j <  count; j++) {
    5d64:	2b00      	cmp	r3, #0
    5d66:	dc00      	bgt.n	5d6a <_mqtt_cycle+0x1ba>
    5d68:	e29e      	b.n	62a8 <_mqtt_cycle+0x6f8>
    5d6a:	4644      	mov	r4, r8
            mqtt_err("MQTT SUBSCRIBE failed, ack code is 0x80");
    5d6c:	4646      	mov	r6, r8
        if ((uint8_t)grantedQoS[j] == 0x80) {
    5d6e:	00a3      	lsls	r3, r4, #2
    5d70:	aa12      	add	r2, sp, #72	; 0x48
    5d72:	5cd3      	ldrb	r3, [r2, r3]
        fail_flag = 0;
    5d74:	0032      	movs	r2, r6
        if ((uint8_t)grantedQoS[j] == 0x80) {
    5d76:	2b80      	cmp	r3, #128	; 0x80
    5d78:	d037      	beq.n	5dea <_mqtt_cycle+0x23a>
    for (j = 0; j <  count; j++) {
    5d7a:	3401      	adds	r4, #1
    5d7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5d7e:	429c      	cmp	r4, r3
    5d80:	dbf5      	blt.n	5d6e <_mqtt_cycle+0x1be>
    5d82:	46b0      	mov	r8, r6
    msg.msg = (void *)(uintptr_t)mypacketid;
    5d84:	ab0c      	add	r3, sp, #48	; 0x30
    5d86:	881c      	ldrh	r4, [r3, #0]
    5d88:	9410      	str	r4, [sp, #64]	; 0x40
    if (fail_flag == 1)
    5d8a:	2a01      	cmp	r2, #1
    5d8c:	d035      	beq.n	5dfa <_mqtt_cycle+0x24a>
        msg.event_type = IOTX_MQTT_EVENT_SUBCRIBE_SUCCESS;
    5d8e:	2203      	movs	r2, #3
    5d90:	ab0f      	add	r3, sp, #60	; 0x3c
    5d92:	701a      	strb	r2, [r3, #0]
    mqtt_debug("packet_id = %d, event_type=%d", packet_id, msg->event_type);
    5d94:	ab0f      	add	r3, sp, #60	; 0x3c
    5d96:	781a      	ldrb	r2, [r3, #0]
    5d98:	0021      	movs	r1, r4
    5d9a:	4878      	ldr	r0, [pc, #480]	; (5f7c <_mqtt_cycle+0x3cc>)
    5d9c:	4e64      	ldr	r6, [pc, #400]	; (5f30 <_mqtt_cycle+0x380>)
    5d9e:	47b0      	blx	r6
    5da0:	4864      	ldr	r0, [pc, #400]	; (5f34 <_mqtt_cycle+0x384>)
    5da2:	47b0      	blx	r6
    HAL_MutexLock(client->lock_generic);
    5da4:	6828      	ldr	r0, [r5, #0]
    5da6:	4b65      	ldr	r3, [pc, #404]	; (5f3c <_mqtt_cycle+0x38c>)
    5da8:	4798      	blx	r3
    list_for_each_entry_safe(node, next, &g_mqtt_sub_list, linked_list, mqtt_sub_node_t) {
    5daa:	4875      	ldr	r0, [pc, #468]	; (5f80 <_mqtt_cycle+0x3d0>)
    5dac:	6842      	ldr	r2, [r0, #4]
    5dae:	0011      	movs	r1, r2
    5db0:	390c      	subs	r1, #12
    5db2:	690b      	ldr	r3, [r1, #16]
    5db4:	3b0c      	subs	r3, #12
    5db6:	4290      	cmp	r0, r2
    5db8:	d02f      	beq.n	5e1a <_mqtt_cycle+0x26a>
            node->ack_type = msg->event_type;
    5dba:	aa0f      	add	r2, sp, #60	; 0x3c
    5dbc:	7816      	ldrb	r6, [r2, #0]
    5dbe:	e027      	b.n	5e10 <_mqtt_cycle+0x260>
        mqtt_err("Sub ack packet error, rc = MQTTDeserialize_suback() = %d", rc);
    5dc0:	0001      	movs	r1, r0
    5dc2:	4870      	ldr	r0, [pc, #448]	; (5f84 <_mqtt_cycle+0x3d4>)
    5dc4:	4c5a      	ldr	r4, [pc, #360]	; (5f30 <_mqtt_cycle+0x380>)
    5dc6:	47a0      	blx	r4
    5dc8:	4e5a      	ldr	r6, [pc, #360]	; (5f34 <_mqtt_cycle+0x384>)
    5dca:	0030      	movs	r0, r6
    5dcc:	47a0      	blx	r4
                mqtt_err("recvSubAckProc error,result = %d", rc);
    5dce:	2119      	movs	r1, #25
    5dd0:	4249      	negs	r1, r1
    5dd2:	486d      	ldr	r0, [pc, #436]	; (5f88 <_mqtt_cycle+0x3d8>)
    5dd4:	47a0      	blx	r4
    5dd6:	0030      	movs	r0, r6
    5dd8:	47a0      	blx	r4
        return MQTT_SUBSCRIBE_ACK_PACKET_ERROR;
    5dda:	2319      	movs	r3, #25
    5ddc:	425b      	negs	r3, r3
    5dde:	4698      	mov	r8, r3
    HAL_MutexUnlock(c->lock_read_buf);
    5de0:	23a8      	movs	r3, #168	; 0xa8
    5de2:	58e8      	ldr	r0, [r5, r3]
    5de4:	4b56      	ldr	r3, [pc, #344]	; (5f40 <_mqtt_cycle+0x390>)
    5de6:	4798      	blx	r3
    5de8:	e1ff      	b.n	61ea <_mqtt_cycle+0x63a>
            mqtt_err("MQTT SUBSCRIBE failed, ack code is 0x80");
    5dea:	4868      	ldr	r0, [pc, #416]	; (5f8c <_mqtt_cycle+0x3dc>)
    5dec:	4b50      	ldr	r3, [pc, #320]	; (5f30 <_mqtt_cycle+0x380>)
    5dee:	4798      	blx	r3
    5df0:	4850      	ldr	r0, [pc, #320]	; (5f34 <_mqtt_cycle+0x384>)
    5df2:	4b4f      	ldr	r3, [pc, #316]	; (5f30 <_mqtt_cycle+0x380>)
    5df4:	4798      	blx	r3
            fail_flag = 1;
    5df6:	2201      	movs	r2, #1
    5df8:	e7bf      	b.n	5d7a <_mqtt_cycle+0x1ca>
        msg.event_type = IOTX_MQTT_EVENT_SUBCRIBE_NACK;
    5dfa:	3204      	adds	r2, #4
    5dfc:	ab0f      	add	r3, sp, #60	; 0x3c
    5dfe:	701a      	strb	r2, [r3, #0]
    5e00:	e7c8      	b.n	5d94 <_mqtt_cycle+0x1e4>
    list_for_each_entry_safe(node, next, &g_mqtt_sub_list, linked_list, mqtt_sub_node_t) {
    5e02:	691a      	ldr	r2, [r3, #16]
    5e04:	3a0c      	subs	r2, #12
    5e06:	0019      	movs	r1, r3
    5e08:	330c      	adds	r3, #12
    5e0a:	4298      	cmp	r0, r3
    5e0c:	d005      	beq.n	5e1a <_mqtt_cycle+0x26a>
    5e0e:	0013      	movs	r3, r2
        if (node->packet_id == packet_id) {
    5e10:	680a      	ldr	r2, [r1, #0]
    5e12:	42a2      	cmp	r2, r4
    5e14:	d1f5      	bne.n	5e02 <_mqtt_cycle+0x252>
            node->ack_type = msg->event_type;
    5e16:	710e      	strb	r6, [r1, #4]
    5e18:	e7f3      	b.n	5e02 <_mqtt_cycle+0x252>
    HAL_MutexUnlock(client->lock_generic);
    5e1a:	6828      	ldr	r0, [r5, #0]
    5e1c:	4b48      	ldr	r3, [pc, #288]	; (5f40 <_mqtt_cycle+0x390>)
    5e1e:	4798      	blx	r3
    if (NULL != c->handle_event.h_fp)
    5e20:	23b0      	movs	r3, #176	; 0xb0
    5e22:	58eb      	ldr	r3, [r5, r3]
    5e24:	2b00      	cmp	r3, #0
    5e26:	d100      	bne.n	5e2a <_mqtt_cycle+0x27a>
    5e28:	e708      	b.n	5c3c <_mqtt_cycle+0x8c>
        _handle_event(&c->handle_event, c, &msg);
    5e2a:	0028      	movs	r0, r5
    5e2c:	30b0      	adds	r0, #176	; 0xb0
    5e2e:	aa0f      	add	r2, sp, #60	; 0x3c
    5e30:	0029      	movs	r1, r5
    5e32:	4b49      	ldr	r3, [pc, #292]	; (5f58 <_mqtt_cycle+0x3a8>)
    5e34:	4798      	blx	r3
    5e36:	e701      	b.n	5c3c <_mqtt_cycle+0x8c>
            mqtt_debug("PUBLISH");
    5e38:	4855      	ldr	r0, [pc, #340]	; (5f90 <_mqtt_cycle+0x3e0>)
    5e3a:	4c3d      	ldr	r4, [pc, #244]	; (5f30 <_mqtt_cycle+0x380>)
    5e3c:	47a0      	blx	r4
    5e3e:	483d      	ldr	r0, [pc, #244]	; (5f34 <_mqtt_cycle+0x384>)
    5e40:	47a0      	blx	r4
    int qos = 0;
    5e42:	2300      	movs	r3, #0
    5e44:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t payload_len = 0;
    5e46:	930c      	str	r3, [sp, #48]	; 0x30
    memset(&topic_msg, 0x0, sizeof(iotx_mqtt_topic_info_t));
    5e48:	2214      	movs	r2, #20
    5e4a:	2100      	movs	r1, #0
    5e4c:	a812      	add	r0, sp, #72	; 0x48
    5e4e:	4e51      	ldr	r6, [pc, #324]	; (5f94 <_mqtt_cycle+0x3e4>)
    5e50:	47b0      	blx	r6
    memset(&topicName, 0x0, sizeof(MQTTString));
    5e52:	ac0f      	add	r4, sp, #60	; 0x3c
    5e54:	220c      	movs	r2, #12
    5e56:	2100      	movs	r1, #0
    5e58:	0020      	movs	r0, r4
    5e5a:	47b0      	blx	r6
    if (1 != MQTTDeserialize_publish((unsigned char *)&topic_msg.dup,
    5e5c:	696b      	ldr	r3, [r5, #20]
    5e5e:	9304      	str	r3, [sp, #16]
    5e60:	6a2b      	ldr	r3, [r5, #32]
    5e62:	9303      	str	r3, [sp, #12]
    5e64:	ab0c      	add	r3, sp, #48	; 0x30
    5e66:	9302      	str	r3, [sp, #8]
    5e68:	ab16      	add	r3, sp, #88	; 0x58
    5e6a:	9301      	str	r3, [sp, #4]
    5e6c:	9400      	str	r4, [sp, #0]
    5e6e:	ab12      	add	r3, sp, #72	; 0x48
    5e70:	aa13      	add	r2, sp, #76	; 0x4c
    5e72:	a90b      	add	r1, sp, #44	; 0x2c
    5e74:	203b      	movs	r0, #59	; 0x3b
    5e76:	ac04      	add	r4, sp, #16
    5e78:	46a4      	mov	ip, r4
    5e7a:	4460      	add	r0, ip
    5e7c:	4c46      	ldr	r4, [pc, #280]	; (5f98 <_mqtt_cycle+0x3e8>)
    5e7e:	47a0      	blx	r4
    5e80:	9008      	str	r0, [sp, #32]
    5e82:	2801      	cmp	r0, #1
    5e84:	d000      	beq.n	5e88 <_mqtt_cycle+0x2d8>
    5e86:	e22b      	b.n	62e0 <_mqtt_cycle+0x730>
    topic_msg.qos = (unsigned char)qos;
    5e88:	ac12      	add	r4, sp, #72	; 0x48
    5e8a:	ab04      	add	r3, sp, #16
    5e8c:	7f1b      	ldrb	r3, [r3, #28]
    5e8e:	70a3      	strb	r3, [r4, #2]
    topic_msg.payload_len = payload_len;
    5e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5e92:	9314      	str	r3, [sp, #80]	; 0x50
    mqtt_debug("%20s : %08d", "Packet Ident", topic_msg.packet_id);
    5e94:	8822      	ldrh	r2, [r4, #0]
    5e96:	4941      	ldr	r1, [pc, #260]	; (5f9c <_mqtt_cycle+0x3ec>)
    5e98:	4841      	ldr	r0, [pc, #260]	; (5fa0 <_mqtt_cycle+0x3f0>)
    5e9a:	4e25      	ldr	r6, [pc, #148]	; (5f30 <_mqtt_cycle+0x380>)
    5e9c:	47b0      	blx	r6
    5e9e:	4825      	ldr	r0, [pc, #148]	; (5f34 <_mqtt_cycle+0x384>)
    5ea0:	47b0      	blx	r6
    mqtt_debug("%20s : %d", "Topic Length", topicName.lenstring.len);
    5ea2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5ea4:	9307      	str	r3, [sp, #28]
    5ea6:	001a      	movs	r2, r3
    5ea8:	493e      	ldr	r1, [pc, #248]	; (5fa4 <_mqtt_cycle+0x3f4>)
    5eaa:	482e      	ldr	r0, [pc, #184]	; (5f64 <_mqtt_cycle+0x3b4>)
    5eac:	47b0      	blx	r6
    5eae:	4821      	ldr	r0, [pc, #132]	; (5f34 <_mqtt_cycle+0x384>)
    5eb0:	47b0      	blx	r6
    mqtt_debug("%20s : %.*s",
    5eb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5eb4:	9307      	str	r3, [sp, #28]
    5eb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5eb8:	9309      	str	r3, [sp, #36]	; 0x24
    5eba:	9b07      	ldr	r3, [sp, #28]
    5ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5ebe:	493a      	ldr	r1, [pc, #232]	; (5fa8 <_mqtt_cycle+0x3f8>)
    5ec0:	483a      	ldr	r0, [pc, #232]	; (5fac <_mqtt_cycle+0x3fc>)
    5ec2:	47b0      	blx	r6
    5ec4:	481b      	ldr	r0, [pc, #108]	; (5f34 <_mqtt_cycle+0x384>)
    5ec6:	47b0      	blx	r6
    mqtt_debug("%20s : %d / %d", "Payload Len/Room",
    5ec8:	6a2b      	ldr	r3, [r5, #32]
    5eca:	696a      	ldr	r2, [r5, #20]
    5ecc:	4694      	mov	ip, r2
    5ece:	4463      	add	r3, ip
    5ed0:	6922      	ldr	r2, [r4, #16]
    5ed2:	1a9b      	subs	r3, r3, r2
    5ed4:	68a2      	ldr	r2, [r4, #8]
    5ed6:	4936      	ldr	r1, [pc, #216]	; (5fb0 <_mqtt_cycle+0x400>)
    5ed8:	4836      	ldr	r0, [pc, #216]	; (5fb4 <_mqtt_cycle+0x404>)
    5eda:	47b0      	blx	r6
    5edc:	4815      	ldr	r0, [pc, #84]	; (5f34 <_mqtt_cycle+0x384>)
    5ede:	47b0      	blx	r6
    mqtt_debug("%20s : %d", "Receive Buflen", c->buf_size_read);
    5ee0:	696a      	ldr	r2, [r5, #20]
    5ee2:	4935      	ldr	r1, [pc, #212]	; (5fb8 <_mqtt_cycle+0x408>)
    5ee4:	481f      	ldr	r0, [pc, #124]	; (5f64 <_mqtt_cycle+0x3b4>)
    5ee6:	47b0      	blx	r6
    5ee8:	4812      	ldr	r0, [pc, #72]	; (5f34 <_mqtt_cycle+0x384>)
    5eea:	47b0      	blx	r6
    topic_msg.ptopic = NULL;
    5eec:	2300      	movs	r3, #0
    5eee:	60e3      	str	r3, [r4, #12]
    topic_msg.topic_len = 0;
    5ef0:	80e3      	strh	r3, [r4, #6]
    mqtt_debug("delivering msg ...");
    5ef2:	4832      	ldr	r0, [pc, #200]	; (5fbc <_mqtt_cycle+0x40c>)
    5ef4:	47b0      	blx	r6
    5ef6:	480f      	ldr	r0, [pc, #60]	; (5f34 <_mqtt_cycle+0x384>)
    5ef8:	47b0      	blx	r6
    topic_msg->ptopic = topicName->lenstring.data;
    5efa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5efc:	9307      	str	r3, [sp, #28]
    5efe:	60e3      	str	r3, [r4, #12]
    topic_msg->topic_len = topicName->lenstring.len;
    5f00:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5f02:	80e3      	strh	r3, [r4, #6]
    HAL_MutexLock(c->lock_generic);
    5f04:	6828      	ldr	r0, [r5, #0]
    5f06:	4b0d      	ldr	r3, [pc, #52]	; (5f3c <_mqtt_cycle+0x38c>)
    5f08:	4798      	blx	r3
    for (h = c->first_sub_handle; h != NULL; h = h->next) {
    5f0a:	6a6e      	ldr	r6, [r5, #36]	; 0x24
    5f0c:	2e00      	cmp	r6, #0
    5f0e:	d100      	bne.n	5f12 <_mqtt_cycle+0x362>
    5f10:	e1ce      	b.n	62b0 <_mqtt_cycle+0x700>
    5f12:	4643      	mov	r3, r8
    5f14:	9307      	str	r3, [sp, #28]
        if (MQTTPacket_equals(topicName, (char *)h->topic_filter)
    5f16:	4b2a      	ldr	r3, [pc, #168]	; (5fc0 <_mqtt_cycle+0x410>)
    5f18:	469b      	mov	fp, r3
            mqtt_debug("topic be matched");
    5f1a:	4c05      	ldr	r4, [pc, #20]	; (5f30 <_mqtt_cycle+0x380>)
    5f1c:	e06e      	b.n	5ffc <_mqtt_cycle+0x44c>
    5f1e:	46c0      	nop			; (mov r8, r8)
    5f20:	00004d2d 	.word	0x00004d2d
    5f24:	00004d39 	.word	0x00004d39
    5f28:	00004e41 	.word	0x00004e41
    5f2c:	0000adec 	.word	0x0000adec
    5f30:	00007d35 	.word	0x00007d35
    5f34:	00009cb4 	.word	0x00009cb4
    5f38:	0000ae00 	.word	0x0000ae00
    5f3c:	00007d2f 	.word	0x00007d2f
    5f40:	00007d31 	.word	0x00007d31
    5f44:	00004e21 	.word	0x00004e21
    5f48:	0000acdc 	.word	0x0000acdc
    5f4c:	0000ae3c 	.word	0x0000ae3c
    5f50:	0000ae44 	.word	0x0000ae44
    5f54:	00006f89 	.word	0x00006f89
    5f58:	00004d51 	.word	0x00004d51
    5f5c:	0000ae4c 	.word	0x0000ae4c
    5f60:	00007479 	.word	0x00007479
    5f64:	0000aec4 	.word	0x0000aec4
    5f68:	0000aeb4 	.word	0x0000aeb4
    5f6c:	0000aed0 	.word	0x0000aed0
    5f70:	0000aedc 	.word	0x0000aedc
    5f74:	0000aee4 	.word	0x0000aee4
    5f78:	0000aef0 	.word	0x0000aef0
    5f7c:	0000af28 	.word	0x0000af28
    5f80:	20000060 	.word	0x20000060
    5f84:	0000ae54 	.word	0x0000ae54
    5f88:	0000ae90 	.word	0x0000ae90
    5f8c:	0000af00 	.word	0x0000af00
    5f90:	0000af48 	.word	0x0000af48
    5f94:	000085c9 	.word	0x000085c9
    5f98:	00006ef1 	.word	0x00006ef1
    5f9c:	0000af50 	.word	0x0000af50
    5fa0:	0000af60 	.word	0x0000af60
    5fa4:	0000af6c 	.word	0x0000af6c
    5fa8:	0000af7c 	.word	0x0000af7c
    5fac:	0000af88 	.word	0x0000af88
    5fb0:	0000af94 	.word	0x0000af94
    5fb4:	0000afa8 	.word	0x0000afa8
    5fb8:	0000afb8 	.word	0x0000afb8
    5fbc:	0000afc8 	.word	0x0000afc8
    5fc0:	000071f9 	.word	0x000071f9
    5fc4:	48d1      	ldr	r0, [pc, #836]	; (630c <_mqtt_cycle+0x75c>)
    5fc6:	47a0      	blx	r4
    5fc8:	48d1      	ldr	r0, [pc, #836]	; (6310 <_mqtt_cycle+0x760>)
    5fca:	47a0      	blx	r4
            HAL_MutexUnlock(c->lock_generic);
    5fcc:	6828      	ldr	r0, [r5, #0]
    5fce:	4bd1      	ldr	r3, [pc, #836]	; (6314 <_mqtt_cycle+0x764>)
    5fd0:	4798      	blx	r3
            if (NULL != msg_handle->handle.h_fp) {
    5fd2:	68b3      	ldr	r3, [r6, #8]
    5fd4:	2b00      	cmp	r3, #0
    5fd6:	d00b      	beq.n	5ff0 <_mqtt_cycle+0x440>
                msg.event_type = IOTX_MQTT_EVENT_PUBLISH_RECEIVED;
    5fd8:	aa0d      	add	r2, sp, #52	; 0x34
    5fda:	230c      	movs	r3, #12
    5fdc:	7013      	strb	r3, [r2, #0]
                msg.msg = (void *)topic_msg;
    5fde:	ab12      	add	r3, sp, #72	; 0x48
    5fe0:	6053      	str	r3, [r2, #4]
                _handle_event(&msg_handle->handle, c, &msg);
    5fe2:	0030      	movs	r0, r6
    5fe4:	3008      	adds	r0, #8
    5fe6:	0029      	movs	r1, r5
    5fe8:	4bcb      	ldr	r3, [pc, #812]	; (6318 <_mqtt_cycle+0x768>)
    5fea:	4798      	blx	r3
                flag_matched = 1;
    5fec:	9b08      	ldr	r3, [sp, #32]
    5fee:	9307      	str	r3, [sp, #28]
            HAL_MutexLock(c->lock_generic);
    5ff0:	6828      	ldr	r0, [r5, #0]
    5ff2:	4bca      	ldr	r3, [pc, #808]	; (631c <_mqtt_cycle+0x76c>)
    5ff4:	4798      	blx	r3
    for (h = c->first_sub_handle; h != NULL; h = h->next) {
    5ff6:	6936      	ldr	r6, [r6, #16]
    5ff8:	2e00      	cmp	r6, #0
    5ffa:	d00b      	beq.n	6014 <_mqtt_cycle+0x464>
        if (MQTTPacket_equals(topicName, (char *)h->topic_filter)
    5ffc:	6831      	ldr	r1, [r6, #0]
    5ffe:	a80f      	add	r0, sp, #60	; 0x3c
    6000:	47d8      	blx	fp
    6002:	2800      	cmp	r0, #0
    6004:	d1de      	bne.n	5fc4 <_mqtt_cycle+0x414>
            || iotx_mc_is_topic_matched((char *)h->topic_filter, topicName)) {
    6006:	a90f      	add	r1, sp, #60	; 0x3c
    6008:	6830      	ldr	r0, [r6, #0]
    600a:	4bc5      	ldr	r3, [pc, #788]	; (6320 <_mqtt_cycle+0x770>)
    600c:	4798      	blx	r3
    600e:	2800      	cmp	r0, #0
    6010:	d0f1      	beq.n	5ff6 <_mqtt_cycle+0x446>
    6012:	e7d7      	b.n	5fc4 <_mqtt_cycle+0x414>
    HAL_MutexUnlock(c->lock_generic);
    6014:	6828      	ldr	r0, [r5, #0]
    6016:	4bbf      	ldr	r3, [pc, #764]	; (6314 <_mqtt_cycle+0x764>)
    6018:	4798      	blx	r3
    if (0 == flag_matched) {
    601a:	9b07      	ldr	r3, [sp, #28]
    601c:	2b00      	cmp	r3, #0
    601e:	d100      	bne.n	6022 <_mqtt_cycle+0x472>
    6020:	e149      	b.n	62b6 <_mqtt_cycle+0x706>
    if (topic_msg.qos == IOTX_MQTT_QOS0) {
    6022:	ab12      	add	r3, sp, #72	; 0x48
    6024:	7899      	ldrb	r1, [r3, #2]
    6026:	2900      	cmp	r1, #0
    6028:	d100      	bne.n	602c <_mqtt_cycle+0x47c>
    602a:	e607      	b.n	5c3c <_mqtt_cycle+0x8c>
    } else if (topic_msg.qos == IOTX_MQTT_QOS1) {
    602c:	2901      	cmp	r1, #1
    602e:	d01f      	beq.n	6070 <_mqtt_cycle+0x4c0>
    } else if (topic_msg.qos == IOTX_MQTT_QOS2) {
    6030:	2902      	cmp	r1, #2
    6032:	d14c      	bne.n	60ce <_mqtt_cycle+0x51e>
    iotx_time_init(&timer);
    6034:	a80d      	add	r0, sp, #52	; 0x34
    6036:	4bbb      	ldr	r3, [pc, #748]	; (6324 <_mqtt_cycle+0x774>)
    6038:	4798      	blx	r3
    utils_time_countdown_ms(&timer, c->request_timeout_ms);
    603a:	68a9      	ldr	r1, [r5, #8]
    603c:	a80d      	add	r0, sp, #52	; 0x34
    603e:	4bba      	ldr	r3, [pc, #744]	; (6328 <_mqtt_cycle+0x778>)
    6040:	4798      	blx	r3
    HAL_MutexLock(c->lock_write_buf);
    6042:	24a4      	movs	r4, #164	; 0xa4
    6044:	5928      	ldr	r0, [r5, r4]
    6046:	4bb5      	ldr	r3, [pc, #724]	; (631c <_mqtt_cycle+0x76c>)
    6048:	4798      	blx	r3
        HAL_MutexUnlock(c->lock_write_buf);
    604a:	5928      	ldr	r0, [r5, r4]
    604c:	4bb1      	ldr	r3, [pc, #708]	; (6314 <_mqtt_cycle+0x764>)
    604e:	4798      	blx	r3
        result = MQTTPuback(c, topic_msg.packet_id, PUBREC);
    6050:	3cb1      	subs	r4, #177	; 0xb1
                mqtt_err("recvPublishProc error,result = %d", rc);
    6052:	0021      	movs	r1, r4
    6054:	48b5      	ldr	r0, [pc, #724]	; (632c <_mqtt_cycle+0x77c>)
    6056:	4eb6      	ldr	r6, [pc, #728]	; (6330 <_mqtt_cycle+0x780>)
    6058:	47b0      	blx	r6
    605a:	48ad      	ldr	r0, [pc, #692]	; (6310 <_mqtt_cycle+0x760>)
    605c:	47b0      	blx	r6
    HAL_MutexUnlock(c->lock_read_buf);
    605e:	23a8      	movs	r3, #168	; 0xa8
    6060:	58e8      	ldr	r0, [r5, r3]
    6062:	4bac      	ldr	r3, [pc, #688]	; (6314 <_mqtt_cycle+0x764>)
    6064:	4798      	blx	r3

        /* acquire package in cycle, such as PINGRESP or PUBLISH */
        rc = iotx_mc_cycle(pClient, &time);
        if (SUCCESS_RETURN == rc) {
    6066:	2c00      	cmp	r4, #0
    6068:	d100      	bne.n	606c <_mqtt_cycle+0x4bc>
    606a:	e5eb      	b.n	5c44 <_mqtt_cycle+0x94>
    606c:	46a0      	mov	r8, r4
    606e:	e0bc      	b.n	61ea <_mqtt_cycle+0x63a>
        result = MQTTPuback(c, topic_msg.packet_id, PUBACK);
    6070:	881c      	ldrh	r4, [r3, #0]
    iotx_time_init(&timer);
    6072:	a80d      	add	r0, sp, #52	; 0x34
    6074:	4bab      	ldr	r3, [pc, #684]	; (6324 <_mqtt_cycle+0x774>)
    6076:	4798      	blx	r3
    utils_time_countdown_ms(&timer, c->request_timeout_ms);
    6078:	68a9      	ldr	r1, [r5, #8]
    607a:	a80d      	add	r0, sp, #52	; 0x34
    607c:	4baa      	ldr	r3, [pc, #680]	; (6328 <_mqtt_cycle+0x778>)
    607e:	4798      	blx	r3
    HAL_MutexLock(c->lock_write_buf);
    6080:	23a4      	movs	r3, #164	; 0xa4
    6082:	58e8      	ldr	r0, [r5, r3]
    6084:	4ba5      	ldr	r3, [pc, #660]	; (631c <_mqtt_cycle+0x76c>)
    6086:	4798      	blx	r3
        len = MQTTSerialize_ack((unsigned char *)c->buf_send, c->buf_size_send, PUBACK, 0, msgId);
    6088:	9400      	str	r4, [sp, #0]
    608a:	2300      	movs	r3, #0
    608c:	2204      	movs	r2, #4
    608e:	6929      	ldr	r1, [r5, #16]
    6090:	69e8      	ldr	r0, [r5, #28]
    6092:	4ca8      	ldr	r4, [pc, #672]	; (6334 <_mqtt_cycle+0x784>)
    6094:	47a0      	blx	r4
    6096:	1e02      	subs	r2, r0, #0
    if (len <= 0) {
    6098:	dd0b      	ble.n	60b2 <_mqtt_cycle+0x502>
    rc = iotx_mc_send_packet(c, c->buf_send, len, &timer);
    609a:	ab0d      	add	r3, sp, #52	; 0x34
    609c:	69e9      	ldr	r1, [r5, #28]
    609e:	0028      	movs	r0, r5
    60a0:	4ca5      	ldr	r4, [pc, #660]	; (6338 <_mqtt_cycle+0x788>)
    60a2:	47a0      	blx	r4
    60a4:	1e04      	subs	r4, r0, #0
    if (rc != SUCCESS_RETURN) {
    60a6:	d10b      	bne.n	60c0 <_mqtt_cycle+0x510>
    HAL_MutexUnlock(c->lock_write_buf);
    60a8:	23a4      	movs	r3, #164	; 0xa4
    60aa:	58e8      	ldr	r0, [r5, r3]
    60ac:	4b99      	ldr	r3, [pc, #612]	; (6314 <_mqtt_cycle+0x764>)
    60ae:	4798      	blx	r3
    60b0:	e7d5      	b.n	605e <_mqtt_cycle+0x4ae>
        HAL_MutexUnlock(c->lock_write_buf);
    60b2:	23a4      	movs	r3, #164	; 0xa4
    60b4:	58e8      	ldr	r0, [r5, r3]
    60b6:	4b97      	ldr	r3, [pc, #604]	; (6314 <_mqtt_cycle+0x764>)
    60b8:	4798      	blx	r3
        return MQTT_PUBLISH_ACK_PACKET_ERROR;
    60ba:	2413      	movs	r4, #19
    60bc:	4264      	negs	r4, r4
    60be:	e7c8      	b.n	6052 <_mqtt_cycle+0x4a2>
        HAL_MutexUnlock(c->lock_write_buf);
    60c0:	23a4      	movs	r3, #164	; 0xa4
    60c2:	58e8      	ldr	r0, [r5, r3]
    60c4:	4b93      	ldr	r3, [pc, #588]	; (6314 <_mqtt_cycle+0x764>)
    60c6:	4798      	blx	r3
        return MQTT_NETWORK_ERROR;
    60c8:	240e      	movs	r4, #14
    60ca:	4264      	negs	r4, r4
    60cc:	e7c1      	b.n	6052 <_mqtt_cycle+0x4a2>
        mqtt_err("Invalid QOS, QOSvalue = %d", topic_msg.qos);
    60ce:	489b      	ldr	r0, [pc, #620]	; (633c <_mqtt_cycle+0x78c>)
    60d0:	4c97      	ldr	r4, [pc, #604]	; (6330 <_mqtt_cycle+0x780>)
    60d2:	47a0      	blx	r4
    60d4:	488e      	ldr	r0, [pc, #568]	; (6310 <_mqtt_cycle+0x760>)
    60d6:	47a0      	blx	r4
        return MQTT_PUBLISH_QOS_ERROR;
    60d8:	2414      	movs	r4, #20
    60da:	4264      	negs	r4, r4
    60dc:	e7b9      	b.n	6052 <_mqtt_cycle+0x4a2>
            mqtt_debug("UNSUBACK");
    60de:	4898      	ldr	r0, [pc, #608]	; (6340 <_mqtt_cycle+0x790>)
    60e0:	4c93      	ldr	r4, [pc, #588]	; (6330 <_mqtt_cycle+0x780>)
    60e2:	47a0      	blx	r4
    60e4:	488a      	ldr	r0, [pc, #552]	; (6310 <_mqtt_cycle+0x760>)
    60e6:	47a0      	blx	r4
    unsigned short mypacketid = 0;  /* should be the same as the packetid above */
    60e8:	a80f      	add	r0, sp, #60	; 0x3c
    60ea:	2300      	movs	r3, #0
    60ec:	8003      	strh	r3, [r0, #0]
    if (MQTTDeserialize_unsuback(&mypacketid, (unsigned char *)c->buf_read, c->buf_size_read) != 1) {
    60ee:	696a      	ldr	r2, [r5, #20]
    60f0:	6a29      	ldr	r1, [r5, #32]
    60f2:	4b94      	ldr	r3, [pc, #592]	; (6344 <_mqtt_cycle+0x794>)
    60f4:	4798      	blx	r3
    60f6:	2801      	cmp	r0, #1
    60f8:	d000      	beq.n	60fc <_mqtt_cycle+0x54c>
    60fa:	e0f4      	b.n	62e6 <_mqtt_cycle+0x736>
    if (NULL != c->handle_event.h_fp) {
    60fc:	23b0      	movs	r3, #176	; 0xb0
    60fe:	58eb      	ldr	r3, [r5, r3]
    6100:	2b00      	cmp	r3, #0
    6102:	d00a      	beq.n	611a <_mqtt_cycle+0x56a>
        msg.event_type = IOTX_MQTT_EVENT_UNSUBCRIBE_SUCCESS;
    6104:	aa12      	add	r2, sp, #72	; 0x48
    6106:	2306      	movs	r3, #6
    6108:	7013      	strb	r3, [r2, #0]
        msg.msg = (void *)(uintptr_t)mypacketid;
    610a:	ab0f      	add	r3, sp, #60	; 0x3c
    610c:	881b      	ldrh	r3, [r3, #0]
    610e:	6053      	str	r3, [r2, #4]
        _handle_event(&c->handle_event, c, &msg);
    6110:	0028      	movs	r0, r5
    6112:	30b0      	adds	r0, #176	; 0xb0
    6114:	0029      	movs	r1, r5
    6116:	4b80      	ldr	r3, [pc, #512]	; (6318 <_mqtt_cycle+0x768>)
    6118:	4798      	blx	r3
    HAL_MutexUnlock(c->lock_generic);
    611a:	6828      	ldr	r0, [r5, #0]
    611c:	4b7d      	ldr	r3, [pc, #500]	; (6314 <_mqtt_cycle+0x764>)
    611e:	4798      	blx	r3
    6120:	e58c      	b.n	5c3c <_mqtt_cycle+0x8c>
            mqtt_info("receive ping response!");
    6122:	4889      	ldr	r0, [pc, #548]	; (6348 <_mqtt_cycle+0x798>)
    6124:	4c82      	ldr	r4, [pc, #520]	; (6330 <_mqtt_cycle+0x780>)
    6126:	47a0      	blx	r4
    6128:	4879      	ldr	r0, [pc, #484]	; (6310 <_mqtt_cycle+0x760>)
    612a:	47a0      	blx	r4
    612c:	e586      	b.n	5c3c <_mqtt_cycle+0x8c>
            mqtt_err("INVALID TYPE");
    612e:	4887      	ldr	r0, [pc, #540]	; (634c <_mqtt_cycle+0x79c>)
    6130:	4c7f      	ldr	r4, [pc, #508]	; (6330 <_mqtt_cycle+0x780>)
    6132:	47a0      	blx	r4
    6134:	4876      	ldr	r0, [pc, #472]	; (6310 <_mqtt_cycle+0x760>)
    6136:	47a0      	blx	r4
            HAL_MutexUnlock(c->lock_read_buf);
    6138:	23a8      	movs	r3, #168	; 0xa8
    613a:	58e8      	ldr	r0, [r5, r3]
    613c:	4b75      	ldr	r3, [pc, #468]	; (6314 <_mqtt_cycle+0x764>)
    613e:	4798      	blx	r3
            return FAIL_RETURN;
    6140:	2301      	movs	r3, #1
    6142:	425b      	negs	r3, r3
    6144:	4698      	mov	r8, r3
    6146:	e050      	b.n	61ea <_mqtt_cycle+0x63a>
    dlist_t *prev = node->prev;
    6148:	6932      	ldr	r2, [r6, #16]
    dlist_t *next = node->next;
    614a:	6973      	ldr	r3, [r6, #20]
    prev->next = next;
    614c:	6053      	str	r3, [r2, #4]
    next->prev = prev;
    614e:	601a      	str	r2, [r3, #0]
            mqtt_free(node);
    6150:	0030      	movs	r0, r6
    6152:	4b7f      	ldr	r3, [pc, #508]	; (6350 <_mqtt_cycle+0x7a0>)
    6154:	4798      	blx	r3
    list_for_each_entry_safe(node, next_node, &pClient->list_pub_wait_ack, linked_list, iotx_mc_pub_info_t) {
    6156:	6963      	ldr	r3, [r4, #20]
    6158:	3b10      	subs	r3, #16
    615a:	0026      	movs	r6, r4
    615c:	3410      	adds	r4, #16
    615e:	42a5      	cmp	r5, r4
    6160:	d03e      	beq.n	61e0 <_mqtt_cycle+0x630>
    6162:	001c      	movs	r4, r3
        if (IOTX_MC_NODE_STATE_INVALID == node->node_state) {
    6164:	7933      	ldrb	r3, [r6, #4]
    6166:	2b01      	cmp	r3, #1
    6168:	d0ee      	beq.n	6148 <_mqtt_cycle+0x598>
        state = iotx_mc_get_client_state(pClient);
    616a:	4650      	mov	r0, sl
    616c:	47b8      	blx	r7
        if (state != IOTX_MC_STATE_CONNECTED) {
    616e:	2802      	cmp	r0, #2
    6170:	d1f1      	bne.n	6156 <_mqtt_cycle+0x5a6>
        if (utils_time_spend(&node->pub_start_time) <= (pClient->request_timeout_ms * 2)) {
    6172:	9607      	str	r6, [sp, #28]
    6174:	0030      	movs	r0, r6
    6176:	4b77      	ldr	r3, [pc, #476]	; (6354 <_mqtt_cycle+0x7a4>)
    6178:	4798      	blx	r3
    617a:	4653      	mov	r3, sl
    617c:	689b      	ldr	r3, [r3, #8]
    617e:	005b      	lsls	r3, r3, #1
    6180:	4298      	cmp	r0, r3
    6182:	d9e8      	bls.n	6156 <_mqtt_cycle+0x5a6>
        rc = MQTTRePublish(pClient, (char *)node->buf, node->len);
    6184:	68f3      	ldr	r3, [r6, #12]
    6186:	469b      	mov	fp, r3
    6188:	68b6      	ldr	r6, [r6, #8]
    iotx_time_init(&timer);
    618a:	a812      	add	r0, sp, #72	; 0x48
    618c:	4b65      	ldr	r3, [pc, #404]	; (6324 <_mqtt_cycle+0x774>)
    618e:	4798      	blx	r3
    utils_time_countdown_ms(&timer, c->request_timeout_ms);
    6190:	4653      	mov	r3, sl
    6192:	6899      	ldr	r1, [r3, #8]
    6194:	a812      	add	r0, sp, #72	; 0x48
    6196:	4b64      	ldr	r3, [pc, #400]	; (6328 <_mqtt_cycle+0x778>)
    6198:	4798      	blx	r3
    HAL_MutexLock(c->lock_write_buf);
    619a:	23a4      	movs	r3, #164	; 0xa4
    619c:	4652      	mov	r2, sl
    619e:	58d0      	ldr	r0, [r2, r3]
    61a0:	4b5e      	ldr	r3, [pc, #376]	; (631c <_mqtt_cycle+0x76c>)
    61a2:	4798      	blx	r3
    if (iotx_mc_send_packet(c, buf, len, &timer) != SUCCESS_RETURN) {
    61a4:	ab12      	add	r3, sp, #72	; 0x48
    61a6:	0032      	movs	r2, r6
    61a8:	4659      	mov	r1, fp
    61aa:	4650      	mov	r0, sl
    61ac:	4e62      	ldr	r6, [pc, #392]	; (6338 <_mqtt_cycle+0x788>)
    61ae:	47b0      	blx	r6
    61b0:	2800      	cmp	r0, #0
    61b2:	d108      	bne.n	61c6 <_mqtt_cycle+0x616>
    HAL_MutexUnlock(c->lock_write_buf);
    61b4:	23a4      	movs	r3, #164	; 0xa4
    61b6:	4652      	mov	r2, sl
    61b8:	58d0      	ldr	r0, [r2, r3]
    61ba:	4b56      	ldr	r3, [pc, #344]	; (6314 <_mqtt_cycle+0x764>)
    61bc:	4798      	blx	r3
        iotx_time_start(&node->pub_start_time);
    61be:	9807      	ldr	r0, [sp, #28]
    61c0:	4b65      	ldr	r3, [pc, #404]	; (6358 <_mqtt_cycle+0x7a8>)
    61c2:	4798      	blx	r3
    61c4:	e7c7      	b.n	6156 <_mqtt_cycle+0x5a6>
    61c6:	4655      	mov	r5, sl
        HAL_MutexUnlock(c->lock_write_buf);
    61c8:	23a4      	movs	r3, #164	; 0xa4
    61ca:	58e8      	ldr	r0, [r5, r3]
    61cc:	4b51      	ldr	r3, [pc, #324]	; (6314 <_mqtt_cycle+0x764>)
    61ce:	4798      	blx	r3
        iotx_time_start(&node->pub_start_time);
    61d0:	9807      	ldr	r0, [sp, #28]
    61d2:	4b61      	ldr	r3, [pc, #388]	; (6358 <_mqtt_cycle+0x7a8>)
    61d4:	4798      	blx	r3
            iotx_mc_set_client_state(pClient, IOTX_MC_STATE_DISCONNECTED);
    61d6:	2103      	movs	r1, #3
    61d8:	4650      	mov	r0, sl
    61da:	4b60      	ldr	r3, [pc, #384]	; (635c <_mqtt_cycle+0x7ac>)
    61dc:	4798      	blx	r3
    61de:	e000      	b.n	61e2 <_mqtt_cycle+0x632>
    61e0:	4655      	mov	r5, sl
    HAL_MutexUnlock(pClient->lock_list_pub);
    61e2:	23a0      	movs	r3, #160	; 0xa0
    61e4:	58e8      	ldr	r0, [r5, r3]
    61e6:	4b4b      	ldr	r3, [pc, #300]	; (6314 <_mqtt_cycle+0x764>)
    61e8:	4798      	blx	r3
            /* check list of wait publish ACK to remove node that is ACKED or timeout */
            MQTTPubInfoProc(pClient);
#endif
#endif
        }
        HAL_MutexUnlock(pClient->lock_yield);
    61ea:	464b      	mov	r3, r9
    61ec:	58e8      	ldr	r0, [r5, r3]
    61ee:	4b49      	ldr	r3, [pc, #292]	; (6314 <_mqtt_cycle+0x764>)
    61f0:	4798      	blx	r3

        left_t = iotx_time_left(&time);
    61f2:	a817      	add	r0, sp, #92	; 0x5c
    61f4:	4b5a      	ldr	r3, [pc, #360]	; (6360 <_mqtt_cycle+0x7b0>)
    61f6:	4798      	blx	r3
        if (left_t < 10) {
    61f8:	2809      	cmp	r0, #9
    61fa:	d847      	bhi.n	628c <_mqtt_cycle+0x6dc>
            HAL_SleepMs(left_t);
    61fc:	4b59      	ldr	r3, [pc, #356]	; (6364 <_mqtt_cycle+0x7b4>)
    61fe:	4798      	blx	r3
        } else {
            HAL_SleepMs(10);
        }
    } while (!utils_time_is_expired(&time));
    6200:	a817      	add	r0, sp, #92	; 0x5c
    6202:	4b59      	ldr	r3, [pc, #356]	; (6368 <_mqtt_cycle+0x7b8>)
    6204:	4798      	blx	r3
    6206:	2800      	cmp	r0, #0
    6208:	d000      	beq.n	620c <_mqtt_cycle+0x65c>
    620a:	e0bd      	b.n	6388 <_mqtt_cycle+0x7d8>
        if (SUCCESS_RETURN != rc) {
    620c:	4643      	mov	r3, r8
    620e:	2b00      	cmp	r3, #0
    6210:	d000      	beq.n	6214 <_mqtt_cycle+0x664>
    6212:	e4e0      	b.n	5bd6 <_mqtt_cycle+0x26>
        HAL_MutexLock(pClient->lock_yield);
    6214:	464b      	mov	r3, r9
    6216:	58e8      	ldr	r0, [r5, r3]
    6218:	4b40      	ldr	r3, [pc, #256]	; (631c <_mqtt_cycle+0x76c>)
    621a:	4798      	blx	r3
    if (!c) {
    621c:	2d00      	cmp	r5, #0
    621e:	d06c      	beq.n	62fa <_mqtt_cycle+0x74a>
    state = iotx_mc_get_client_state(c);
    6220:	0028      	movs	r0, r5
    6222:	4b52      	ldr	r3, [pc, #328]	; (636c <_mqtt_cycle+0x7bc>)
    6224:	4798      	blx	r3
    if (state != IOTX_MC_STATE_CONNECTED) {
    6226:	2802      	cmp	r0, #2
    6228:	d000      	beq.n	622c <_mqtt_cycle+0x67c>
    622a:	e4db      	b.n	5be4 <_mqtt_cycle+0x34>
    if (IOTX_MC_KEEPALIVE_PROBE_MAX < c->keepalive_probes) {
    622c:	7e2b      	ldrb	r3, [r5, #24]
    622e:	2b01      	cmp	r3, #1
    6230:	d90b      	bls.n	624a <_mqtt_cycle+0x69a>
        iotx_mc_set_client_state(c, IOTX_MC_STATE_DISCONNECTED);
    6232:	2103      	movs	r1, #3
    6234:	0028      	movs	r0, r5
    6236:	4b49      	ldr	r3, [pc, #292]	; (635c <_mqtt_cycle+0x7ac>)
    6238:	4798      	blx	r3
        c->keepalive_probes = 0;
    623a:	2300      	movs	r3, #0
    623c:	762b      	strb	r3, [r5, #24]
        mqtt_debug("keepalive_probes more than %u, disconnected\n", IOTX_MC_KEEPALIVE_PROBE_MAX);
    623e:	2101      	movs	r1, #1
    6240:	484b      	ldr	r0, [pc, #300]	; (6370 <_mqtt_cycle+0x7c0>)
    6242:	4c3b      	ldr	r4, [pc, #236]	; (6330 <_mqtt_cycle+0x780>)
    6244:	47a0      	blx	r4
    6246:	4832      	ldr	r0, [pc, #200]	; (6310 <_mqtt_cycle+0x760>)
    6248:	47a0      	blx	r4
    rc = iotx_mc_read_packet(c, timer, &packetType);
    624a:	aa0a      	add	r2, sp, #40	; 0x28
    624c:	a917      	add	r1, sp, #92	; 0x5c
    624e:	0028      	movs	r0, r5
    6250:	4b48      	ldr	r3, [pc, #288]	; (6374 <_mqtt_cycle+0x7c4>)
    6252:	4798      	blx	r3
    6254:	4680      	mov	r8, r0
    if (rc != SUCCESS_RETURN) {
    6256:	2800      	cmp	r0, #0
    6258:	d000      	beq.n	625c <_mqtt_cycle+0x6ac>
    625a:	e4cd      	b.n	5bf8 <_mqtt_cycle+0x48>
    if (MQTT_CPT_RESERVED == packetType) {
    625c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    625e:	2b00      	cmp	r3, #0
    6260:	d100      	bne.n	6264 <_mqtt_cycle+0x6b4>
    6262:	e4de      	b.n	5c22 <_mqtt_cycle+0x72>
    HAL_MutexLock(c->lock_generic);
    6264:	6828      	ldr	r0, [r5, #0]
    6266:	4c2d      	ldr	r4, [pc, #180]	; (631c <_mqtt_cycle+0x76c>)
    6268:	47a0      	blx	r4
    c->ping_mark = 0;
    626a:	2300      	movs	r3, #0
    626c:	632b      	str	r3, [r5, #48]	; 0x30
    c->keepalive_probes = 0;
    626e:	762b      	strb	r3, [r5, #24]
    HAL_MutexUnlock(c->lock_generic);
    6270:	6828      	ldr	r0, [r5, #0]
    6272:	4b28      	ldr	r3, [pc, #160]	; (6314 <_mqtt_cycle+0x764>)
    6274:	4798      	blx	r3
    HAL_MutexLock(c->lock_read_buf);
    6276:	23a8      	movs	r3, #168	; 0xa8
    6278:	58e8      	ldr	r0, [r5, r3]
    627a:	47a0      	blx	r4
    switch (packetType) {
    627c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    627e:	2b0d      	cmp	r3, #13
    6280:	d900      	bls.n	6284 <_mqtt_cycle+0x6d4>
    6282:	e754      	b.n	612e <_mqtt_cycle+0x57e>
    6284:	009b      	lsls	r3, r3, #2
    6286:	4a3c      	ldr	r2, [pc, #240]	; (6378 <_mqtt_cycle+0x7c8>)
    6288:	58d3      	ldr	r3, [r2, r3]
    628a:	469f      	mov	pc, r3
            HAL_SleepMs(10);
    628c:	200a      	movs	r0, #10
    628e:	4b35      	ldr	r3, [pc, #212]	; (6364 <_mqtt_cycle+0x7b4>)
    6290:	4798      	blx	r3
    6292:	e7b5      	b.n	6200 <_mqtt_cycle+0x650>
                mqtt_err("recvPubackProc error,result = %d", rc);
    6294:	2413      	movs	r4, #19
    6296:	4264      	negs	r4, r4
    6298:	0021      	movs	r1, r4
    629a:	4838      	ldr	r0, [pc, #224]	; (637c <_mqtt_cycle+0x7cc>)
    629c:	4e24      	ldr	r6, [pc, #144]	; (6330 <_mqtt_cycle+0x780>)
    629e:	47b0      	blx	r6
    62a0:	481b      	ldr	r0, [pc, #108]	; (6310 <_mqtt_cycle+0x760>)
    62a2:	47b0      	blx	r6
        return MQTT_PUBLISH_ACK_PACKET_ERROR;
    62a4:	46a0      	mov	r8, r4
    62a6:	e59b      	b.n	5de0 <_mqtt_cycle+0x230>
    msg.msg = (void *)(uintptr_t)mypacketid;
    62a8:	ab0c      	add	r3, sp, #48	; 0x30
    62aa:	881c      	ldrh	r4, [r3, #0]
    62ac:	9410      	str	r4, [sp, #64]	; 0x40
    62ae:	e56e      	b.n	5d8e <_mqtt_cycle+0x1de>
    HAL_MutexUnlock(c->lock_generic);
    62b0:	6828      	ldr	r0, [r5, #0]
    62b2:	4b18      	ldr	r3, [pc, #96]	; (6314 <_mqtt_cycle+0x764>)
    62b4:	4798      	blx	r3
        mqtt_debug("NO matching any topic, call default handle function");
    62b6:	4832      	ldr	r0, [pc, #200]	; (6380 <_mqtt_cycle+0x7d0>)
    62b8:	4c1d      	ldr	r4, [pc, #116]	; (6330 <_mqtt_cycle+0x780>)
    62ba:	47a0      	blx	r4
    62bc:	4814      	ldr	r0, [pc, #80]	; (6310 <_mqtt_cycle+0x760>)
    62be:	47a0      	blx	r4
        if (NULL != c->handle_event.h_fp) {
    62c0:	23b0      	movs	r3, #176	; 0xb0
    62c2:	58eb      	ldr	r3, [r5, r3]
    62c4:	2b00      	cmp	r3, #0
    62c6:	d100      	bne.n	62ca <_mqtt_cycle+0x71a>
    62c8:	e6ab      	b.n	6022 <_mqtt_cycle+0x472>
            msg.event_type = IOTX_MQTT_EVENT_PUBLISH_RECEIVED;
    62ca:	aa0d      	add	r2, sp, #52	; 0x34
    62cc:	230c      	movs	r3, #12
    62ce:	7013      	strb	r3, [r2, #0]
            msg.msg = topic_msg;
    62d0:	ab12      	add	r3, sp, #72	; 0x48
    62d2:	6053      	str	r3, [r2, #4]
            _handle_event(&c->handle_event, c, &msg);
    62d4:	0028      	movs	r0, r5
    62d6:	30b0      	adds	r0, #176	; 0xb0
    62d8:	0029      	movs	r1, r5
    62da:	4b0f      	ldr	r3, [pc, #60]	; (6318 <_mqtt_cycle+0x768>)
    62dc:	4798      	blx	r3
    62de:	e6a0      	b.n	6022 <_mqtt_cycle+0x472>
        return MQTT_PUBLISH_PACKET_ERROR;
    62e0:	2415      	movs	r4, #21
    62e2:	4264      	negs	r4, r4
    62e4:	e6b5      	b.n	6052 <_mqtt_cycle+0x4a2>
                mqtt_err("recvUnsubAckProc error,result = %d", rc);
    62e6:	240f      	movs	r4, #15
    62e8:	4264      	negs	r4, r4
    62ea:	0021      	movs	r1, r4
    62ec:	4825      	ldr	r0, [pc, #148]	; (6384 <_mqtt_cycle+0x7d4>)
    62ee:	4e10      	ldr	r6, [pc, #64]	; (6330 <_mqtt_cycle+0x780>)
    62f0:	47b0      	blx	r6
    62f2:	4807      	ldr	r0, [pc, #28]	; (6310 <_mqtt_cycle+0x760>)
    62f4:	47b0      	blx	r6
        return MQTT_UNSUBSCRIBE_ACK_PACKET_ERROR;
    62f6:	46a0      	mov	r8, r4
    62f8:	e572      	b.n	5de0 <_mqtt_cycle+0x230>
        return FAIL_RETURN;
    62fa:	2301      	movs	r3, #1
    62fc:	425b      	negs	r3, r3
    62fe:	4698      	mov	r8, r3
    6300:	e773      	b.n	61ea <_mqtt_cycle+0x63a>
    msg.msg = (void *)(uintptr_t)mypacketid;
    6302:	ab0c      	add	r3, sp, #48	; 0x30
    6304:	881c      	ldrh	r4, [r3, #0]
    6306:	9410      	str	r4, [sp, #64]	; 0x40
    6308:	e541      	b.n	5d8e <_mqtt_cycle+0x1de>
    630a:	46c0      	nop			; (mov r8, r8)
    630c:	0000afdc 	.word	0x0000afdc
    6310:	00009cb4 	.word	0x00009cb4
    6314:	00007d31 	.word	0x00007d31
    6318:	00004d51 	.word	0x00004d51
    631c:	00007d2f 	.word	0x00007d2f
    6320:	00004d81 	.word	0x00004d81
    6324:	00004d2d 	.word	0x00004d2d
    6328:	00004d39 	.word	0x00004d39
    632c:	0000b040 	.word	0x0000b040
    6330:	00007d35 	.word	0x00007d35
    6334:	0000732d 	.word	0x0000732d
    6338:	00004e99 	.word	0x00004e99
    633c:	0000b024 	.word	0x0000b024
    6340:	0000b064 	.word	0x0000b064
    6344:	00007519 	.word	0x00007519
    6348:	0000b070 	.word	0x0000b070
    634c:	0000b088 	.word	0x0000b088
    6350:	00007c5d 	.word	0x00007c5d
    6354:	00004cc5 	.word	0x00004cc5
    6358:	00004cb1 	.word	0x00004cb1
    635c:	00004e21 	.word	0x00004e21
    6360:	00004d01 	.word	0x00004d01
    6364:	00007d65 	.word	0x00007d65
    6368:	00004cdd 	.word	0x00004cdd
    636c:	00004e41 	.word	0x00004e41
    6370:	0000ae0c 	.word	0x0000ae0c
    6374:	000050a9 	.word	0x000050a9
    6378:	0000a848 	.word	0x0000a848
    637c:	0000b098 	.word	0x0000b098
    6380:	0000aff0 	.word	0x0000aff0
    6384:	0000b0bc 	.word	0x0000b0bc
}
    6388:	b019      	add	sp, #100	; 0x64
    638a:	bc3c      	pop	{r2, r3, r4, r5}
    638c:	4690      	mov	r8, r2
    638e:	4699      	mov	r9, r3
    6390:	46a2      	mov	sl, r4
    6392:	46ab      	mov	fp, r5
    6394:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6396:	46c0      	nop			; (mov r8, r8)

00006398 <wrapper_mqtt_check_state>:


/* check MQTT client is in normal state */
/* 0, in abnormal state; 1, in normal state */
int wrapper_mqtt_check_state(void *client)
{
    6398:	b510      	push	{r4, lr}
    if (!client) {
    639a:	2800      	cmp	r0, #0
    639c:	d005      	beq.n	63aa <wrapper_mqtt_check_state+0x12>
        return 0;
    }

    if (iotx_mc_get_client_state((iotx_mc_client_t *)client) == IOTX_MC_STATE_CONNECTED) {
    639e:	4b04      	ldr	r3, [pc, #16]	; (63b0 <wrapper_mqtt_check_state+0x18>)
    63a0:	4798      	blx	r3
    63a2:	3802      	subs	r0, #2
        return 0;
    63a4:	4243      	negs	r3, r0
    63a6:	4158      	adcs	r0, r3
        return 1;
    }

    return 0;
}
    63a8:	bd10      	pop	{r4, pc}
        return 0;
    63aa:	2000      	movs	r0, #0
    63ac:	e7fc      	b.n	63a8 <wrapper_mqtt_check_state+0x10>
    63ae:	46c0      	nop			; (mov r8, r8)
    63b0:	00004e41 	.word	0x00004e41

000063b4 <wrapper_mqtt_release>:
{
    63b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    63b6:	46d6      	mov	lr, sl
    63b8:	464f      	mov	r7, r9
    63ba:	4646      	mov	r6, r8
    63bc:	b5c0      	push	{r6, r7, lr}
    63be:	b082      	sub	sp, #8
    63c0:	4680      	mov	r8, r0
    if (NULL == c) {
    63c2:	2800      	cmp	r0, #0
    63c4:	d100      	bne.n	63c8 <wrapper_mqtt_release+0x14>
    63c6:	e0a7      	b.n	6518 <wrapper_mqtt_release+0x164>
    pClient = (iotx_mc_client_t *)*c;
    63c8:	6805      	ldr	r5, [r0, #0]
    if (NULL == pClient) {
    63ca:	2d00      	cmp	r5, #0
    63cc:	d100      	bne.n	63d0 <wrapper_mqtt_release+0x1c>
    63ce:	e0a6      	b.n	651e <wrapper_mqtt_release+0x16a>
    HAL_SleepMs(100);
    63d0:	2064      	movs	r0, #100	; 0x64
    63d2:	4b54      	ldr	r3, [pc, #336]	; (6524 <wrapper_mqtt_release+0x170>)
    63d4:	4798      	blx	r3
    if (wrapper_mqtt_check_state(pClient)) {
    63d6:	0028      	movs	r0, r5
    63d8:	4b53      	ldr	r3, [pc, #332]	; (6528 <wrapper_mqtt_release+0x174>)
    63da:	4798      	blx	r3
    63dc:	2800      	cmp	r0, #0
    63de:	d11a      	bne.n	6416 <wrapper_mqtt_release+0x62>
    pClient->ipstack->disconnect(pClient->ipstack);
    63e0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    63e2:	69c3      	ldr	r3, [r0, #28]
    63e4:	4798      	blx	r3
    iotx_mc_set_client_state(pClient, IOTX_MC_STATE_INITIALIZED);
    63e6:	2101      	movs	r1, #1
    63e8:	0028      	movs	r0, r5
    63ea:	4c50      	ldr	r4, [pc, #320]	; (652c <wrapper_mqtt_release+0x178>)
    63ec:	47a0      	blx	r4
    mqtt_info("mqtt disconnect!");
    63ee:	4850      	ldr	r0, [pc, #320]	; (6530 <wrapper_mqtt_release+0x17c>)
    63f0:	4f50      	ldr	r7, [pc, #320]	; (6534 <wrapper_mqtt_release+0x180>)
    63f2:	47b8      	blx	r7
    63f4:	4850      	ldr	r0, [pc, #320]	; (6538 <wrapper_mqtt_release+0x184>)
    63f6:	47b8      	blx	r7
    iotx_mc_set_client_state(pClient, IOTX_MC_STATE_INVALID);
    63f8:	2100      	movs	r1, #0
    63fa:	0028      	movs	r0, r5
    63fc:	47a0      	blx	r4
    HAL_SleepMs(100);
    63fe:	2064      	movs	r0, #100	; 0x64
    6400:	4b48      	ldr	r3, [pc, #288]	; (6524 <wrapper_mqtt_release+0x170>)
    6402:	4798      	blx	r3
    if (pClient->first_sub_handle != NULL) {
    6404:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    6406:	2c00      	cmp	r4, #0
    6408:	d038      	beq.n	647c <wrapper_mqtt_release+0xc8>
                mqtt_free(handler->topic_filter);
    640a:	4b4c      	ldr	r3, [pc, #304]	; (653c <wrapper_mqtt_release+0x188>)
    640c:	469a      	mov	sl, r3
    640e:	2300      	movs	r3, #0
    6410:	4699      	mov	r9, r3
            mqtt_free(handler);
    6412:	4656      	mov	r6, sl
    6414:	e02a      	b.n	646c <wrapper_mqtt_release+0xb8>
    HAL_MutexLock(c->lock_write_buf);
    6416:	23a4      	movs	r3, #164	; 0xa4
    6418:	58e8      	ldr	r0, [r5, r3]
    641a:	4b49      	ldr	r3, [pc, #292]	; (6540 <wrapper_mqtt_release+0x18c>)
    641c:	4798      	blx	r3
    len = MQTTSerialize_disconnect((unsigned char *)c->buf_send, c->buf_size_send);
    641e:	6929      	ldr	r1, [r5, #16]
    6420:	69e8      	ldr	r0, [r5, #28]
    6422:	4b48      	ldr	r3, [pc, #288]	; (6544 <wrapper_mqtt_release+0x190>)
    6424:	4798      	blx	r3
    6426:	0004      	movs	r4, r0
    iotx_time_init(&timer);
    6428:	a801      	add	r0, sp, #4
    642a:	4b47      	ldr	r3, [pc, #284]	; (6548 <wrapper_mqtt_release+0x194>)
    642c:	4798      	blx	r3
    utils_time_countdown_ms(&timer, c->request_timeout_ms);
    642e:	68a9      	ldr	r1, [r5, #8]
    6430:	a801      	add	r0, sp, #4
    6432:	4b46      	ldr	r3, [pc, #280]	; (654c <wrapper_mqtt_release+0x198>)
    6434:	4798      	blx	r3
    if (len > 0) {
    6436:	2c00      	cmp	r4, #0
    6438:	dd11      	ble.n	645e <wrapper_mqtt_release+0xaa>
        rc = iotx_mc_send_packet(c, c->buf_send, len, &timer);           /* send the disconnect packet */
    643a:	ab01      	add	r3, sp, #4
    643c:	0022      	movs	r2, r4
    643e:	69e9      	ldr	r1, [r5, #28]
    6440:	0028      	movs	r0, r5
    6442:	4c43      	ldr	r4, [pc, #268]	; (6550 <wrapper_mqtt_release+0x19c>)
    6444:	47a0      	blx	r4
    6446:	0004      	movs	r4, r0
    HAL_MutexUnlock(c->lock_write_buf);
    6448:	23a4      	movs	r3, #164	; 0xa4
    644a:	58e8      	ldr	r0, [r5, r3]
    644c:	4b41      	ldr	r3, [pc, #260]	; (6554 <wrapper_mqtt_release+0x1a0>)
    644e:	4798      	blx	r3
        mqtt_debug("rc = MQTTDisconnect() = %d", rc);
    6450:	0021      	movs	r1, r4
    6452:	4841      	ldr	r0, [pc, #260]	; (6558 <wrapper_mqtt_release+0x1a4>)
    6454:	4c37      	ldr	r4, [pc, #220]	; (6534 <wrapper_mqtt_release+0x180>)
    6456:	47a0      	blx	r4
    6458:	4837      	ldr	r0, [pc, #220]	; (6538 <wrapper_mqtt_release+0x184>)
    645a:	47a0      	blx	r4
    645c:	e7c0      	b.n	63e0 <wrapper_mqtt_release+0x2c>
    int             rc = FAIL_RETURN;
    645e:	2401      	movs	r4, #1
    6460:	4264      	negs	r4, r4
    6462:	e7f1      	b.n	6448 <wrapper_mqtt_release+0x94>
            mqtt_free(handler);
    6464:	0020      	movs	r0, r4
    6466:	47b0      	blx	r6
            handler = next_handler;
    6468:	1e3c      	subs	r4, r7, #0
        while (handler) {
    646a:	d007      	beq.n	647c <wrapper_mqtt_release+0xc8>
            next_handler = handler->next;
    646c:	6927      	ldr	r7, [r4, #16]
            if (handler->topic_filter != NULL) {
    646e:	6820      	ldr	r0, [r4, #0]
    6470:	2800      	cmp	r0, #0
    6472:	d0f7      	beq.n	6464 <wrapper_mqtt_release+0xb0>
                mqtt_free(handler->topic_filter);
    6474:	47d0      	blx	sl
    6476:	464b      	mov	r3, r9
    6478:	6023      	str	r3, [r4, #0]
    647a:	e7f3      	b.n	6464 <wrapper_mqtt_release+0xb0>
    HAL_MutexDestroy(pClient->lock_generic);
    647c:	6828      	ldr	r0, [r5, #0]
    647e:	4c37      	ldr	r4, [pc, #220]	; (655c <wrapper_mqtt_release+0x1a8>)
    6480:	47a0      	blx	r4
    HAL_MutexDestroy(pClient->lock_list_pub);
    6482:	23a0      	movs	r3, #160	; 0xa0
    6484:	58e8      	ldr	r0, [r5, r3]
    6486:	47a0      	blx	r4
    HAL_MutexDestroy(pClient->lock_write_buf);
    6488:	23a4      	movs	r3, #164	; 0xa4
    648a:	58e8      	ldr	r0, [r5, r3]
    648c:	47a0      	blx	r4
    HAL_MutexDestroy(pClient->lock_yield);
    648e:	23ac      	movs	r3, #172	; 0xac
    6490:	58e8      	ldr	r0, [r5, r3]
    6492:	47a0      	blx	r4
    HAL_MutexDestroy(pClient->lock_read_buf);
    6494:	23a8      	movs	r3, #168	; 0xa8
    6496:	58e8      	ldr	r0, [r5, r3]
    6498:	47a0      	blx	r4
    list_for_each_entry_safe(node, next_node, &pClient->list_pub_wait_ack, linked_list, iotx_mc_pub_info_t) {
    649a:	239c      	movs	r3, #156	; 0x9c
    649c:	58eb      	ldr	r3, [r5, r3]
    649e:	0018      	movs	r0, r3
    64a0:	685c      	ldr	r4, [r3, #4]
    64a2:	3810      	subs	r0, #16
    64a4:	3c10      	subs	r4, #16
    64a6:	002f      	movs	r7, r5
    64a8:	3798      	adds	r7, #152	; 0x98
    64aa:	429f      	cmp	r7, r3
    64ac:	d00d      	beq.n	64ca <wrapper_mqtt_release+0x116>
        mqtt_free(node);
    64ae:	4e23      	ldr	r6, [pc, #140]	; (653c <wrapper_mqtt_release+0x188>)
    dlist_t *prev = node->prev;
    64b0:	6902      	ldr	r2, [r0, #16]
    dlist_t *next = node->next;
    64b2:	6943      	ldr	r3, [r0, #20]
    prev->next = next;
    64b4:	6053      	str	r3, [r2, #4]
    next->prev = prev;
    64b6:	601a      	str	r2, [r3, #0]
    64b8:	47b0      	blx	r6
    list_for_each_entry_safe(node, next_node, &pClient->list_pub_wait_ack, linked_list, iotx_mc_pub_info_t) {
    64ba:	6962      	ldr	r2, [r4, #20]
    64bc:	0023      	movs	r3, r4
    64be:	3310      	adds	r3, #16
    64c0:	0020      	movs	r0, r4
    64c2:	3a10      	subs	r2, #16
    64c4:	0014      	movs	r4, r2
    64c6:	429f      	cmp	r7, r3
    64c8:	d1f2      	bne.n	64b0 <wrapper_mqtt_release+0xfc>
    if (pClient->buf_send != NULL) {
    64ca:	69e8      	ldr	r0, [r5, #28]
    64cc:	2800      	cmp	r0, #0
    64ce:	d003      	beq.n	64d8 <wrapper_mqtt_release+0x124>
        mqtt_free(pClient->buf_send);
    64d0:	4b1a      	ldr	r3, [pc, #104]	; (653c <wrapper_mqtt_release+0x188>)
    64d2:	4798      	blx	r3
    64d4:	2300      	movs	r3, #0
    64d6:	61eb      	str	r3, [r5, #28]
    if (pClient->buf_read != NULL) {
    64d8:	6a28      	ldr	r0, [r5, #32]
    64da:	2800      	cmp	r0, #0
    64dc:	d003      	beq.n	64e6 <wrapper_mqtt_release+0x132>
        mqtt_free(pClient->buf_read);
    64de:	4b17      	ldr	r3, [pc, #92]	; (653c <wrapper_mqtt_release+0x188>)
    64e0:	4798      	blx	r3
    64e2:	2300      	movs	r3, #0
    64e4:	622b      	str	r3, [r5, #32]
    if (NULL != pClient->ipstack) {
    64e6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    64e8:	2800      	cmp	r0, #0
    64ea:	d003      	beq.n	64f4 <wrapper_mqtt_release+0x140>
        mqtt_free(pClient->ipstack);
    64ec:	4b13      	ldr	r3, [pc, #76]	; (653c <wrapper_mqtt_release+0x188>)
    64ee:	4798      	blx	r3
    64f0:	2300      	movs	r3, #0
    64f2:	62ab      	str	r3, [r5, #40]	; 0x28
    mqtt_free(pClient);
    64f4:	0028      	movs	r0, r5
    64f6:	4b11      	ldr	r3, [pc, #68]	; (653c <wrapper_mqtt_release+0x188>)
    64f8:	4798      	blx	r3
    *c = NULL;
    64fa:	2300      	movs	r3, #0
    64fc:	4642      	mov	r2, r8
    64fe:	6013      	str	r3, [r2, #0]
    mqtt_info("mqtt release!");
    6500:	4817      	ldr	r0, [pc, #92]	; (6560 <wrapper_mqtt_release+0x1ac>)
    6502:	4c0c      	ldr	r4, [pc, #48]	; (6534 <wrapper_mqtt_release+0x180>)
    6504:	47a0      	blx	r4
    6506:	480c      	ldr	r0, [pc, #48]	; (6538 <wrapper_mqtt_release+0x184>)
    6508:	47a0      	blx	r4
    return SUCCESS_RETURN;
    650a:	2000      	movs	r0, #0
}
    650c:	b002      	add	sp, #8
    650e:	bc1c      	pop	{r2, r3, r4}
    6510:	4690      	mov	r8, r2
    6512:	4699      	mov	r9, r3
    6514:	46a2      	mov	sl, r4
    6516:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return NULL_VALUE_ERROR;
    6518:	2002      	movs	r0, #2
    651a:	4240      	negs	r0, r0
    651c:	e7f6      	b.n	650c <wrapper_mqtt_release+0x158>
        return NULL_VALUE_ERROR;
    651e:	2002      	movs	r0, #2
    6520:	4240      	negs	r0, r0
    6522:	e7f3      	b.n	650c <wrapper_mqtt_release+0x158>
    6524:	00007d65 	.word	0x00007d65
    6528:	00006399 	.word	0x00006399
    652c:	00004e21 	.word	0x00004e21
    6530:	0000b0fc 	.word	0x0000b0fc
    6534:	00007d35 	.word	0x00007d35
    6538:	00009cb4 	.word	0x00009cb4
    653c:	00007c5d 	.word	0x00007c5d
    6540:	00007d2f 	.word	0x00007d2f
    6544:	00006ed1 	.word	0x00006ed1
    6548:	00004d2d 	.word	0x00004d2d
    654c:	00004d39 	.word	0x00004d39
    6550:	00004e99 	.word	0x00004e99
    6554:	00007d31 	.word	0x00007d31
    6558:	0000b0e0 	.word	0x0000b0e0
    655c:	00007d2d 	.word	0x00007d2d
    6560:	0000b110 	.word	0x0000b110

00006564 <wrapper_mqtt_yield>:
{
    6564:	b5f0      	push	{r4, r5, r6, r7, lr}
    6566:	b085      	sub	sp, #20
    6568:	1e04      	subs	r4, r0, #0
    if (pClient == NULL) {
    656a:	d100      	bne.n	656e <wrapper_mqtt_yield+0xa>
    656c:	e107      	b.n	677e <wrapper_mqtt_yield+0x21a>
    if (timeout_ms < 0) {
    656e:	2900      	cmp	r1, #0
    6570:	db1e      	blt.n	65b0 <wrapper_mqtt_yield+0x4c>
    if (timeout_ms == 0) {
    6572:	d100      	bne.n	6576 <wrapper_mqtt_yield+0x12>
        timeout_ms = 10;
    6574:	310a      	adds	r1, #10
    pClient->cycle_timeout_ms = timeout_ms;
    6576:	60e1      	str	r1, [r4, #12]
    HAL_MutexLock(pClient->lock_yield);
    6578:	23ac      	movs	r3, #172	; 0xac
    657a:	58e0      	ldr	r0, [r4, r3]
    657c:	4b8e      	ldr	r3, [pc, #568]	; (67b8 <wrapper_mqtt_yield+0x254>)
    657e:	4798      	blx	r3
    if (!wrapper_mqtt_check_state(pClient)) {
    6580:	0020      	movs	r0, r4
    6582:	4b8e      	ldr	r3, [pc, #568]	; (67bc <wrapper_mqtt_yield+0x258>)
    6584:	4798      	blx	r3
    6586:	2800      	cmp	r0, #0
    6588:	d11a      	bne.n	65c0 <wrapper_mqtt_yield+0x5c>
    currentState = iotx_mc_get_client_state(pClient);
    658a:	0020      	movs	r0, r4
    658c:	4b8c      	ldr	r3, [pc, #560]	; (67c0 <wrapper_mqtt_yield+0x25c>)
    658e:	4798      	blx	r3
        if (IOTX_MC_STATE_DISCONNECTED_RECONNECTING == currentState) {
    6590:	2804      	cmp	r0, #4
    6592:	d100      	bne.n	6596 <wrapper_mqtt_yield+0x32>
    6594:	e078      	b.n	6688 <wrapper_mqtt_yield+0x124>
        if (IOTX_MC_STATE_DISCONNECTED == currentState) {
    6596:	2803      	cmp	r0, #3
    6598:	d100      	bne.n	659c <wrapper_mqtt_yield+0x38>
    659a:	e0cf      	b.n	673c <wrapper_mqtt_yield+0x1d8>
    HAL_MutexUnlock(pClient->lock_yield);
    659c:	23ac      	movs	r3, #172	; 0xac
    659e:	58e0      	ldr	r0, [r4, r3]
    65a0:	4b88      	ldr	r3, [pc, #544]	; (67c4 <wrapper_mqtt_yield+0x260>)
    65a2:	4798      	blx	r3
    _mqtt_cycle(client);
    65a4:	0020      	movs	r0, r4
    65a6:	4b88      	ldr	r3, [pc, #544]	; (67c8 <wrapper_mqtt_yield+0x264>)
    65a8:	4798      	blx	r3
    return 0;
    65aa:	2000      	movs	r0, #0
}
    65ac:	b005      	add	sp, #20
    65ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mqtt_err("Invalid argument, timeout_ms = %d", timeout_ms);
    65b0:	4886      	ldr	r0, [pc, #536]	; (67cc <wrapper_mqtt_yield+0x268>)
    65b2:	4c87      	ldr	r4, [pc, #540]	; (67d0 <wrapper_mqtt_yield+0x26c>)
    65b4:	47a0      	blx	r4
    65b6:	4887      	ldr	r0, [pc, #540]	; (67d4 <wrapper_mqtt_yield+0x270>)
    65b8:	47a0      	blx	r4
        return -1;
    65ba:	2001      	movs	r0, #1
    65bc:	4240      	negs	r0, r0
    65be:	e7f5      	b.n	65ac <wrapper_mqtt_yield+0x48>
    if (!utils_time_is_expired(&pClient->next_ping_time)) {
    65c0:	0025      	movs	r5, r4
    65c2:	352c      	adds	r5, #44	; 0x2c
    65c4:	0028      	movs	r0, r5
    65c6:	4b84      	ldr	r3, [pc, #528]	; (67d8 <wrapper_mqtt_yield+0x274>)
    65c8:	4798      	blx	r3
    65ca:	2800      	cmp	r0, #0
    65cc:	d0dd      	beq.n	658a <wrapper_mqtt_yield+0x26>
    utils_time_countdown_ms(&pClient->next_ping_time, pClient->connect_data.keepAliveInterval * 1000);
    65ce:	2358      	movs	r3, #88	; 0x58
    65d0:	5ae1      	ldrh	r1, [r4, r3]
    65d2:	26fa      	movs	r6, #250	; 0xfa
    65d4:	00b6      	lsls	r6, r6, #2
    65d6:	4371      	muls	r1, r6
    65d8:	0028      	movs	r0, r5
    65da:	4d80      	ldr	r5, [pc, #512]	; (67dc <wrapper_mqtt_yield+0x278>)
    65dc:	47a8      	blx	r5
    iotx_time_init(&timer);
    65de:	a802      	add	r0, sp, #8
    65e0:	4b7f      	ldr	r3, [pc, #508]	; (67e0 <wrapper_mqtt_yield+0x27c>)
    65e2:	4798      	blx	r3
    utils_time_countdown_ms(&timer, 1000);
    65e4:	0031      	movs	r1, r6
    65e6:	a802      	add	r0, sp, #8
    65e8:	47a8      	blx	r5
    HAL_MutexLock(pClient->lock_write_buf);
    65ea:	23a4      	movs	r3, #164	; 0xa4
    65ec:	58e0      	ldr	r0, [r4, r3]
    65ee:	4b72      	ldr	r3, [pc, #456]	; (67b8 <wrapper_mqtt_yield+0x254>)
    65f0:	4798      	blx	r3
    len = MQTTSerialize_pingreq((unsigned char *)pClient->buf_send, pClient->buf_size_send);
    65f2:	6921      	ldr	r1, [r4, #16]
    65f4:	69e0      	ldr	r0, [r4, #28]
    65f6:	4b7b      	ldr	r3, [pc, #492]	; (67e4 <wrapper_mqtt_yield+0x280>)
    65f8:	4798      	blx	r3
    65fa:	0005      	movs	r5, r0
    mqtt_debug("len = MQTTSerialize_pingreq() = %d", len);
    65fc:	0001      	movs	r1, r0
    65fe:	487a      	ldr	r0, [pc, #488]	; (67e8 <wrapper_mqtt_yield+0x284>)
    6600:	4e73      	ldr	r6, [pc, #460]	; (67d0 <wrapper_mqtt_yield+0x26c>)
    6602:	47b0      	blx	r6
    6604:	4873      	ldr	r0, [pc, #460]	; (67d4 <wrapper_mqtt_yield+0x270>)
    6606:	47b0      	blx	r6
    if (len <= 0) {
    6608:	2d00      	cmp	r5, #0
    660a:	dd1b      	ble.n	6644 <wrapper_mqtt_yield+0xe0>
    rc = iotx_mc_send_packet(pClient, pClient->buf_send, len, &timer);
    660c:	ab02      	add	r3, sp, #8
    660e:	002a      	movs	r2, r5
    6610:	69e1      	ldr	r1, [r4, #28]
    6612:	0020      	movs	r0, r4
    6614:	4d75      	ldr	r5, [pc, #468]	; (67ec <wrapper_mqtt_yield+0x288>)
    6616:	47a8      	blx	r5
    if (SUCCESS_RETURN != rc) {
    6618:	2800      	cmp	r0, #0
    661a:	d11f      	bne.n	665c <wrapper_mqtt_yield+0xf8>
    HAL_MutexUnlock(pClient->lock_write_buf);
    661c:	23a4      	movs	r3, #164	; 0xa4
    661e:	58e0      	ldr	r0, [r4, r3]
    6620:	4d68      	ldr	r5, [pc, #416]	; (67c4 <wrapper_mqtt_yield+0x260>)
    6622:	47a8      	blx	r5
    mqtt_info("send MQTT ping...");
    6624:	4872      	ldr	r0, [pc, #456]	; (67f0 <wrapper_mqtt_yield+0x28c>)
    6626:	4e6a      	ldr	r6, [pc, #424]	; (67d0 <wrapper_mqtt_yield+0x26c>)
    6628:	47b0      	blx	r6
    662a:	486a      	ldr	r0, [pc, #424]	; (67d4 <wrapper_mqtt_yield+0x270>)
    662c:	47b0      	blx	r6
    HAL_MutexLock(pClient->lock_generic);
    662e:	6820      	ldr	r0, [r4, #0]
    6630:	4b61      	ldr	r3, [pc, #388]	; (67b8 <wrapper_mqtt_yield+0x254>)
    6632:	4798      	blx	r3
    pClient->ping_mark = 1;
    6634:	2301      	movs	r3, #1
    6636:	6323      	str	r3, [r4, #48]	; 0x30
    pClient->keepalive_probes++;
    6638:	7e23      	ldrb	r3, [r4, #24]
    663a:	3301      	adds	r3, #1
    663c:	7623      	strb	r3, [r4, #24]
    HAL_MutexUnlock(pClient->lock_generic);
    663e:	6820      	ldr	r0, [r4, #0]
    6640:	47a8      	blx	r5
    6642:	e7a2      	b.n	658a <wrapper_mqtt_yield+0x26>
        mqtt_err("Serialize ping request is error");
    6644:	486b      	ldr	r0, [pc, #428]	; (67f4 <wrapper_mqtt_yield+0x290>)
    6646:	4d62      	ldr	r5, [pc, #392]	; (67d0 <wrapper_mqtt_yield+0x26c>)
    6648:	47a8      	blx	r5
    664a:	4862      	ldr	r0, [pc, #392]	; (67d4 <wrapper_mqtt_yield+0x270>)
    664c:	47a8      	blx	r5
        HAL_MutexUnlock(pClient->lock_write_buf);
    664e:	23a4      	movs	r3, #164	; 0xa4
    6650:	58e0      	ldr	r0, [r4, r3]
    6652:	4b5c      	ldr	r3, [pc, #368]	; (67c4 <wrapper_mqtt_yield+0x260>)
    6654:	4798      	blx	r3
        return MQTT_PING_PACKET_ERROR;
    6656:	211f      	movs	r1, #31
    6658:	4249      	negs	r1, r1
    665a:	e00f      	b.n	667c <wrapper_mqtt_yield+0x118>
        mqtt_err("ping outstanding is error,result = %d", rc);
    665c:	0001      	movs	r1, r0
    665e:	4866      	ldr	r0, [pc, #408]	; (67f8 <wrapper_mqtt_yield+0x294>)
    6660:	4d5b      	ldr	r5, [pc, #364]	; (67d0 <wrapper_mqtt_yield+0x26c>)
    6662:	47a8      	blx	r5
    6664:	485b      	ldr	r0, [pc, #364]	; (67d4 <wrapper_mqtt_yield+0x270>)
    6666:	47a8      	blx	r5
        HAL_MutexUnlock(pClient->lock_write_buf);
    6668:	23a4      	movs	r3, #164	; 0xa4
    666a:	58e0      	ldr	r0, [r4, r3]
    666c:	4b55      	ldr	r3, [pc, #340]	; (67c4 <wrapper_mqtt_yield+0x260>)
    666e:	4798      	blx	r3
            iotx_mc_set_client_state(pClient, IOTX_MC_STATE_DISCONNECTED);
    6670:	2103      	movs	r1, #3
    6672:	0020      	movs	r0, r4
    6674:	4b61      	ldr	r3, [pc, #388]	; (67fc <wrapper_mqtt_yield+0x298>)
    6676:	4798      	blx	r3
        return MQTT_NETWORK_ERROR;
    6678:	210e      	movs	r1, #14
    667a:	4249      	negs	r1, r1
        mqtt_err("ping outstanding is error,result = %d", rc);
    667c:	485e      	ldr	r0, [pc, #376]	; (67f8 <wrapper_mqtt_yield+0x294>)
    667e:	4d54      	ldr	r5, [pc, #336]	; (67d0 <wrapper_mqtt_yield+0x26c>)
    6680:	47a8      	blx	r5
    6682:	4854      	ldr	r0, [pc, #336]	; (67d4 <wrapper_mqtt_yield+0x270>)
    6684:	47a8      	blx	r5
    6686:	e780      	b.n	658a <wrapper_mqtt_yield+0x26>
            HAL_MutexLock(pClient->lock_generic);
    6688:	6820      	ldr	r0, [r4, #0]
    668a:	4b4b      	ldr	r3, [pc, #300]	; (67b8 <wrapper_mqtt_yield+0x254>)
    668c:	4798      	blx	r3
            pClient->ping_mark = 0;
    668e:	2300      	movs	r3, #0
    6690:	6323      	str	r3, [r4, #48]	; 0x30
            HAL_MutexUnlock(pClient->lock_generic);
    6692:	6820      	ldr	r0, [r4, #0]
    6694:	4b4b      	ldr	r3, [pc, #300]	; (67c4 <wrapper_mqtt_yield+0x260>)
    6696:	4798      	blx	r3
    mqtt_info("Waiting to reconnect...");
    6698:	4859      	ldr	r0, [pc, #356]	; (6800 <wrapper_mqtt_yield+0x29c>)
    669a:	4d4d      	ldr	r5, [pc, #308]	; (67d0 <wrapper_mqtt_yield+0x26c>)
    669c:	47a8      	blx	r5
    669e:	484d      	ldr	r0, [pc, #308]	; (67d4 <wrapper_mqtt_yield+0x270>)
    66a0:	47a8      	blx	r5
    if (!utils_time_is_expired(&(pClient->reconnect_param.reconnect_next_time))) {
    66a2:	0026      	movs	r6, r4
    66a4:	3638      	adds	r6, #56	; 0x38
    66a6:	0030      	movs	r0, r6
    66a8:	4b4b      	ldr	r3, [pc, #300]	; (67d8 <wrapper_mqtt_yield+0x274>)
    66aa:	4798      	blx	r3
    66ac:	2800      	cmp	r0, #0
    66ae:	d03c      	beq.n	672a <wrapper_mqtt_yield+0x1c6>
    mqtt_info("start to reconnect");
    66b0:	4854      	ldr	r0, [pc, #336]	; (6804 <wrapper_mqtt_yield+0x2a0>)
    66b2:	4d47      	ldr	r5, [pc, #284]	; (67d0 <wrapper_mqtt_yield+0x26c>)
    66b4:	47a8      	blx	r5
    66b6:	4f47      	ldr	r7, [pc, #284]	; (67d4 <wrapper_mqtt_yield+0x270>)
    66b8:	0038      	movs	r0, r7
    66ba:	47a8      	blx	r5
    pClient->ipstack->disconnect(pClient->ipstack);
    66bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    66be:	69c3      	ldr	r3, [r0, #28]
    66c0:	4798      	blx	r3
    mqtt_info("reconnect params: MQTTVersion=%d, clientID=%s, keepAliveInterval=%d, username=%s",
    66c2:	2358      	movs	r3, #88	; 0x58
    66c4:	5ae3      	ldrh	r3, [r4, r3]
    66c6:	2248      	movs	r2, #72	; 0x48
    66c8:	5ca1      	ldrb	r1, [r4, r2]
    66ca:	3238      	adds	r2, #56	; 0x38
    66cc:	58a2      	ldr	r2, [r4, r2]
    66ce:	9200      	str	r2, [sp, #0]
    66d0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    66d2:	484d      	ldr	r0, [pc, #308]	; (6808 <wrapper_mqtt_yield+0x2a4>)
    66d4:	47a8      	blx	r5
    66d6:	0038      	movs	r0, r7
    66d8:	47a8      	blx	r5
    rc = wrapper_mqtt_connect(pClient);
    66da:	0020      	movs	r0, r4
    66dc:	4b4b      	ldr	r3, [pc, #300]	; (680c <wrapper_mqtt_yield+0x2a8>)
    66de:	4798      	blx	r3
    66e0:	1e05      	subs	r5, r0, #0
    if (SUCCESS_RETURN != rc && MQTT_CONNECT_BLOCK != rc) {
    66e2:	d04f      	beq.n	6784 <wrapper_mqtt_yield+0x220>
    66e4:	0003      	movs	r3, r0
    66e6:	332c      	adds	r3, #44	; 0x2c
    66e8:	d018      	beq.n	671c <wrapper_mqtt_yield+0x1b8>
        mqtt_err("run iotx_mqtt_connect() error!");
    66ea:	4849      	ldr	r0, [pc, #292]	; (6810 <wrapper_mqtt_yield+0x2ac>)
    66ec:	4f38      	ldr	r7, [pc, #224]	; (67d0 <wrapper_mqtt_yield+0x26c>)
    66ee:	47b8      	blx	r7
    66f0:	4838      	ldr	r0, [pc, #224]	; (67d4 <wrapper_mqtt_yield+0x270>)
    66f2:	47b8      	blx	r7
        if (IOTX_MC_RECONNECT_INTERVAL_MAX_MS > pClient->reconnect_param.reconnect_time_interval_ms) {
    66f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    66f6:	4a47      	ldr	r2, [pc, #284]	; (6814 <wrapper_mqtt_yield+0x2b0>)
    66f8:	4293      	cmp	r3, r2
    66fa:	d81c      	bhi.n	6736 <wrapper_mqtt_yield+0x1d2>
            pClient->reconnect_param.reconnect_time_interval_ms *= 2;
    66fc:	005b      	lsls	r3, r3, #1
    66fe:	63e3      	str	r3, [r4, #60]	; 0x3c
    interval_ms = pClient->reconnect_param.reconnect_time_interval_ms;
    6700:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    utils_time_countdown_ms(&(pClient->reconnect_param.reconnect_next_time), interval_ms);
    6702:	4b45      	ldr	r3, [pc, #276]	; (6818 <wrapper_mqtt_yield+0x2b4>)
    6704:	4299      	cmp	r1, r3
    6706:	d900      	bls.n	670a <wrapper_mqtt_yield+0x1a6>
    6708:	0019      	movs	r1, r3
    670a:	0030      	movs	r0, r6
    670c:	4b33      	ldr	r3, [pc, #204]	; (67dc <wrapper_mqtt_yield+0x278>)
    670e:	4798      	blx	r3
    mqtt_err("mqtt reconnect failed rc = %d", rc);
    6710:	0029      	movs	r1, r5
    6712:	4842      	ldr	r0, [pc, #264]	; (681c <wrapper_mqtt_yield+0x2b8>)
    6714:	4e2e      	ldr	r6, [pc, #184]	; (67d0 <wrapper_mqtt_yield+0x26c>)
    6716:	47b0      	blx	r6
    6718:	482e      	ldr	r0, [pc, #184]	; (67d4 <wrapper_mqtt_yield+0x270>)
    671a:	47b0      	blx	r6
                mqtt_debug("reconnect network fail, rc = %d", rc);
    671c:	0029      	movs	r1, r5
    671e:	4840      	ldr	r0, [pc, #256]	; (6820 <wrapper_mqtt_yield+0x2bc>)
    6720:	4d2b      	ldr	r5, [pc, #172]	; (67d0 <wrapper_mqtt_yield+0x26c>)
    6722:	47a8      	blx	r5
    6724:	482b      	ldr	r0, [pc, #172]	; (67d4 <wrapper_mqtt_yield+0x270>)
    6726:	47a8      	blx	r5
    6728:	e738      	b.n	659c <wrapper_mqtt_yield+0x38>
        HAL_SleepMs(100);
    672a:	3064      	adds	r0, #100	; 0x64
    672c:	4b3d      	ldr	r3, [pc, #244]	; (6824 <wrapper_mqtt_yield+0x2c0>)
    672e:	4798      	blx	r3
        return FAIL_RETURN;
    6730:	2501      	movs	r5, #1
    6732:	426d      	negs	r5, r5
    6734:	e7f2      	b.n	671c <wrapper_mqtt_yield+0x1b8>
            pClient->reconnect_param.reconnect_time_interval_ms = IOTX_MC_RECONNECT_INTERVAL_MAX_MS;
    6736:	4b38      	ldr	r3, [pc, #224]	; (6818 <wrapper_mqtt_yield+0x2b4>)
    6738:	63e3      	str	r3, [r4, #60]	; 0x3c
    673a:	e7e1      	b.n	6700 <wrapper_mqtt_yield+0x19c>
            mqtt_err("network is disconnected!");
    673c:	483a      	ldr	r0, [pc, #232]	; (6828 <wrapper_mqtt_yield+0x2c4>)
    673e:	4d24      	ldr	r5, [pc, #144]	; (67d0 <wrapper_mqtt_yield+0x26c>)
    6740:	47a8      	blx	r5
    6742:	4824      	ldr	r0, [pc, #144]	; (67d4 <wrapper_mqtt_yield+0x270>)
    6744:	47a8      	blx	r5
    if (NULL != pClient->handle_event.h_fp) {
    6746:	23b0      	movs	r3, #176	; 0xb0
    6748:	58e3      	ldr	r3, [r4, r3]
    674a:	2b00      	cmp	r3, #0
    674c:	d008      	beq.n	6760 <wrapper_mqtt_yield+0x1fc>
        msg.event_type = IOTX_MQTT_EVENT_DISCONNECT;
    674e:	aa02      	add	r2, sp, #8
    6750:	2101      	movs	r1, #1
    6752:	7011      	strb	r1, [r2, #0]
        msg.msg = NULL;
    6754:	2100      	movs	r1, #0
    6756:	6051      	str	r1, [r2, #4]
        pClient->handle_event.h_fp(pClient->handle_event.pcontext,
    6758:	31b4      	adds	r1, #180	; 0xb4
    675a:	5860      	ldr	r0, [r4, r1]
    675c:	0021      	movs	r1, r4
    675e:	4798      	blx	r3
            pClient->reconnect_param.reconnect_time_interval_ms = IOTX_MC_RECONNECT_INTERVAL_MIN_MS;
    6760:	21fa      	movs	r1, #250	; 0xfa
    6762:	0089      	lsls	r1, r1, #2
    6764:	63e1      	str	r1, [r4, #60]	; 0x3c
            utils_time_countdown_ms(&(pClient->reconnect_param.reconnect_next_time),
    6766:	0020      	movs	r0, r4
    6768:	3038      	adds	r0, #56	; 0x38
    676a:	4b1c      	ldr	r3, [pc, #112]	; (67dc <wrapper_mqtt_yield+0x278>)
    676c:	4798      	blx	r3
            pClient->ipstack->disconnect(pClient->ipstack);
    676e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6770:	69c3      	ldr	r3, [r0, #28]
    6772:	4798      	blx	r3
            iotx_mc_set_client_state(pClient, IOTX_MC_STATE_DISCONNECTED_RECONNECTING);
    6774:	2104      	movs	r1, #4
    6776:	0020      	movs	r0, r4
    6778:	4b20      	ldr	r3, [pc, #128]	; (67fc <wrapper_mqtt_yield+0x298>)
    677a:	4798      	blx	r3
    677c:	e70e      	b.n	659c <wrapper_mqtt_yield+0x38>
        return NULL_VALUE_ERROR;
    677e:	2002      	movs	r0, #2
    6780:	4240      	negs	r0, r0
    6782:	e713      	b.n	65ac <wrapper_mqtt_yield+0x48>
        iotx_mc_set_client_state(pClient, IOTX_MC_STATE_CONNECTED);
    6784:	2102      	movs	r1, #2
    6786:	0020      	movs	r0, r4
    6788:	4b1c      	ldr	r3, [pc, #112]	; (67fc <wrapper_mqtt_yield+0x298>)
    678a:	4798      	blx	r3
                mqtt_info("network is reconnected!");
    678c:	4827      	ldr	r0, [pc, #156]	; (682c <wrapper_mqtt_yield+0x2c8>)
    678e:	4d10      	ldr	r5, [pc, #64]	; (67d0 <wrapper_mqtt_yield+0x26c>)
    6790:	47a8      	blx	r5
    6792:	4810      	ldr	r0, [pc, #64]	; (67d4 <wrapper_mqtt_yield+0x270>)
    6794:	47a8      	blx	r5
    if (NULL != pClient->handle_event.h_fp) {
    6796:	23b0      	movs	r3, #176	; 0xb0
    6798:	58e3      	ldr	r3, [r4, r3]
    679a:	2b00      	cmp	r3, #0
    679c:	d008      	beq.n	67b0 <wrapper_mqtt_yield+0x24c>
        msg.event_type = IOTX_MQTT_EVENT_RECONNECT;
    679e:	aa02      	add	r2, sp, #8
    67a0:	2102      	movs	r1, #2
    67a2:	7011      	strb	r1, [r2, #0]
        msg.msg = NULL;
    67a4:	2100      	movs	r1, #0
    67a6:	6051      	str	r1, [r2, #4]
        pClient->handle_event.h_fp(pClient->handle_event.pcontext,
    67a8:	31b4      	adds	r1, #180	; 0xb4
    67aa:	5860      	ldr	r0, [r4, r1]
    67ac:	0021      	movs	r1, r4
    67ae:	4798      	blx	r3
                pClient->reconnect_param.reconnect_time_interval_ms = IOTX_MC_RECONNECT_INTERVAL_MIN_MS;
    67b0:	23fa      	movs	r3, #250	; 0xfa
    67b2:	009b      	lsls	r3, r3, #2
    67b4:	63e3      	str	r3, [r4, #60]	; 0x3c
    67b6:	e6f1      	b.n	659c <wrapper_mqtt_yield+0x38>
    67b8:	00007d2f 	.word	0x00007d2f
    67bc:	00006399 	.word	0x00006399
    67c0:	00004e41 	.word	0x00004e41
    67c4:	00007d31 	.word	0x00007d31
    67c8:	00005bb1 	.word	0x00005bb1
    67cc:	0000b120 	.word	0x0000b120
    67d0:	00007d35 	.word	0x00007d35
    67d4:	00009cb4 	.word	0x00009cb4
    67d8:	00004cdd 	.word	0x00004cdd
    67dc:	00004d39 	.word	0x00004d39
    67e0:	00004d2d 	.word	0x00004d2d
    67e4:	00006ee1 	.word	0x00006ee1
    67e8:	0000b144 	.word	0x0000b144
    67ec:	00004e99 	.word	0x00004e99
    67f0:	0000b1b0 	.word	0x0000b1b0
    67f4:	0000b168 	.word	0x0000b168
    67f8:	0000b188 	.word	0x0000b188
    67fc:	00004e21 	.word	0x00004e21
    6800:	0000b1c4 	.word	0x0000b1c4
    6804:	0000b1dc 	.word	0x0000b1dc
    6808:	0000b1f0 	.word	0x0000b1f0
    680c:	00005935 	.word	0x00005935
    6810:	0000b244 	.word	0x0000b244
    6814:	0000ea5f 	.word	0x0000ea5f
    6818:	0000ea60 	.word	0x0000ea60
    681c:	0000b264 	.word	0x0000b264
    6820:	0000b284 	.word	0x0000b284
    6824:	00007d65 	.word	0x00007d65
    6828:	0000b2a4 	.word	0x0000b2a4
    682c:	0000b2c0 	.word	0x0000b2c0

00006830 <wrapper_mqtt_subscribe>:
int wrapper_mqtt_subscribe(void *client,
                           const char *topicFilter,
                           iotx_mqtt_qos_t qos,
                           iotx_mqtt_event_handle_func_fpt topic_handle_func,
                           void *pcontext)
{
    6830:	b5f0      	push	{r4, r5, r6, r7, lr}
    6832:	46de      	mov	lr, fp
    6834:	4657      	mov	r7, sl
    6836:	464e      	mov	r6, r9
    6838:	4645      	mov	r5, r8
    683a:	b5e0      	push	{r5, r6, r7, lr}
    683c:	b08f      	sub	sp, #60	; 0x3c
    683e:	4681      	mov	r9, r0
    6840:	9105      	str	r1, [sp, #20]
    6842:	0017      	movs	r7, r2
    6844:	001d      	movs	r5, r3
    int rc = FAIL_RETURN;
    unsigned int msgId;
    iotx_mc_client_t *c;

    if (NULL == client || NULL == topicFilter || strlen(topicFilter) == 0 || !topic_handle_func) {
    6846:	2800      	cmp	r0, #0
    6848:	d100      	bne.n	684c <wrapper_mqtt_subscribe+0x1c>
    684a:	e0a6      	b.n	699a <wrapper_mqtt_subscribe+0x16a>
    684c:	2900      	cmp	r1, #0
    684e:	d100      	bne.n	6852 <wrapper_mqtt_subscribe+0x22>
    6850:	e0a3      	b.n	699a <wrapper_mqtt_subscribe+0x16a>
    6852:	780b      	ldrb	r3, [r1, #0]
    6854:	2b00      	cmp	r3, #0
    6856:	d100      	bne.n	685a <wrapper_mqtt_subscribe+0x2a>
    6858:	e09f      	b.n	699a <wrapper_mqtt_subscribe+0x16a>
    685a:	2d00      	cmp	r5, #0
    685c:	d100      	bne.n	6860 <wrapper_mqtt_subscribe+0x30>
    685e:	e09c      	b.n	699a <wrapper_mqtt_subscribe+0x16a>
        return NULL_VALUE_ERROR;
    }

    c = (iotx_mc_client_t *)client;

    msgId = iotx_mc_get_next_packetid(c);
    6860:	4ba3      	ldr	r3, [pc, #652]	; (6af0 <wrapper_mqtt_subscribe+0x2c0>)
    6862:	4798      	blx	r3
    6864:	9007      	str	r0, [sp, #28]
    6866:	0004      	movs	r4, r0

    if (!wrapper_mqtt_check_state(c)) {
    6868:	4648      	mov	r0, r9
    686a:	4ba2      	ldr	r3, [pc, #648]	; (6af4 <wrapper_mqtt_subscribe+0x2c4>)
    686c:	4798      	blx	r3
    686e:	2800      	cmp	r0, #0
    6870:	d100      	bne.n	6874 <wrapper_mqtt_subscribe+0x44>
    6872:	e09b      	b.n	69ac <wrapper_mqtt_subscribe+0x17c>
        mqtt_err("mqtt client state is error,state = %d", iotx_mc_get_client_state(c));
        return MQTT_STATE_ERROR;
    }

    if (0 != iotx_mc_check_topic(topicFilter, TOPIC_FILTER_TYPE)) {
    6874:	2101      	movs	r1, #1
    6876:	9805      	ldr	r0, [sp, #20]
    6878:	4b9f      	ldr	r3, [pc, #636]	; (6af8 <wrapper_mqtt_subscribe+0x2c8>)
    687a:	4798      	blx	r3
    687c:	2800      	cmp	r0, #0
    687e:	d000      	beq.n	6882 <wrapper_mqtt_subscribe+0x52>
    6880:	e0a1      	b.n	69c6 <wrapper_mqtt_subscribe+0x196>
        mqtt_err("topic format is error,topicFilter = %s", topicFilter);
        return MQTT_TOPIC_FORMAT_ERROR;
    }

    mqtt_debug("PERFORM subscribe to '%s' (msgId=%d)", topicFilter, msgId);
    6882:	0022      	movs	r2, r4
    6884:	9905      	ldr	r1, [sp, #20]
    6886:	489d      	ldr	r0, [pc, #628]	; (6afc <wrapper_mqtt_subscribe+0x2cc>)
    6888:	4e9d      	ldr	r6, [pc, #628]	; (6b00 <wrapper_mqtt_subscribe+0x2d0>)
    688a:	47b0      	blx	r6
    688c:	489d      	ldr	r0, [pc, #628]	; (6b04 <wrapper_mqtt_subscribe+0x2d4>)
    688e:	47b0      	blx	r6
    6890:	2317      	movs	r3, #23
    6892:	aa04      	add	r2, sp, #16
    6894:	4694      	mov	ip, r2
    6896:	4463      	add	r3, ip
    6898:	701f      	strb	r7, [r3, #0]
    MQTTString                  topic = MQTTString_initializer;
    689a:	2300      	movs	r3, #0
    689c:	930b      	str	r3, [sp, #44]	; 0x2c
    689e:	930c      	str	r3, [sp, #48]	; 0x30
    68a0:	930d      	str	r3, [sp, #52]	; 0x34
    if (!c->buf_send) {
    68a2:	464a      	mov	r2, r9
    68a4:	69d2      	ldr	r2, [r2, #28]
    68a6:	2a00      	cmp	r2, #0
    68a8:	d100      	bne.n	68ac <wrapper_mqtt_subscribe+0x7c>
    68aa:	e118      	b.n	6ade <wrapper_mqtt_subscribe+0x2ae>
    topic.cstring = (char *)topicFilter;
    68ac:	9e05      	ldr	r6, [sp, #20]
    68ae:	960b      	str	r6, [sp, #44]	; 0x2c
    iotx_time_init(&timer);
    68b0:	a80a      	add	r0, sp, #40	; 0x28
    68b2:	4b95      	ldr	r3, [pc, #596]	; (6b08 <wrapper_mqtt_subscribe+0x2d8>)
    68b4:	4798      	blx	r3
    utils_time_countdown_ms(&timer, c->request_timeout_ms);
    68b6:	464b      	mov	r3, r9
    68b8:	6899      	ldr	r1, [r3, #8]
    68ba:	a80a      	add	r0, sp, #40	; 0x28
    68bc:	4b93      	ldr	r3, [pc, #588]	; (6b0c <wrapper_mqtt_subscribe+0x2dc>)
    68be:	4798      	blx	r3
    handler = mqtt_malloc(sizeof(iotx_mc_topic_handle_t));
    68c0:	2014      	movs	r0, #20
    68c2:	4b93      	ldr	r3, [pc, #588]	; (6b10 <wrapper_mqtt_subscribe+0x2e0>)
    68c4:	4798      	blx	r3
    68c6:	1e07      	subs	r7, r0, #0
    if (NULL == handler) {
    68c8:	d100      	bne.n	68cc <wrapper_mqtt_subscribe+0x9c>
    68ca:	e10c      	b.n	6ae6 <wrapper_mqtt_subscribe+0x2b6>
    handler->topic_filter = mqtt_malloc(strlen(topicFilter) + 1);
    68cc:	0030      	movs	r0, r6
    68ce:	4b91      	ldr	r3, [pc, #580]	; (6b14 <wrapper_mqtt_subscribe+0x2e4>)
    68d0:	4798      	blx	r3
    68d2:	3001      	adds	r0, #1
    68d4:	4b8e      	ldr	r3, [pc, #568]	; (6b10 <wrapper_mqtt_subscribe+0x2e0>)
    68d6:	4798      	blx	r3
    68d8:	1e06      	subs	r6, r0, #0
    68da:	6038      	str	r0, [r7, #0]
    if (NULL == handler->topic_filter) {
    68dc:	d07d      	beq.n	69da <wrapper_mqtt_subscribe+0x1aa>
    memcpy((char *)handler->topic_filter, topicFilter, strlen(topicFilter) + 1);
    68de:	9805      	ldr	r0, [sp, #20]
    68e0:	4b8c      	ldr	r3, [pc, #560]	; (6b14 <wrapper_mqtt_subscribe+0x2e4>)
    68e2:	4798      	blx	r3
    68e4:	1c42      	adds	r2, r0, #1
    68e6:	9905      	ldr	r1, [sp, #20]
    68e8:	0030      	movs	r0, r6
    68ea:	4b8b      	ldr	r3, [pc, #556]	; (6b18 <wrapper_mqtt_subscribe+0x2e8>)
    68ec:	4798      	blx	r3
    handler->handle.h_fp = messageHandler;
    68ee:	60bd      	str	r5, [r7, #8]
    handler->handle.pcontext = pcontext;
    68f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    68f2:	60fb      	str	r3, [r7, #12]
    HAL_MutexLock(c->lock_write_buf);
    68f4:	23a4      	movs	r3, #164	; 0xa4
    68f6:	464a      	mov	r2, r9
    68f8:	58d0      	ldr	r0, [r2, r3]
    68fa:	4b88      	ldr	r3, [pc, #544]	; (6b1c <wrapper_mqtt_subscribe+0x2ec>)
    68fc:	4798      	blx	r3
    len = MQTTSerialize_subscribe((unsigned char *)c->buf_send, c->buf_size_send, 0, (unsigned short)msgId, 1, &topic,
    68fe:	466b      	mov	r3, sp
    6900:	8b9b      	ldrh	r3, [r3, #28]
    6902:	2217      	movs	r2, #23
    6904:	a904      	add	r1, sp, #16
    6906:	468c      	mov	ip, r1
    6908:	4462      	add	r2, ip
    690a:	9202      	str	r2, [sp, #8]
    690c:	aa0b      	add	r2, sp, #44	; 0x2c
    690e:	9201      	str	r2, [sp, #4]
    6910:	2201      	movs	r2, #1
    6912:	9200      	str	r2, [sp, #0]
    6914:	2200      	movs	r2, #0
    6916:	4649      	mov	r1, r9
    6918:	6909      	ldr	r1, [r1, #16]
    691a:	4648      	mov	r0, r9
    691c:	69c0      	ldr	r0, [r0, #28]
    691e:	4d80      	ldr	r5, [pc, #512]	; (6b20 <wrapper_mqtt_subscribe+0x2f0>)
    6920:	47a8      	blx	r5
    6922:	1e05      	subs	r5, r0, #0
    if (len <= 0) {
    6924:	dd60      	ble.n	69e8 <wrapper_mqtt_subscribe+0x1b8>
    mqtt_debug("%20s : %08d", "Packet Ident", msgId);
    6926:	0022      	movs	r2, r4
    6928:	497e      	ldr	r1, [pc, #504]	; (6b24 <wrapper_mqtt_subscribe+0x2f4>)
    692a:	487f      	ldr	r0, [pc, #508]	; (6b28 <wrapper_mqtt_subscribe+0x2f8>)
    692c:	4e74      	ldr	r6, [pc, #464]	; (6b00 <wrapper_mqtt_subscribe+0x2d0>)
    692e:	47b0      	blx	r6
    6930:	4c74      	ldr	r4, [pc, #464]	; (6b04 <wrapper_mqtt_subscribe+0x2d4>)
    6932:	0020      	movs	r0, r4
    6934:	47b0      	blx	r6
    mqtt_debug("%20s : %s", "Topic", topicFilter);
    6936:	9a05      	ldr	r2, [sp, #20]
    6938:	497c      	ldr	r1, [pc, #496]	; (6b2c <wrapper_mqtt_subscribe+0x2fc>)
    693a:	487d      	ldr	r0, [pc, #500]	; (6b30 <wrapper_mqtt_subscribe+0x300>)
    693c:	47b0      	blx	r6
    693e:	0020      	movs	r0, r4
    6940:	47b0      	blx	r6
    mqtt_debug("%20s : %d", "QoS", (int)qos);
    6942:	2317      	movs	r3, #23
    6944:	aa04      	add	r2, sp, #16
    6946:	4694      	mov	ip, r2
    6948:	4463      	add	r3, ip
    694a:	781a      	ldrb	r2, [r3, #0]
    694c:	4979      	ldr	r1, [pc, #484]	; (6b34 <wrapper_mqtt_subscribe+0x304>)
    694e:	487a      	ldr	r0, [pc, #488]	; (6b38 <wrapper_mqtt_subscribe+0x308>)
    6950:	47b0      	blx	r6
    6952:	0020      	movs	r0, r4
    6954:	47b0      	blx	r6
    mqtt_debug("%20s : %d", "Packet Length", len);
    6956:	002a      	movs	r2, r5
    6958:	4978      	ldr	r1, [pc, #480]	; (6b3c <wrapper_mqtt_subscribe+0x30c>)
    695a:	4877      	ldr	r0, [pc, #476]	; (6b38 <wrapper_mqtt_subscribe+0x308>)
    695c:	47b0      	blx	r6
    695e:	0020      	movs	r0, r4
    6960:	47b0      	blx	r6
    if ((iotx_mc_send_packet(c, c->buf_send, len, &timer)) != SUCCESS_RETURN) { /* send the subscribe packet */
    6962:	ab0a      	add	r3, sp, #40	; 0x28
    6964:	002a      	movs	r2, r5
    6966:	4649      	mov	r1, r9
    6968:	69c9      	ldr	r1, [r1, #28]
    696a:	4648      	mov	r0, r9
    696c:	4c74      	ldr	r4, [pc, #464]	; (6b40 <wrapper_mqtt_subscribe+0x310>)
    696e:	47a0      	blx	r4
    6970:	2800      	cmp	r0, #0
    6972:	d149      	bne.n	6a08 <wrapper_mqtt_subscribe+0x1d8>
    HAL_MutexUnlock(c->lock_write_buf);
    6974:	23a4      	movs	r3, #164	; 0xa4
    6976:	464a      	mov	r2, r9
    6978:	58d0      	ldr	r0, [r2, r3]
    697a:	4b72      	ldr	r3, [pc, #456]	; (6b44 <wrapper_mqtt_subscribe+0x314>)
    697c:	4798      	blx	r3
        HAL_MutexLock(c->lock_generic);
    697e:	464b      	mov	r3, r9
    6980:	6818      	ldr	r0, [r3, #0]
    6982:	4b66      	ldr	r3, [pc, #408]	; (6b1c <wrapper_mqtt_subscribe+0x2ec>)
    6984:	4798      	blx	r3
        for (h = c->first_sub_handle; h; h = h->next) {
    6986:	464b      	mov	r3, r9
    6988:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    698a:	2c00      	cmp	r4, #0
    698c:	d100      	bne.n	6990 <wrapper_mqtt_subscribe+0x160>
    698e:	e087      	b.n	6aa0 <wrapper_mqtt_subscribe+0x270>
    6990:	2300      	movs	r3, #0
    6992:	4698      	mov	r8, r3
    topicNameLen = strlen(messageHandlers1->topic_filter);
    6994:	4b5f      	ldr	r3, [pc, #380]	; (6b14 <wrapper_mqtt_subscribe+0x2e4>)
    6996:	469a      	mov	sl, r3
    6998:	e063      	b.n	6a62 <wrapper_mqtt_subscribe+0x232>
        mqtt_err(" paras error");
    699a:	486b      	ldr	r0, [pc, #428]	; (6b48 <wrapper_mqtt_subscribe+0x318>)
    699c:	4c58      	ldr	r4, [pc, #352]	; (6b00 <wrapper_mqtt_subscribe+0x2d0>)
    699e:	47a0      	blx	r4
    69a0:	4858      	ldr	r0, [pc, #352]	; (6b04 <wrapper_mqtt_subscribe+0x2d4>)
    69a2:	47a0      	blx	r4
        return NULL_VALUE_ERROR;
    69a4:	2302      	movs	r3, #2
    69a6:	425b      	negs	r3, r3
    69a8:	9307      	str	r3, [sp, #28]
    69aa:	e088      	b.n	6abe <wrapper_mqtt_subscribe+0x28e>
        mqtt_err("mqtt client state is error,state = %d", iotx_mc_get_client_state(c));
    69ac:	4648      	mov	r0, r9
    69ae:	4b67      	ldr	r3, [pc, #412]	; (6b4c <wrapper_mqtt_subscribe+0x31c>)
    69b0:	4798      	blx	r3
    69b2:	0001      	movs	r1, r0
    69b4:	4866      	ldr	r0, [pc, #408]	; (6b50 <wrapper_mqtt_subscribe+0x320>)
    69b6:	4c52      	ldr	r4, [pc, #328]	; (6b00 <wrapper_mqtt_subscribe+0x2d0>)
    69b8:	47a0      	blx	r4
    69ba:	4852      	ldr	r0, [pc, #328]	; (6b04 <wrapper_mqtt_subscribe+0x2d4>)
    69bc:	47a0      	blx	r4
        return MQTT_STATE_ERROR;
    69be:	231b      	movs	r3, #27
    69c0:	425b      	negs	r3, r3
    69c2:	9307      	str	r3, [sp, #28]
    69c4:	e07b      	b.n	6abe <wrapper_mqtt_subscribe+0x28e>
        mqtt_err("topic format is error,topicFilter = %s", topicFilter);
    69c6:	9905      	ldr	r1, [sp, #20]
    69c8:	4862      	ldr	r0, [pc, #392]	; (6b54 <wrapper_mqtt_subscribe+0x324>)
    69ca:	4c4d      	ldr	r4, [pc, #308]	; (6b00 <wrapper_mqtt_subscribe+0x2d0>)
    69cc:	47a0      	blx	r4
    69ce:	484d      	ldr	r0, [pc, #308]	; (6b04 <wrapper_mqtt_subscribe+0x2d4>)
    69d0:	47a0      	blx	r4
        return MQTT_TOPIC_FORMAT_ERROR;
    69d2:	2329      	movs	r3, #41	; 0x29
    69d4:	425b      	negs	r3, r3
    69d6:	9307      	str	r3, [sp, #28]
    69d8:	e071      	b.n	6abe <wrapper_mqtt_subscribe+0x28e>
        mqtt_free(handler);
    69da:	0038      	movs	r0, r7
    69dc:	4b5e      	ldr	r3, [pc, #376]	; (6b58 <wrapper_mqtt_subscribe+0x328>)
    69de:	4798      	blx	r3
        return FAIL_RETURN;
    69e0:	2301      	movs	r3, #1
    69e2:	425b      	negs	r3, r3
    69e4:	9307      	str	r3, [sp, #28]
    69e6:	e027      	b.n	6a38 <wrapper_mqtt_subscribe+0x208>
        mqtt_free(handler->topic_filter);
    69e8:	6838      	ldr	r0, [r7, #0]
    69ea:	4c5b      	ldr	r4, [pc, #364]	; (6b58 <wrapper_mqtt_subscribe+0x328>)
    69ec:	47a0      	blx	r4
    69ee:	2300      	movs	r3, #0
    69f0:	603b      	str	r3, [r7, #0]
        mqtt_free(handler);
    69f2:	0038      	movs	r0, r7
    69f4:	47a0      	blx	r4
        HAL_MutexUnlock(c->lock_write_buf);
    69f6:	23a4      	movs	r3, #164	; 0xa4
    69f8:	464a      	mov	r2, r9
    69fa:	58d0      	ldr	r0, [r2, r3]
    69fc:	4b51      	ldr	r3, [pc, #324]	; (6b44 <wrapper_mqtt_subscribe+0x314>)
    69fe:	4798      	blx	r3
        return MQTT_SUBSCRIBE_PACKET_ERROR;
    6a00:	231a      	movs	r3, #26
    6a02:	425b      	negs	r3, r3
    6a04:	9307      	str	r3, [sp, #28]
    6a06:	e017      	b.n	6a38 <wrapper_mqtt_subscribe+0x208>
        mqtt_err("run sendPacket error!");
    6a08:	4854      	ldr	r0, [pc, #336]	; (6b5c <wrapper_mqtt_subscribe+0x32c>)
    6a0a:	4c3d      	ldr	r4, [pc, #244]	; (6b00 <wrapper_mqtt_subscribe+0x2d0>)
    6a0c:	47a0      	blx	r4
    6a0e:	483d      	ldr	r0, [pc, #244]	; (6b04 <wrapper_mqtt_subscribe+0x2d4>)
    6a10:	47a0      	blx	r4
        mqtt_free(handler->topic_filter);
    6a12:	6838      	ldr	r0, [r7, #0]
    6a14:	4c50      	ldr	r4, [pc, #320]	; (6b58 <wrapper_mqtt_subscribe+0x328>)
    6a16:	47a0      	blx	r4
    6a18:	2300      	movs	r3, #0
    6a1a:	603b      	str	r3, [r7, #0]
        mqtt_free(handler);
    6a1c:	0038      	movs	r0, r7
    6a1e:	47a0      	blx	r4
        HAL_MutexUnlock(c->lock_write_buf);
    6a20:	23a4      	movs	r3, #164	; 0xa4
    6a22:	464a      	mov	r2, r9
    6a24:	58d0      	ldr	r0, [r2, r3]
    6a26:	4b47      	ldr	r3, [pc, #284]	; (6b44 <wrapper_mqtt_subscribe+0x314>)
    6a28:	4798      	blx	r3
    rc = MQTTSubscribe(c, topicFilter, qos, msgId, topic_handle_func, pcontext);
    if (rc != SUCCESS_RETURN) {
        if (rc == MQTT_NETWORK_ERROR) {
            iotx_mc_set_client_state(c, IOTX_MC_STATE_DISCONNECTED);
    6a2a:	2103      	movs	r1, #3
    6a2c:	4648      	mov	r0, r9
    6a2e:	4b4c      	ldr	r3, [pc, #304]	; (6b60 <wrapper_mqtt_subscribe+0x330>)
    6a30:	4798      	blx	r3
        return MQTT_NETWORK_ERROR;
    6a32:	230e      	movs	r3, #14
    6a34:	425b      	negs	r3, r3
    6a36:	9307      	str	r3, [sp, #28]
        }

        mqtt_err("run MQTTSubscribe error, rc = %d", rc);
    6a38:	9907      	ldr	r1, [sp, #28]
    6a3a:	484a      	ldr	r0, [pc, #296]	; (6b64 <wrapper_mqtt_subscribe+0x334>)
    6a3c:	4c30      	ldr	r4, [pc, #192]	; (6b00 <wrapper_mqtt_subscribe+0x2d0>)
    6a3e:	47a0      	blx	r4
    6a40:	4830      	ldr	r0, [pc, #192]	; (6b04 <wrapper_mqtt_subscribe+0x2d4>)
    6a42:	47a0      	blx	r4
        return rc;
    6a44:	e03b      	b.n	6abe <wrapper_mqtt_subscribe+0x28e>
    if (0 != strncmp(messageHandlers1->topic_filter, messageHandler2->topic_filter, topicNameLen)) {
    6a46:	9a06      	ldr	r2, [sp, #24]
    6a48:	0031      	movs	r1, r6
    6a4a:	0028      	movs	r0, r5
    6a4c:	4b46      	ldr	r3, [pc, #280]	; (6b68 <wrapper_mqtt_subscribe+0x338>)
    6a4e:	4798      	blx	r3
    if (iotx_mc_check_handle_is_identical_ex(messageHandlers1, messageHandler2) != 0) {
    6a50:	2800      	cmp	r0, #0
    6a52:	d103      	bne.n	6a5c <wrapper_mqtt_subscribe+0x22c>
    if (messageHandlers1->handle.h_fp != messageHandler2->handle.h_fp) {
    6a54:	68a3      	ldr	r3, [r4, #8]
    6a56:	68ba      	ldr	r2, [r7, #8]
    6a58:	4293      	cmp	r3, r2
    6a5a:	d011      	beq.n	6a80 <wrapper_mqtt_subscribe+0x250>
        for (h = c->first_sub_handle; h; h = h->next) {
    6a5c:	6924      	ldr	r4, [r4, #16]
    6a5e:	2c00      	cmp	r4, #0
    6a60:	d01b      	beq.n	6a9a <wrapper_mqtt_subscribe+0x26a>
    if (!(messageHandlers1->topic_filter) || !(messageHandler2->topic_filter)) {
    6a62:	6825      	ldr	r5, [r4, #0]
    6a64:	2d00      	cmp	r5, #0
    6a66:	d0f9      	beq.n	6a5c <wrapper_mqtt_subscribe+0x22c>
    6a68:	683e      	ldr	r6, [r7, #0]
    6a6a:	2e00      	cmp	r6, #0
    6a6c:	d0f6      	beq.n	6a5c <wrapper_mqtt_subscribe+0x22c>
    topicNameLen = strlen(messageHandlers1->topic_filter);
    6a6e:	0028      	movs	r0, r5
    6a70:	47d0      	blx	sl
    6a72:	9006      	str	r0, [sp, #24]
    6a74:	4683      	mov	fp, r0
    if (topicNameLen != strlen(messageHandler2->topic_filter)) {
    6a76:	0030      	movs	r0, r6
    6a78:	47d0      	blx	sl
    6a7a:	4583      	cmp	fp, r0
    6a7c:	d1ee      	bne.n	6a5c <wrapper_mqtt_subscribe+0x22c>
    6a7e:	e7e2      	b.n	6a46 <wrapper_mqtt_subscribe+0x216>
            if (0 == iotx_mc_check_handle_is_identical (h, handler)) {
    6a80:	68e3      	ldr	r3, [r4, #12]
    6a82:	68fa      	ldr	r2, [r7, #12]
    6a84:	4293      	cmp	r3, r2
    6a86:	d1e9      	bne.n	6a5c <wrapper_mqtt_subscribe+0x22c>
                mqtt_warning("dup sub,topic = %s", topicFilter);
    6a88:	9905      	ldr	r1, [sp, #20]
    6a8a:	4838      	ldr	r0, [pc, #224]	; (6b6c <wrapper_mqtt_subscribe+0x33c>)
    6a8c:	4d1c      	ldr	r5, [pc, #112]	; (6b00 <wrapper_mqtt_subscribe+0x2d0>)
    6a8e:	47a8      	blx	r5
    6a90:	481c      	ldr	r0, [pc, #112]	; (6b04 <wrapper_mqtt_subscribe+0x2d4>)
    6a92:	47a8      	blx	r5
                dup = 1;
    6a94:	2301      	movs	r3, #1
    6a96:	4698      	mov	r8, r3
    6a98:	e7e0      	b.n	6a5c <wrapper_mqtt_subscribe+0x22c>
        if (dup == 0) {
    6a9a:	4643      	mov	r3, r8
    6a9c:	2b00      	cmp	r3, #0
    6a9e:	d116      	bne.n	6ace <wrapper_mqtt_subscribe+0x29e>
            handler->next = c->first_sub_handle;
    6aa0:	464b      	mov	r3, r9
    6aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6aa4:	613b      	str	r3, [r7, #16]
            c->first_sub_handle = handler;
    6aa6:	464b      	mov	r3, r9
    6aa8:	625f      	str	r7, [r3, #36]	; 0x24
        HAL_MutexUnlock(c->lock_generic);
    6aaa:	464b      	mov	r3, r9
    6aac:	6818      	ldr	r0, [r3, #0]
    6aae:	4b25      	ldr	r3, [pc, #148]	; (6b44 <wrapper_mqtt_subscribe+0x314>)
    6ab0:	4798      	blx	r3
    }

    mqtt_info("mqtt subscribe packet sent,topic = %s!", topicFilter);
    6ab2:	9905      	ldr	r1, [sp, #20]
    6ab4:	482e      	ldr	r0, [pc, #184]	; (6b70 <wrapper_mqtt_subscribe+0x340>)
    6ab6:	4c12      	ldr	r4, [pc, #72]	; (6b00 <wrapper_mqtt_subscribe+0x2d0>)
    6ab8:	47a0      	blx	r4
    6aba:	4812      	ldr	r0, [pc, #72]	; (6b04 <wrapper_mqtt_subscribe+0x2d4>)
    6abc:	47a0      	blx	r4
    return msgId;
}
    6abe:	9807      	ldr	r0, [sp, #28]
    6ac0:	b00f      	add	sp, #60	; 0x3c
    6ac2:	bc3c      	pop	{r2, r3, r4, r5}
    6ac4:	4690      	mov	r8, r2
    6ac6:	4699      	mov	r9, r3
    6ac8:	46a2      	mov	sl, r4
    6aca:	46ab      	mov	fp, r5
    6acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            mqtt_free(handler->topic_filter);
    6ace:	6838      	ldr	r0, [r7, #0]
    6ad0:	4c21      	ldr	r4, [pc, #132]	; (6b58 <wrapper_mqtt_subscribe+0x328>)
    6ad2:	47a0      	blx	r4
    6ad4:	2300      	movs	r3, #0
    6ad6:	603b      	str	r3, [r7, #0]
            mqtt_free(handler);
    6ad8:	0038      	movs	r0, r7
    6ada:	47a0      	blx	r4
    6adc:	e7e5      	b.n	6aaa <wrapper_mqtt_subscribe+0x27a>
        return FAIL_RETURN;
    6ade:	2301      	movs	r3, #1
    6ae0:	425b      	negs	r3, r3
    6ae2:	9307      	str	r3, [sp, #28]
    6ae4:	e7a8      	b.n	6a38 <wrapper_mqtt_subscribe+0x208>
        return FAIL_RETURN;
    6ae6:	2301      	movs	r3, #1
    6ae8:	425b      	negs	r3, r3
    6aea:	9307      	str	r3, [sp, #28]
    6aec:	e7a4      	b.n	6a38 <wrapper_mqtt_subscribe+0x208>
    6aee:	46c0      	nop			; (mov r8, r8)
    6af0:	00004e61 	.word	0x00004e61
    6af4:	00006399 	.word	0x00006399
    6af8:	00004fbd 	.word	0x00004fbd
    6afc:	0000b338 	.word	0x0000b338
    6b00:	00007d35 	.word	0x00007d35
    6b04:	00009cb4 	.word	0x00009cb4
    6b08:	00004d2d 	.word	0x00004d2d
    6b0c:	00004d39 	.word	0x00004d39
    6b10:	00007d1d 	.word	0x00007d1d
    6b14:	00008991 	.word	0x00008991
    6b18:	000085b7 	.word	0x000085b7
    6b1c:	00007d2f 	.word	0x00007d2f
    6b20:	000073c5 	.word	0x000073c5
    6b24:	0000af50 	.word	0x0000af50
    6b28:	0000af60 	.word	0x0000af60
    6b2c:	0000b360 	.word	0x0000b360
    6b30:	0000b368 	.word	0x0000b368
    6b34:	0000aeec 	.word	0x0000aeec
    6b38:	0000aec4 	.word	0x0000aec4
    6b3c:	0000b374 	.word	0x0000b374
    6b40:	00004e99 	.word	0x00004e99
    6b44:	00007d31 	.word	0x00007d31
    6b48:	0000b2d8 	.word	0x0000b2d8
    6b4c:	00004e41 	.word	0x00004e41
    6b50:	0000b2e8 	.word	0x0000b2e8
    6b54:	0000b310 	.word	0x0000b310
    6b58:	00007c5d 	.word	0x00007c5d
    6b5c:	0000b384 	.word	0x0000b384
    6b60:	00004e21 	.word	0x00004e21
    6b64:	0000b3d8 	.word	0x0000b3d8
    6b68:	0000899f 	.word	0x0000899f
    6b6c:	0000b39c 	.word	0x0000b39c
    6b70:	0000b3b0 	.word	0x0000b3b0

00006b74 <wrapper_mqtt_publish>:
    return (int)msgId;
}

/* publish */
int wrapper_mqtt_publish(void *client, const char *topicName, iotx_mqtt_topic_info_pt topic_msg)
{
    6b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b76:	0005      	movs	r5, r0
    6b78:	000e      	movs	r6, r1
    6b7a:	0014      	movs	r4, r2
    uint16_t msg_id = 0;
    int rc = FAIL_RETURN;
    iotx_mc_client_t *c = (iotx_mc_client_t *)client;
    if (c == NULL || topicName == NULL || topic_msg == NULL || topic_msg->payload == NULL) {
    6b7c:	2800      	cmp	r0, #0
    6b7e:	d055      	beq.n	6c2c <wrapper_mqtt_publish+0xb8>
    6b80:	2900      	cmp	r1, #0
    6b82:	d056      	beq.n	6c32 <wrapper_mqtt_publish+0xbe>
    6b84:	2a00      	cmp	r2, #0
    6b86:	d057      	beq.n	6c38 <wrapper_mqtt_publish+0xc4>
    6b88:	6913      	ldr	r3, [r2, #16]
    6b8a:	2b00      	cmp	r3, #0
    6b8c:	d057      	beq.n	6c3e <wrapper_mqtt_publish+0xca>
        return NULL_VALUE_ERROR;
    }

    if (0 != iotx_mc_check_topic(topicName, TOPIC_NAME_TYPE)) {
    6b8e:	2100      	movs	r1, #0
    6b90:	0030      	movs	r0, r6
    6b92:	4b2c      	ldr	r3, [pc, #176]	; (6c44 <wrapper_mqtt_publish+0xd0>)
    6b94:	4798      	blx	r3
    6b96:	2800      	cmp	r0, #0
    6b98:	d11e      	bne.n	6bd8 <wrapper_mqtt_publish+0x64>
        mqtt_err("topic format is error,topicFilter = %s", topicName);
        return MQTT_TOPIC_FORMAT_ERROR;
    }

    if (!wrapper_mqtt_check_state(c)) {
    6b9a:	0028      	movs	r0, r5
    6b9c:	4b2a      	ldr	r3, [pc, #168]	; (6c48 <wrapper_mqtt_publish+0xd4>)
    6b9e:	4798      	blx	r3
    6ba0:	2800      	cmp	r0, #0
    6ba2:	d022      	beq.n	6bea <wrapper_mqtt_publish+0x76>
        mqtt_err("mqtt client state is error,state = %d", iotx_mc_get_client_state(c));
        return MQTT_STATE_ERROR;
    }

#if !WITH_MQTT_ONLY_QOS0
    if (topic_msg->qos == IOTX_MQTT_QOS1 || topic_msg->qos == IOTX_MQTT_QOS2) {
    6ba4:	78a3      	ldrb	r3, [r4, #2]
    6ba6:	3b01      	subs	r3, #1
    uint16_t msg_id = 0;
    6ba8:	2700      	movs	r7, #0
    if (topic_msg->qos == IOTX_MQTT_QOS1 || topic_msg->qos == IOTX_MQTT_QOS2) {
    6baa:	2b01      	cmp	r3, #1
    6bac:	d929      	bls.n	6c02 <wrapper_mqtt_publish+0x8e>
        msg_id = iotx_mc_get_next_packetid(c);
        topic_msg->packet_id = msg_id;
    }
    if (topic_msg->qos == IOTX_MQTT_QOS2) {
    6bae:	78a3      	ldrb	r3, [r4, #2]
    6bb0:	2b02      	cmp	r3, #2
    6bb2:	d02c      	beq.n	6c0e <wrapper_mqtt_publish+0x9a>
#if defined(INSPECT_MQTT_FLOW)
    HEXDUMP_DEBUG(topicName, strlen(topicName));
    HEXDUMP_DEBUG(topic_msg->payload, topic_msg->payload_len);
#endif

    rc = MQTTPublish(c, topicName, topic_msg);
    6bb4:	0022      	movs	r2, r4
    6bb6:	0031      	movs	r1, r6
    6bb8:	0028      	movs	r0, r5
    6bba:	4b24      	ldr	r3, [pc, #144]	; (6c4c <wrapper_mqtt_publish+0xd8>)
    6bbc:	4798      	blx	r3
    6bbe:	1e04      	subs	r4, r0, #0
    if (rc != SUCCESS_RETURN) { /* send the subscribe packet */
    6bc0:	d032      	beq.n	6c28 <wrapper_mqtt_publish+0xb4>
        if (rc == MQTT_NETWORK_ERROR) {
    6bc2:	0003      	movs	r3, r0
    6bc4:	330e      	adds	r3, #14
    6bc6:	d02a      	beq.n	6c1e <wrapper_mqtt_publish+0xaa>
            iotx_mc_set_client_state(c, IOTX_MC_STATE_DISCONNECTED);
        }
        mqtt_err("MQTTPublish is error, rc = %d", rc);
    6bc8:	0021      	movs	r1, r4
    6bca:	4821      	ldr	r0, [pc, #132]	; (6c50 <wrapper_mqtt_publish+0xdc>)
    6bcc:	4d21      	ldr	r5, [pc, #132]	; (6c54 <wrapper_mqtt_publish+0xe0>)
    6bce:	47a8      	blx	r5
    6bd0:	4821      	ldr	r0, [pc, #132]	; (6c58 <wrapper_mqtt_publish+0xe4>)
    6bd2:	47a8      	blx	r5
        return rc;
    }

    return (int)msg_id;
}
    6bd4:	0020      	movs	r0, r4
    6bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        mqtt_err("topic format is error,topicFilter = %s", topicName);
    6bd8:	0031      	movs	r1, r6
    6bda:	4820      	ldr	r0, [pc, #128]	; (6c5c <wrapper_mqtt_publish+0xe8>)
    6bdc:	4c1d      	ldr	r4, [pc, #116]	; (6c54 <wrapper_mqtt_publish+0xe0>)
    6bde:	47a0      	blx	r4
    6be0:	481d      	ldr	r0, [pc, #116]	; (6c58 <wrapper_mqtt_publish+0xe4>)
    6be2:	47a0      	blx	r4
        return MQTT_TOPIC_FORMAT_ERROR;
    6be4:	2429      	movs	r4, #41	; 0x29
    6be6:	4264      	negs	r4, r4
    6be8:	e7f4      	b.n	6bd4 <wrapper_mqtt_publish+0x60>
        mqtt_err("mqtt client state is error,state = %d", iotx_mc_get_client_state(c));
    6bea:	0028      	movs	r0, r5
    6bec:	4b1c      	ldr	r3, [pc, #112]	; (6c60 <wrapper_mqtt_publish+0xec>)
    6bee:	4798      	blx	r3
    6bf0:	0001      	movs	r1, r0
    6bf2:	481c      	ldr	r0, [pc, #112]	; (6c64 <wrapper_mqtt_publish+0xf0>)
    6bf4:	4c17      	ldr	r4, [pc, #92]	; (6c54 <wrapper_mqtt_publish+0xe0>)
    6bf6:	47a0      	blx	r4
    6bf8:	4817      	ldr	r0, [pc, #92]	; (6c58 <wrapper_mqtt_publish+0xe4>)
    6bfa:	47a0      	blx	r4
        return MQTT_STATE_ERROR;
    6bfc:	241b      	movs	r4, #27
    6bfe:	4264      	negs	r4, r4
    6c00:	e7e8      	b.n	6bd4 <wrapper_mqtt_publish+0x60>
        msg_id = iotx_mc_get_next_packetid(c);
    6c02:	0028      	movs	r0, r5
    6c04:	4b18      	ldr	r3, [pc, #96]	; (6c68 <wrapper_mqtt_publish+0xf4>)
    6c06:	4798      	blx	r3
    6c08:	b287      	uxth	r7, r0
        topic_msg->packet_id = msg_id;
    6c0a:	8027      	strh	r7, [r4, #0]
    6c0c:	e7cf      	b.n	6bae <wrapper_mqtt_publish+0x3a>
        mqtt_err("MQTTPublish return error,MQTT_QOS2 is now not supported.");
    6c0e:	4817      	ldr	r0, [pc, #92]	; (6c6c <wrapper_mqtt_publish+0xf8>)
    6c10:	4c10      	ldr	r4, [pc, #64]	; (6c54 <wrapper_mqtt_publish+0xe0>)
    6c12:	47a0      	blx	r4
    6c14:	4810      	ldr	r0, [pc, #64]	; (6c58 <wrapper_mqtt_publish+0xe4>)
    6c16:	47a0      	blx	r4
        return MQTT_PUBLISH_QOS_ERROR;
    6c18:	2414      	movs	r4, #20
    6c1a:	4264      	negs	r4, r4
    6c1c:	e7da      	b.n	6bd4 <wrapper_mqtt_publish+0x60>
            iotx_mc_set_client_state(c, IOTX_MC_STATE_DISCONNECTED);
    6c1e:	2103      	movs	r1, #3
    6c20:	0028      	movs	r0, r5
    6c22:	4b13      	ldr	r3, [pc, #76]	; (6c70 <wrapper_mqtt_publish+0xfc>)
    6c24:	4798      	blx	r3
    6c26:	e7cf      	b.n	6bc8 <wrapper_mqtt_publish+0x54>
    return (int)msg_id;
    6c28:	003c      	movs	r4, r7
    6c2a:	e7d3      	b.n	6bd4 <wrapper_mqtt_publish+0x60>
        return NULL_VALUE_ERROR;
    6c2c:	2402      	movs	r4, #2
    6c2e:	4264      	negs	r4, r4
    6c30:	e7d0      	b.n	6bd4 <wrapper_mqtt_publish+0x60>
    6c32:	2402      	movs	r4, #2
    6c34:	4264      	negs	r4, r4
    6c36:	e7cd      	b.n	6bd4 <wrapper_mqtt_publish+0x60>
    6c38:	2402      	movs	r4, #2
    6c3a:	4264      	negs	r4, r4
    6c3c:	e7ca      	b.n	6bd4 <wrapper_mqtt_publish+0x60>
    6c3e:	2402      	movs	r4, #2
    6c40:	4264      	negs	r4, r4
    6c42:	e7c7      	b.n	6bd4 <wrapper_mqtt_publish+0x60>
    6c44:	00004fbd 	.word	0x00004fbd
    6c48:	00006399 	.word	0x00006399
    6c4c:	000053f5 	.word	0x000053f5
    6c50:	0000b4f0 	.word	0x0000b4f0
    6c54:	00007d35 	.word	0x00007d35
    6c58:	00009cb4 	.word	0x00009cb4
    6c5c:	0000b310 	.word	0x0000b310
    6c60:	00004e41 	.word	0x00004e41
    6c64:	0000b2e8 	.word	0x0000b2e8
    6c68:	00004e61 	.word	0x00004e61
    6c6c:	0000b4b4 	.word	0x0000b4b4
    6c70:	00004e21 	.word	0x00004e21

00006c74 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
    6c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c76:	0004      	movs	r4, r0
	int len = 0;


	if (options->MQTTVersion == 3)
    6c78:	7a03      	ldrb	r3, [r0, #8]
    6c7a:	2b03      	cmp	r3, #3
    6c7c:	d024      	beq.n	6cc8 <MQTTSerialize_connectLength+0x54>
	int len = 0;
    6c7e:	2600      	movs	r6, #0
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
    6c80:	2b04      	cmp	r3, #4
    6c82:	d01f      	beq.n	6cc4 <MQTTSerialize_connectLength+0x50>
		len = 10;

	len += MQTTstrlen(options->clientID)+2;
    6c84:	68e0      	ldr	r0, [r4, #12]
    6c86:	6921      	ldr	r1, [r4, #16]
    6c88:	6962      	ldr	r2, [r4, #20]
    6c8a:	4b1b      	ldr	r3, [pc, #108]	; (6cf8 <MQTTSerialize_connectLength+0x84>)
    6c8c:	4798      	blx	r3
    6c8e:	1c85      	adds	r5, r0, #2
    6c90:	19ad      	adds	r5, r5, r6
	if (options->willFlag)
    6c92:	7ee3      	ldrb	r3, [r4, #27]
    6c94:	2b00      	cmp	r3, #0
    6c96:	d119      	bne.n	6ccc <MQTTSerialize_connectLength+0x58>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
	if (options->username.cstring || options->username.lenstring.data)
    6c98:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6c9a:	2b00      	cmp	r3, #0
    6c9c:	d024      	beq.n	6ce8 <MQTTSerialize_connectLength+0x74>
		len += MQTTstrlen(options->username)+2;
    6c9e:	6c20      	ldr	r0, [r4, #64]	; 0x40
    6ca0:	6c61      	ldr	r1, [r4, #68]	; 0x44
    6ca2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    6ca4:	4b14      	ldr	r3, [pc, #80]	; (6cf8 <MQTTSerialize_connectLength+0x84>)
    6ca6:	4798      	blx	r3
    6ca8:	3002      	adds	r0, #2
    6caa:	182d      	adds	r5, r5, r0
	if (options->password.cstring || options->password.lenstring.data)
    6cac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6cae:	2b00      	cmp	r3, #0
    6cb0:	d01e      	beq.n	6cf0 <MQTTSerialize_connectLength+0x7c>
		len += MQTTstrlen(options->password)+2;
    6cb2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    6cb4:	6d21      	ldr	r1, [r4, #80]	; 0x50
    6cb6:	6d62      	ldr	r2, [r4, #84]	; 0x54
    6cb8:	4b0f      	ldr	r3, [pc, #60]	; (6cf8 <MQTTSerialize_connectLength+0x84>)
    6cba:	4798      	blx	r3
    6cbc:	3002      	adds	r0, #2
    6cbe:	182d      	adds	r5, r5, r0

	return len;
}
    6cc0:	0028      	movs	r0, r5
    6cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		len = 10;
    6cc4:	360a      	adds	r6, #10
    6cc6:	e7dd      	b.n	6c84 <MQTTSerialize_connectLength+0x10>
		len = 12; /* variable depending on MQTT or MQIsdp */
    6cc8:	260c      	movs	r6, #12
    6cca:	e7db      	b.n	6c84 <MQTTSerialize_connectLength+0x10>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
    6ccc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6cce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6cd0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    6cd2:	4f09      	ldr	r7, [pc, #36]	; (6cf8 <MQTTSerialize_connectLength+0x84>)
    6cd4:	47b8      	blx	r7
    6cd6:	0006      	movs	r6, r0
    6cd8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6cda:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6cdc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    6cde:	47b8      	blx	r7
    6ce0:	1836      	adds	r6, r6, r0
    6ce2:	3604      	adds	r6, #4
    6ce4:	19ad      	adds	r5, r5, r6
    6ce6:	e7d7      	b.n	6c98 <MQTTSerialize_connectLength+0x24>
	if (options->username.cstring || options->username.lenstring.data)
    6ce8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    6cea:	2b00      	cmp	r3, #0
    6cec:	d1d7      	bne.n	6c9e <MQTTSerialize_connectLength+0x2a>
    6cee:	e7dd      	b.n	6cac <MQTTSerialize_connectLength+0x38>
	if (options->password.cstring || options->password.lenstring.data)
    6cf0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6cf2:	2b00      	cmp	r3, #0
    6cf4:	d1dd      	bne.n	6cb2 <MQTTSerialize_connectLength+0x3e>
    6cf6:	e7e3      	b.n	6cc0 <MQTTSerialize_connectLength+0x4c>
    6cf8:	000071dd 	.word	0x000071dd

00006cfc <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
    6cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6cfe:	b083      	sub	sp, #12
    6d00:	0006      	movs	r6, r0
    6d02:	000f      	movs	r7, r1
    6d04:	0015      	movs	r5, r2
	unsigned char *ptr = buf;
    6d06:	9001      	str	r0, [sp, #4]
	MQTTHeader header = {0};
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
    6d08:	0010      	movs	r0, r2
    6d0a:	4b45      	ldr	r3, [pc, #276]	; (6e20 <MQTTSerialize_connect+0x124>)
    6d0c:	4798      	blx	r3
    6d0e:	0004      	movs	r4, r0
    6d10:	4b44      	ldr	r3, [pc, #272]	; (6e24 <MQTTSerialize_connect+0x128>)
    6d12:	4798      	blx	r3
    6d14:	42b8      	cmp	r0, r7
    6d16:	dd00      	ble.n	6d1a <MQTTSerialize_connect+0x1e>
    6d18:	e07f      	b.n	6e1a <MQTTSerialize_connect+0x11e>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
    6d1a:	2110      	movs	r1, #16
    6d1c:	a801      	add	r0, sp, #4
    6d1e:	4b42      	ldr	r3, [pc, #264]	; (6e28 <MQTTSerialize_connect+0x12c>)
    6d20:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
    6d22:	0021      	movs	r1, r4
    6d24:	9801      	ldr	r0, [sp, #4]
    6d26:	4b41      	ldr	r3, [pc, #260]	; (6e2c <MQTTSerialize_connect+0x130>)
    6d28:	4798      	blx	r3
    6d2a:	9b01      	ldr	r3, [sp, #4]
    6d2c:	469c      	mov	ip, r3
    6d2e:	4460      	add	r0, ip
    6d30:	9001      	str	r0, [sp, #4]

	if (options->MQTTVersion == 4)
    6d32:	7a2b      	ldrb	r3, [r5, #8]
    6d34:	2b04      	cmp	r3, #4
    6d36:	d045      	beq.n	6dc4 <MQTTSerialize_connect+0xc8>
		writeCString(&ptr, "MQTT");
		writeChar(&ptr, (char) 4);
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
    6d38:	493d      	ldr	r1, [pc, #244]	; (6e30 <MQTTSerialize_connect+0x134>)
    6d3a:	a801      	add	r0, sp, #4
    6d3c:	4b3d      	ldr	r3, [pc, #244]	; (6e34 <MQTTSerialize_connect+0x138>)
    6d3e:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
    6d40:	2103      	movs	r1, #3
    6d42:	a801      	add	r0, sp, #4
    6d44:	4b38      	ldr	r3, [pc, #224]	; (6e28 <MQTTSerialize_connect+0x12c>)
    6d46:	4798      	blx	r3
	}

	flags.all = 0;
	flags.bits.cleansession = options->cleansession;
    6d48:	7ea9      	ldrb	r1, [r5, #26]
    6d4a:	2301      	movs	r3, #1
    6d4c:	4019      	ands	r1, r3
	flags.bits.will = (options->willFlag) ? 1 : 0;
    6d4e:	7eea      	ldrb	r2, [r5, #27]
    6d50:	1e50      	subs	r0, r2, #1
    6d52:	4182      	sbcs	r2, r0
    6d54:	b2d2      	uxtb	r2, r2
    6d56:	4013      	ands	r3, r2
    6d58:	009b      	lsls	r3, r3, #2
    6d5a:	0049      	lsls	r1, r1, #1
	if (flags.bits.will)
    6d5c:	4319      	orrs	r1, r3
    6d5e:	2b00      	cmp	r3, #0
    6d60:	d00b      	beq.n	6d7a <MQTTSerialize_connect+0x7e>
	{
		flags.bits.willQoS = options->will.qos;
    6d62:	233d      	movs	r3, #61	; 0x3d
    6d64:	5cea      	ldrb	r2, [r5, r3]
    6d66:	3b3a      	subs	r3, #58	; 0x3a
    6d68:	4013      	ands	r3, r2
    6d6a:	00db      	lsls	r3, r3, #3
		flags.bits.willRetain = options->will.retained;
    6d6c:	223c      	movs	r2, #60	; 0x3c
    6d6e:	5ca8      	ldrb	r0, [r5, r2]
    6d70:	3a3b      	subs	r2, #59	; 0x3b
    6d72:	4002      	ands	r2, r0
    6d74:	0152      	lsls	r2, r2, #5
    6d76:	4319      	orrs	r1, r3
    6d78:	4311      	orrs	r1, r2
	}

	if (options->username.cstring || options->username.lenstring.data)
    6d7a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    6d7c:	2b00      	cmp	r3, #0
    6d7e:	d02a      	beq.n	6dd6 <MQTTSerialize_connect+0xda>
		flags.bits.username = 1;
    6d80:	2380      	movs	r3, #128	; 0x80
    6d82:	4319      	orrs	r1, r3
	if (options->password.cstring || options->password.lenstring.data)
    6d84:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    6d86:	2b00      	cmp	r3, #0
    6d88:	d029      	beq.n	6dde <MQTTSerialize_connect+0xe2>
		flags.bits.password = 1;
    6d8a:	2340      	movs	r3, #64	; 0x40
    6d8c:	4319      	orrs	r1, r3

	writeChar(&ptr, flags.all);
    6d8e:	b2cc      	uxtb	r4, r1
    6d90:	0021      	movs	r1, r4
    6d92:	a801      	add	r0, sp, #4
    6d94:	4b24      	ldr	r3, [pc, #144]	; (6e28 <MQTTSerialize_connect+0x12c>)
    6d96:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
    6d98:	8b29      	ldrh	r1, [r5, #24]
    6d9a:	a801      	add	r0, sp, #4
    6d9c:	4b26      	ldr	r3, [pc, #152]	; (6e38 <MQTTSerialize_connect+0x13c>)
    6d9e:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
    6da0:	68e9      	ldr	r1, [r5, #12]
    6da2:	692a      	ldr	r2, [r5, #16]
    6da4:	696b      	ldr	r3, [r5, #20]
    6da6:	a801      	add	r0, sp, #4
    6da8:	4f24      	ldr	r7, [pc, #144]	; (6e3c <MQTTSerialize_connect+0x140>)
    6daa:	47b8      	blx	r7
	if (options->willFlag)
    6dac:	7eeb      	ldrb	r3, [r5, #27]
    6dae:	2b00      	cmp	r3, #0
    6db0:	d119      	bne.n	6de6 <MQTTSerialize_connect+0xea>
	{
		writeMQTTString(&ptr, options->will.topicName);
		writeMQTTString(&ptr, options->will.message);
	}
	if (flags.bits.username)
    6db2:	b263      	sxtb	r3, r4
    6db4:	2b00      	cmp	r3, #0
    6db6:	db22      	blt.n	6dfe <MQTTSerialize_connect+0x102>
		writeMQTTString(&ptr, options->username);
	if (flags.bits.password)
    6db8:	0663      	lsls	r3, r4, #25
    6dba:	d427      	bmi.n	6e0c <MQTTSerialize_connect+0x110>
		writeMQTTString(&ptr, options->password);

	rc = ptr - buf;
    6dbc:	9b01      	ldr	r3, [sp, #4]
    6dbe:	1b98      	subs	r0, r3, r6

exit:
	return rc;
}
    6dc0:	b003      	add	sp, #12
    6dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writeCString(&ptr, "MQTT");
    6dc4:	491e      	ldr	r1, [pc, #120]	; (6e40 <MQTTSerialize_connect+0x144>)
    6dc6:	a801      	add	r0, sp, #4
    6dc8:	4b1a      	ldr	r3, [pc, #104]	; (6e34 <MQTTSerialize_connect+0x138>)
    6dca:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
    6dcc:	2104      	movs	r1, #4
    6dce:	a801      	add	r0, sp, #4
    6dd0:	4b15      	ldr	r3, [pc, #84]	; (6e28 <MQTTSerialize_connect+0x12c>)
    6dd2:	4798      	blx	r3
    6dd4:	e7b8      	b.n	6d48 <MQTTSerialize_connect+0x4c>
	if (options->username.cstring || options->username.lenstring.data)
    6dd6:	6cab      	ldr	r3, [r5, #72]	; 0x48
    6dd8:	2b00      	cmp	r3, #0
    6dda:	d1d1      	bne.n	6d80 <MQTTSerialize_connect+0x84>
    6ddc:	e7d2      	b.n	6d84 <MQTTSerialize_connect+0x88>
	if (options->password.cstring || options->password.lenstring.data)
    6dde:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    6de0:	2b00      	cmp	r3, #0
    6de2:	d1d2      	bne.n	6d8a <MQTTSerialize_connect+0x8e>
    6de4:	e7d3      	b.n	6d8e <MQTTSerialize_connect+0x92>
		writeMQTTString(&ptr, options->will.topicName);
    6de6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    6de8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6dea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    6dec:	a801      	add	r0, sp, #4
    6dee:	4f13      	ldr	r7, [pc, #76]	; (6e3c <MQTTSerialize_connect+0x140>)
    6df0:	47b8      	blx	r7
		writeMQTTString(&ptr, options->will.message);
    6df2:	6b29      	ldr	r1, [r5, #48]	; 0x30
    6df4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    6df6:	6bab      	ldr	r3, [r5, #56]	; 0x38
    6df8:	a801      	add	r0, sp, #4
    6dfa:	47b8      	blx	r7
    6dfc:	e7d9      	b.n	6db2 <MQTTSerialize_connect+0xb6>
		writeMQTTString(&ptr, options->username);
    6dfe:	6c29      	ldr	r1, [r5, #64]	; 0x40
    6e00:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    6e02:	6cab      	ldr	r3, [r5, #72]	; 0x48
    6e04:	a801      	add	r0, sp, #4
    6e06:	4f0d      	ldr	r7, [pc, #52]	; (6e3c <MQTTSerialize_connect+0x140>)
    6e08:	47b8      	blx	r7
    6e0a:	e7d5      	b.n	6db8 <MQTTSerialize_connect+0xbc>
		writeMQTTString(&ptr, options->password);
    6e0c:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
    6e0e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    6e10:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    6e12:	a801      	add	r0, sp, #4
    6e14:	4c09      	ldr	r4, [pc, #36]	; (6e3c <MQTTSerialize_connect+0x140>)
    6e16:	47a0      	blx	r4
    6e18:	e7d0      	b.n	6dbc <MQTTSerialize_connect+0xc0>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    6e1a:	2002      	movs	r0, #2
    6e1c:	4240      	negs	r0, r0
	return rc;
    6e1e:	e7cf      	b.n	6dc0 <MQTTSerialize_connect+0xc4>
    6e20:	00006c75 	.word	0x00006c75
    6e24:	00007081 	.word	0x00007081
    6e28:	000070e3 	.word	0x000070e3
    6e2c:	00006ff9 	.word	0x00006ff9
    6e30:	0000b518 	.word	0x0000b518
    6e34:	00007119 	.word	0x00007119
    6e38:	000070ef 	.word	0x000070ef
    6e3c:	00007151 	.word	0x00007151
    6e40:	0000b510 	.word	0x0000b510

00006e44 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
    6e44:	b570      	push	{r4, r5, r6, lr}
    6e46:	b082      	sub	sp, #8
    6e48:	0005      	movs	r5, r0
    6e4a:	000c      	movs	r4, r1
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
    6e4c:	9201      	str	r2, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;
	MQTTConnackFlags flags = {0};

	header.byte = readChar(&curdata);
    6e4e:	a801      	add	r0, sp, #4
    6e50:	4b0e      	ldr	r3, [pc, #56]	; (6e8c <MQTTDeserialize_connack+0x48>)
    6e52:	4798      	blx	r3
	if (header.bits.type != CONNACK)
    6e54:	23f0      	movs	r3, #240	; 0xf0
    6e56:	4003      	ands	r3, r0
	int rc = 0;
    6e58:	2000      	movs	r0, #0
	if (header.bits.type != CONNACK)
    6e5a:	2b20      	cmp	r3, #32
    6e5c:	d001      	beq.n	6e62 <MQTTDeserialize_connack+0x1e>
	*connack_rc = readChar(&curdata);

	rc = 1;
exit:
	return rc;
}
    6e5e:	b002      	add	sp, #8
    6e60:	bd70      	pop	{r4, r5, r6, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    6e62:	4669      	mov	r1, sp
    6e64:	9801      	ldr	r0, [sp, #4]
    6e66:	4b0a      	ldr	r3, [pc, #40]	; (6e90 <MQTTDeserialize_connack+0x4c>)
    6e68:	4798      	blx	r3
    6e6a:	9b01      	ldr	r3, [sp, #4]
    6e6c:	181b      	adds	r3, r3, r0
    6e6e:	9301      	str	r3, [sp, #4]
	if (enddata - curdata < 2)
    6e70:	9b00      	ldr	r3, [sp, #0]
    6e72:	2b01      	cmp	r3, #1
    6e74:	ddf3      	ble.n	6e5e <MQTTDeserialize_connack+0x1a>
	flags.all = readChar(&curdata);
    6e76:	a801      	add	r0, sp, #4
    6e78:	4e04      	ldr	r6, [pc, #16]	; (6e8c <MQTTDeserialize_connack+0x48>)
    6e7a:	47b0      	blx	r6
	*sessionPresent = flags.bits.sessionpresent;
    6e7c:	0600      	lsls	r0, r0, #24
    6e7e:	0fc0      	lsrs	r0, r0, #31
    6e80:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
    6e82:	a801      	add	r0, sp, #4
    6e84:	47b0      	blx	r6
    6e86:	7020      	strb	r0, [r4, #0]
	rc = 1;
    6e88:	2001      	movs	r0, #1
    6e8a:	e7e8      	b.n	6e5e <MQTTDeserialize_connack+0x1a>
    6e8c:	000070d7 	.word	0x000070d7
    6e90:	000070a9 	.word	0x000070a9

00006e94 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
    6e94:	b510      	push	{r4, lr}
    6e96:	b082      	sub	sp, #8
    6e98:	0004      	movs	r4, r0
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
    6e9a:	9001      	str	r0, [sp, #4]

	if (buflen < 2)
    6e9c:	2901      	cmp	r1, #1
    6e9e:	dd0f      	ble.n	6ec0 <MQTTSerialize_zero+0x2c>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
    6ea0:	210f      	movs	r1, #15
    6ea2:	4011      	ands	r1, r2
	writeChar(&ptr, header.byte); /* write header */
    6ea4:	0109      	lsls	r1, r1, #4
    6ea6:	a801      	add	r0, sp, #4
    6ea8:	4b07      	ldr	r3, [pc, #28]	; (6ec8 <MQTTSerialize_zero+0x34>)
    6eaa:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
    6eac:	2100      	movs	r1, #0
    6eae:	9801      	ldr	r0, [sp, #4]
    6eb0:	4b06      	ldr	r3, [pc, #24]	; (6ecc <MQTTSerialize_zero+0x38>)
    6eb2:	4798      	blx	r3
    6eb4:	9b01      	ldr	r3, [sp, #4]
    6eb6:	469c      	mov	ip, r3
    6eb8:	4460      	add	r0, ip
	rc = ptr - buf;
    6eba:	1b00      	subs	r0, r0, r4
exit:
	return rc;
}
    6ebc:	b002      	add	sp, #8
    6ebe:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    6ec0:	2002      	movs	r0, #2
    6ec2:	4240      	negs	r0, r0
	return rc;
    6ec4:	e7fa      	b.n	6ebc <MQTTSerialize_zero+0x28>
    6ec6:	46c0      	nop			; (mov r8, r8)
    6ec8:	000070e3 	.word	0x000070e3
    6ecc:	00006ff9 	.word	0x00006ff9

00006ed0 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
    6ed0:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
    6ed2:	220e      	movs	r2, #14
    6ed4:	4b01      	ldr	r3, [pc, #4]	; (6edc <MQTTSerialize_disconnect+0xc>)
    6ed6:	4798      	blx	r3
}
    6ed8:	bd10      	pop	{r4, pc}
    6eda:	46c0      	nop			; (mov r8, r8)
    6edc:	00006e95 	.word	0x00006e95

00006ee0 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
    6ee0:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
    6ee2:	220c      	movs	r2, #12
    6ee4:	4b01      	ldr	r3, [pc, #4]	; (6eec <MQTTSerialize_pingreq+0xc>)
    6ee6:	4798      	blx	r3
}
    6ee8:	bd10      	pop	{r4, pc}
    6eea:	46c0      	nop			; (mov r8, r8)
    6eec:	00006e95 	.word	0x00006e95

00006ef0 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
    6ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ef2:	b085      	sub	sp, #20
    6ef4:	0005      	movs	r5, r0
    6ef6:	000e      	movs	r6, r1
    6ef8:	0014      	movs	r4, r2
    6efa:	9301      	str	r3, [sp, #4]
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
    6efc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6efe:	9303      	str	r3, [sp, #12]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
    6f00:	2300      	movs	r3, #0
    6f02:	9302      	str	r3, [sp, #8]

	header.byte = readChar(&curdata);
    6f04:	a803      	add	r0, sp, #12
    6f06:	4b1c      	ldr	r3, [pc, #112]	; (6f78 <MQTTDeserialize_publish+0x88>)
    6f08:	4798      	blx	r3
    6f0a:	0003      	movs	r3, r0
	if (header.bits.type != PUBLISH)
    6f0c:	22f0      	movs	r2, #240	; 0xf0
    6f0e:	4010      	ands	r0, r2
	int rc = 0;
    6f10:	2700      	movs	r7, #0
	if (header.bits.type != PUBLISH)
    6f12:	2830      	cmp	r0, #48	; 0x30
    6f14:	d002      	beq.n	6f1c <MQTTDeserialize_publish+0x2c>
	*payloadlen = enddata - curdata;
	*payload = curdata;
	rc = 1;
exit:
	return rc;
}
    6f16:	0038      	movs	r0, r7
    6f18:	b005      	add	sp, #20
    6f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*dup = header.bits.dup;
    6f1c:	071a      	lsls	r2, r3, #28
    6f1e:	0fd2      	lsrs	r2, r2, #31
    6f20:	702a      	strb	r2, [r5, #0]
	*qos = header.bits.qos;
    6f22:	075a      	lsls	r2, r3, #29
    6f24:	0f92      	lsrs	r2, r2, #30
    6f26:	6032      	str	r2, [r6, #0]
	*retained = header.bits.retain;
    6f28:	07db      	lsls	r3, r3, #31
    6f2a:	0fdb      	lsrs	r3, r3, #31
    6f2c:	7023      	strb	r3, [r4, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    6f2e:	a902      	add	r1, sp, #8
    6f30:	9803      	ldr	r0, [sp, #12]
    6f32:	4b12      	ldr	r3, [pc, #72]	; (6f7c <MQTTDeserialize_publish+0x8c>)
    6f34:	4798      	blx	r3
    6f36:	0007      	movs	r7, r0
    6f38:	9b03      	ldr	r3, [sp, #12]
    6f3a:	181c      	adds	r4, r3, r0
    6f3c:	9403      	str	r4, [sp, #12]
	enddata = curdata + mylen;
    6f3e:	9b02      	ldr	r3, [sp, #8]
    6f40:	469c      	mov	ip, r3
    6f42:	4464      	add	r4, ip
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
    6f44:	0022      	movs	r2, r4
    6f46:	a903      	add	r1, sp, #12
    6f48:	980a      	ldr	r0, [sp, #40]	; 0x28
    6f4a:	4b0d      	ldr	r3, [pc, #52]	; (6f80 <MQTTDeserialize_publish+0x90>)
    6f4c:	4798      	blx	r3
    6f4e:	2800      	cmp	r0, #0
    6f50:	d0e1      	beq.n	6f16 <MQTTDeserialize_publish+0x26>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
    6f52:	9b03      	ldr	r3, [sp, #12]
    6f54:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
    6f56:	d4de      	bmi.n	6f16 <MQTTDeserialize_publish+0x26>
	if (*qos > 0)
    6f58:	6833      	ldr	r3, [r6, #0]
    6f5a:	2b00      	cmp	r3, #0
    6f5c:	dd04      	ble.n	6f68 <MQTTDeserialize_publish+0x78>
		*packetid = readInt(&curdata);
    6f5e:	a803      	add	r0, sp, #12
    6f60:	4b08      	ldr	r3, [pc, #32]	; (6f84 <MQTTDeserialize_publish+0x94>)
    6f62:	4798      	blx	r3
    6f64:	9b01      	ldr	r3, [sp, #4]
    6f66:	8018      	strh	r0, [r3, #0]
	*payloadlen = enddata - curdata;
    6f68:	9b03      	ldr	r3, [sp, #12]
    6f6a:	1ae4      	subs	r4, r4, r3
    6f6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6f6e:	6014      	str	r4, [r2, #0]
	*payload = curdata;
    6f70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6f72:	6013      	str	r3, [r2, #0]
	rc = 1;
    6f74:	2701      	movs	r7, #1
    6f76:	e7ce      	b.n	6f16 <MQTTDeserialize_publish+0x26>
    6f78:	000070d7 	.word	0x000070d7
    6f7c:	000070a9 	.word	0x000070a9
    6f80:	0000719d 	.word	0x0000719d
    6f84:	000070c5 	.word	0x000070c5

00006f88 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
    6f88:	b570      	push	{r4, r5, r6, lr}
    6f8a:	b082      	sub	sp, #8
    6f8c:	0005      	movs	r5, r0
    6f8e:	000e      	movs	r6, r1
    6f90:	0014      	movs	r4, r2
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
    6f92:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	header.byte = readChar(&curdata);
    6f94:	a801      	add	r0, sp, #4
    6f96:	4b0c      	ldr	r3, [pc, #48]	; (6fc8 <MQTTDeserialize_ack+0x40>)
    6f98:	4798      	blx	r3
	*dup = header.bits.dup;
    6f9a:	0703      	lsls	r3, r0, #28
    6f9c:	0fdb      	lsrs	r3, r3, #31
    6f9e:	7033      	strb	r3, [r6, #0]
	*packettype = header.bits.type;
    6fa0:	0600      	lsls	r0, r0, #24
    6fa2:	0f00      	lsrs	r0, r0, #28
    6fa4:	7028      	strb	r0, [r5, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    6fa6:	4669      	mov	r1, sp
    6fa8:	9801      	ldr	r0, [sp, #4]
    6faa:	4b08      	ldr	r3, [pc, #32]	; (6fcc <MQTTDeserialize_ack+0x44>)
    6fac:	4798      	blx	r3
    6fae:	9b01      	ldr	r3, [sp, #4]
    6fb0:	181b      	adds	r3, r3, r0
    6fb2:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
    6fb4:	9b00      	ldr	r3, [sp, #0]
    6fb6:	2b01      	cmp	r3, #1
    6fb8:	dd04      	ble.n	6fc4 <MQTTDeserialize_ack+0x3c>
		goto exit;
	*packetid = readInt(&curdata);
    6fba:	a801      	add	r0, sp, #4
    6fbc:	4b04      	ldr	r3, [pc, #16]	; (6fd0 <MQTTDeserialize_ack+0x48>)
    6fbe:	4798      	blx	r3
    6fc0:	8020      	strh	r0, [r4, #0]

	rc = 1;
    6fc2:	2001      	movs	r0, #1
exit:
	return rc;
}
    6fc4:	b002      	add	sp, #8
    6fc6:	bd70      	pop	{r4, r5, r6, pc}
    6fc8:	000070d7 	.word	0x000070d7
    6fcc:	000070a9 	.word	0x000070a9
    6fd0:	000070c5 	.word	0x000070c5

00006fd4 <bufchar>:


static unsigned char *bufptr;

int bufchar(unsigned char *c, int count)
{
    6fd4:	b530      	push	{r4, r5, lr}
    int i;

    for (i = 0; i < count; ++i) {
    6fd6:	2900      	cmp	r1, #0
    6fd8:	dd0a      	ble.n	6ff0 <bufchar+0x1c>
    6fda:	4b06      	ldr	r3, [pc, #24]	; (6ff4 <bufchar+0x20>)
    6fdc:	681b      	ldr	r3, [r3, #0]
    6fde:	185d      	adds	r5, r3, r1
    6fe0:	002c      	movs	r4, r5
        *c = *bufptr++;
    6fe2:	781a      	ldrb	r2, [r3, #0]
    6fe4:	7002      	strb	r2, [r0, #0]
    6fe6:	3301      	adds	r3, #1
    for (i = 0; i < count; ++i) {
    6fe8:	42a3      	cmp	r3, r4
    6fea:	d1fa      	bne.n	6fe2 <bufchar+0xe>
    6fec:	4b01      	ldr	r3, [pc, #4]	; (6ff4 <bufchar+0x20>)
    6fee:	601d      	str	r5, [r3, #0]
    }
    return count;
}
    6ff0:	0008      	movs	r0, r1
    6ff2:	bd30      	pop	{r4, r5, pc}
    6ff4:	20000a08 	.word	0x20000a08

00006ff8 <MQTTPacket_encode>:
{
    6ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ffa:	b083      	sub	sp, #12
    6ffc:	2500      	movs	r5, #0
        char d = length % 128;
    6ffe:	267f      	movs	r6, #127	; 0x7f
            d |= 0x80;
    7000:	2780      	movs	r7, #128	; 0x80
    7002:	427f      	negs	r7, r7
    7004:	9501      	str	r5, [sp, #4]
        char d = length % 128;
    7006:	17ca      	asrs	r2, r1, #31
    7008:	0e54      	lsrs	r4, r2, #25
    700a:	190b      	adds	r3, r1, r4
    700c:	4033      	ands	r3, r6
    700e:	1b1b      	subs	r3, r3, r4
    7010:	b2db      	uxtb	r3, r3
        length /= 128;
    7012:	4032      	ands	r2, r6
    7014:	1851      	adds	r1, r2, r1
    7016:	11c9      	asrs	r1, r1, #7
        if (length > 0) {
    7018:	2900      	cmp	r1, #0
    701a:	dd03      	ble.n	7024 <MQTTPacket_encode+0x2c>
            d |= 0x80;
    701c:	433b      	orrs	r3, r7
        buf[rc++] = d;
    701e:	5543      	strb	r3, [r0, r5]
    7020:	3501      	adds	r5, #1
    7022:	e7ef      	b.n	7004 <MQTTPacket_encode+0xc>
    7024:	5543      	strb	r3, [r0, r5]
    7026:	9801      	ldr	r0, [sp, #4]
    7028:	3001      	adds	r0, #1
}
    702a:	b003      	add	sp, #12
    702c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000702e <MQTTPacket_decode>:
{
    702e:	b5f0      	push	{r4, r5, r6, r7, lr}
    7030:	46ce      	mov	lr, r9
    7032:	4647      	mov	r7, r8
    7034:	b580      	push	{r7, lr}
    7036:	b083      	sub	sp, #12
    7038:	4680      	mov	r8, r0
    703a:	000f      	movs	r7, r1
    *value = 0;
    703c:	2300      	movs	r3, #0
    703e:	600b      	str	r3, [r1, #0]
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES) {
    7040:	2401      	movs	r4, #1
    int multiplier = 1;
    7042:	2601      	movs	r6, #1
        rc = (*getcharfn)(&c, 1);
    7044:	466b      	mov	r3, sp
    7046:	1ddd      	adds	r5, r3, #7
        *value += (c & 127) * multiplier;
    7048:	237f      	movs	r3, #127	; 0x7f
    704a:	4699      	mov	r9, r3
        rc = (*getcharfn)(&c, 1);
    704c:	2101      	movs	r1, #1
    704e:	0028      	movs	r0, r5
    7050:	47c0      	blx	r8
        if (rc != 1) {
    7052:	2801      	cmp	r0, #1
    7054:	d10e      	bne.n	7074 <MQTTPacket_decode+0x46>
        *value += (c & 127) * multiplier;
    7056:	782b      	ldrb	r3, [r5, #0]
    7058:	464a      	mov	r2, r9
    705a:	401a      	ands	r2, r3
    705c:	4372      	muls	r2, r6
    705e:	6839      	ldr	r1, [r7, #0]
    7060:	468c      	mov	ip, r1
    7062:	4462      	add	r2, ip
    7064:	603a      	str	r2, [r7, #0]
        multiplier *= 128;
    7066:	01f6      	lsls	r6, r6, #7
    } while ((c & 128) != 0);
    7068:	b25b      	sxtb	r3, r3
    706a:	2b00      	cmp	r3, #0
    706c:	da02      	bge.n	7074 <MQTTPacket_decode+0x46>
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES) {
    706e:	3401      	adds	r4, #1
    7070:	2c05      	cmp	r4, #5
    7072:	d1eb      	bne.n	704c <MQTTPacket_decode+0x1e>
}
    7074:	0020      	movs	r0, r4
    7076:	b003      	add	sp, #12
    7078:	bc0c      	pop	{r2, r3}
    707a:	4690      	mov	r8, r2
    707c:	4699      	mov	r9, r3
    707e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007080 <MQTTPacket_len>:
{
    7080:	0003      	movs	r3, r0
    rem_len += 1; /* header byte */
    7082:	1c42      	adds	r2, r0, #1
        rem_len += 1;
    7084:	3002      	adds	r0, #2
    if (rem_len < 128) {
    7086:	2a7f      	cmp	r2, #127	; 0x7f
    7088:	dd07      	ble.n	709a <MQTTPacket_len+0x1a>
    } else if (rem_len < 16384) {
    708a:	4905      	ldr	r1, [pc, #20]	; (70a0 <MQTTPacket_len+0x20>)
        rem_len += 2;
    708c:	1cd8      	adds	r0, r3, #3
    } else if (rem_len < 16384) {
    708e:	428a      	cmp	r2, r1
    7090:	dd03      	ble.n	709a <MQTTPacket_len+0x1a>
    } else if (rem_len < 2097151) {
    7092:	4904      	ldr	r1, [pc, #16]	; (70a4 <MQTTPacket_len+0x24>)
        rem_len += 4;
    7094:	1d58      	adds	r0, r3, #5
    } else if (rem_len < 2097151) {
    7096:	428a      	cmp	r2, r1
    7098:	dd00      	ble.n	709c <MQTTPacket_len+0x1c>
}
    709a:	4770      	bx	lr
        rem_len += 3;
    709c:	1d18      	adds	r0, r3, #4
    709e:	e7fc      	b.n	709a <MQTTPacket_len+0x1a>
    70a0:	00003fff 	.word	0x00003fff
    70a4:	001ffffe 	.word	0x001ffffe

000070a8 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char *buf, int *value)
{
    70a8:	b510      	push	{r4, lr}
    bufptr = buf;
    70aa:	4b03      	ldr	r3, [pc, #12]	; (70b8 <MQTTPacket_decodeBuf+0x10>)
    70ac:	6018      	str	r0, [r3, #0]
    return MQTTPacket_decode(bufchar, value);
    70ae:	4803      	ldr	r0, [pc, #12]	; (70bc <MQTTPacket_decodeBuf+0x14>)
    70b0:	4b03      	ldr	r3, [pc, #12]	; (70c0 <MQTTPacket_decodeBuf+0x18>)
    70b2:	4798      	blx	r3
}
    70b4:	bd10      	pop	{r4, pc}
    70b6:	46c0      	nop			; (mov r8, r8)
    70b8:	20000a08 	.word	0x20000a08
    70bc:	00006fd5 	.word	0x00006fd5
    70c0:	0000702f 	.word	0x0000702f

000070c4 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char **pptr)
{
    70c4:	0001      	movs	r1, r0
    unsigned char *ptr = *pptr;
    70c6:	6802      	ldr	r2, [r0, #0]
    int len = 256 * (*ptr) + (*(ptr + 1));
    70c8:	7813      	ldrb	r3, [r2, #0]
    70ca:	021b      	lsls	r3, r3, #8
    70cc:	7850      	ldrb	r0, [r2, #1]
    70ce:	1818      	adds	r0, r3, r0
    *pptr += 2;
    70d0:	3202      	adds	r2, #2
    70d2:	600a      	str	r2, [r1, #0]
    return len;
}
    70d4:	4770      	bx	lr

000070d6 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char **pptr)
{
    70d6:	0002      	movs	r2, r0
    char c = **pptr;
    70d8:	6803      	ldr	r3, [r0, #0]
    70da:	7818      	ldrb	r0, [r3, #0]
    (*pptr)++;
    70dc:	3301      	adds	r3, #1
    70de:	6013      	str	r3, [r2, #0]
    return c;
}
    70e0:	4770      	bx	lr

000070e2 <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char **pptr, char c)
{
    **pptr = c;
    70e2:	6803      	ldr	r3, [r0, #0]
    70e4:	7019      	strb	r1, [r3, #0]
    (*pptr)++;
    70e6:	6803      	ldr	r3, [r0, #0]
    70e8:	3301      	adds	r3, #1
    70ea:	6003      	str	r3, [r0, #0]
}
    70ec:	4770      	bx	lr

000070ee <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char **pptr, int anInt)
{
    70ee:	b530      	push	{r4, r5, lr}
    **pptr = (unsigned char)(anInt / 256);
    70f0:	17ca      	asrs	r2, r1, #31
    70f2:	23ff      	movs	r3, #255	; 0xff
    70f4:	001c      	movs	r4, r3
    70f6:	4014      	ands	r4, r2
    70f8:	1864      	adds	r4, r4, r1
    70fa:	1224      	asrs	r4, r4, #8
    70fc:	6805      	ldr	r5, [r0, #0]
    70fe:	702c      	strb	r4, [r5, #0]
    (*pptr)++;
    7100:	6804      	ldr	r4, [r0, #0]
    7102:	1c65      	adds	r5, r4, #1
    7104:	6005      	str	r5, [r0, #0]
    **pptr = (unsigned char)(anInt % 256);
    7106:	0e12      	lsrs	r2, r2, #24
    7108:	1889      	adds	r1, r1, r2
    710a:	400b      	ands	r3, r1
    710c:	1a9b      	subs	r3, r3, r2
    710e:	7063      	strb	r3, [r4, #1]
    (*pptr)++;
    7110:	6803      	ldr	r3, [r0, #0]
    7112:	3301      	adds	r3, #1
    7114:	6003      	str	r3, [r0, #0]
}
    7116:	bd30      	pop	{r4, r5, pc}

00007118 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char **pptr, const char *string)
{
    7118:	b570      	push	{r4, r5, r6, lr}
    711a:	0004      	movs	r4, r0
    711c:	000e      	movs	r6, r1
    int len = strlen(string);
    711e:	0008      	movs	r0, r1
    7120:	4b08      	ldr	r3, [pc, #32]	; (7144 <writeCString+0x2c>)
    7122:	4798      	blx	r3
    7124:	0005      	movs	r5, r0
    writeInt(pptr, len);
    7126:	0001      	movs	r1, r0
    7128:	0020      	movs	r0, r4
    712a:	4b07      	ldr	r3, [pc, #28]	; (7148 <writeCString+0x30>)
    712c:	4798      	blx	r3
    memcpy(*pptr, string, len);
    712e:	002a      	movs	r2, r5
    7130:	0031      	movs	r1, r6
    7132:	6820      	ldr	r0, [r4, #0]
    7134:	4b05      	ldr	r3, [pc, #20]	; (714c <writeCString+0x34>)
    7136:	4798      	blx	r3
    *pptr += len;
    7138:	6823      	ldr	r3, [r4, #0]
    713a:	469c      	mov	ip, r3
    713c:	4465      	add	r5, ip
    713e:	6025      	str	r5, [r4, #0]
}
    7140:	bd70      	pop	{r4, r5, r6, pc}
    7142:	46c0      	nop			; (mov r8, r8)
    7144:	00008991 	.word	0x00008991
    7148:	000070ef 	.word	0x000070ef
    714c:	000085b7 	.word	0x000085b7

00007150 <writeMQTTString>:
    return len;
}


void writeMQTTString(unsigned char **pptr, MQTTString mqttstring)
{
    7150:	b530      	push	{r4, r5, lr}
    7152:	b085      	sub	sp, #20
    7154:	0005      	movs	r5, r0
    7156:	9101      	str	r1, [sp, #4]
    7158:	9303      	str	r3, [sp, #12]
    715a:	1e14      	subs	r4, r2, #0
    if (mqttstring.lenstring.len > 0) {
    715c:	dc06      	bgt.n	716c <writeMQTTString+0x1c>
    715e:	9901      	ldr	r1, [sp, #4]
        writeInt(pptr, mqttstring.lenstring.len);
        memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
        *pptr += mqttstring.lenstring.len;
    } else if (mqttstring.cstring) {
    7160:	2900      	cmp	r1, #0
    7162:	d010      	beq.n	7186 <writeMQTTString+0x36>
        writeCString(pptr, mqttstring.cstring);
    7164:	4b0a      	ldr	r3, [pc, #40]	; (7190 <writeMQTTString+0x40>)
    7166:	4798      	blx	r3
    } else {
        writeInt(pptr, 0);
    }
}
    7168:	b005      	add	sp, #20
    716a:	bd30      	pop	{r4, r5, pc}
        writeInt(pptr, mqttstring.lenstring.len);
    716c:	0011      	movs	r1, r2
    716e:	4b09      	ldr	r3, [pc, #36]	; (7194 <writeMQTTString+0x44>)
    7170:	4798      	blx	r3
        memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
    7172:	0022      	movs	r2, r4
    7174:	9903      	ldr	r1, [sp, #12]
    7176:	6828      	ldr	r0, [r5, #0]
    7178:	4b07      	ldr	r3, [pc, #28]	; (7198 <writeMQTTString+0x48>)
    717a:	4798      	blx	r3
        *pptr += mqttstring.lenstring.len;
    717c:	682b      	ldr	r3, [r5, #0]
    717e:	469c      	mov	ip, r3
    7180:	4464      	add	r4, ip
    7182:	602c      	str	r4, [r5, #0]
    7184:	e7f0      	b.n	7168 <writeMQTTString+0x18>
        writeInt(pptr, 0);
    7186:	2100      	movs	r1, #0
    7188:	4b02      	ldr	r3, [pc, #8]	; (7194 <writeMQTTString+0x44>)
    718a:	4798      	blx	r3
}
    718c:	e7ec      	b.n	7168 <writeMQTTString+0x18>
    718e:	46c0      	nop			; (mov r8, r8)
    7190:	00007119 	.word	0x00007119
    7194:	000070ef 	.word	0x000070ef
    7198:	000085b7 	.word	0x000085b7

0000719c <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString *mqttstring, unsigned char **pptr, unsigned char *enddata)
{
    719c:	b570      	push	{r4, r5, r6, lr}
    719e:	0005      	movs	r5, r0
    71a0:	000c      	movs	r4, r1
    71a2:	0016      	movs	r6, r2
    int rc = 0;

    /* the first two bytes are the length of the string */
    if (enddata - (*pptr) > 1) { /* enough length to read the integer? */
    71a4:	680b      	ldr	r3, [r1, #0]
    71a6:	1ad3      	subs	r3, r2, r3
    71a8:	2b01      	cmp	r3, #1
    71aa:	dd12      	ble.n	71d2 <readMQTTLenString+0x36>
        mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
    71ac:	0008      	movs	r0, r1
    71ae:	4b0a      	ldr	r3, [pc, #40]	; (71d8 <readMQTTLenString+0x3c>)
    71b0:	4798      	blx	r3
    71b2:	6068      	str	r0, [r5, #4]
        if (&(*pptr)[mqttstring->lenstring.len] <= enddata) {
    71b4:	6822      	ldr	r2, [r4, #0]
    71b6:	1811      	adds	r1, r2, r0
    int rc = 0;
    71b8:	2300      	movs	r3, #0
        if (&(*pptr)[mqttstring->lenstring.len] <= enddata) {
    71ba:	428e      	cmp	r6, r1
    71bc:	d305      	bcc.n	71ca <readMQTTLenString+0x2e>
            mqttstring->lenstring.data = (char *)*pptr;
    71be:	60aa      	str	r2, [r5, #8]
            *pptr += mqttstring->lenstring.len;
    71c0:	6823      	ldr	r3, [r4, #0]
    71c2:	469c      	mov	ip, r3
    71c4:	4460      	add	r0, ip
    71c6:	6020      	str	r0, [r4, #0]
            rc = 1;
    71c8:	2301      	movs	r3, #1
        }
    }
    mqttstring->cstring = NULL;
    71ca:	2200      	movs	r2, #0
    71cc:	602a      	str	r2, [r5, #0]
    return rc;
}
    71ce:	0018      	movs	r0, r3
    71d0:	bd70      	pop	{r4, r5, r6, pc}
    int rc = 0;
    71d2:	2300      	movs	r3, #0
    71d4:	e7f9      	b.n	71ca <readMQTTLenString+0x2e>
    71d6:	46c0      	nop			; (mov r8, r8)
    71d8:	000070c5 	.word	0x000070c5

000071dc <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
    71dc:	b500      	push	{lr}
    71de:	b085      	sub	sp, #20
    71e0:	9102      	str	r1, [sp, #8]
    int rc = 0;

    if (mqttstring.cstring) {
    71e2:	2800      	cmp	r0, #0
    71e4:	d003      	beq.n	71ee <MQTTstrlen+0x12>
        rc = strlen(mqttstring.cstring);
    71e6:	4b03      	ldr	r3, [pc, #12]	; (71f4 <MQTTstrlen+0x18>)
    71e8:	4798      	blx	r3
    } else {
        rc = mqttstring.lenstring.len;
    }
    return rc;
}
    71ea:	b005      	add	sp, #20
    71ec:	bd00      	pop	{pc}
        rc = mqttstring.lenstring.len;
    71ee:	9802      	ldr	r0, [sp, #8]
    return rc;
    71f0:	e7fb      	b.n	71ea <MQTTstrlen+0xe>
    71f2:	46c0      	nop			; (mov r8, r8)
    71f4:	00008991 	.word	0x00008991

000071f8 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return int - equal or not
 */
int MQTTPacket_equals(MQTTString *a, char *bptr)
{
    71f8:	b570      	push	{r4, r5, r6, lr}
    71fa:	000d      	movs	r5, r1
    int alen = 0,
        blen = 0;
    char *aptr;
#if !(WITH_MQTT_ZIP_TOPIC)
    if (a->cstring) {
    71fc:	6806      	ldr	r6, [r0, #0]
    71fe:	2e00      	cmp	r6, #0
    7200:	d00b      	beq.n	721a <MQTTPacket_equals+0x22>
        aptr = a->cstring;
        alen = strlen(a->cstring);
    7202:	0030      	movs	r0, r6
    7204:	4b0b      	ldr	r3, [pc, #44]	; (7234 <MQTTPacket_equals+0x3c>)
    7206:	4798      	blx	r3
    7208:	0004      	movs	r4, r0
    } else {
        aptr = a->lenstring.data;
        alen = a->lenstring.len;
    }
    blen = strlen(bptr);
    720a:	0028      	movs	r0, r5
    720c:	4b09      	ldr	r3, [pc, #36]	; (7234 <MQTTPacket_equals+0x3c>)
    720e:	4798      	blx	r3
    7210:	2300      	movs	r3, #0
#else
    aptr = a->lenstring.data;
    alen = a->lenstring.len;
    blen = alen;
#endif
    return (alen == blen) && (memcmp(aptr, bptr, alen) == 0);
    7212:	4284      	cmp	r4, r0
    7214:	d004      	beq.n	7220 <MQTTPacket_equals+0x28>

}
    7216:	0018      	movs	r0, r3
    7218:	bd70      	pop	{r4, r5, r6, pc}
        aptr = a->lenstring.data;
    721a:	6886      	ldr	r6, [r0, #8]
        alen = a->lenstring.len;
    721c:	6844      	ldr	r4, [r0, #4]
    721e:	e7f4      	b.n	720a <MQTTPacket_equals+0x12>
    return (alen == blen) && (memcmp(aptr, bptr, alen) == 0);
    7220:	0022      	movs	r2, r4
    7222:	0029      	movs	r1, r5
    7224:	0030      	movs	r0, r6
    7226:	4b04      	ldr	r3, [pc, #16]	; (7238 <MQTTPacket_equals+0x40>)
    7228:	4798      	blx	r3
    722a:	4243      	negs	r3, r0
    722c:	4143      	adcs	r3, r0
    722e:	b2db      	uxtb	r3, r3
    7230:	e7f1      	b.n	7216 <MQTTPacket_equals+0x1e>
    7232:	46c0      	nop			; (mov r8, r8)
    7234:	00008991 	.word	0x00008991
    7238:	00008599 	.word	0x00008599

0000723c <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
    723c:	b510      	push	{r4, lr}
    723e:	b084      	sub	sp, #16
    7240:	0004      	movs	r4, r0
    int len = 0;

    len += 2 + MQTTstrlen(topicName) + payloadlen;
    7242:	0008      	movs	r0, r1
    7244:	0011      	movs	r1, r2
    7246:	001a      	movs	r2, r3
    7248:	4b05      	ldr	r3, [pc, #20]	; (7260 <MQTTSerialize_publishLength+0x24>)
    724a:	4798      	blx	r3
    724c:	3002      	adds	r0, #2
    724e:	9b06      	ldr	r3, [sp, #24]
    7250:	469c      	mov	ip, r3
    7252:	4460      	add	r0, ip
    if (qos > 0) {
    7254:	2c00      	cmp	r4, #0
    7256:	dd00      	ble.n	725a <MQTTSerialize_publishLength+0x1e>
        len += 2;    /* packetid */
    7258:	3002      	adds	r0, #2
    }
    return len;
}
    725a:	b004      	add	sp, #16
    725c:	bd10      	pop	{r4, pc}
    725e:	46c0      	nop			; (mov r8, r8)
    7260:	000071dd 	.word	0x000071dd

00007264 <MQTTSerialize_publish>:
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char *buf, int buflen, unsigned char dup, int qos, unsigned char retained,
                          unsigned short packetid,
                          MQTTString topicName, unsigned char *payload, int payloadlen)
{
    7264:	b5f0      	push	{r4, r5, r6, r7, lr}
    7266:	46de      	mov	lr, fp
    7268:	4657      	mov	r7, sl
    726a:	464e      	mov	r6, r9
    726c:	b5c0      	push	{r6, r7, lr}
    726e:	b084      	sub	sp, #16
    7270:	0007      	movs	r7, r0
    7272:	468b      	mov	fp, r1
    7274:	4692      	mov	sl, r2
    7276:	001e      	movs	r6, r3
    7278:	ab0c      	add	r3, sp, #48	; 0x30
    727a:	781b      	ldrb	r3, [r3, #0]
    727c:	4699      	mov	r9, r3
    727e:	ab0d      	add	r3, sp, #52	; 0x34
    7280:	881c      	ldrh	r4, [r3, #0]
    unsigned char *ptr = buf;
    7282:	9003      	str	r0, [sp, #12]
    MQTTHeader header = {0};
    int rem_len = 0;
    int rc = 0;

    if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen) {
    7284:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7286:	9300      	str	r3, [sp, #0]
    7288:	990e      	ldr	r1, [sp, #56]	; 0x38
    728a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    728c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    728e:	0030      	movs	r0, r6
    7290:	4d1f      	ldr	r5, [pc, #124]	; (7310 <MQTTSerialize_publish+0xac>)
    7292:	47a8      	blx	r5
    7294:	0005      	movs	r5, r0
    7296:	4b1f      	ldr	r3, [pc, #124]	; (7314 <MQTTSerialize_publish+0xb0>)
    7298:	4798      	blx	r3
    729a:	4558      	cmp	r0, fp
    729c:	dc34      	bgt.n	7308 <MQTTSerialize_publish+0xa4>
        rc = MQTTPACKET_BUFFER_TOO_SHORT;
        goto exit;
    }

    header.bits.type = PUBLISH;
    header.bits.dup = dup;
    729e:	2201      	movs	r2, #1
    72a0:	4653      	mov	r3, sl
    72a2:	4013      	ands	r3, r2
    72a4:	00db      	lsls	r3, r3, #3
    header.bits.qos = qos;
    72a6:	2103      	movs	r1, #3
    72a8:	4031      	ands	r1, r6
    72aa:	0048      	lsls	r0, r1, #1
    72ac:	2130      	movs	r1, #48	; 0x30
    72ae:	4319      	orrs	r1, r3
    72b0:	4301      	orrs	r1, r0
    header.bits.retain = retained;
    72b2:	464b      	mov	r3, r9
    72b4:	4013      	ands	r3, r2
    72b6:	4391      	bics	r1, r2
    writeChar(&ptr, header.byte); /* write header */
    72b8:	4319      	orrs	r1, r3
    72ba:	a803      	add	r0, sp, #12
    72bc:	4b16      	ldr	r3, [pc, #88]	; (7318 <MQTTSerialize_publish+0xb4>)
    72be:	4798      	blx	r3

    ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    72c0:	0029      	movs	r1, r5
    72c2:	9803      	ldr	r0, [sp, #12]
    72c4:	4b15      	ldr	r3, [pc, #84]	; (731c <MQTTSerialize_publish+0xb8>)
    72c6:	4798      	blx	r3
    72c8:	9b03      	ldr	r3, [sp, #12]
    72ca:	469c      	mov	ip, r3
    72cc:	4460      	add	r0, ip
    72ce:	9003      	str	r0, [sp, #12]

    writeMQTTString(&ptr, topicName);
    72d0:	990e      	ldr	r1, [sp, #56]	; 0x38
    72d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    72d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    72d6:	a803      	add	r0, sp, #12
    72d8:	4d11      	ldr	r5, [pc, #68]	; (7320 <MQTTSerialize_publish+0xbc>)
    72da:	47a8      	blx	r5

    if (qos > 0) {
    72dc:	2e00      	cmp	r6, #0
    72de:	dd03      	ble.n	72e8 <MQTTSerialize_publish+0x84>
        writeInt(&ptr, packetid);
    72e0:	0021      	movs	r1, r4
    72e2:	a803      	add	r0, sp, #12
    72e4:	4b0f      	ldr	r3, [pc, #60]	; (7324 <MQTTSerialize_publish+0xc0>)
    72e6:	4798      	blx	r3
    }

    memcpy(ptr, payload, payloadlen);
    72e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    72ea:	9911      	ldr	r1, [sp, #68]	; 0x44
    72ec:	9803      	ldr	r0, [sp, #12]
    72ee:	4b0e      	ldr	r3, [pc, #56]	; (7328 <MQTTSerialize_publish+0xc4>)
    72f0:	4798      	blx	r3
    ptr += payloadlen;
    72f2:	9b03      	ldr	r3, [sp, #12]
    72f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    72f6:	4694      	mov	ip, r2
    72f8:	4463      	add	r3, ip

    rc = ptr - buf;
    72fa:	1bd8      	subs	r0, r3, r7

exit:
    return rc;
}
    72fc:	b004      	add	sp, #16
    72fe:	bc1c      	pop	{r2, r3, r4}
    7300:	4691      	mov	r9, r2
    7302:	469a      	mov	sl, r3
    7304:	46a3      	mov	fp, r4
    7306:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = MQTTPACKET_BUFFER_TOO_SHORT;
    7308:	2002      	movs	r0, #2
    730a:	4240      	negs	r0, r0
    return rc;
    730c:	e7f6      	b.n	72fc <MQTTSerialize_publish+0x98>
    730e:	46c0      	nop			; (mov r8, r8)
    7310:	0000723d 	.word	0x0000723d
    7314:	00007081 	.word	0x00007081
    7318:	000070e3 	.word	0x000070e3
    731c:	00006ff9 	.word	0x00006ff9
    7320:	00007151 	.word	0x00007151
    7324:	000070ef 	.word	0x000070ef
    7328:	000085b7 	.word	0x000085b7

0000732c <MQTTSerialize_ack>:
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char *buf, int buflen, unsigned char packettype, unsigned char dup,
                      unsigned short packetid)
{
    732c:	b530      	push	{r4, r5, lr}
    732e:	b083      	sub	sp, #12
    7330:	0004      	movs	r4, r0
    7332:	a806      	add	r0, sp, #24
    7334:	8805      	ldrh	r5, [r0, #0]
    MQTTHeader header = {0};
    int rc = 0;
    unsigned char *ptr = buf;
    7336:	9401      	str	r4, [sp, #4]

    if (buflen < 4) {
    7338:	2903      	cmp	r1, #3
    733a:	dd1e      	ble.n	737a <MQTTSerialize_ack+0x4e>
        rc = MQTTPACKET_BUFFER_TOO_SHORT;
        goto exit;
    }
    header.bits.type = packettype;
    733c:	210f      	movs	r1, #15
    733e:	4011      	ands	r1, r2
    header.bits.dup = dup;
    7340:	2001      	movs	r0, #1
    7342:	4003      	ands	r3, r0
    7344:	00db      	lsls	r3, r3, #3
    7346:	0109      	lsls	r1, r1, #4
    header.bits.qos = (packettype == PUBREL) ? 1 : 0;
    7348:	3a06      	subs	r2, #6
    734a:	4250      	negs	r0, r2
    734c:	4142      	adcs	r2, r0
    734e:	0052      	lsls	r2, r2, #1
    7350:	4319      	orrs	r1, r3
    writeChar(&ptr, header.byte); /* write header */
    7352:	4311      	orrs	r1, r2
    7354:	a801      	add	r0, sp, #4
    7356:	4b0a      	ldr	r3, [pc, #40]	; (7380 <MQTTSerialize_ack+0x54>)
    7358:	4798      	blx	r3

    ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
    735a:	2102      	movs	r1, #2
    735c:	9801      	ldr	r0, [sp, #4]
    735e:	4b09      	ldr	r3, [pc, #36]	; (7384 <MQTTSerialize_ack+0x58>)
    7360:	4798      	blx	r3
    7362:	9b01      	ldr	r3, [sp, #4]
    7364:	469c      	mov	ip, r3
    7366:	4460      	add	r0, ip
    7368:	9001      	str	r0, [sp, #4]
    writeInt(&ptr, packetid);
    736a:	0029      	movs	r1, r5
    736c:	a801      	add	r0, sp, #4
    736e:	4b06      	ldr	r3, [pc, #24]	; (7388 <MQTTSerialize_ack+0x5c>)
    7370:	4798      	blx	r3
    rc = ptr - buf;
    7372:	9b01      	ldr	r3, [sp, #4]
    7374:	1b18      	subs	r0, r3, r4
exit:
    return rc;
}
    7376:	b003      	add	sp, #12
    7378:	bd30      	pop	{r4, r5, pc}
        rc = MQTTPACKET_BUFFER_TOO_SHORT;
    737a:	2002      	movs	r0, #2
    737c:	4240      	negs	r0, r0
    return rc;
    737e:	e7fa      	b.n	7376 <MQTTSerialize_ack+0x4a>
    7380:	000070e3 	.word	0x000070e3
    7384:	00006ff9 	.word	0x00006ff9
    7388:	000070ef 	.word	0x000070ef

0000738c <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
    738c:	b5f0      	push	{r4, r5, r6, r7, lr}
    738e:	46c6      	mov	lr, r8
    7390:	b500      	push	{lr}
    7392:	1e07      	subs	r7, r0, #0
    int i;
    int len = 2; /* packetid */

    for (i = 0; i < count; ++i) {
    7394:	dd12      	ble.n	73bc <MQTTSerialize_subscribeLength+0x30>
    7396:	000c      	movs	r4, r1
    7398:	2602      	movs	r6, #2
    739a:	2500      	movs	r5, #0
        len += 2 + MQTTstrlen(topicFilters[i]) + 1;    /* length + topic + req_qos */
    739c:	4b08      	ldr	r3, [pc, #32]	; (73c0 <MQTTSerialize_subscribeLength+0x34>)
    739e:	4698      	mov	r8, r3
    73a0:	6820      	ldr	r0, [r4, #0]
    73a2:	6861      	ldr	r1, [r4, #4]
    73a4:	68a2      	ldr	r2, [r4, #8]
    73a6:	47c0      	blx	r8
    73a8:	3003      	adds	r0, #3
    73aa:	1836      	adds	r6, r6, r0
    for (i = 0; i < count; ++i) {
    73ac:	3501      	adds	r5, #1
    73ae:	340c      	adds	r4, #12
    73b0:	42af      	cmp	r7, r5
    73b2:	d1f5      	bne.n	73a0 <MQTTSerialize_subscribeLength+0x14>
    }
    return len;
}
    73b4:	0030      	movs	r0, r6
    73b6:	bc04      	pop	{r2}
    73b8:	4690      	mov	r8, r2
    73ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int len = 2; /* packetid */
    73bc:	2602      	movs	r6, #2
    return len;
    73be:	e7f9      	b.n	73b4 <MQTTSerialize_subscribeLength+0x28>
    73c0:	000071dd 	.word	0x000071dd

000073c4 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char *buf, int buflen, unsigned char dup, unsigned short packetid, int count,
                            MQTTString topicFilters[], char requestedQoSs[])
{
    73c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    73c6:	46ce      	mov	lr, r9
    73c8:	4647      	mov	r7, r8
    73ca:	b580      	push	{r7, lr}
    73cc:	b083      	sub	sp, #12
    73ce:	4681      	mov	r9, r0
    73d0:	000e      	movs	r6, r1
    73d2:	0017      	movs	r7, r2
    73d4:	001d      	movs	r5, r3
    unsigned char *ptr = buf;
    73d6:	9001      	str	r0, [sp, #4]
    MQTTHeader header = {0};
    int rem_len = 0;
    int rc = 0;
    int i = 0;

    if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen) {
    73d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    73da:	980a      	ldr	r0, [sp, #40]	; 0x28
    73dc:	4b20      	ldr	r3, [pc, #128]	; (7460 <MQTTSerialize_subscribe+0x9c>)
    73de:	4798      	blx	r3
    73e0:	0004      	movs	r4, r0
    73e2:	4b20      	ldr	r3, [pc, #128]	; (7464 <MQTTSerialize_subscribe+0xa0>)
    73e4:	4798      	blx	r3
    73e6:	42b0      	cmp	r0, r6
    73e8:	dc36      	bgt.n	7458 <MQTTSerialize_subscribe+0x94>
        rc = MQTTPACKET_BUFFER_TOO_SHORT;
        goto exit;
    }
    header.byte = 0;
    header.bits.type = SUBSCRIBE;
    header.bits.dup = dup;
    73ea:	2101      	movs	r1, #1
    73ec:	4039      	ands	r1, r7
    73ee:	00ca      	lsls	r2, r1, #3
    header.bits.qos = 1;
    73f0:	2180      	movs	r1, #128	; 0x80
    73f2:	4311      	orrs	r1, r2
    writeChar(&ptr, header.byte); /* write header */
    73f4:	2302      	movs	r3, #2
    73f6:	4319      	orrs	r1, r3
    73f8:	a801      	add	r0, sp, #4
    73fa:	4b1b      	ldr	r3, [pc, #108]	; (7468 <MQTTSerialize_subscribe+0xa4>)
    73fc:	4798      	blx	r3
    ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    73fe:	0021      	movs	r1, r4
    7400:	9801      	ldr	r0, [sp, #4]
    7402:	4b1a      	ldr	r3, [pc, #104]	; (746c <MQTTSerialize_subscribe+0xa8>)
    7404:	4798      	blx	r3
    7406:	9b01      	ldr	r3, [sp, #4]
    7408:	469c      	mov	ip, r3
    740a:	4460      	add	r0, ip
    740c:	9001      	str	r0, [sp, #4]

    writeInt(&ptr, packetid);
    740e:	0029      	movs	r1, r5
    7410:	a801      	add	r0, sp, #4
    7412:	4b17      	ldr	r3, [pc, #92]	; (7470 <MQTTSerialize_subscribe+0xac>)
    7414:	4798      	blx	r3
	char qoss=0x00;
    for (i = 0; i < count; ++i) {
    7416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7418:	2b00      	cmp	r3, #0
    741a:	dd15      	ble.n	7448 <MQTTSerialize_subscribe+0x84>
    741c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    741e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    7420:	002b      	movs	r3, r5
    7422:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7424:	4694      	mov	ip, r2
    7426:	4463      	add	r3, ip
    7428:	001e      	movs	r6, r3
        writeMQTTString(&ptr, topicFilters[i]);
    742a:	4b12      	ldr	r3, [pc, #72]	; (7474 <MQTTSerialize_subscribe+0xb0>)
    742c:	4698      	mov	r8, r3
        writeChar(&ptr, requestedQoSs[i]);
    742e:	4f0e      	ldr	r7, [pc, #56]	; (7468 <MQTTSerialize_subscribe+0xa4>)
        writeMQTTString(&ptr, topicFilters[i]);
    7430:	6821      	ldr	r1, [r4, #0]
    7432:	6862      	ldr	r2, [r4, #4]
    7434:	68a3      	ldr	r3, [r4, #8]
    7436:	a801      	add	r0, sp, #4
    7438:	47c0      	blx	r8
        writeChar(&ptr, requestedQoSs[i]);
    743a:	7829      	ldrb	r1, [r5, #0]
    743c:	a801      	add	r0, sp, #4
    743e:	47b8      	blx	r7
    7440:	340c      	adds	r4, #12
    7442:	3501      	adds	r5, #1
    for (i = 0; i < count; ++i) {
    7444:	42b5      	cmp	r5, r6
    7446:	d1f3      	bne.n	7430 <MQTTSerialize_subscribe+0x6c>
    }

    rc = ptr - buf;
    7448:	9b01      	ldr	r3, [sp, #4]
    744a:	464a      	mov	r2, r9
    744c:	1a98      	subs	r0, r3, r2
exit:
    return rc;
}
    744e:	b003      	add	sp, #12
    7450:	bc0c      	pop	{r2, r3}
    7452:	4690      	mov	r8, r2
    7454:	4699      	mov	r9, r3
    7456:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = MQTTPACKET_BUFFER_TOO_SHORT;
    7458:	2002      	movs	r0, #2
    745a:	4240      	negs	r0, r0
    return rc;
    745c:	e7f7      	b.n	744e <MQTTSerialize_subscribe+0x8a>
    745e:	46c0      	nop			; (mov r8, r8)
    7460:	0000738d 	.word	0x0000738d
    7464:	00007081 	.word	0x00007081
    7468:	000070e3 	.word	0x000070e3
    746c:	00006ff9 	.word	0x00006ff9
    7470:	000070ef 	.word	0x000070ef
    7474:	00007151 	.word	0x00007151

00007478 <MQTTDeserialize_suback>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short *packetid, int maxcount, int *count, int grantedQoSs[], unsigned char *buf,
                           int buflen)
{
    7478:	b5f0      	push	{r4, r5, r6, r7, lr}
    747a:	46ce      	mov	lr, r9
    747c:	4647      	mov	r7, r8
    747e:	b580      	push	{r7, lr}
    7480:	b083      	sub	sp, #12
    7482:	0004      	movs	r4, r0
    7484:	000e      	movs	r6, r1
    7486:	0015      	movs	r5, r2
    7488:	001f      	movs	r7, r3
    MQTTHeader header = {0};
    unsigned char *curdata = buf;
    748a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    748c:	9301      	str	r3, [sp, #4]
    unsigned char *enddata = NULL;
    int rc = 0;
    int mylen;

    header.byte = readChar(&curdata);
    748e:	a801      	add	r0, sp, #4
    7490:	4b1e      	ldr	r3, [pc, #120]	; (750c <MQTTDeserialize_suback+0x94>)
    7492:	4798      	blx	r3
    if (header.bits.type != SUBACK) {
    7494:	23f0      	movs	r3, #240	; 0xf0
    7496:	4003      	ands	r3, r0
    int rc = 0;
    7498:	2000      	movs	r0, #0
    if (header.bits.type != SUBACK) {
    749a:	2b90      	cmp	r3, #144	; 0x90
    749c:	d004      	beq.n	74a8 <MQTTDeserialize_suback+0x30>
    }

    rc = 1;
exit:
    return rc;
}
    749e:	b003      	add	sp, #12
    74a0:	bc0c      	pop	{r2, r3}
    74a2:	4690      	mov	r8, r2
    74a4:	4699      	mov	r9, r3
    74a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    74a8:	4669      	mov	r1, sp
    74aa:	9801      	ldr	r0, [sp, #4]
    74ac:	4b18      	ldr	r3, [pc, #96]	; (7510 <MQTTDeserialize_suback+0x98>)
    74ae:	4798      	blx	r3
    74b0:	9b01      	ldr	r3, [sp, #4]
    74b2:	181b      	adds	r3, r3, r0
    74b4:	9301      	str	r3, [sp, #4]
    enddata = curdata + mylen;
    74b6:	9a00      	ldr	r2, [sp, #0]
    if (enddata - curdata < 2) {
    74b8:	2a01      	cmp	r2, #1
    74ba:	ddf0      	ble.n	749e <MQTTDeserialize_suback+0x26>
    enddata = curdata + mylen;
    74bc:	4698      	mov	r8, r3
    74be:	4490      	add	r8, r2
    *packetid = readInt(&curdata);
    74c0:	a801      	add	r0, sp, #4
    74c2:	4b14      	ldr	r3, [pc, #80]	; (7514 <MQTTDeserialize_suback+0x9c>)
    74c4:	4798      	blx	r3
    74c6:	8020      	strh	r0, [r4, #0]
    *count = 0;
    74c8:	2300      	movs	r3, #0
    74ca:	602b      	str	r3, [r5, #0]
    while (curdata < enddata) {
    74cc:	9b01      	ldr	r3, [sp, #4]
    74ce:	4598      	cmp	r8, r3
    74d0:	d916      	bls.n	7500 <MQTTDeserialize_suback+0x88>
        if (*count >= maxcount) {
    74d2:	2e00      	cmp	r6, #0
    74d4:	dd16      	ble.n	7504 <MQTTDeserialize_suback+0x8c>
    74d6:	2300      	movs	r3, #0
        grantedQoSs[(*count)++] = readChar(&curdata);
    74d8:	4a0c      	ldr	r2, [pc, #48]	; (750c <MQTTDeserialize_suback+0x94>)
    74da:	4691      	mov	r9, r2
    74dc:	1c5a      	adds	r2, r3, #1
    74de:	602a      	str	r2, [r5, #0]
    74e0:	009b      	lsls	r3, r3, #2
    74e2:	18fc      	adds	r4, r7, r3
    74e4:	a801      	add	r0, sp, #4
    74e6:	47c8      	blx	r9
    74e8:	6020      	str	r0, [r4, #0]
    while (curdata < enddata) {
    74ea:	9b01      	ldr	r3, [sp, #4]
    74ec:	4598      	cmp	r8, r3
    74ee:	d905      	bls.n	74fc <MQTTDeserialize_suback+0x84>
        if (*count >= maxcount) {
    74f0:	682b      	ldr	r3, [r5, #0]
    74f2:	42b3      	cmp	r3, r6
    74f4:	dbf2      	blt.n	74dc <MQTTDeserialize_suback+0x64>
            rc = -1;
    74f6:	2001      	movs	r0, #1
    74f8:	4240      	negs	r0, r0
    return rc;
    74fa:	e7d0      	b.n	749e <MQTTDeserialize_suback+0x26>
    rc = 1;
    74fc:	2001      	movs	r0, #1
    74fe:	e7ce      	b.n	749e <MQTTDeserialize_suback+0x26>
    7500:	2001      	movs	r0, #1
    7502:	e7cc      	b.n	749e <MQTTDeserialize_suback+0x26>
            rc = -1;
    7504:	2001      	movs	r0, #1
    7506:	4240      	negs	r0, r0
    7508:	e7c9      	b.n	749e <MQTTDeserialize_suback+0x26>
    750a:	46c0      	nop			; (mov r8, r8)
    750c:	000070d7 	.word	0x000070d7
    7510:	000070a9 	.word	0x000070a9
    7514:	000070c5 	.word	0x000070c5

00007518 <MQTTDeserialize_unsuback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_unsuback(unsigned short* packetid, unsigned char* buf, int buflen)
{
    7518:	b530      	push	{r4, r5, lr}
    751a:	b085      	sub	sp, #20
    751c:	000b      	movs	r3, r1
	unsigned char type = 0;
    751e:	240f      	movs	r4, #15
    7520:	446c      	add	r4, sp
    7522:	2500      	movs	r5, #0
    7524:	7025      	strb	r5, [r4, #0]
	unsigned char dup = 0;
    7526:	210e      	movs	r1, #14
    7528:	4469      	add	r1, sp
    752a:	700d      	strb	r5, [r1, #0]
	int rc = 0;

	rc = MQTTDeserialize_ack(&type, &dup, packetid, buf, buflen);
    752c:	9200      	str	r2, [sp, #0]
    752e:	0002      	movs	r2, r0
    7530:	0020      	movs	r0, r4
    7532:	4d04      	ldr	r5, [pc, #16]	; (7544 <MQTTDeserialize_unsuback+0x2c>)
    7534:	47a8      	blx	r5
	if (type == UNSUBACK)
    7536:	7823      	ldrb	r3, [r4, #0]
    7538:	2b0b      	cmp	r3, #11
    753a:	d001      	beq.n	7540 <MQTTDeserialize_unsuback+0x28>
		rc = 1;
	return rc;
}
    753c:	b005      	add	sp, #20
    753e:	bd30      	pop	{r4, r5, pc}
		rc = 1;
    7540:	2001      	movs	r0, #1
	return rc;
    7542:	e7fb      	b.n	753c <MQTTDeserialize_unsuback+0x24>
    7544:	00006f89 	.word	0x00006f89

00007548 <iotx_mqtt_offline_subscribe>:

static int iotx_mqtt_offline_subscribe(const char *topic_filter,
                                       iotx_mqtt_qos_t qos,
                                       iotx_mqtt_event_handle_func_fpt topic_handle_func,
                                       void *pcontext)
{
    7548:	b5f0      	push	{r4, r5, r6, r7, lr}
    754a:	46ce      	mov	lr, r9
    754c:	b500      	push	{lr}
    754e:	b082      	sub	sp, #8
    7550:	0005      	movs	r5, r0
    7552:	9100      	str	r1, [sp, #0]
    7554:	0016      	movs	r6, r2
    7556:	9301      	str	r3, [sp, #4]
    int ret;
    iotx_mc_offline_subs_t *sub_info;

    if (topic_filter == NULL || topic_handle_func == NULL) {
    7558:	2800      	cmp	r0, #0
    755a:	d066      	beq.n	762a <iotx_mqtt_offline_subscribe+0xe2>
    755c:	2a00      	cmp	r2, #0
    755e:	d067      	beq.n	7630 <iotx_mqtt_offline_subscribe+0xe8>
    if (_mqtt_offline_subs_list != NULL) {
    7560:	4b36      	ldr	r3, [pc, #216]	; (763c <iotx_mqtt_offline_subscribe+0xf4>)
    7562:	681b      	ldr	r3, [r3, #0]
    7564:	2b00      	cmp	r3, #0
    7566:	d03f      	beq.n	75e8 <iotx_mqtt_offline_subscribe+0xa0>
    ret = _offline_subs_list_init();

    if (ret != 0) {
        return ret;
    }
    sub_info = mqtt_api_malloc(sizeof(iotx_mc_offline_subs_t));
    7568:	2018      	movs	r0, #24
    756a:	4b35      	ldr	r3, [pc, #212]	; (7640 <iotx_mqtt_offline_subscribe+0xf8>)
    756c:	4798      	blx	r3
    756e:	1e04      	subs	r4, r0, #0
    if (sub_info == NULL) {
    7570:	d061      	beq.n	7636 <iotx_mqtt_offline_subscribe+0xee>
        return ERROR_MALLOC;
    }

    memset(sub_info, 0, sizeof(iotx_mc_offline_subs_t));
    7572:	2218      	movs	r2, #24
    7574:	2100      	movs	r1, #0
    7576:	0020      	movs	r0, r4
    7578:	4b32      	ldr	r3, [pc, #200]	; (7644 <iotx_mqtt_offline_subscribe+0xfc>)
    757a:	4798      	blx	r3
    sub_info->topic_filter = mqtt_api_malloc(strlen(topic_filter) + 1);
    757c:	0028      	movs	r0, r5
    757e:	4b32      	ldr	r3, [pc, #200]	; (7648 <iotx_mqtt_offline_subscribe+0x100>)
    7580:	4798      	blx	r3
    7582:	3001      	adds	r0, #1
    7584:	4b2e      	ldr	r3, [pc, #184]	; (7640 <iotx_mqtt_offline_subscribe+0xf8>)
    7586:	4798      	blx	r3
    7588:	4681      	mov	r9, r0
    758a:	6020      	str	r0, [r4, #0]
    if (sub_info->topic_filter == NULL) {
    758c:	2800      	cmp	r0, #0
    758e:	d047      	beq.n	7620 <iotx_mqtt_offline_subscribe+0xd8>
        mqtt_api_free(sub_info);
        return ERROR_MALLOC;
    }
    memset(sub_info->topic_filter, 0, strlen(topic_filter) + 1);
    7590:	0028      	movs	r0, r5
    7592:	4f2d      	ldr	r7, [pc, #180]	; (7648 <iotx_mqtt_offline_subscribe+0x100>)
    7594:	47b8      	blx	r7
    7596:	1c42      	adds	r2, r0, #1
    7598:	2100      	movs	r1, #0
    759a:	4648      	mov	r0, r9
    759c:	4b29      	ldr	r3, [pc, #164]	; (7644 <iotx_mqtt_offline_subscribe+0xfc>)
    759e:	4798      	blx	r3
    strncpy(sub_info->topic_filter, topic_filter, strlen(topic_filter));
    75a0:	0028      	movs	r0, r5
    75a2:	47b8      	blx	r7
    75a4:	0002      	movs	r2, r0
    75a6:	0029      	movs	r1, r5
    75a8:	6820      	ldr	r0, [r4, #0]
    75aa:	4b28      	ldr	r3, [pc, #160]	; (764c <iotx_mqtt_offline_subscribe+0x104>)
    75ac:	4798      	blx	r3
    sub_info->qos = qos;
    75ae:	466b      	mov	r3, sp
    75b0:	781b      	ldrb	r3, [r3, #0]
    75b2:	7323      	strb	r3, [r4, #12]
    sub_info->handle = topic_handle_func;
    75b4:	6066      	str	r6, [r4, #4]
    sub_info->user_data = pcontext;
    75b6:	9b01      	ldr	r3, [sp, #4]
    75b8:	60a3      	str	r3, [r4, #8]
    INIT_LIST_HEAD(&sub_info->linked_list);
    75ba:	0025      	movs	r5, r4
    75bc:	3510      	adds	r5, #16
    list->next = list;
    75be:	6165      	str	r5, [r4, #20]
    list->prev = list;
    75c0:	6125      	str	r5, [r4, #16]

    HAL_MutexLock(_mqtt_offline_subs_list->mutex);
    75c2:	4e1e      	ldr	r6, [pc, #120]	; (763c <iotx_mqtt_offline_subscribe+0xf4>)
    75c4:	6833      	ldr	r3, [r6, #0]
    75c6:	6898      	ldr	r0, [r3, #8]
    75c8:	4b21      	ldr	r3, [pc, #132]	; (7650 <iotx_mqtt_offline_subscribe+0x108>)
    75ca:	4798      	blx	r3
    list_add_tail(&sub_info->linked_list, &_mqtt_offline_subs_list->offline_sub_list);
    75cc:	6833      	ldr	r3, [r6, #0]
    __dlist_add(node, queue->prev, queue);
    75ce:	681a      	ldr	r2, [r3, #0]
    node->next = next;
    75d0:	6163      	str	r3, [r4, #20]
    node->prev = prev;
    75d2:	6122      	str	r2, [r4, #16]
    prev->next = node;
    75d4:	6055      	str	r5, [r2, #4]
    next->prev = node;
    75d6:	601d      	str	r5, [r3, #0]
    HAL_MutexUnlock(_mqtt_offline_subs_list->mutex);
    75d8:	6898      	ldr	r0, [r3, #8]
    75da:	4b1e      	ldr	r3, [pc, #120]	; (7654 <iotx_mqtt_offline_subscribe+0x10c>)
    75dc:	4798      	blx	r3

    return 0;
    75de:	2000      	movs	r0, #0
}
    75e0:	b002      	add	sp, #8
    75e2:	bc04      	pop	{r2}
    75e4:	4691      	mov	r9, r2
    75e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _mqtt_offline_subs_list = mqtt_api_malloc(sizeof(offline_sub_list_t));
    75e8:	200c      	movs	r0, #12
    75ea:	4b15      	ldr	r3, [pc, #84]	; (7640 <iotx_mqtt_offline_subscribe+0xf8>)
    75ec:	4798      	blx	r3
    75ee:	1e04      	subs	r4, r0, #0
    75f0:	4b12      	ldr	r3, [pc, #72]	; (763c <iotx_mqtt_offline_subscribe+0xf4>)
    75f2:	6018      	str	r0, [r3, #0]
    if (_mqtt_offline_subs_list == NULL) {
    75f4:	d012      	beq.n	761c <iotx_mqtt_offline_subscribe+0xd4>
    memset(_mqtt_offline_subs_list, 0, sizeof(offline_sub_list_t));
    75f6:	220c      	movs	r2, #12
    75f8:	2100      	movs	r1, #0
    75fa:	4b12      	ldr	r3, [pc, #72]	; (7644 <iotx_mqtt_offline_subscribe+0xfc>)
    75fc:	4798      	blx	r3
    list->next = list;
    75fe:	6064      	str	r4, [r4, #4]
    list->prev = list;
    7600:	6024      	str	r4, [r4, #0]
    _mqtt_offline_subs_list->mutex = HAL_MutexCreate();
    7602:	4b15      	ldr	r3, [pc, #84]	; (7658 <iotx_mqtt_offline_subscribe+0x110>)
    7604:	4798      	blx	r3
    7606:	60a0      	str	r0, [r4, #8]
    if (_mqtt_offline_subs_list->mutex == NULL) {
    7608:	4b0c      	ldr	r3, [pc, #48]	; (763c <iotx_mqtt_offline_subscribe+0xf4>)
    760a:	6818      	ldr	r0, [r3, #0]
    760c:	6883      	ldr	r3, [r0, #8]
    760e:	2b00      	cmp	r3, #0
    7610:	d1aa      	bne.n	7568 <iotx_mqtt_offline_subscribe+0x20>
        mqtt_api_free(_mqtt_offline_subs_list);
    7612:	4b12      	ldr	r3, [pc, #72]	; (765c <iotx_mqtt_offline_subscribe+0x114>)
    7614:	4798      	blx	r3
    7616:	2200      	movs	r2, #0
    7618:	4b08      	ldr	r3, [pc, #32]	; (763c <iotx_mqtt_offline_subscribe+0xf4>)
    761a:	601a      	str	r2, [r3, #0]
        return NULL_VALUE_ERROR;
    761c:	4810      	ldr	r0, [pc, #64]	; (7660 <iotx_mqtt_offline_subscribe+0x118>)
    761e:	e7df      	b.n	75e0 <iotx_mqtt_offline_subscribe+0x98>
        mqtt_api_free(sub_info);
    7620:	0020      	movs	r0, r4
    7622:	4b0e      	ldr	r3, [pc, #56]	; (765c <iotx_mqtt_offline_subscribe+0x114>)
    7624:	4798      	blx	r3
        return ERROR_MALLOC;
    7626:	480e      	ldr	r0, [pc, #56]	; (7660 <iotx_mqtt_offline_subscribe+0x118>)
    7628:	e7da      	b.n	75e0 <iotx_mqtt_offline_subscribe+0x98>
        return NULL_VALUE_ERROR;
    762a:	2002      	movs	r0, #2
    762c:	4240      	negs	r0, r0
    762e:	e7d7      	b.n	75e0 <iotx_mqtt_offline_subscribe+0x98>
    7630:	2002      	movs	r0, #2
    7632:	4240      	negs	r0, r0
    7634:	e7d4      	b.n	75e0 <iotx_mqtt_offline_subscribe+0x98>
        return ERROR_MALLOC;
    7636:	480a      	ldr	r0, [pc, #40]	; (7660 <iotx_mqtt_offline_subscribe+0x118>)
    7638:	e7d2      	b.n	75e0 <iotx_mqtt_offline_subscribe+0x98>
    763a:	46c0      	nop			; (mov r8, r8)
    763c:	20000a0c 	.word	0x20000a0c
    7640:	00007d1d 	.word	0x00007d1d
    7644:	000085c9 	.word	0x000085c9
    7648:	00008991 	.word	0x00008991
    764c:	000089c1 	.word	0x000089c1
    7650:	00007d2f 	.word	0x00007d2f
    7654:	00007d31 	.word	0x00007d31
    7658:	00007d29 	.word	0x00007d29
    765c:	00007c5d 	.word	0x00007c5d
    7660:	fffffc0a 	.word	0xfffffc0a

00007664 <IOT_MQTT_Publish_Simple>:
    rc = wrapper_mqtt_publish(client, topic_name, topic_msg);
    return rc;
}

int IOT_MQTT_Publish_Simple(void *handle, const char *topic_name, int qos, void *data, int len)
{
    7664:	b5f0      	push	{r4, r5, r6, r7, lr}
    7666:	46c6      	mov	lr, r8
    7668:	b500      	push	{lr}
    766a:	b086      	sub	sp, #24
    766c:	0006      	movs	r6, r0
    766e:	000d      	movs	r5, r1
    7670:	4690      	mov	r8, r2
    7672:	001f      	movs	r7, r3
    iotx_mqtt_topic_info_t mqtt_msg;
    void *client = handle ? handle : g_mqtt_client;
    7674:	2800      	cmp	r0, #0
    7676:	d01a      	beq.n	76ae <IOT_MQTT_Publish_Simple+0x4a>
    int rc = -1;

    if (client == NULL || topic_name == NULL || strlen(topic_name) == 0) {
    7678:	2d00      	cmp	r5, #0
    767a:	d01c      	beq.n	76b6 <IOT_MQTT_Publish_Simple+0x52>
    767c:	782b      	ldrb	r3, [r5, #0]
    767e:	2b00      	cmp	r3, #0
    7680:	d019      	beq.n	76b6 <IOT_MQTT_Publish_Simple+0x52>
        mqtt_err("params err");
        return NULL_VALUE_ERROR;
    }

    memset(&mqtt_msg, 0x0, sizeof(iotx_mqtt_topic_info_t));
    7682:	ac01      	add	r4, sp, #4
    7684:	2214      	movs	r2, #20
    7686:	2100      	movs	r1, #0
    7688:	0020      	movs	r0, r4
    768a:	4b13      	ldr	r3, [pc, #76]	; (76d8 <IOT_MQTT_Publish_Simple+0x74>)
    768c:	4798      	blx	r3

    mqtt_msg.qos         = qos;
    768e:	4643      	mov	r3, r8
    7690:	70a3      	strb	r3, [r4, #2]
    mqtt_msg.retain      = 0;
    mqtt_msg.dup         = 0;
    mqtt_msg.payload     = (void *)data;
    7692:	6127      	str	r7, [r4, #16]
    mqtt_msg.payload_len = len;
    7694:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7696:	60a3      	str	r3, [r4, #8]

    rc = wrapper_mqtt_publish(client, topic_name, &mqtt_msg);
    7698:	0022      	movs	r2, r4
    769a:	0029      	movs	r1, r5
    769c:	0030      	movs	r0, r6
    769e:	4b0f      	ldr	r3, [pc, #60]	; (76dc <IOT_MQTT_Publish_Simple+0x78>)
    76a0:	4798      	blx	r3

    if (rc < 0) {
    76a2:	2800      	cmp	r0, #0
    76a4:	db0f      	blt.n	76c6 <IOT_MQTT_Publish_Simple+0x62>
        mqtt_err("IOT_MQTT_Publish failed\n");
        return -1;
    }

    return rc;
}
    76a6:	b006      	add	sp, #24
    76a8:	bc04      	pop	{r2}
    76aa:	4690      	mov	r8, r2
    76ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    void *client = handle ? handle : g_mqtt_client;
    76ae:	4b0c      	ldr	r3, [pc, #48]	; (76e0 <IOT_MQTT_Publish_Simple+0x7c>)
    76b0:	685e      	ldr	r6, [r3, #4]
    if (client == NULL || topic_name == NULL || strlen(topic_name) == 0) {
    76b2:	2e00      	cmp	r6, #0
    76b4:	d1e0      	bne.n	7678 <IOT_MQTT_Publish_Simple+0x14>
        mqtt_err("params err");
    76b6:	480b      	ldr	r0, [pc, #44]	; (76e4 <IOT_MQTT_Publish_Simple+0x80>)
    76b8:	4c0b      	ldr	r4, [pc, #44]	; (76e8 <IOT_MQTT_Publish_Simple+0x84>)
    76ba:	47a0      	blx	r4
    76bc:	480b      	ldr	r0, [pc, #44]	; (76ec <IOT_MQTT_Publish_Simple+0x88>)
    76be:	47a0      	blx	r4
        return NULL_VALUE_ERROR;
    76c0:	2002      	movs	r0, #2
    76c2:	4240      	negs	r0, r0
    76c4:	e7ef      	b.n	76a6 <IOT_MQTT_Publish_Simple+0x42>
        mqtt_err("IOT_MQTT_Publish failed\n");
    76c6:	480a      	ldr	r0, [pc, #40]	; (76f0 <IOT_MQTT_Publish_Simple+0x8c>)
    76c8:	4c07      	ldr	r4, [pc, #28]	; (76e8 <IOT_MQTT_Publish_Simple+0x84>)
    76ca:	47a0      	blx	r4
    76cc:	4807      	ldr	r0, [pc, #28]	; (76ec <IOT_MQTT_Publish_Simple+0x88>)
    76ce:	47a0      	blx	r4
        return -1;
    76d0:	2001      	movs	r0, #1
    76d2:	4240      	negs	r0, r0
    76d4:	e7e7      	b.n	76a6 <IOT_MQTT_Publish_Simple+0x42>
    76d6:	46c0      	nop			; (mov r8, r8)
    76d8:	000085c9 	.word	0x000085c9
    76dc:	00006b75 	.word	0x00006b75
    76e0:	20000a0c 	.word	0x20000a0c
    76e4:	0000b520 	.word	0x0000b520
    76e8:	00007d35 	.word	0x00007d35
    76ec:	00009cb4 	.word	0x00009cb4
    76f0:	0000b52c 	.word	0x0000b52c

000076f4 <IOT_MQTT_Construct>:
{
    76f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    76f6:	46ce      	mov	lr, r9
    76f8:	b500      	push	{lr}
    76fa:	b0b4      	sub	sp, #208	; 0xd0
    76fc:	1e04      	subs	r4, r0, #0
    if (pInitParams == NULL) {
    76fe:	d025      	beq.n	774c <IOT_MQTT_Construct+0x58>
    if (pInitParams->host == NULL || pInitParams->client_id == NULL ||
    7700:	6843      	ldr	r3, [r0, #4]
    7702:	2b00      	cmp	r3, #0
    7704:	d100      	bne.n	7708 <IOT_MQTT_Construct+0x14>
    7706:	e131      	b.n	796c <IOT_MQTT_Construct+0x278>
    7708:	6882      	ldr	r2, [r0, #8]
    770a:	2a00      	cmp	r2, #0
    770c:	d100      	bne.n	7710 <IOT_MQTT_Construct+0x1c>
    770e:	e13b      	b.n	7988 <IOT_MQTT_Construct+0x294>
    iotx_mqtt_param_t *mqtt_params = NULL;
    7710:	2500      	movs	r5, #0
    if (pInitParams->host == NULL || pInitParams->client_id == NULL ||
    7712:	68e2      	ldr	r2, [r4, #12]
    7714:	2a00      	cmp	r2, #0
    7716:	d009      	beq.n	772c <IOT_MQTT_Construct+0x38>
        pInitParams->username == NULL || pInitParams->password == NULL ||
    7718:	6922      	ldr	r2, [r4, #16]
    771a:	2a00      	cmp	r2, #0
    771c:	d006      	beq.n	772c <IOT_MQTT_Construct+0x38>
    771e:	8822      	ldrh	r2, [r4, #0]
    7720:	2a00      	cmp	r2, #0
    7722:	d003      	beq.n	772c <IOT_MQTT_Construct+0x38>
        pInitParams->port == 0 || !strlen(pInitParams->host)) {
    7724:	781b      	ldrb	r3, [r3, #0]
    7726:	2b00      	cmp	r3, #0
    7728:	d000      	beq.n	772c <IOT_MQTT_Construct+0x38>
    772a:	e06f      	b.n	780c <IOT_MQTT_Construct+0x118>
        mqtt_err("init params is not complete");
    772c:	489a      	ldr	r0, [pc, #616]	; (7998 <IOT_MQTT_Construct+0x2a4>)
    772e:	4c9b      	ldr	r4, [pc, #620]	; (799c <IOT_MQTT_Construct+0x2a8>)
    7730:	47a0      	blx	r4
    7732:	489b      	ldr	r0, [pc, #620]	; (79a0 <IOT_MQTT_Construct+0x2ac>)
    7734:	47a0      	blx	r4
        if (mqtt_params != NULL) {
    7736:	2d00      	cmp	r5, #0
    7738:	d100      	bne.n	773c <IOT_MQTT_Construct+0x48>
    773a:	e10e      	b.n	795a <IOT_MQTT_Construct+0x266>
            mqtt_api_free(mqtt_params);
    773c:	0028      	movs	r0, r5
    773e:	4b99      	ldr	r3, [pc, #612]	; (79a4 <IOT_MQTT_Construct+0x2b0>)
    7740:	4798      	blx	r3
        return NULL;
    7742:	2000      	movs	r0, #0
}
    7744:	b034      	add	sp, #208	; 0xd0
    7746:	bc04      	pop	{r2}
    7748:	4691      	mov	r9, r2
    774a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (g_mqtt_client != NULL) {
    774c:	4b96      	ldr	r3, [pc, #600]	; (79a8 <IOT_MQTT_Construct+0x2b4>)
    774e:	685b      	ldr	r3, [r3, #4]
    7750:	2b00      	cmp	r3, #0
    7752:	d001      	beq.n	7758 <IOT_MQTT_Construct+0x64>
            return NULL;
    7754:	2000      	movs	r0, #0
    7756:	e7f5      	b.n	7744 <IOT_MQTT_Construct+0x50>
        mqtt_params = (iotx_mqtt_param_t *)mqtt_api_malloc(sizeof(iotx_mqtt_param_t));
    7758:	2034      	movs	r0, #52	; 0x34
    775a:	4b94      	ldr	r3, [pc, #592]	; (79ac <IOT_MQTT_Construct+0x2b8>)
    775c:	4798      	blx	r3
    775e:	1e04      	subs	r4, r0, #0
        if (mqtt_params == NULL) {
    7760:	d0f8      	beq.n	7754 <IOT_MQTT_Construct+0x60>
        memset(&meta, 0, sizeof(iotx_dev_meta_info_t));
    7762:	22b8      	movs	r2, #184	; 0xb8
    7764:	2100      	movs	r1, #0
    7766:	a805      	add	r0, sp, #20
    7768:	4e91      	ldr	r6, [pc, #580]	; (79b0 <IOT_MQTT_Construct+0x2bc>)
    776a:	47b0      	blx	r6
        memset(&g_sign_mqtt, 0, sizeof(iotx_sign_mqtt_t));
    776c:	4d8e      	ldr	r5, [pc, #568]	; (79a8 <IOT_MQTT_Construct+0x2b4>)
    776e:	3508      	adds	r5, #8
    7770:	27c6      	movs	r7, #198	; 0xc6
    7772:	007f      	lsls	r7, r7, #1
    7774:	003a      	movs	r2, r7
    7776:	2100      	movs	r1, #0
    7778:	0028      	movs	r0, r5
    777a:	47b0      	blx	r6
        HAL_GetProductKey(meta.product_key);
    777c:	a805      	add	r0, sp, #20
    777e:	4b8d      	ldr	r3, [pc, #564]	; (79b4 <IOT_MQTT_Construct+0x2c0>)
    7780:	4798      	blx	r3
        HAL_GetDeviceName(meta.device_name);
    7782:	2062      	movs	r0, #98	; 0x62
    7784:	ab02      	add	r3, sp, #8
    7786:	469c      	mov	ip, r3
    7788:	4460      	add	r0, ip
    778a:	4b8b      	ldr	r3, [pc, #556]	; (79b8 <IOT_MQTT_Construct+0x2c4>)
    778c:	4798      	blx	r3
        HAL_GetDeviceSecret(meta.device_secret);
    778e:	2083      	movs	r0, #131	; 0x83
    7790:	ab02      	add	r3, sp, #8
    7792:	469c      	mov	ip, r3
    7794:	4460      	add	r0, ip
    7796:	4b89      	ldr	r3, [pc, #548]	; (79bc <IOT_MQTT_Construct+0x2c8>)
    7798:	4798      	blx	r3
        memset(&g_sign_mqtt, 0, sizeof(iotx_sign_mqtt_t));
    779a:	003a      	movs	r2, r7
    779c:	2100      	movs	r1, #0
    779e:	0028      	movs	r0, r5
    77a0:	47b0      	blx	r6
        ret = IOT_Sign_MQTT(IOTX_CLOUD_REGION_SHANGHAI, &meta, &g_sign_mqtt);
    77a2:	002a      	movs	r2, r5
    77a4:	a905      	add	r1, sp, #20
    77a6:	2000      	movs	r0, #0
    77a8:	4b85      	ldr	r3, [pc, #532]	; (79c0 <IOT_MQTT_Construct+0x2cc>)
    77aa:	4798      	blx	r3
        if (ret != SUCCESS_RETURN) {
    77ac:	2800      	cmp	r0, #0
    77ae:	d129      	bne.n	7804 <IOT_MQTT_Construct+0x110>
        memset(mqtt_params, 0x0, sizeof(iotx_mqtt_param_t));
    77b0:	2234      	movs	r2, #52	; 0x34
    77b2:	2100      	movs	r1, #0
    77b4:	0020      	movs	r0, r4
    77b6:	4b7e      	ldr	r3, [pc, #504]	; (79b0 <IOT_MQTT_Construct+0x2bc>)
    77b8:	4798      	blx	r3
        mqtt_params->port = g_sign_mqtt.port;
    77ba:	4a7b      	ldr	r2, [pc, #492]	; (79a8 <IOT_MQTT_Construct+0x2b4>)
    77bc:	2348      	movs	r3, #72	; 0x48
    77be:	5ad3      	ldrh	r3, [r2, r3]
    77c0:	8023      	strh	r3, [r4, #0]
        mqtt_params->host = g_sign_mqtt.hostname;
    77c2:	0013      	movs	r3, r2
    77c4:	3308      	adds	r3, #8
    77c6:	6063      	str	r3, [r4, #4]
        mqtt_params->client_id = g_sign_mqtt.clientid;
    77c8:	0011      	movs	r1, r2
    77ca:	314a      	adds	r1, #74	; 0x4a
    77cc:	60a1      	str	r1, [r4, #8]
        mqtt_params->username = g_sign_mqtt.username;
    77ce:	31c8      	adds	r1, #200	; 0xc8
    77d0:	60e1      	str	r1, [r4, #12]
        mqtt_params->password = g_sign_mqtt.password;
    77d2:	3253      	adds	r2, #83	; 0x53
    77d4:	32ff      	adds	r2, #255	; 0xff
    77d6:	6122      	str	r2, [r4, #16]
        mqtt_params->request_timeout_ms    = 2000;
    77d8:	22fa      	movs	r2, #250	; 0xfa
    77da:	00d2      	lsls	r2, r2, #3
    77dc:	61e2      	str	r2, [r4, #28]
        mqtt_params->clean_session         = 0;
    77de:	2200      	movs	r2, #0
    77e0:	7622      	strb	r2, [r4, #24]
        mqtt_params->keepalive_interval_ms = 60000;
    77e2:	4978      	ldr	r1, [pc, #480]	; (79c4 <IOT_MQTT_Construct+0x2d0>)
    77e4:	6221      	str	r1, [r4, #32]
        mqtt_params->read_buf_size         = MQTT_DEFAULT_MSG_LEN;
    77e6:	2180      	movs	r1, #128	; 0x80
    77e8:	00c9      	lsls	r1, r1, #3
    77ea:	62a1      	str	r1, [r4, #40]	; 0x28
        mqtt_params->write_buf_size        = MQTT_DEFAULT_MSG_LEN;
    77ec:	6261      	str	r1, [r4, #36]	; 0x24
        mqtt_params->handle_event.h_fp     = NULL;
    77ee:	62e2      	str	r2, [r4, #44]	; 0x2c
        mqtt_params->handle_event.pcontext = NULL;
    77f0:	6322      	str	r2, [r4, #48]	; 0x30
    if (pInitParams->host == NULL || pInitParams->client_id == NULL ||
    77f2:	2b00      	cmp	r3, #0
    77f4:	d100      	bne.n	77f8 <IOT_MQTT_Construct+0x104>
    77f6:	e0b2      	b.n	795e <IOT_MQTT_Construct+0x26a>
    77f8:	68a2      	ldr	r2, [r4, #8]
    77fa:	2a00      	cmp	r2, #0
    77fc:	d100      	bne.n	7800 <IOT_MQTT_Construct+0x10c>
    77fe:	e0bc      	b.n	797a <IOT_MQTT_Construct+0x286>
        mqtt_params = (iotx_mqtt_param_t *)mqtt_api_malloc(sizeof(iotx_mqtt_param_t));
    7800:	0025      	movs	r5, r4
    7802:	e786      	b.n	7712 <IOT_MQTT_Construct+0x1e>
            mqtt_api_free(mqtt_params);
    7804:	0020      	movs	r0, r4
    7806:	4b67      	ldr	r3, [pc, #412]	; (79a4 <IOT_MQTT_Construct+0x2b0>)
    7808:	4798      	blx	r3
            return NULL;
    780a:	e7a3      	b.n	7754 <IOT_MQTT_Construct+0x60>
    pclient = wrapper_mqtt_init(pInitParams);
    780c:	0020      	movs	r0, r4
    780e:	4b6e      	ldr	r3, [pc, #440]	; (79c8 <IOT_MQTT_Construct+0x2d4>)
    7810:	4798      	blx	r3
    7812:	9033      	str	r0, [sp, #204]	; 0xcc
    if (pclient == NULL) {
    7814:	2800      	cmp	r0, #0
    7816:	d07d      	beq.n	7914 <IOT_MQTT_Construct+0x220>
    err = wrapper_mqtt_connect(pclient);
    7818:	9833      	ldr	r0, [sp, #204]	; 0xcc
    781a:	4b6c      	ldr	r3, [pc, #432]	; (79cc <IOT_MQTT_Construct+0x2d8>)
    781c:	4798      	blx	r3
    if (SUCCESS_RETURN != err) {
    781e:	2800      	cmp	r0, #0
    7820:	d001      	beq.n	7826 <IOT_MQTT_Construct+0x132>
		if (MQTT_CONNECT_BLOCK != err) {
    7822:	302c      	adds	r0, #44	; 0x2c
    7824:	d17d      	bne.n	7922 <IOT_MQTT_Construct+0x22e>
    iotx_mqtt_report_funcs(pclient);
    7826:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    7828:	9303      	str	r3, [sp, #12]
    if (_mqtt_offline_subs_list == NULL) {
    782a:	4b5f      	ldr	r3, [pc, #380]	; (79a8 <IOT_MQTT_Construct+0x2b4>)
    782c:	681b      	ldr	r3, [r3, #0]
    782e:	2b00      	cmp	r3, #0
    7830:	d05a      	beq.n	78e8 <IOT_MQTT_Construct+0x1f4>
    HAL_MutexLock(_mqtt_offline_subs_list->mutex);
    7832:	6898      	ldr	r0, [r3, #8]
    7834:	4b66      	ldr	r3, [pc, #408]	; (79d0 <IOT_MQTT_Construct+0x2dc>)
    7836:	4798      	blx	r3
    list_for_each_entry_safe(node, next_node, &_mqtt_offline_subs_list->offline_sub_list, linked_list,
    7838:	4b5b      	ldr	r3, [pc, #364]	; (79a8 <IOT_MQTT_Construct+0x2b4>)
    783a:	681b      	ldr	r3, [r3, #0]
    783c:	685a      	ldr	r2, [r3, #4]
    783e:	0014      	movs	r4, r2
    7840:	6855      	ldr	r5, [r2, #4]
    7842:	3c10      	subs	r4, #16
    7844:	3d10      	subs	r5, #16
    7846:	4293      	cmp	r3, r2
    7848:	d01d      	beq.n	7886 <IOT_MQTT_Construct+0x192>
        wrapper_mqtt_subscribe(client, node->topic_filter, node->qos, node->handle, node->user_data);
    784a:	4b62      	ldr	r3, [pc, #392]	; (79d4 <IOT_MQTT_Construct+0x2e0>)
    784c:	4699      	mov	r9, r3
        mqtt_api_free(node->topic_filter);
    784e:	4f55      	ldr	r7, [pc, #340]	; (79a4 <IOT_MQTT_Construct+0x2b0>)
    list_for_each_entry_safe(node, next_node, &_mqtt_offline_subs_list->offline_sub_list, linked_list,
    7850:	4e55      	ldr	r6, [pc, #340]	; (79a8 <IOT_MQTT_Construct+0x2b4>)
    dlist_t *prev = node->prev;
    7852:	6922      	ldr	r2, [r4, #16]
    dlist_t *next = node->next;
    7854:	6963      	ldr	r3, [r4, #20]
    prev->next = next;
    7856:	6053      	str	r3, [r2, #4]
    next->prev = prev;
    7858:	601a      	str	r2, [r3, #0]
        wrapper_mqtt_subscribe(client, node->topic_filter, node->qos, node->handle, node->user_data);
    785a:	6863      	ldr	r3, [r4, #4]
    785c:	7b22      	ldrb	r2, [r4, #12]
    785e:	6821      	ldr	r1, [r4, #0]
    7860:	68a0      	ldr	r0, [r4, #8]
    7862:	9000      	str	r0, [sp, #0]
    7864:	9803      	ldr	r0, [sp, #12]
    7866:	47c8      	blx	r9
        mqtt_api_free(node->topic_filter);
    7868:	6820      	ldr	r0, [r4, #0]
    786a:	47b8      	blx	r7
    786c:	2300      	movs	r3, #0
    786e:	6023      	str	r3, [r4, #0]
        mqtt_api_free(node);
    7870:	0020      	movs	r0, r4
    7872:	47b8      	blx	r7
    list_for_each_entry_safe(node, next_node, &_mqtt_offline_subs_list->offline_sub_list, linked_list,
    7874:	6969      	ldr	r1, [r5, #20]
    7876:	002a      	movs	r2, r5
    7878:	3210      	adds	r2, #16
    787a:	6833      	ldr	r3, [r6, #0]
    787c:	002c      	movs	r4, r5
    787e:	3910      	subs	r1, #16
    7880:	000d      	movs	r5, r1
    7882:	429a      	cmp	r2, r3
    7884:	d1e5      	bne.n	7852 <IOT_MQTT_Construct+0x15e>
    HAL_MutexUnlock(_mqtt_offline_subs_list->mutex);
    7886:	6898      	ldr	r0, [r3, #8]
    7888:	4b53      	ldr	r3, [pc, #332]	; (79d8 <IOT_MQTT_Construct+0x2e4>)
    788a:	4798      	blx	r3
    if (_mqtt_offline_subs_list == NULL || _mqtt_offline_subs_list->mutex == NULL) {
    788c:	4b46      	ldr	r3, [pc, #280]	; (79a8 <IOT_MQTT_Construct+0x2b4>)
    788e:	681b      	ldr	r3, [r3, #0]
    7890:	2b00      	cmp	r3, #0
    7892:	d029      	beq.n	78e8 <IOT_MQTT_Construct+0x1f4>
    7894:	689a      	ldr	r2, [r3, #8]
    7896:	2a00      	cmp	r2, #0
    7898:	d026      	beq.n	78e8 <IOT_MQTT_Construct+0x1f4>
    list_for_each_entry_safe(node, next_node, &_mqtt_offline_subs_list->offline_sub_list, linked_list,
    789a:	685a      	ldr	r2, [r3, #4]
    789c:	0014      	movs	r4, r2
    789e:	6855      	ldr	r5, [r2, #4]
    78a0:	3c10      	subs	r4, #16
    78a2:	3d10      	subs	r5, #16
    78a4:	4293      	cmp	r3, r2
    78a6:	d016      	beq.n	78d6 <IOT_MQTT_Construct+0x1e2>
        mqtt_api_free(node->topic_filter);
    78a8:	4f3e      	ldr	r7, [pc, #248]	; (79a4 <IOT_MQTT_Construct+0x2b0>)
    78aa:	2300      	movs	r3, #0
    78ac:	4699      	mov	r9, r3
    list_for_each_entry_safe(node, next_node, &_mqtt_offline_subs_list->offline_sub_list, linked_list,
    78ae:	4e3e      	ldr	r6, [pc, #248]	; (79a8 <IOT_MQTT_Construct+0x2b4>)
    dlist_t *prev = node->prev;
    78b0:	6922      	ldr	r2, [r4, #16]
    dlist_t *next = node->next;
    78b2:	6963      	ldr	r3, [r4, #20]
    prev->next = next;
    78b4:	6053      	str	r3, [r2, #4]
    next->prev = prev;
    78b6:	601a      	str	r2, [r3, #0]
        mqtt_api_free(node->topic_filter);
    78b8:	6820      	ldr	r0, [r4, #0]
    78ba:	47b8      	blx	r7
    78bc:	464b      	mov	r3, r9
    78be:	6023      	str	r3, [r4, #0]
        mqtt_api_free(node);
    78c0:	0020      	movs	r0, r4
    78c2:	47b8      	blx	r7
    list_for_each_entry_safe(node, next_node, &_mqtt_offline_subs_list->offline_sub_list, linked_list,
    78c4:	6969      	ldr	r1, [r5, #20]
    78c6:	002a      	movs	r2, r5
    78c8:	3210      	adds	r2, #16
    78ca:	6833      	ldr	r3, [r6, #0]
    78cc:	002c      	movs	r4, r5
    78ce:	3910      	subs	r1, #16
    78d0:	000d      	movs	r5, r1
    78d2:	429a      	cmp	r2, r3
    78d4:	d1ec      	bne.n	78b0 <IOT_MQTT_Construct+0x1bc>
    HAL_MutexDestroy(_mqtt_offline_subs_list->mutex);
    78d6:	6898      	ldr	r0, [r3, #8]
    78d8:	4b40      	ldr	r3, [pc, #256]	; (79dc <IOT_MQTT_Construct+0x2e8>)
    78da:	4798      	blx	r3
    mqtt_api_free(_mqtt_offline_subs_list);
    78dc:	4c32      	ldr	r4, [pc, #200]	; (79a8 <IOT_MQTT_Construct+0x2b4>)
    78de:	6820      	ldr	r0, [r4, #0]
    78e0:	4b30      	ldr	r3, [pc, #192]	; (79a4 <IOT_MQTT_Construct+0x2b0>)
    78e2:	4798      	blx	r3
    78e4:	2300      	movs	r3, #0
    78e6:	6023      	str	r3, [r4, #0]
    iotx_set_report_func(IOT_MQTT_Publish_Simple);
    78e8:	483d      	ldr	r0, [pc, #244]	; (79e0 <IOT_MQTT_Construct+0x2ec>)
    78ea:	4b3e      	ldr	r3, [pc, #248]	; (79e4 <IOT_MQTT_Construct+0x2f0>)
    78ec:	4798      	blx	r3
    err = iotx_report_mid(pclient);
    78ee:	9803      	ldr	r0, [sp, #12]
    78f0:	4b3d      	ldr	r3, [pc, #244]	; (79e8 <IOT_MQTT_Construct+0x2f4>)
    78f2:	4798      	blx	r3
    if (SUCCESS_RETURN != err) {
    78f4:	2800      	cmp	r0, #0
    78f6:	d11e      	bne.n	7936 <IOT_MQTT_Construct+0x242>
    err = iotx_report_devinfo(pclient);
    78f8:	9803      	ldr	r0, [sp, #12]
    78fa:	4b3c      	ldr	r3, [pc, #240]	; (79ec <IOT_MQTT_Construct+0x2f8>)
    78fc:	4798      	blx	r3
    if (SUCCESS_RETURN != err) {
    78fe:	2800      	cmp	r0, #0
    7900:	d11f      	bne.n	7942 <IOT_MQTT_Construct+0x24e>
    err = iotx_report_firmware_version(pclient);
    7902:	9803      	ldr	r0, [sp, #12]
    7904:	4b3a      	ldr	r3, [pc, #232]	; (79f0 <IOT_MQTT_Construct+0x2fc>)
    7906:	4798      	blx	r3
    if (SUCCESS_RETURN != err) {
    7908:	2800      	cmp	r0, #0
    790a:	d120      	bne.n	794e <IOT_MQTT_Construct+0x25a>
    g_mqtt_client = pclient;
    790c:	9833      	ldr	r0, [sp, #204]	; 0xcc
    790e:	4b26      	ldr	r3, [pc, #152]	; (79a8 <IOT_MQTT_Construct+0x2b4>)
    7910:	6058      	str	r0, [r3, #4]
    return pclient;
    7912:	e717      	b.n	7744 <IOT_MQTT_Construct+0x50>
        if (mqtt_params != NULL) {
    7914:	2d00      	cmp	r5, #0
    7916:	d100      	bne.n	791a <IOT_MQTT_Construct+0x226>
    7918:	e77e      	b.n	7818 <IOT_MQTT_Construct+0x124>
            mqtt_api_free(mqtt_params);
    791a:	0028      	movs	r0, r5
    791c:	4b21      	ldr	r3, [pc, #132]	; (79a4 <IOT_MQTT_Construct+0x2b0>)
    791e:	4798      	blx	r3
    7920:	e77a      	b.n	7818 <IOT_MQTT_Construct+0x124>
			mqtt_err("wrapper_mqtt_connect failed");
    7922:	4834      	ldr	r0, [pc, #208]	; (79f4 <IOT_MQTT_Construct+0x300>)
    7924:	4c1d      	ldr	r4, [pc, #116]	; (799c <IOT_MQTT_Construct+0x2a8>)
    7926:	47a0      	blx	r4
    7928:	481d      	ldr	r0, [pc, #116]	; (79a0 <IOT_MQTT_Construct+0x2ac>)
    792a:	47a0      	blx	r4
	        wrapper_mqtt_release(&pclient);
    792c:	a833      	add	r0, sp, #204	; 0xcc
    792e:	4b32      	ldr	r3, [pc, #200]	; (79f8 <IOT_MQTT_Construct+0x304>)
    7930:	4798      	blx	r3
	        return NULL;
    7932:	2000      	movs	r0, #0
    7934:	e706      	b.n	7744 <IOT_MQTT_Construct+0x50>
        mqtt_err("failed to report mid");
    7936:	4831      	ldr	r0, [pc, #196]	; (79fc <IOT_MQTT_Construct+0x308>)
    7938:	4c18      	ldr	r4, [pc, #96]	; (799c <IOT_MQTT_Construct+0x2a8>)
    793a:	47a0      	blx	r4
    793c:	4818      	ldr	r0, [pc, #96]	; (79a0 <IOT_MQTT_Construct+0x2ac>)
    793e:	47a0      	blx	r4
    7940:	e7da      	b.n	78f8 <IOT_MQTT_Construct+0x204>
        mqtt_err("failed to report devinfo");
    7942:	482f      	ldr	r0, [pc, #188]	; (7a00 <IOT_MQTT_Construct+0x30c>)
    7944:	4c15      	ldr	r4, [pc, #84]	; (799c <IOT_MQTT_Construct+0x2a8>)
    7946:	47a0      	blx	r4
    7948:	4815      	ldr	r0, [pc, #84]	; (79a0 <IOT_MQTT_Construct+0x2ac>)
    794a:	47a0      	blx	r4
    794c:	e7d9      	b.n	7902 <IOT_MQTT_Construct+0x20e>
        mqtt_err("failed to report firmware version");
    794e:	482d      	ldr	r0, [pc, #180]	; (7a04 <IOT_MQTT_Construct+0x310>)
    7950:	4c12      	ldr	r4, [pc, #72]	; (799c <IOT_MQTT_Construct+0x2a8>)
    7952:	47a0      	blx	r4
    7954:	4812      	ldr	r0, [pc, #72]	; (79a0 <IOT_MQTT_Construct+0x2ac>)
    7956:	47a0      	blx	r4
    7958:	e7d8      	b.n	790c <IOT_MQTT_Construct+0x218>
        return NULL;
    795a:	2000      	movs	r0, #0
    795c:	e6f2      	b.n	7744 <IOT_MQTT_Construct+0x50>
        mqtt_err("init params is not complete");
    795e:	480e      	ldr	r0, [pc, #56]	; (7998 <IOT_MQTT_Construct+0x2a4>)
    7960:	4d0e      	ldr	r5, [pc, #56]	; (799c <IOT_MQTT_Construct+0x2a8>)
    7962:	47a8      	blx	r5
    7964:	480e      	ldr	r0, [pc, #56]	; (79a0 <IOT_MQTT_Construct+0x2ac>)
    7966:	47a8      	blx	r5
        mqtt_params = (iotx_mqtt_param_t *)mqtt_api_malloc(sizeof(iotx_mqtt_param_t));
    7968:	0025      	movs	r5, r4
    796a:	e6e7      	b.n	773c <IOT_MQTT_Construct+0x48>
        mqtt_err("init params is not complete");
    796c:	480a      	ldr	r0, [pc, #40]	; (7998 <IOT_MQTT_Construct+0x2a4>)
    796e:	4c0b      	ldr	r4, [pc, #44]	; (799c <IOT_MQTT_Construct+0x2a8>)
    7970:	47a0      	blx	r4
    7972:	480b      	ldr	r0, [pc, #44]	; (79a0 <IOT_MQTT_Construct+0x2ac>)
    7974:	47a0      	blx	r4
        return NULL;
    7976:	2000      	movs	r0, #0
    7978:	e6e4      	b.n	7744 <IOT_MQTT_Construct+0x50>
        mqtt_err("init params is not complete");
    797a:	4807      	ldr	r0, [pc, #28]	; (7998 <IOT_MQTT_Construct+0x2a4>)
    797c:	4d07      	ldr	r5, [pc, #28]	; (799c <IOT_MQTT_Construct+0x2a8>)
    797e:	47a8      	blx	r5
    7980:	4807      	ldr	r0, [pc, #28]	; (79a0 <IOT_MQTT_Construct+0x2ac>)
    7982:	47a8      	blx	r5
        mqtt_params = (iotx_mqtt_param_t *)mqtt_api_malloc(sizeof(iotx_mqtt_param_t));
    7984:	0025      	movs	r5, r4
    7986:	e6d9      	b.n	773c <IOT_MQTT_Construct+0x48>
        mqtt_err("init params is not complete");
    7988:	4803      	ldr	r0, [pc, #12]	; (7998 <IOT_MQTT_Construct+0x2a4>)
    798a:	4c04      	ldr	r4, [pc, #16]	; (799c <IOT_MQTT_Construct+0x2a8>)
    798c:	47a0      	blx	r4
    798e:	4804      	ldr	r0, [pc, #16]	; (79a0 <IOT_MQTT_Construct+0x2ac>)
    7990:	47a0      	blx	r4
        return NULL;
    7992:	2000      	movs	r0, #0
    7994:	e6d6      	b.n	7744 <IOT_MQTT_Construct+0x50>
    7996:	46c0      	nop			; (mov r8, r8)
    7998:	0000b548 	.word	0x0000b548
    799c:	00007d35 	.word	0x00007d35
    79a0:	00009cb4 	.word	0x00009cb4
    79a4:	00007c5d 	.word	0x00007c5d
    79a8:	20000a0c 	.word	0x20000a0c
    79ac:	00007d1d 	.word	0x00007d1d
    79b0:	000085c9 	.word	0x000085c9
    79b4:	00007cf5 	.word	0x00007cf5
    79b8:	00007c69 	.word	0x00007c69
    79bc:	00007c99 	.word	0x00007c99
    79c0:	0000336d 	.word	0x0000336d
    79c4:	0000ea60 	.word	0x0000ea60
    79c8:	000055e5 	.word	0x000055e5
    79cc:	00005935 	.word	0x00005935
    79d0:	00007d2f 	.word	0x00007d2f
    79d4:	00006831 	.word	0x00006831
    79d8:	00007d31 	.word	0x00007d31
    79dc:	00007d2d 	.word	0x00007d2d
    79e0:	00007665 	.word	0x00007665
    79e4:	00003ad5 	.word	0x00003ad5
    79e8:	00003dd9 	.word	0x00003dd9
    79ec:	00003ae1 	.word	0x00003ae1
    79f0:	00003c6d 	.word	0x00003c6d
    79f4:	0000b564 	.word	0x0000b564
    79f8:	000063b5 	.word	0x000063b5
    79fc:	0000b580 	.word	0x0000b580
    7a00:	0000b598 	.word	0x0000b598
    7a04:	0000b5b4 	.word	0x0000b5b4

00007a08 <IOT_MQTT_Destroy>:
{
    7a08:	b510      	push	{r4, lr}
    7a0a:	b082      	sub	sp, #8
    if (phandler != NULL) {
    7a0c:	2800      	cmp	r0, #0
    7a0e:	d00f      	beq.n	7a30 <IOT_MQTT_Destroy+0x28>
        client = *phandler;
    7a10:	6803      	ldr	r3, [r0, #0]
    7a12:	9301      	str	r3, [sp, #4]
        *phandler = NULL;
    7a14:	2300      	movs	r3, #0
    7a16:	6003      	str	r3, [r0, #0]
    if (client == NULL) {
    7a18:	9b01      	ldr	r3, [sp, #4]
    7a1a:	2b00      	cmp	r3, #0
    7a1c:	d00c      	beq.n	7a38 <IOT_MQTT_Destroy+0x30>
    wrapper_mqtt_release(&client);
    7a1e:	a801      	add	r0, sp, #4
    7a20:	4b09      	ldr	r3, [pc, #36]	; (7a48 <IOT_MQTT_Destroy+0x40>)
    7a22:	4798      	blx	r3
    g_mqtt_client = NULL;
    7a24:	2200      	movs	r2, #0
    7a26:	4b09      	ldr	r3, [pc, #36]	; (7a4c <IOT_MQTT_Destroy+0x44>)
    7a28:	605a      	str	r2, [r3, #4]
    return SUCCESS_RETURN;
    7a2a:	2000      	movs	r0, #0
}
    7a2c:	b002      	add	sp, #8
    7a2e:	bd10      	pop	{r4, pc}
        client = g_mqtt_client;
    7a30:	4b06      	ldr	r3, [pc, #24]	; (7a4c <IOT_MQTT_Destroy+0x44>)
    7a32:	685b      	ldr	r3, [r3, #4]
    7a34:	9301      	str	r3, [sp, #4]
    7a36:	e7ef      	b.n	7a18 <IOT_MQTT_Destroy+0x10>
        mqtt_err("handler is null");
    7a38:	4805      	ldr	r0, [pc, #20]	; (7a50 <IOT_MQTT_Destroy+0x48>)
    7a3a:	4c06      	ldr	r4, [pc, #24]	; (7a54 <IOT_MQTT_Destroy+0x4c>)
    7a3c:	47a0      	blx	r4
    7a3e:	4806      	ldr	r0, [pc, #24]	; (7a58 <IOT_MQTT_Destroy+0x50>)
    7a40:	47a0      	blx	r4
        return NULL_VALUE_ERROR;
    7a42:	2002      	movs	r0, #2
    7a44:	4240      	negs	r0, r0
    7a46:	e7f1      	b.n	7a2c <IOT_MQTT_Destroy+0x24>
    7a48:	000063b5 	.word	0x000063b5
    7a4c:	20000a0c 	.word	0x20000a0c
    7a50:	0000b5d8 	.word	0x0000b5d8
    7a54:	00007d35 	.word	0x00007d35
    7a58:	00009cb4 	.word	0x00009cb4

00007a5c <IOT_MQTT_Yield>:
{
    7a5c:	b510      	push	{r4, lr}
    void *pClient = (handle ? handle : g_mqtt_client);
    7a5e:	2800      	cmp	r0, #0
    7a60:	d002      	beq.n	7a68 <IOT_MQTT_Yield+0xc>
    return wrapper_mqtt_yield(pClient, timeout_ms);
    7a62:	4b03      	ldr	r3, [pc, #12]	; (7a70 <IOT_MQTT_Yield+0x14>)
    7a64:	4798      	blx	r3
}
    7a66:	bd10      	pop	{r4, pc}
    void *pClient = (handle ? handle : g_mqtt_client);
    7a68:	4b02      	ldr	r3, [pc, #8]	; (7a74 <IOT_MQTT_Yield+0x18>)
    7a6a:	6858      	ldr	r0, [r3, #4]
    7a6c:	e7f9      	b.n	7a62 <IOT_MQTT_Yield+0x6>
    7a6e:	46c0      	nop			; (mov r8, r8)
    7a70:	00006565 	.word	0x00006565
    7a74:	20000a0c 	.word	0x20000a0c

00007a78 <IOT_MQTT_Subscribe>:
{
    7a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a7a:	b083      	sub	sp, #12
    7a7c:	0005      	movs	r5, r0
    7a7e:	000c      	movs	r4, r1
    7a80:	0011      	movs	r1, r2
    7a82:	001e      	movs	r6, r3
    void *client = handle ? handle : g_mqtt_client;
    7a84:	2800      	cmp	r0, #0
    7a86:	d012      	beq.n	7aae <IOT_MQTT_Subscribe+0x36>
    if (topic_filter == NULL || strlen(topic_filter) == 0 || topic_handle_func == NULL) {
    7a88:	2c00      	cmp	r4, #0
    7a8a:	d01a      	beq.n	7ac2 <IOT_MQTT_Subscribe+0x4a>
    7a8c:	7823      	ldrb	r3, [r4, #0]
    7a8e:	2b00      	cmp	r3, #0
    7a90:	d017      	beq.n	7ac2 <IOT_MQTT_Subscribe+0x4a>
    7a92:	2e00      	cmp	r6, #0
    7a94:	d015      	beq.n	7ac2 <IOT_MQTT_Subscribe+0x4a>
    if (qos > IOTX_MQTT_QOS2) {
    7a96:	2902      	cmp	r1, #2
    7a98:	d81b      	bhi.n	7ad2 <IOT_MQTT_Subscribe+0x5a>
    return wrapper_mqtt_subscribe(client, topic_filter, qos, topic_handle_func, pcontext);
    7a9a:	9b08      	ldr	r3, [sp, #32]
    7a9c:	9300      	str	r3, [sp, #0]
    7a9e:	0033      	movs	r3, r6
    7aa0:	000a      	movs	r2, r1
    7aa2:	0021      	movs	r1, r4
    7aa4:	0028      	movs	r0, r5
    7aa6:	4c10      	ldr	r4, [pc, #64]	; (7ae8 <IOT_MQTT_Subscribe+0x70>)
    7aa8:	47a0      	blx	r4
}
    7aaa:	b003      	add	sp, #12
    7aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    void *client = handle ? handle : g_mqtt_client;
    7aae:	4b0f      	ldr	r3, [pc, #60]	; (7aec <IOT_MQTT_Subscribe+0x74>)
    7ab0:	685d      	ldr	r5, [r3, #4]
    if (client == NULL) { /* do offline subscribe */
    7ab2:	2d00      	cmp	r5, #0
    7ab4:	d1e8      	bne.n	7a88 <IOT_MQTT_Subscribe+0x10>
        return iotx_mqtt_offline_subscribe(topic_filter, qos, topic_handle_func, pcontext);
    7ab6:	9b08      	ldr	r3, [sp, #32]
    7ab8:	0032      	movs	r2, r6
    7aba:	0020      	movs	r0, r4
    7abc:	4c0c      	ldr	r4, [pc, #48]	; (7af0 <IOT_MQTT_Subscribe+0x78>)
    7abe:	47a0      	blx	r4
    7ac0:	e7f3      	b.n	7aaa <IOT_MQTT_Subscribe+0x32>
        mqtt_err("params err");
    7ac2:	480c      	ldr	r0, [pc, #48]	; (7af4 <IOT_MQTT_Subscribe+0x7c>)
    7ac4:	4c0c      	ldr	r4, [pc, #48]	; (7af8 <IOT_MQTT_Subscribe+0x80>)
    7ac6:	47a0      	blx	r4
    7ac8:	480c      	ldr	r0, [pc, #48]	; (7afc <IOT_MQTT_Subscribe+0x84>)
    7aca:	47a0      	blx	r4
        return NULL_VALUE_ERROR;
    7acc:	2002      	movs	r0, #2
    7ace:	4240      	negs	r0, r0
    7ad0:	e7eb      	b.n	7aaa <IOT_MQTT_Subscribe+0x32>
        mqtt_warning("Invalid qos(%d) out of [%d, %d], using %d",
    7ad2:	2300      	movs	r3, #0
    7ad4:	9300      	str	r3, [sp, #0]
    7ad6:	3302      	adds	r3, #2
    7ad8:	2200      	movs	r2, #0
    7ada:	4809      	ldr	r0, [pc, #36]	; (7b00 <IOT_MQTT_Subscribe+0x88>)
    7adc:	4f06      	ldr	r7, [pc, #24]	; (7af8 <IOT_MQTT_Subscribe+0x80>)
    7ade:	47b8      	blx	r7
    7ae0:	4806      	ldr	r0, [pc, #24]	; (7afc <IOT_MQTT_Subscribe+0x84>)
    7ae2:	47b8      	blx	r7
        qos = IOTX_MQTT_QOS0;
    7ae4:	2100      	movs	r1, #0
    7ae6:	e7d8      	b.n	7a9a <IOT_MQTT_Subscribe+0x22>
    7ae8:	00006831 	.word	0x00006831
    7aec:	20000a0c 	.word	0x20000a0c
    7af0:	00007549 	.word	0x00007549
    7af4:	0000b520 	.word	0x0000b520
    7af8:	00007d35 	.word	0x00007d35
    7afc:	00009cb4 	.word	0x00009cb4
    7b00:	0000b3fc 	.word	0x0000b3fc

00007b04 <IOT_MQTT_Publish>:
{
    7b04:	b510      	push	{r4, lr}
    void *client = handle ? handle : g_mqtt_client;
    7b06:	2800      	cmp	r0, #0
    7b08:	d007      	beq.n	7b1a <IOT_MQTT_Publish+0x16>
    if (client == NULL || topic_name == NULL || strlen(topic_name) == 0) {
    7b0a:	2900      	cmp	r1, #0
    7b0c:	d009      	beq.n	7b22 <IOT_MQTT_Publish+0x1e>
    7b0e:	780b      	ldrb	r3, [r1, #0]
    7b10:	2b00      	cmp	r3, #0
    7b12:	d006      	beq.n	7b22 <IOT_MQTT_Publish+0x1e>
    rc = wrapper_mqtt_publish(client, topic_name, topic_msg);
    7b14:	4b07      	ldr	r3, [pc, #28]	; (7b34 <IOT_MQTT_Publish+0x30>)
    7b16:	4798      	blx	r3
}
    7b18:	bd10      	pop	{r4, pc}
    void *client = handle ? handle : g_mqtt_client;
    7b1a:	4b07      	ldr	r3, [pc, #28]	; (7b38 <IOT_MQTT_Publish+0x34>)
    7b1c:	6858      	ldr	r0, [r3, #4]
    if (client == NULL || topic_name == NULL || strlen(topic_name) == 0) {
    7b1e:	2800      	cmp	r0, #0
    7b20:	d1f3      	bne.n	7b0a <IOT_MQTT_Publish+0x6>
        mqtt_err("params err");
    7b22:	4806      	ldr	r0, [pc, #24]	; (7b3c <IOT_MQTT_Publish+0x38>)
    7b24:	4c06      	ldr	r4, [pc, #24]	; (7b40 <IOT_MQTT_Publish+0x3c>)
    7b26:	47a0      	blx	r4
    7b28:	4806      	ldr	r0, [pc, #24]	; (7b44 <IOT_MQTT_Publish+0x40>)
    7b2a:	47a0      	blx	r4
        return NULL_VALUE_ERROR;
    7b2c:	2002      	movs	r0, #2
    7b2e:	4240      	negs	r0, r0
    7b30:	e7f2      	b.n	7b18 <IOT_MQTT_Publish+0x14>
    7b32:	46c0      	nop			; (mov r8, r8)
    7b34:	00006b75 	.word	0x00006b75
    7b38:	20000a0c 	.word	0x20000a0c
    7b3c:	0000b520 	.word	0x0000b520
    7b40:	00007d35 	.word	0x00007d35
    7b44:	00009cb4 	.word	0x00009cb4

00007b48 <tx_cb_AT_COM>:
volatile static uint32_t data_arrived = 0;
static void tx_cb_AT_COM(const struct usart_async_descriptor *const io_descr)
{
	/* Transfer completed */

}
    7b48:	4770      	bx	lr
	...

00007b4c <rx_cb_AT_COM>:

static void rx_cb_AT_COM(const struct usart_async_descriptor *const io_descr)
{
	/* Receive completed */
	data_arrived = 1;
    7b4c:	2201      	movs	r2, #1
    7b4e:	4b01      	ldr	r3, [pc, #4]	; (7b54 <rx_cb_AT_COM+0x8>)
    7b50:	601a      	str	r2, [r3, #0]
}
    7b52:	4770      	bx	lr
    7b54:	20000ba0 	.word	0x20000ba0

00007b58 <err_cb_AT_COM>:

static void err_cb_AT_COM(const struct usart_async_descriptor *const io_descr)
{
	/* error handle */
}
    7b58:	4770      	bx	lr
	...

00007b5c <HAL_AT_Uart_Init>:
 * @param[in]  uart  the interface which should be initialised
 *
 * @return  0 : on success, EIO : if an error occurred with any step
 */
int32_t HAL_AT_Uart_Init(uart_dev_t *uart)
{
    7b5c:	b570      	push	{r4, r5, r6, lr}
	usart_async_register_callback(&USART_0, USART_ASYNC_TXC_CB, tx_cb_AT_COM);
    7b5e:	4c09      	ldr	r4, [pc, #36]	; (7b84 <HAL_AT_Uart_Init+0x28>)
    7b60:	4a09      	ldr	r2, [pc, #36]	; (7b88 <HAL_AT_Uart_Init+0x2c>)
    7b62:	2101      	movs	r1, #1
    7b64:	0020      	movs	r0, r4
    7b66:	4d09      	ldr	r5, [pc, #36]	; (7b8c <HAL_AT_Uart_Init+0x30>)
    7b68:	47a8      	blx	r5
	usart_async_register_callback(&USART_0, USART_ASYNC_RXC_CB, rx_cb_AT_COM);
    7b6a:	4a09      	ldr	r2, [pc, #36]	; (7b90 <HAL_AT_Uart_Init+0x34>)
    7b6c:	2100      	movs	r1, #0
    7b6e:	0020      	movs	r0, r4
    7b70:	47a8      	blx	r5
	usart_async_register_callback(&USART_0, USART_ASYNC_ERROR_CB, err_cb_AT_COM);
    7b72:	4a08      	ldr	r2, [pc, #32]	; (7b94 <HAL_AT_Uart_Init+0x38>)
    7b74:	2102      	movs	r1, #2
    7b76:	0020      	movs	r0, r4
    7b78:	47a8      	blx	r5
	usart_async_enable(&USART_0);
    7b7a:	0020      	movs	r0, r4
    7b7c:	4b06      	ldr	r3, [pc, #24]	; (7b98 <HAL_AT_Uart_Init+0x3c>)
    7b7e:	4798      	blx	r3
	return (int32_t)0;
}
    7b80:	2000      	movs	r0, #0
    7b82:	bd70      	pop	{r4, r5, r6, pc}
    7b84:	20000bc0 	.word	0x20000bc0
    7b88:	00007b49 	.word	0x00007b49
    7b8c:	00000685 	.word	0x00000685
    7b90:	00007b4d 	.word	0x00007b4d
    7b94:	00007b59 	.word	0x00007b59
    7b98:	00000659 	.word	0x00000659

00007b9c <HAL_AT_Uart_Recv>:
 *
 * @return  0 : on success, EIO : if an error occurred with any step
 */
int32_t HAL_AT_Uart_Recv(uart_dev_t *uart, void *data, uint32_t expect_size,
                         uint32_t *recv_size, uint32_t timeout)
{
    7b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b9e:	46de      	mov	lr, fp
    7ba0:	4657      	mov	r7, sl
    7ba2:	464e      	mov	r6, r9
    7ba4:	4645      	mov	r5, r8
    7ba6:	b5e0      	push	{r5, r6, r7, lr}
    7ba8:	000c      	movs	r4, r1
    7baa:	0017      	movs	r7, r2
    7bac:	001d      	movs	r5, r3
	
    *recv_size = 0;
    7bae:	2300      	movs	r3, #0
    7bb0:	602b      	str	r3, [r5, #0]
    uint8_t *buf = (uint8_t *)data;
	
	uint32_t tickpos = time_tick_get();
    7bb2:	4b1d      	ldr	r3, [pc, #116]	; (7c28 <HAL_AT_Uart_Recv+0x8c>)
    7bb4:	4798      	blx	r3
	uint32_t tickEnd = tickpos + timeout;
    7bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7bb8:	4698      	mov	r8, r3
    7bba:	4480      	add	r8, r0

    /* Loop until data received */
    while (tickpos < tickEnd)
    7bbc:	4540      	cmp	r0, r8
    7bbe:	d22e      	bcs.n	7c1e <HAL_AT_Uart_Recv+0x82>
    {
		tickpos = time_tick_get();
    7bc0:	4b19      	ldr	r3, [pc, #100]	; (7c28 <HAL_AT_Uart_Recv+0x8c>)
    7bc2:	469b      	mov	fp, r3
		if (data_arrived == 0) {
    7bc4:	4b19      	ldr	r3, [pc, #100]	; (7c2c <HAL_AT_Uart_Recv+0x90>)
    7bc6:	469a      	mov	sl, r3
    7bc8:	e012      	b.n	7bf0 <HAL_AT_Uart_Recv+0x54>
		}
		while (io_read(&USART_0.io, buf, 1) == 1) {
			(*recv_size)++;
			if((*recv_size) == expect_size)
			{
				if(0 == usart_async_is_rx_not_empty(&USART_0)) 
    7bca:	4819      	ldr	r0, [pc, #100]	; (7c30 <HAL_AT_Uart_Recv+0x94>)
    7bcc:	4b19      	ldr	r3, [pc, #100]	; (7c34 <HAL_AT_Uart_Recv+0x98>)
    7bce:	4798      	blx	r3
    7bd0:	2800      	cmp	r0, #0
    7bd2:	d127      	bne.n	7c24 <HAL_AT_Uart_Recv+0x88>
					data_arrived = 0;
    7bd4:	2200      	movs	r2, #0
    7bd6:	4b15      	ldr	r3, [pc, #84]	; (7c2c <HAL_AT_Uart_Recv+0x90>)
    7bd8:	601a      	str	r2, [r3, #0]
		
    }
    
    return -1;
	
}
    7bda:	bc3c      	pop	{r2, r3, r4, r5}
    7bdc:	4690      	mov	r8, r2
    7bde:	4699      	mov	r9, r3
    7be0:	46a2      	mov	sl, r4
    7be2:	46ab      	mov	fp, r5
    7be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data_arrived = 0;
    7be6:	2200      	movs	r2, #0
    7be8:	4b10      	ldr	r3, [pc, #64]	; (7c2c <HAL_AT_Uart_Recv+0x90>)
    7bea:	601a      	str	r2, [r3, #0]
    while (tickpos < tickEnd)
    7bec:	45c8      	cmp	r8, r9
    7bee:	d913      	bls.n	7c18 <HAL_AT_Uart_Recv+0x7c>
		tickpos = time_tick_get();
    7bf0:	47d8      	blx	fp
    7bf2:	4681      	mov	r9, r0
		if (data_arrived == 0) {
    7bf4:	4653      	mov	r3, sl
    7bf6:	681b      	ldr	r3, [r3, #0]
    7bf8:	2b00      	cmp	r3, #0
    7bfa:	d0f7      	beq.n	7bec <HAL_AT_Uart_Recv+0x50>
		while (io_read(&USART_0.io, buf, 1) == 1) {
    7bfc:	4e0e      	ldr	r6, [pc, #56]	; (7c38 <HAL_AT_Uart_Recv+0x9c>)
    7bfe:	2201      	movs	r2, #1
    7c00:	0021      	movs	r1, r4
    7c02:	480b      	ldr	r0, [pc, #44]	; (7c30 <HAL_AT_Uart_Recv+0x94>)
    7c04:	47b0      	blx	r6
    7c06:	2801      	cmp	r0, #1
    7c08:	d1ed      	bne.n	7be6 <HAL_AT_Uart_Recv+0x4a>
			(*recv_size)++;
    7c0a:	682b      	ldr	r3, [r5, #0]
    7c0c:	3301      	adds	r3, #1
    7c0e:	602b      	str	r3, [r5, #0]
			if((*recv_size) == expect_size)
    7c10:	42bb      	cmp	r3, r7
    7c12:	d0da      	beq.n	7bca <HAL_AT_Uart_Recv+0x2e>
			buf++;
    7c14:	3401      	adds	r4, #1
    7c16:	e7f2      	b.n	7bfe <HAL_AT_Uart_Recv+0x62>
    return -1;
    7c18:	2001      	movs	r0, #1
    7c1a:	4240      	negs	r0, r0
    7c1c:	e7dd      	b.n	7bda <HAL_AT_Uart_Recv+0x3e>
    7c1e:	2001      	movs	r0, #1
    7c20:	4240      	negs	r0, r0
    7c22:	e7da      	b.n	7bda <HAL_AT_Uart_Recv+0x3e>
				return 0;
    7c24:	2000      	movs	r0, #0
    7c26:	e7d8      	b.n	7bda <HAL_AT_Uart_Recv+0x3e>
    7c28:	00007eed 	.word	0x00007eed
    7c2c:	20000ba0 	.word	0x20000ba0
    7c30:	20000bc0 	.word	0x20000bc0
    7c34:	000006fd 	.word	0x000006fd
    7c38:	000003c9 	.word	0x000003c9

00007c3c <HAL_AT_Uart_Send>:
 *                      if you want to wait forever
 *
 * @return  0 : on success, EIO : if an error occurred with any step
 */
int32_t HAL_AT_Uart_Send(uart_dev_t *uart, const void *data, uint32_t size, uint32_t timeout)
{
    7c3c:	b510      	push	{r4, lr}
	int32_t ret = 1;
	io_write(&USART_0.io, data, size);
    7c3e:	b292      	uxth	r2, r2
    7c40:	4803      	ldr	r0, [pc, #12]	; (7c50 <HAL_AT_Uart_Send+0x14>)
    7c42:	4b04      	ldr	r3, [pc, #16]	; (7c54 <HAL_AT_Uart_Send+0x18>)
    7c44:	4798      	blx	r3
 * @see None.
 * @note None.
 */
void HAL_SleepMs(uint32_t ms)
{
	delay_ms(ms);
    7c46:	2032      	movs	r0, #50	; 0x32
    7c48:	4b03      	ldr	r3, [pc, #12]	; (7c58 <HAL_AT_Uart_Send+0x1c>)
    7c4a:	4798      	blx	r3
}
    7c4c:	2000      	movs	r0, #0
    7c4e:	bd10      	pop	{r4, pc}
    7c50:	20000bc0 	.word	0x20000bc0
    7c54:	00000395 	.word	0x00000395
    7c58:	00000375 	.word	0x00000375

00007c5c <HAL_Free>:
{
    7c5c:	b510      	push	{r4, lr}
	free(ptr);
    7c5e:	4b01      	ldr	r3, [pc, #4]	; (7c64 <HAL_Free+0x8>)
    7c60:	4798      	blx	r3
}
    7c62:	bd10      	pop	{r4, pc}
    7c64:	00008585 	.word	0x00008585

00007c68 <HAL_GetDeviceName>:
{
    7c68:	b510      	push	{r4, lr}
    7c6a:	0004      	movs	r4, r0
	memset(device_name, 0x0, IOTX_DEVICE_NAME_LEN);
    7c6c:	2220      	movs	r2, #32
    7c6e:	2100      	movs	r1, #0
    7c70:	4b05      	ldr	r3, [pc, #20]	; (7c88 <HAL_GetDeviceName+0x20>)
    7c72:	4798      	blx	r3
	strncpy(device_name, EXAMPLE_DEVICE_NAME, len);
    7c74:	2208      	movs	r2, #8
    7c76:	4905      	ldr	r1, [pc, #20]	; (7c8c <HAL_GetDeviceName+0x24>)
    7c78:	0020      	movs	r0, r4
    7c7a:	4b05      	ldr	r3, [pc, #20]	; (7c90 <HAL_GetDeviceName+0x28>)
    7c7c:	4798      	blx	r3
	return strlen(device_name);
    7c7e:	0020      	movs	r0, r4
    7c80:	4b04      	ldr	r3, [pc, #16]	; (7c94 <HAL_GetDeviceName+0x2c>)
    7c82:	4798      	blx	r3
}
    7c84:	bd10      	pop	{r4, pc}
    7c86:	46c0      	nop			; (mov r8, r8)
    7c88:	000085c9 	.word	0x000085c9
    7c8c:	0000b5e8 	.word	0x0000b5e8
    7c90:	000085b7 	.word	0x000085b7
    7c94:	00008991 	.word	0x00008991

00007c98 <HAL_GetDeviceSecret>:
{
    7c98:	b510      	push	{r4, lr}
    7c9a:	0004      	movs	r4, r0
    memset(device_secret, 0x0, IOTX_DEVICE_SECRET_LEN);
    7c9c:	2240      	movs	r2, #64	; 0x40
    7c9e:	2100      	movs	r1, #0
    7ca0:	4b04      	ldr	r3, [pc, #16]	; (7cb4 <HAL_GetDeviceSecret+0x1c>)
    7ca2:	4798      	blx	r3
    strncpy(device_secret, EXAMPLE_DEVICE_SECRET, len);
    7ca4:	2220      	movs	r2, #32
    7ca6:	4904      	ldr	r1, [pc, #16]	; (7cb8 <HAL_GetDeviceSecret+0x20>)
    7ca8:	0020      	movs	r0, r4
    7caa:	4b04      	ldr	r3, [pc, #16]	; (7cbc <HAL_GetDeviceSecret+0x24>)
    7cac:	4798      	blx	r3
}
    7cae:	2020      	movs	r0, #32
    7cb0:	bd10      	pop	{r4, pc}
    7cb2:	46c0      	nop			; (mov r8, r8)
    7cb4:	000085c9 	.word	0x000085c9
    7cb8:	0000b5f4 	.word	0x0000b5f4
    7cbc:	000085b7 	.word	0x000085b7

00007cc0 <HAL_GetFirmwareVersion>:
{
    7cc0:	b510      	push	{r4, lr}
    7cc2:	0004      	movs	r4, r0
    memset(version, 0x0, IOTX_FIRMWARE_VER_LEN);
    7cc4:	2220      	movs	r2, #32
    7cc6:	2100      	movs	r1, #0
    7cc8:	4b06      	ldr	r3, [pc, #24]	; (7ce4 <HAL_GetFirmwareVersion+0x24>)
    7cca:	4798      	blx	r3
    strncpy(version, EXAMPLE_FIRMWARE_VERSION, len);
    7ccc:	2217      	movs	r2, #23
    7cce:	4906      	ldr	r1, [pc, #24]	; (7ce8 <HAL_GetFirmwareVersion+0x28>)
    7cd0:	0020      	movs	r0, r4
    7cd2:	4b06      	ldr	r3, [pc, #24]	; (7cec <HAL_GetFirmwareVersion+0x2c>)
    7cd4:	4798      	blx	r3
    version[len] = '\0';
    7cd6:	2300      	movs	r3, #0
    7cd8:	75e3      	strb	r3, [r4, #23]
    return strlen(version);
    7cda:	0020      	movs	r0, r4
    7cdc:	4b04      	ldr	r3, [pc, #16]	; (7cf0 <HAL_GetFirmwareVersion+0x30>)
    7cde:	4798      	blx	r3
}
    7ce0:	bd10      	pop	{r4, pc}
    7ce2:	46c0      	nop			; (mov r8, r8)
    7ce4:	000085c9 	.word	0x000085c9
    7ce8:	0000b618 	.word	0x0000b618
    7cec:	000085b7 	.word	0x000085b7
    7cf0:	00008991 	.word	0x00008991

00007cf4 <HAL_GetProductKey>:
{
    7cf4:	b510      	push	{r4, lr}
    7cf6:	0004      	movs	r4, r0
    memset(product_key, 0x0, IOTX_PRODUCT_KEY_LEN);
    7cf8:	2214      	movs	r2, #20
    7cfa:	2100      	movs	r1, #0
    7cfc:	4b04      	ldr	r3, [pc, #16]	; (7d10 <HAL_GetProductKey+0x1c>)
    7cfe:	4798      	blx	r3
    strncpy(product_key, EXAMPLE_PRODUCT_KEY, len);
    7d00:	220b      	movs	r2, #11
    7d02:	4904      	ldr	r1, [pc, #16]	; (7d14 <HAL_GetProductKey+0x20>)
    7d04:	0020      	movs	r0, r4
    7d06:	4b04      	ldr	r3, [pc, #16]	; (7d18 <HAL_GetProductKey+0x24>)
    7d08:	4798      	blx	r3
}
    7d0a:	200b      	movs	r0, #11
    7d0c:	bd10      	pop	{r4, pc}
    7d0e:	46c0      	nop			; (mov r8, r8)
    7d10:	000085c9 	.word	0x000085c9
    7d14:	0000b630 	.word	0x0000b630
    7d18:	000085b7 	.word	0x000085b7

00007d1c <HAL_Malloc>:
{
    7d1c:	b510      	push	{r4, lr}
	return malloc(size);
    7d1e:	4b01      	ldr	r3, [pc, #4]	; (7d24 <HAL_Malloc+0x8>)
    7d20:	4798      	blx	r3
}
    7d22:	bd10      	pop	{r4, pc}
    7d24:	00008571 	.word	0x00008571

00007d28 <HAL_MutexCreate>:
}
    7d28:	2001      	movs	r0, #1
    7d2a:	4770      	bx	lr

00007d2c <HAL_MutexDestroy>:
}
    7d2c:	4770      	bx	lr

00007d2e <HAL_MutexLock>:
}
    7d2e:	4770      	bx	lr

00007d30 <HAL_MutexUnlock>:
}
    7d30:	4770      	bx	lr
	...

00007d34 <HAL_Printf>:
{
    7d34:	b40f      	push	{r0, r1, r2, r3}
    7d36:	b500      	push	{lr}
    7d38:	b083      	sub	sp, #12
    7d3a:	a904      	add	r1, sp, #16
    7d3c:	c901      	ldmia	r1!, {r0}
    va_start(args, fmt);
    7d3e:	9101      	str	r1, [sp, #4]
    vprintf(fmt, args);
    7d40:	4b05      	ldr	r3, [pc, #20]	; (7d58 <HAL_Printf+0x24>)
    7d42:	4798      	blx	r3
    fflush(stdout);
    7d44:	4b05      	ldr	r3, [pc, #20]	; (7d5c <HAL_Printf+0x28>)
    7d46:	681b      	ldr	r3, [r3, #0]
    7d48:	6898      	ldr	r0, [r3, #8]
    7d4a:	4b05      	ldr	r3, [pc, #20]	; (7d60 <HAL_Printf+0x2c>)
    7d4c:	4798      	blx	r3
}
    7d4e:	b003      	add	sp, #12
    7d50:	bc08      	pop	{r3}
    7d52:	b004      	add	sp, #16
    7d54:	4718      	bx	r3
    7d56:	46c0      	nop			; (mov r8, r8)
    7d58:	00008a1d 	.word	0x00008a1d
    7d5c:	20000068 	.word	0x20000068
    7d60:	00008351 	.word	0x00008351

00007d64 <HAL_SleepMs>:
{
    7d64:	b510      	push	{r4, lr}
	delay_ms(ms);
    7d66:	b280      	uxth	r0, r0
    7d68:	4b01      	ldr	r3, [pc, #4]	; (7d70 <HAL_SleepMs+0xc>)
    7d6a:	4798      	blx	r3
	return;
}
    7d6c:	bd10      	pop	{r4, pc}
    7d6e:	46c0      	nop			; (mov r8, r8)
    7d70:	00000375 	.word	0x00000375

00007d74 <HAL_Snprintf>:
 * @return bytes of character successfully written into string.
 * @see None.
 * @note None.
 */
int HAL_Snprintf(char *str, const int len, const char *fmt, ...)
{
    7d74:	b40c      	push	{r2, r3}
    7d76:	b510      	push	{r4, lr}
    7d78:	b082      	sub	sp, #8
    7d7a:	ab04      	add	r3, sp, #16
    7d7c:	cb04      	ldmia	r3!, {r2}
    va_list args;
    int rc;

    va_start(args, fmt);
    7d7e:	9301      	str	r3, [sp, #4]
    rc = vsnprintf(str, len, fmt, args);
    7d80:	4c03      	ldr	r4, [pc, #12]	; (7d90 <HAL_Snprintf+0x1c>)
    7d82:	47a0      	blx	r4
    va_end(args);
    return rc;
}
    7d84:	b002      	add	sp, #8
    7d86:	bc10      	pop	{r4}
    7d88:	bc08      	pop	{r3}
    7d8a:	b002      	add	sp, #8
    7d8c:	4718      	bx	r3
    7d8e:	46c0      	nop			; (mov r8, r8)
    7d90:	00008aa1 	.word	0x00008aa1

00007d94 <HAL_UptimeMs>:
 * @return the number of milliseconds.
 * @see None.
 * @note None.
 */
uint64_t HAL_UptimeMs(void)
{
    7d94:	b510      	push	{r4, lr}
	return (uint64_t)time_tick_get();
    7d96:	4b02      	ldr	r3, [pc, #8]	; (7da0 <HAL_UptimeMs+0xc>)
    7d98:	4798      	blx	r3
    7d9a:	17c1      	asrs	r1, r0, #31
}
    7d9c:	bd10      	pop	{r4, pc}
    7d9e:	46c0      	nop			; (mov r8, r8)
    7da0:	00007eed 	.word	0x00007eed

00007da4 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    7da4:	b510      	push	{r4, lr}
    7da6:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    7da8:	2800      	cmp	r0, #0
    7daa:	d109      	bne.n	7dc0 <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    7dac:	0011      	movs	r1, r2
    7dae:	0018      	movs	r0, r3
    7db0:	4b05      	ldr	r3, [pc, #20]	; (7dc8 <_read+0x24>)
    7db2:	4798      	blx	r3
    7db4:	2800      	cmp	r0, #0
    7db6:	db00      	blt.n	7dba <_read+0x16>
	if (n < 0) {
		return -1;
	}

	return n;
}
    7db8:	bd10      	pop	{r4, pc}
    7dba:	2001      	movs	r0, #1
    7dbc:	4240      	negs	r0, r0
    7dbe:	e7fb      	b.n	7db8 <_read+0x14>
		return -1;
    7dc0:	2001      	movs	r0, #1
    7dc2:	4240      	negs	r0, r0
    7dc4:	e7f8      	b.n	7db8 <_read+0x14>
    7dc6:	46c0      	nop			; (mov r8, r8)
    7dc8:	00007e21 	.word	0x00007e21

00007dcc <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    7dcc:	b510      	push	{r4, lr}
    7dce:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    7dd0:	3801      	subs	r0, #1
    7dd2:	2802      	cmp	r0, #2
    7dd4:	d809      	bhi.n	7dea <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    7dd6:	0011      	movs	r1, r2
    7dd8:	0018      	movs	r0, r3
    7dda:	4b05      	ldr	r3, [pc, #20]	; (7df0 <_write+0x24>)
    7ddc:	4798      	blx	r3
    7dde:	2800      	cmp	r0, #0
    7de0:	db00      	blt.n	7de4 <_write+0x18>
	if (n < 0) {
		return -1;
	}

	return n;
}
    7de2:	bd10      	pop	{r4, pc}
    7de4:	2001      	movs	r0, #1
    7de6:	4240      	negs	r0, r0
    7de8:	e7fb      	b.n	7de2 <_write+0x16>
		return -1;
    7dea:	2001      	movs	r0, #1
    7dec:	4240      	negs	r0, r0
    7dee:	e7f8      	b.n	7de2 <_write+0x16>
    7df0:	00007e45 	.word	0x00007e45

00007df4 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    7df4:	b570      	push	{r4, r5, r6, lr}
    7df6:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    7df8:	4d06      	ldr	r5, [pc, #24]	; (7e14 <stdio_io_init+0x20>)
    7dfa:	682b      	ldr	r3, [r5, #0]
    7dfc:	6898      	ldr	r0, [r3, #8]
    7dfe:	2100      	movs	r1, #0
    7e00:	4c05      	ldr	r4, [pc, #20]	; (7e18 <stdio_io_init+0x24>)
    7e02:	47a0      	blx	r4
	setbuf(stdin, NULL);
    7e04:	682b      	ldr	r3, [r5, #0]
    7e06:	6858      	ldr	r0, [r3, #4]
    7e08:	2100      	movs	r1, #0
    7e0a:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    7e0c:	4b03      	ldr	r3, [pc, #12]	; (7e1c <stdio_io_init+0x28>)
    7e0e:	601e      	str	r6, [r3, #0]
}
    7e10:	bd70      	pop	{r4, r5, r6, pc}
    7e12:	46c0      	nop			; (mov r8, r8)
    7e14:	20000068 	.word	0x20000068
    7e18:	0000874d 	.word	0x0000874d
    7e1c:	20000ba4 	.word	0x20000ba4

00007e20 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    7e20:	b510      	push	{r4, lr}
    7e22:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    7e24:	4b05      	ldr	r3, [pc, #20]	; (7e3c <stdio_io_read+0x1c>)
    7e26:	6818      	ldr	r0, [r3, #0]
    7e28:	2800      	cmp	r0, #0
    7e2a:	d004      	beq.n	7e36 <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    7e2c:	b28a      	uxth	r2, r1
    7e2e:	0021      	movs	r1, r4
    7e30:	4b03      	ldr	r3, [pc, #12]	; (7e40 <stdio_io_read+0x20>)
    7e32:	4798      	blx	r3
}
    7e34:	bd10      	pop	{r4, pc}
		return 0;
    7e36:	2000      	movs	r0, #0
    7e38:	e7fc      	b.n	7e34 <stdio_io_read+0x14>
    7e3a:	46c0      	nop			; (mov r8, r8)
    7e3c:	20000ba4 	.word	0x20000ba4
    7e40:	000003c9 	.word	0x000003c9

00007e44 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    7e44:	b510      	push	{r4, lr}
    7e46:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    7e48:	4b05      	ldr	r3, [pc, #20]	; (7e60 <stdio_io_write+0x1c>)
    7e4a:	6818      	ldr	r0, [r3, #0]
    7e4c:	2800      	cmp	r0, #0
    7e4e:	d004      	beq.n	7e5a <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    7e50:	b28a      	uxth	r2, r1
    7e52:	0021      	movs	r1, r4
    7e54:	4b03      	ldr	r3, [pc, #12]	; (7e64 <stdio_io_write+0x20>)
    7e56:	4798      	blx	r3
}
    7e58:	bd10      	pop	{r4, pc}
		return 0;
    7e5a:	2000      	movs	r0, #0
    7e5c:	e7fc      	b.n	7e58 <stdio_io_write+0x14>
    7e5e:	46c0      	nop			; (mov r8, r8)
    7e60:	20000ba4 	.word	0x20000ba4
    7e64:	00000395 	.word	0x00000395

00007e68 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    7e68:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    7e6a:	4c04      	ldr	r4, [pc, #16]	; (7e7c <stdio_redirect_init+0x14>)
    7e6c:	0020      	movs	r0, r4
    7e6e:	4b04      	ldr	r3, [pc, #16]	; (7e80 <stdio_redirect_init+0x18>)
    7e70:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    7e72:	0020      	movs	r0, r4
    7e74:	4b03      	ldr	r3, [pc, #12]	; (7e84 <stdio_redirect_init+0x1c>)
    7e76:	4798      	blx	r3
}
    7e78:	bd10      	pop	{r4, pc}
    7e7a:	46c0      	nop			; (mov r8, r8)
    7e7c:	20000bb4 	.word	0x20000bb4
    7e80:	0000085d 	.word	0x0000085d
    7e84:	00007df5 	.word	0x00007df5

00007e88 <SysTick_Handler>:
 * Process System Tick Event
 * Increments the g_ms_ticks counter.
 */
void SysTick_Handler(void)
{
	g_ms_ticks++;
    7e88:	4a02      	ldr	r2, [pc, #8]	; (7e94 <SysTick_Handler+0xc>)
    7e8a:	6813      	ldr	r3, [r2, #0]
    7e8c:	3301      	adds	r3, #1
    7e8e:	6013      	str	r3, [r2, #0]
}
    7e90:	4770      	bx	lr
    7e92:	46c0      	nop			; (mov r8, r8)
    7e94:	20000ba8 	.word	0x20000ba8

00007e98 <time_tick_init>:

void time_tick_init()
{
    7e98:	b510      	push	{r4, lr}
	g_ms_ticks = 0;
    7e9a:	2200      	movs	r2, #0
    7e9c:	4b0d      	ldr	r3, [pc, #52]	; (7ed4 <time_tick_init+0x3c>)
    7e9e:	601a      	str	r2, [r3, #0]

	/* Configure systick */
	if (SysTick_Config(SystemCoreClock / TICK_US)) {
    7ea0:	4b0d      	ldr	r3, [pc, #52]	; (7ed8 <time_tick_init+0x40>)
    7ea2:	6818      	ldr	r0, [r3, #0]
    7ea4:	21fa      	movs	r1, #250	; 0xfa
    7ea6:	0089      	lsls	r1, r1, #2
    7ea8:	4b0c      	ldr	r3, [pc, #48]	; (7edc <time_tick_init+0x44>)
    7eaa:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    7eac:	3801      	subs	r0, #1
    7eae:	4b0c      	ldr	r3, [pc, #48]	; (7ee0 <time_tick_init+0x48>)
    7eb0:	4298      	cmp	r0, r3
    7eb2:	d80d      	bhi.n	7ed0 <time_tick_init+0x38>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    7eb4:	4a0b      	ldr	r2, [pc, #44]	; (7ee4 <time_tick_init+0x4c>)
    7eb6:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7eb8:	480b      	ldr	r0, [pc, #44]	; (7ee8 <time_tick_init+0x50>)
    7eba:	6a03      	ldr	r3, [r0, #32]
    7ebc:	021b      	lsls	r3, r3, #8
    7ebe:	0a1b      	lsrs	r3, r3, #8
    7ec0:	21c0      	movs	r1, #192	; 0xc0
    7ec2:	0609      	lsls	r1, r1, #24
    7ec4:	430b      	orrs	r3, r1
    7ec6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    7ec8:	2300      	movs	r3, #0
    7eca:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    7ecc:	3307      	adds	r3, #7
    7ece:	6013      	str	r3, [r2, #0]
	}
}
    7ed0:	bd10      	pop	{r4, pc}
    7ed2:	46c0      	nop			; (mov r8, r8)
    7ed4:	20000ba8 	.word	0x20000ba8
    7ed8:	20000000 	.word	0x20000000
    7edc:	00007ef9 	.word	0x00007ef9
    7ee0:	00ffffff 	.word	0x00ffffff
    7ee4:	e000e010 	.word	0xe000e010
    7ee8:	e000ed00 	.word	0xe000ed00

00007eec <time_tick_get>:

uint32_t time_tick_get(void)
{
	return g_ms_ticks;
    7eec:	4b01      	ldr	r3, [pc, #4]	; (7ef4 <time_tick_get+0x8>)
    7eee:	6818      	ldr	r0, [r3, #0]
}
    7ef0:	4770      	bx	lr
    7ef2:	46c0      	nop			; (mov r8, r8)
    7ef4:	20000ba8 	.word	0x20000ba8

00007ef8 <__udivsi3>:
    7ef8:	2200      	movs	r2, #0
    7efa:	0843      	lsrs	r3, r0, #1
    7efc:	428b      	cmp	r3, r1
    7efe:	d374      	bcc.n	7fea <__udivsi3+0xf2>
    7f00:	0903      	lsrs	r3, r0, #4
    7f02:	428b      	cmp	r3, r1
    7f04:	d35f      	bcc.n	7fc6 <__udivsi3+0xce>
    7f06:	0a03      	lsrs	r3, r0, #8
    7f08:	428b      	cmp	r3, r1
    7f0a:	d344      	bcc.n	7f96 <__udivsi3+0x9e>
    7f0c:	0b03      	lsrs	r3, r0, #12
    7f0e:	428b      	cmp	r3, r1
    7f10:	d328      	bcc.n	7f64 <__udivsi3+0x6c>
    7f12:	0c03      	lsrs	r3, r0, #16
    7f14:	428b      	cmp	r3, r1
    7f16:	d30d      	bcc.n	7f34 <__udivsi3+0x3c>
    7f18:	22ff      	movs	r2, #255	; 0xff
    7f1a:	0209      	lsls	r1, r1, #8
    7f1c:	ba12      	rev	r2, r2
    7f1e:	0c03      	lsrs	r3, r0, #16
    7f20:	428b      	cmp	r3, r1
    7f22:	d302      	bcc.n	7f2a <__udivsi3+0x32>
    7f24:	1212      	asrs	r2, r2, #8
    7f26:	0209      	lsls	r1, r1, #8
    7f28:	d065      	beq.n	7ff6 <__udivsi3+0xfe>
    7f2a:	0b03      	lsrs	r3, r0, #12
    7f2c:	428b      	cmp	r3, r1
    7f2e:	d319      	bcc.n	7f64 <__udivsi3+0x6c>
    7f30:	e000      	b.n	7f34 <__udivsi3+0x3c>
    7f32:	0a09      	lsrs	r1, r1, #8
    7f34:	0bc3      	lsrs	r3, r0, #15
    7f36:	428b      	cmp	r3, r1
    7f38:	d301      	bcc.n	7f3e <__udivsi3+0x46>
    7f3a:	03cb      	lsls	r3, r1, #15
    7f3c:	1ac0      	subs	r0, r0, r3
    7f3e:	4152      	adcs	r2, r2
    7f40:	0b83      	lsrs	r3, r0, #14
    7f42:	428b      	cmp	r3, r1
    7f44:	d301      	bcc.n	7f4a <__udivsi3+0x52>
    7f46:	038b      	lsls	r3, r1, #14
    7f48:	1ac0      	subs	r0, r0, r3
    7f4a:	4152      	adcs	r2, r2
    7f4c:	0b43      	lsrs	r3, r0, #13
    7f4e:	428b      	cmp	r3, r1
    7f50:	d301      	bcc.n	7f56 <__udivsi3+0x5e>
    7f52:	034b      	lsls	r3, r1, #13
    7f54:	1ac0      	subs	r0, r0, r3
    7f56:	4152      	adcs	r2, r2
    7f58:	0b03      	lsrs	r3, r0, #12
    7f5a:	428b      	cmp	r3, r1
    7f5c:	d301      	bcc.n	7f62 <__udivsi3+0x6a>
    7f5e:	030b      	lsls	r3, r1, #12
    7f60:	1ac0      	subs	r0, r0, r3
    7f62:	4152      	adcs	r2, r2
    7f64:	0ac3      	lsrs	r3, r0, #11
    7f66:	428b      	cmp	r3, r1
    7f68:	d301      	bcc.n	7f6e <__udivsi3+0x76>
    7f6a:	02cb      	lsls	r3, r1, #11
    7f6c:	1ac0      	subs	r0, r0, r3
    7f6e:	4152      	adcs	r2, r2
    7f70:	0a83      	lsrs	r3, r0, #10
    7f72:	428b      	cmp	r3, r1
    7f74:	d301      	bcc.n	7f7a <__udivsi3+0x82>
    7f76:	028b      	lsls	r3, r1, #10
    7f78:	1ac0      	subs	r0, r0, r3
    7f7a:	4152      	adcs	r2, r2
    7f7c:	0a43      	lsrs	r3, r0, #9
    7f7e:	428b      	cmp	r3, r1
    7f80:	d301      	bcc.n	7f86 <__udivsi3+0x8e>
    7f82:	024b      	lsls	r3, r1, #9
    7f84:	1ac0      	subs	r0, r0, r3
    7f86:	4152      	adcs	r2, r2
    7f88:	0a03      	lsrs	r3, r0, #8
    7f8a:	428b      	cmp	r3, r1
    7f8c:	d301      	bcc.n	7f92 <__udivsi3+0x9a>
    7f8e:	020b      	lsls	r3, r1, #8
    7f90:	1ac0      	subs	r0, r0, r3
    7f92:	4152      	adcs	r2, r2
    7f94:	d2cd      	bcs.n	7f32 <__udivsi3+0x3a>
    7f96:	09c3      	lsrs	r3, r0, #7
    7f98:	428b      	cmp	r3, r1
    7f9a:	d301      	bcc.n	7fa0 <__udivsi3+0xa8>
    7f9c:	01cb      	lsls	r3, r1, #7
    7f9e:	1ac0      	subs	r0, r0, r3
    7fa0:	4152      	adcs	r2, r2
    7fa2:	0983      	lsrs	r3, r0, #6
    7fa4:	428b      	cmp	r3, r1
    7fa6:	d301      	bcc.n	7fac <__udivsi3+0xb4>
    7fa8:	018b      	lsls	r3, r1, #6
    7faa:	1ac0      	subs	r0, r0, r3
    7fac:	4152      	adcs	r2, r2
    7fae:	0943      	lsrs	r3, r0, #5
    7fb0:	428b      	cmp	r3, r1
    7fb2:	d301      	bcc.n	7fb8 <__udivsi3+0xc0>
    7fb4:	014b      	lsls	r3, r1, #5
    7fb6:	1ac0      	subs	r0, r0, r3
    7fb8:	4152      	adcs	r2, r2
    7fba:	0903      	lsrs	r3, r0, #4
    7fbc:	428b      	cmp	r3, r1
    7fbe:	d301      	bcc.n	7fc4 <__udivsi3+0xcc>
    7fc0:	010b      	lsls	r3, r1, #4
    7fc2:	1ac0      	subs	r0, r0, r3
    7fc4:	4152      	adcs	r2, r2
    7fc6:	08c3      	lsrs	r3, r0, #3
    7fc8:	428b      	cmp	r3, r1
    7fca:	d301      	bcc.n	7fd0 <__udivsi3+0xd8>
    7fcc:	00cb      	lsls	r3, r1, #3
    7fce:	1ac0      	subs	r0, r0, r3
    7fd0:	4152      	adcs	r2, r2
    7fd2:	0883      	lsrs	r3, r0, #2
    7fd4:	428b      	cmp	r3, r1
    7fd6:	d301      	bcc.n	7fdc <__udivsi3+0xe4>
    7fd8:	008b      	lsls	r3, r1, #2
    7fda:	1ac0      	subs	r0, r0, r3
    7fdc:	4152      	adcs	r2, r2
    7fde:	0843      	lsrs	r3, r0, #1
    7fe0:	428b      	cmp	r3, r1
    7fe2:	d301      	bcc.n	7fe8 <__udivsi3+0xf0>
    7fe4:	004b      	lsls	r3, r1, #1
    7fe6:	1ac0      	subs	r0, r0, r3
    7fe8:	4152      	adcs	r2, r2
    7fea:	1a41      	subs	r1, r0, r1
    7fec:	d200      	bcs.n	7ff0 <__udivsi3+0xf8>
    7fee:	4601      	mov	r1, r0
    7ff0:	4152      	adcs	r2, r2
    7ff2:	4610      	mov	r0, r2
    7ff4:	4770      	bx	lr
    7ff6:	e7ff      	b.n	7ff8 <__udivsi3+0x100>
    7ff8:	b501      	push	{r0, lr}
    7ffa:	2000      	movs	r0, #0
    7ffc:	f000 f8f0 	bl	81e0 <__aeabi_idiv0>
    8000:	bd02      	pop	{r1, pc}
    8002:	46c0      	nop			; (mov r8, r8)

00008004 <__aeabi_uidivmod>:
    8004:	2900      	cmp	r1, #0
    8006:	d0f7      	beq.n	7ff8 <__udivsi3+0x100>
    8008:	e776      	b.n	7ef8 <__udivsi3>
    800a:	4770      	bx	lr

0000800c <__divsi3>:
    800c:	4603      	mov	r3, r0
    800e:	430b      	orrs	r3, r1
    8010:	d47f      	bmi.n	8112 <__divsi3+0x106>
    8012:	2200      	movs	r2, #0
    8014:	0843      	lsrs	r3, r0, #1
    8016:	428b      	cmp	r3, r1
    8018:	d374      	bcc.n	8104 <__divsi3+0xf8>
    801a:	0903      	lsrs	r3, r0, #4
    801c:	428b      	cmp	r3, r1
    801e:	d35f      	bcc.n	80e0 <__divsi3+0xd4>
    8020:	0a03      	lsrs	r3, r0, #8
    8022:	428b      	cmp	r3, r1
    8024:	d344      	bcc.n	80b0 <__divsi3+0xa4>
    8026:	0b03      	lsrs	r3, r0, #12
    8028:	428b      	cmp	r3, r1
    802a:	d328      	bcc.n	807e <__divsi3+0x72>
    802c:	0c03      	lsrs	r3, r0, #16
    802e:	428b      	cmp	r3, r1
    8030:	d30d      	bcc.n	804e <__divsi3+0x42>
    8032:	22ff      	movs	r2, #255	; 0xff
    8034:	0209      	lsls	r1, r1, #8
    8036:	ba12      	rev	r2, r2
    8038:	0c03      	lsrs	r3, r0, #16
    803a:	428b      	cmp	r3, r1
    803c:	d302      	bcc.n	8044 <__divsi3+0x38>
    803e:	1212      	asrs	r2, r2, #8
    8040:	0209      	lsls	r1, r1, #8
    8042:	d065      	beq.n	8110 <__divsi3+0x104>
    8044:	0b03      	lsrs	r3, r0, #12
    8046:	428b      	cmp	r3, r1
    8048:	d319      	bcc.n	807e <__divsi3+0x72>
    804a:	e000      	b.n	804e <__divsi3+0x42>
    804c:	0a09      	lsrs	r1, r1, #8
    804e:	0bc3      	lsrs	r3, r0, #15
    8050:	428b      	cmp	r3, r1
    8052:	d301      	bcc.n	8058 <__divsi3+0x4c>
    8054:	03cb      	lsls	r3, r1, #15
    8056:	1ac0      	subs	r0, r0, r3
    8058:	4152      	adcs	r2, r2
    805a:	0b83      	lsrs	r3, r0, #14
    805c:	428b      	cmp	r3, r1
    805e:	d301      	bcc.n	8064 <__divsi3+0x58>
    8060:	038b      	lsls	r3, r1, #14
    8062:	1ac0      	subs	r0, r0, r3
    8064:	4152      	adcs	r2, r2
    8066:	0b43      	lsrs	r3, r0, #13
    8068:	428b      	cmp	r3, r1
    806a:	d301      	bcc.n	8070 <__divsi3+0x64>
    806c:	034b      	lsls	r3, r1, #13
    806e:	1ac0      	subs	r0, r0, r3
    8070:	4152      	adcs	r2, r2
    8072:	0b03      	lsrs	r3, r0, #12
    8074:	428b      	cmp	r3, r1
    8076:	d301      	bcc.n	807c <__divsi3+0x70>
    8078:	030b      	lsls	r3, r1, #12
    807a:	1ac0      	subs	r0, r0, r3
    807c:	4152      	adcs	r2, r2
    807e:	0ac3      	lsrs	r3, r0, #11
    8080:	428b      	cmp	r3, r1
    8082:	d301      	bcc.n	8088 <__divsi3+0x7c>
    8084:	02cb      	lsls	r3, r1, #11
    8086:	1ac0      	subs	r0, r0, r3
    8088:	4152      	adcs	r2, r2
    808a:	0a83      	lsrs	r3, r0, #10
    808c:	428b      	cmp	r3, r1
    808e:	d301      	bcc.n	8094 <__divsi3+0x88>
    8090:	028b      	lsls	r3, r1, #10
    8092:	1ac0      	subs	r0, r0, r3
    8094:	4152      	adcs	r2, r2
    8096:	0a43      	lsrs	r3, r0, #9
    8098:	428b      	cmp	r3, r1
    809a:	d301      	bcc.n	80a0 <__divsi3+0x94>
    809c:	024b      	lsls	r3, r1, #9
    809e:	1ac0      	subs	r0, r0, r3
    80a0:	4152      	adcs	r2, r2
    80a2:	0a03      	lsrs	r3, r0, #8
    80a4:	428b      	cmp	r3, r1
    80a6:	d301      	bcc.n	80ac <__divsi3+0xa0>
    80a8:	020b      	lsls	r3, r1, #8
    80aa:	1ac0      	subs	r0, r0, r3
    80ac:	4152      	adcs	r2, r2
    80ae:	d2cd      	bcs.n	804c <__divsi3+0x40>
    80b0:	09c3      	lsrs	r3, r0, #7
    80b2:	428b      	cmp	r3, r1
    80b4:	d301      	bcc.n	80ba <__divsi3+0xae>
    80b6:	01cb      	lsls	r3, r1, #7
    80b8:	1ac0      	subs	r0, r0, r3
    80ba:	4152      	adcs	r2, r2
    80bc:	0983      	lsrs	r3, r0, #6
    80be:	428b      	cmp	r3, r1
    80c0:	d301      	bcc.n	80c6 <__divsi3+0xba>
    80c2:	018b      	lsls	r3, r1, #6
    80c4:	1ac0      	subs	r0, r0, r3
    80c6:	4152      	adcs	r2, r2
    80c8:	0943      	lsrs	r3, r0, #5
    80ca:	428b      	cmp	r3, r1
    80cc:	d301      	bcc.n	80d2 <__divsi3+0xc6>
    80ce:	014b      	lsls	r3, r1, #5
    80d0:	1ac0      	subs	r0, r0, r3
    80d2:	4152      	adcs	r2, r2
    80d4:	0903      	lsrs	r3, r0, #4
    80d6:	428b      	cmp	r3, r1
    80d8:	d301      	bcc.n	80de <__divsi3+0xd2>
    80da:	010b      	lsls	r3, r1, #4
    80dc:	1ac0      	subs	r0, r0, r3
    80de:	4152      	adcs	r2, r2
    80e0:	08c3      	lsrs	r3, r0, #3
    80e2:	428b      	cmp	r3, r1
    80e4:	d301      	bcc.n	80ea <__divsi3+0xde>
    80e6:	00cb      	lsls	r3, r1, #3
    80e8:	1ac0      	subs	r0, r0, r3
    80ea:	4152      	adcs	r2, r2
    80ec:	0883      	lsrs	r3, r0, #2
    80ee:	428b      	cmp	r3, r1
    80f0:	d301      	bcc.n	80f6 <__divsi3+0xea>
    80f2:	008b      	lsls	r3, r1, #2
    80f4:	1ac0      	subs	r0, r0, r3
    80f6:	4152      	adcs	r2, r2
    80f8:	0843      	lsrs	r3, r0, #1
    80fa:	428b      	cmp	r3, r1
    80fc:	d301      	bcc.n	8102 <__divsi3+0xf6>
    80fe:	004b      	lsls	r3, r1, #1
    8100:	1ac0      	subs	r0, r0, r3
    8102:	4152      	adcs	r2, r2
    8104:	1a41      	subs	r1, r0, r1
    8106:	d200      	bcs.n	810a <__divsi3+0xfe>
    8108:	4601      	mov	r1, r0
    810a:	4152      	adcs	r2, r2
    810c:	4610      	mov	r0, r2
    810e:	4770      	bx	lr
    8110:	e05d      	b.n	81ce <__divsi3+0x1c2>
    8112:	0fca      	lsrs	r2, r1, #31
    8114:	d000      	beq.n	8118 <__divsi3+0x10c>
    8116:	4249      	negs	r1, r1
    8118:	1003      	asrs	r3, r0, #32
    811a:	d300      	bcc.n	811e <__divsi3+0x112>
    811c:	4240      	negs	r0, r0
    811e:	4053      	eors	r3, r2
    8120:	2200      	movs	r2, #0
    8122:	469c      	mov	ip, r3
    8124:	0903      	lsrs	r3, r0, #4
    8126:	428b      	cmp	r3, r1
    8128:	d32d      	bcc.n	8186 <__divsi3+0x17a>
    812a:	0a03      	lsrs	r3, r0, #8
    812c:	428b      	cmp	r3, r1
    812e:	d312      	bcc.n	8156 <__divsi3+0x14a>
    8130:	22fc      	movs	r2, #252	; 0xfc
    8132:	0189      	lsls	r1, r1, #6
    8134:	ba12      	rev	r2, r2
    8136:	0a03      	lsrs	r3, r0, #8
    8138:	428b      	cmp	r3, r1
    813a:	d30c      	bcc.n	8156 <__divsi3+0x14a>
    813c:	0189      	lsls	r1, r1, #6
    813e:	1192      	asrs	r2, r2, #6
    8140:	428b      	cmp	r3, r1
    8142:	d308      	bcc.n	8156 <__divsi3+0x14a>
    8144:	0189      	lsls	r1, r1, #6
    8146:	1192      	asrs	r2, r2, #6
    8148:	428b      	cmp	r3, r1
    814a:	d304      	bcc.n	8156 <__divsi3+0x14a>
    814c:	0189      	lsls	r1, r1, #6
    814e:	d03a      	beq.n	81c6 <__divsi3+0x1ba>
    8150:	1192      	asrs	r2, r2, #6
    8152:	e000      	b.n	8156 <__divsi3+0x14a>
    8154:	0989      	lsrs	r1, r1, #6
    8156:	09c3      	lsrs	r3, r0, #7
    8158:	428b      	cmp	r3, r1
    815a:	d301      	bcc.n	8160 <__divsi3+0x154>
    815c:	01cb      	lsls	r3, r1, #7
    815e:	1ac0      	subs	r0, r0, r3
    8160:	4152      	adcs	r2, r2
    8162:	0983      	lsrs	r3, r0, #6
    8164:	428b      	cmp	r3, r1
    8166:	d301      	bcc.n	816c <__divsi3+0x160>
    8168:	018b      	lsls	r3, r1, #6
    816a:	1ac0      	subs	r0, r0, r3
    816c:	4152      	adcs	r2, r2
    816e:	0943      	lsrs	r3, r0, #5
    8170:	428b      	cmp	r3, r1
    8172:	d301      	bcc.n	8178 <__divsi3+0x16c>
    8174:	014b      	lsls	r3, r1, #5
    8176:	1ac0      	subs	r0, r0, r3
    8178:	4152      	adcs	r2, r2
    817a:	0903      	lsrs	r3, r0, #4
    817c:	428b      	cmp	r3, r1
    817e:	d301      	bcc.n	8184 <__divsi3+0x178>
    8180:	010b      	lsls	r3, r1, #4
    8182:	1ac0      	subs	r0, r0, r3
    8184:	4152      	adcs	r2, r2
    8186:	08c3      	lsrs	r3, r0, #3
    8188:	428b      	cmp	r3, r1
    818a:	d301      	bcc.n	8190 <__divsi3+0x184>
    818c:	00cb      	lsls	r3, r1, #3
    818e:	1ac0      	subs	r0, r0, r3
    8190:	4152      	adcs	r2, r2
    8192:	0883      	lsrs	r3, r0, #2
    8194:	428b      	cmp	r3, r1
    8196:	d301      	bcc.n	819c <__divsi3+0x190>
    8198:	008b      	lsls	r3, r1, #2
    819a:	1ac0      	subs	r0, r0, r3
    819c:	4152      	adcs	r2, r2
    819e:	d2d9      	bcs.n	8154 <__divsi3+0x148>
    81a0:	0843      	lsrs	r3, r0, #1
    81a2:	428b      	cmp	r3, r1
    81a4:	d301      	bcc.n	81aa <__divsi3+0x19e>
    81a6:	004b      	lsls	r3, r1, #1
    81a8:	1ac0      	subs	r0, r0, r3
    81aa:	4152      	adcs	r2, r2
    81ac:	1a41      	subs	r1, r0, r1
    81ae:	d200      	bcs.n	81b2 <__divsi3+0x1a6>
    81b0:	4601      	mov	r1, r0
    81b2:	4663      	mov	r3, ip
    81b4:	4152      	adcs	r2, r2
    81b6:	105b      	asrs	r3, r3, #1
    81b8:	4610      	mov	r0, r2
    81ba:	d301      	bcc.n	81c0 <__divsi3+0x1b4>
    81bc:	4240      	negs	r0, r0
    81be:	2b00      	cmp	r3, #0
    81c0:	d500      	bpl.n	81c4 <__divsi3+0x1b8>
    81c2:	4249      	negs	r1, r1
    81c4:	4770      	bx	lr
    81c6:	4663      	mov	r3, ip
    81c8:	105b      	asrs	r3, r3, #1
    81ca:	d300      	bcc.n	81ce <__divsi3+0x1c2>
    81cc:	4240      	negs	r0, r0
    81ce:	b501      	push	{r0, lr}
    81d0:	2000      	movs	r0, #0
    81d2:	f000 f805 	bl	81e0 <__aeabi_idiv0>
    81d6:	bd02      	pop	{r1, pc}

000081d8 <__aeabi_idivmod>:
    81d8:	2900      	cmp	r1, #0
    81da:	d0f8      	beq.n	81ce <__divsi3+0x1c2>
    81dc:	e716      	b.n	800c <__divsi3>
    81de:	4770      	bx	lr

000081e0 <__aeabi_idiv0>:
    81e0:	4770      	bx	lr
    81e2:	46c0      	nop			; (mov r8, r8)

000081e4 <__sflush_r>:
    81e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    81e6:	898a      	ldrh	r2, [r1, #12]
    81e8:	0005      	movs	r5, r0
    81ea:	000c      	movs	r4, r1
    81ec:	0713      	lsls	r3, r2, #28
    81ee:	d460      	bmi.n	82b2 <__sflush_r+0xce>
    81f0:	684b      	ldr	r3, [r1, #4]
    81f2:	2b00      	cmp	r3, #0
    81f4:	dc04      	bgt.n	8200 <__sflush_r+0x1c>
    81f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    81f8:	2b00      	cmp	r3, #0
    81fa:	dc01      	bgt.n	8200 <__sflush_r+0x1c>
    81fc:	2000      	movs	r0, #0
    81fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8200:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    8202:	2f00      	cmp	r7, #0
    8204:	d0fa      	beq.n	81fc <__sflush_r+0x18>
    8206:	2300      	movs	r3, #0
    8208:	682e      	ldr	r6, [r5, #0]
    820a:	602b      	str	r3, [r5, #0]
    820c:	2380      	movs	r3, #128	; 0x80
    820e:	015b      	lsls	r3, r3, #5
    8210:	401a      	ands	r2, r3
    8212:	d034      	beq.n	827e <__sflush_r+0x9a>
    8214:	6d60      	ldr	r0, [r4, #84]	; 0x54
    8216:	89a3      	ldrh	r3, [r4, #12]
    8218:	075b      	lsls	r3, r3, #29
    821a:	d506      	bpl.n	822a <__sflush_r+0x46>
    821c:	6863      	ldr	r3, [r4, #4]
    821e:	1ac0      	subs	r0, r0, r3
    8220:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8222:	2b00      	cmp	r3, #0
    8224:	d001      	beq.n	822a <__sflush_r+0x46>
    8226:	6c23      	ldr	r3, [r4, #64]	; 0x40
    8228:	1ac0      	subs	r0, r0, r3
    822a:	0002      	movs	r2, r0
    822c:	6a21      	ldr	r1, [r4, #32]
    822e:	2300      	movs	r3, #0
    8230:	0028      	movs	r0, r5
    8232:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    8234:	47b8      	blx	r7
    8236:	89a1      	ldrh	r1, [r4, #12]
    8238:	1c43      	adds	r3, r0, #1
    823a:	d106      	bne.n	824a <__sflush_r+0x66>
    823c:	682b      	ldr	r3, [r5, #0]
    823e:	2b1d      	cmp	r3, #29
    8240:	d831      	bhi.n	82a6 <__sflush_r+0xc2>
    8242:	4a2c      	ldr	r2, [pc, #176]	; (82f4 <__sflush_r+0x110>)
    8244:	40da      	lsrs	r2, r3
    8246:	07d3      	lsls	r3, r2, #31
    8248:	d52d      	bpl.n	82a6 <__sflush_r+0xc2>
    824a:	2300      	movs	r3, #0
    824c:	6063      	str	r3, [r4, #4]
    824e:	6923      	ldr	r3, [r4, #16]
    8250:	6023      	str	r3, [r4, #0]
    8252:	04cb      	lsls	r3, r1, #19
    8254:	d505      	bpl.n	8262 <__sflush_r+0x7e>
    8256:	1c43      	adds	r3, r0, #1
    8258:	d102      	bne.n	8260 <__sflush_r+0x7c>
    825a:	682b      	ldr	r3, [r5, #0]
    825c:	2b00      	cmp	r3, #0
    825e:	d100      	bne.n	8262 <__sflush_r+0x7e>
    8260:	6560      	str	r0, [r4, #84]	; 0x54
    8262:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8264:	602e      	str	r6, [r5, #0]
    8266:	2900      	cmp	r1, #0
    8268:	d0c8      	beq.n	81fc <__sflush_r+0x18>
    826a:	0023      	movs	r3, r4
    826c:	3344      	adds	r3, #68	; 0x44
    826e:	4299      	cmp	r1, r3
    8270:	d002      	beq.n	8278 <__sflush_r+0x94>
    8272:	0028      	movs	r0, r5
    8274:	f000 f9b0 	bl	85d8 <_free_r>
    8278:	2000      	movs	r0, #0
    827a:	6360      	str	r0, [r4, #52]	; 0x34
    827c:	e7bf      	b.n	81fe <__sflush_r+0x1a>
    827e:	2301      	movs	r3, #1
    8280:	6a21      	ldr	r1, [r4, #32]
    8282:	0028      	movs	r0, r5
    8284:	47b8      	blx	r7
    8286:	1c43      	adds	r3, r0, #1
    8288:	d1c5      	bne.n	8216 <__sflush_r+0x32>
    828a:	682b      	ldr	r3, [r5, #0]
    828c:	2b00      	cmp	r3, #0
    828e:	d0c2      	beq.n	8216 <__sflush_r+0x32>
    8290:	2b1d      	cmp	r3, #29
    8292:	d001      	beq.n	8298 <__sflush_r+0xb4>
    8294:	2b16      	cmp	r3, #22
    8296:	d101      	bne.n	829c <__sflush_r+0xb8>
    8298:	602e      	str	r6, [r5, #0]
    829a:	e7af      	b.n	81fc <__sflush_r+0x18>
    829c:	2340      	movs	r3, #64	; 0x40
    829e:	89a2      	ldrh	r2, [r4, #12]
    82a0:	4313      	orrs	r3, r2
    82a2:	81a3      	strh	r3, [r4, #12]
    82a4:	e7ab      	b.n	81fe <__sflush_r+0x1a>
    82a6:	2340      	movs	r3, #64	; 0x40
    82a8:	430b      	orrs	r3, r1
    82aa:	2001      	movs	r0, #1
    82ac:	81a3      	strh	r3, [r4, #12]
    82ae:	4240      	negs	r0, r0
    82b0:	e7a5      	b.n	81fe <__sflush_r+0x1a>
    82b2:	690f      	ldr	r7, [r1, #16]
    82b4:	2f00      	cmp	r7, #0
    82b6:	d0a1      	beq.n	81fc <__sflush_r+0x18>
    82b8:	680b      	ldr	r3, [r1, #0]
    82ba:	600f      	str	r7, [r1, #0]
    82bc:	1bdb      	subs	r3, r3, r7
    82be:	9301      	str	r3, [sp, #4]
    82c0:	2300      	movs	r3, #0
    82c2:	0792      	lsls	r2, r2, #30
    82c4:	d100      	bne.n	82c8 <__sflush_r+0xe4>
    82c6:	694b      	ldr	r3, [r1, #20]
    82c8:	60a3      	str	r3, [r4, #8]
    82ca:	9b01      	ldr	r3, [sp, #4]
    82cc:	2b00      	cmp	r3, #0
    82ce:	dc00      	bgt.n	82d2 <__sflush_r+0xee>
    82d0:	e794      	b.n	81fc <__sflush_r+0x18>
    82d2:	9b01      	ldr	r3, [sp, #4]
    82d4:	003a      	movs	r2, r7
    82d6:	6a21      	ldr	r1, [r4, #32]
    82d8:	0028      	movs	r0, r5
    82da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    82dc:	47b0      	blx	r6
    82de:	2800      	cmp	r0, #0
    82e0:	dc03      	bgt.n	82ea <__sflush_r+0x106>
    82e2:	2340      	movs	r3, #64	; 0x40
    82e4:	89a2      	ldrh	r2, [r4, #12]
    82e6:	4313      	orrs	r3, r2
    82e8:	e7df      	b.n	82aa <__sflush_r+0xc6>
    82ea:	9b01      	ldr	r3, [sp, #4]
    82ec:	183f      	adds	r7, r7, r0
    82ee:	1a1b      	subs	r3, r3, r0
    82f0:	9301      	str	r3, [sp, #4]
    82f2:	e7ea      	b.n	82ca <__sflush_r+0xe6>
    82f4:	20400001 	.word	0x20400001

000082f8 <_fflush_r>:
    82f8:	690b      	ldr	r3, [r1, #16]
    82fa:	b570      	push	{r4, r5, r6, lr}
    82fc:	0005      	movs	r5, r0
    82fe:	000c      	movs	r4, r1
    8300:	2b00      	cmp	r3, #0
    8302:	d101      	bne.n	8308 <_fflush_r+0x10>
    8304:	2000      	movs	r0, #0
    8306:	bd70      	pop	{r4, r5, r6, pc}
    8308:	2800      	cmp	r0, #0
    830a:	d004      	beq.n	8316 <_fflush_r+0x1e>
    830c:	6983      	ldr	r3, [r0, #24]
    830e:	2b00      	cmp	r3, #0
    8310:	d101      	bne.n	8316 <_fflush_r+0x1e>
    8312:	f000 f873 	bl	83fc <__sinit>
    8316:	4b0b      	ldr	r3, [pc, #44]	; (8344 <_fflush_r+0x4c>)
    8318:	429c      	cmp	r4, r3
    831a:	d109      	bne.n	8330 <_fflush_r+0x38>
    831c:	686c      	ldr	r4, [r5, #4]
    831e:	220c      	movs	r2, #12
    8320:	5ea3      	ldrsh	r3, [r4, r2]
    8322:	2b00      	cmp	r3, #0
    8324:	d0ee      	beq.n	8304 <_fflush_r+0xc>
    8326:	0021      	movs	r1, r4
    8328:	0028      	movs	r0, r5
    832a:	f7ff ff5b 	bl	81e4 <__sflush_r>
    832e:	e7ea      	b.n	8306 <_fflush_r+0xe>
    8330:	4b05      	ldr	r3, [pc, #20]	; (8348 <_fflush_r+0x50>)
    8332:	429c      	cmp	r4, r3
    8334:	d101      	bne.n	833a <_fflush_r+0x42>
    8336:	68ac      	ldr	r4, [r5, #8]
    8338:	e7f1      	b.n	831e <_fflush_r+0x26>
    833a:	4b04      	ldr	r3, [pc, #16]	; (834c <_fflush_r+0x54>)
    833c:	429c      	cmp	r4, r3
    833e:	d1ee      	bne.n	831e <_fflush_r+0x26>
    8340:	68ec      	ldr	r4, [r5, #12]
    8342:	e7ec      	b.n	831e <_fflush_r+0x26>
    8344:	0000b65c 	.word	0x0000b65c
    8348:	0000b67c 	.word	0x0000b67c
    834c:	0000b63c 	.word	0x0000b63c

00008350 <fflush>:
    8350:	b510      	push	{r4, lr}
    8352:	1e01      	subs	r1, r0, #0
    8354:	d105      	bne.n	8362 <fflush+0x12>
    8356:	4b05      	ldr	r3, [pc, #20]	; (836c <fflush+0x1c>)
    8358:	4905      	ldr	r1, [pc, #20]	; (8370 <fflush+0x20>)
    835a:	6818      	ldr	r0, [r3, #0]
    835c:	f000 f8c2 	bl	84e4 <_fwalk_reent>
    8360:	bd10      	pop	{r4, pc}
    8362:	4b04      	ldr	r3, [pc, #16]	; (8374 <fflush+0x24>)
    8364:	6818      	ldr	r0, [r3, #0]
    8366:	f7ff ffc7 	bl	82f8 <_fflush_r>
    836a:	e7f9      	b.n	8360 <fflush+0x10>
    836c:	0000b69c 	.word	0x0000b69c
    8370:	000082f9 	.word	0x000082f9
    8374:	20000068 	.word	0x20000068

00008378 <_cleanup_r>:
    8378:	b510      	push	{r4, lr}
    837a:	4902      	ldr	r1, [pc, #8]	; (8384 <_cleanup_r+0xc>)
    837c:	f000 f8b2 	bl	84e4 <_fwalk_reent>
    8380:	bd10      	pop	{r4, pc}
    8382:	46c0      	nop			; (mov r8, r8)
    8384:	000082f9 	.word	0x000082f9

00008388 <std.isra.0>:
    8388:	2300      	movs	r3, #0
    838a:	b510      	push	{r4, lr}
    838c:	0004      	movs	r4, r0
    838e:	6003      	str	r3, [r0, #0]
    8390:	6043      	str	r3, [r0, #4]
    8392:	6083      	str	r3, [r0, #8]
    8394:	8181      	strh	r1, [r0, #12]
    8396:	6643      	str	r3, [r0, #100]	; 0x64
    8398:	81c2      	strh	r2, [r0, #14]
    839a:	6103      	str	r3, [r0, #16]
    839c:	6143      	str	r3, [r0, #20]
    839e:	6183      	str	r3, [r0, #24]
    83a0:	0019      	movs	r1, r3
    83a2:	2208      	movs	r2, #8
    83a4:	305c      	adds	r0, #92	; 0x5c
    83a6:	f000 f90f 	bl	85c8 <memset>
    83aa:	4b05      	ldr	r3, [pc, #20]	; (83c0 <std.isra.0+0x38>)
    83ac:	6224      	str	r4, [r4, #32]
    83ae:	6263      	str	r3, [r4, #36]	; 0x24
    83b0:	4b04      	ldr	r3, [pc, #16]	; (83c4 <std.isra.0+0x3c>)
    83b2:	62a3      	str	r3, [r4, #40]	; 0x28
    83b4:	4b04      	ldr	r3, [pc, #16]	; (83c8 <std.isra.0+0x40>)
    83b6:	62e3      	str	r3, [r4, #44]	; 0x2c
    83b8:	4b04      	ldr	r3, [pc, #16]	; (83cc <std.isra.0+0x44>)
    83ba:	6323      	str	r3, [r4, #48]	; 0x30
    83bc:	bd10      	pop	{r4, pc}
    83be:	46c0      	nop			; (mov r8, r8)
    83c0:	000088b9 	.word	0x000088b9
    83c4:	000088e1 	.word	0x000088e1
    83c8:	00008919 	.word	0x00008919
    83cc:	00008945 	.word	0x00008945

000083d0 <__sfmoreglue>:
    83d0:	b570      	push	{r4, r5, r6, lr}
    83d2:	2568      	movs	r5, #104	; 0x68
    83d4:	1e4a      	subs	r2, r1, #1
    83d6:	4355      	muls	r5, r2
    83d8:	000e      	movs	r6, r1
    83da:	0029      	movs	r1, r5
    83dc:	3174      	adds	r1, #116	; 0x74
    83de:	f000 f945 	bl	866c <_malloc_r>
    83e2:	1e04      	subs	r4, r0, #0
    83e4:	d008      	beq.n	83f8 <__sfmoreglue+0x28>
    83e6:	2100      	movs	r1, #0
    83e8:	002a      	movs	r2, r5
    83ea:	6001      	str	r1, [r0, #0]
    83ec:	6046      	str	r6, [r0, #4]
    83ee:	300c      	adds	r0, #12
    83f0:	60a0      	str	r0, [r4, #8]
    83f2:	3268      	adds	r2, #104	; 0x68
    83f4:	f000 f8e8 	bl	85c8 <memset>
    83f8:	0020      	movs	r0, r4
    83fa:	bd70      	pop	{r4, r5, r6, pc}

000083fc <__sinit>:
    83fc:	6983      	ldr	r3, [r0, #24]
    83fe:	b513      	push	{r0, r1, r4, lr}
    8400:	0004      	movs	r4, r0
    8402:	2b00      	cmp	r3, #0
    8404:	d128      	bne.n	8458 <__sinit+0x5c>
    8406:	6483      	str	r3, [r0, #72]	; 0x48
    8408:	64c3      	str	r3, [r0, #76]	; 0x4c
    840a:	6503      	str	r3, [r0, #80]	; 0x50
    840c:	4b13      	ldr	r3, [pc, #76]	; (845c <__sinit+0x60>)
    840e:	4a14      	ldr	r2, [pc, #80]	; (8460 <__sinit+0x64>)
    8410:	681b      	ldr	r3, [r3, #0]
    8412:	6282      	str	r2, [r0, #40]	; 0x28
    8414:	9301      	str	r3, [sp, #4]
    8416:	4298      	cmp	r0, r3
    8418:	d101      	bne.n	841e <__sinit+0x22>
    841a:	2301      	movs	r3, #1
    841c:	6183      	str	r3, [r0, #24]
    841e:	0020      	movs	r0, r4
    8420:	f000 f820 	bl	8464 <__sfp>
    8424:	6060      	str	r0, [r4, #4]
    8426:	0020      	movs	r0, r4
    8428:	f000 f81c 	bl	8464 <__sfp>
    842c:	60a0      	str	r0, [r4, #8]
    842e:	0020      	movs	r0, r4
    8430:	f000 f818 	bl	8464 <__sfp>
    8434:	2200      	movs	r2, #0
    8436:	60e0      	str	r0, [r4, #12]
    8438:	2104      	movs	r1, #4
    843a:	6860      	ldr	r0, [r4, #4]
    843c:	f7ff ffa4 	bl	8388 <std.isra.0>
    8440:	2201      	movs	r2, #1
    8442:	2109      	movs	r1, #9
    8444:	68a0      	ldr	r0, [r4, #8]
    8446:	f7ff ff9f 	bl	8388 <std.isra.0>
    844a:	2202      	movs	r2, #2
    844c:	2112      	movs	r1, #18
    844e:	68e0      	ldr	r0, [r4, #12]
    8450:	f7ff ff9a 	bl	8388 <std.isra.0>
    8454:	2301      	movs	r3, #1
    8456:	61a3      	str	r3, [r4, #24]
    8458:	bd13      	pop	{r0, r1, r4, pc}
    845a:	46c0      	nop			; (mov r8, r8)
    845c:	0000b69c 	.word	0x0000b69c
    8460:	00008379 	.word	0x00008379

00008464 <__sfp>:
    8464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8466:	4b1e      	ldr	r3, [pc, #120]	; (84e0 <__sfp+0x7c>)
    8468:	0007      	movs	r7, r0
    846a:	681e      	ldr	r6, [r3, #0]
    846c:	69b3      	ldr	r3, [r6, #24]
    846e:	2b00      	cmp	r3, #0
    8470:	d102      	bne.n	8478 <__sfp+0x14>
    8472:	0030      	movs	r0, r6
    8474:	f7ff ffc2 	bl	83fc <__sinit>
    8478:	3648      	adds	r6, #72	; 0x48
    847a:	68b4      	ldr	r4, [r6, #8]
    847c:	6873      	ldr	r3, [r6, #4]
    847e:	3b01      	subs	r3, #1
    8480:	d504      	bpl.n	848c <__sfp+0x28>
    8482:	6833      	ldr	r3, [r6, #0]
    8484:	2b00      	cmp	r3, #0
    8486:	d007      	beq.n	8498 <__sfp+0x34>
    8488:	6836      	ldr	r6, [r6, #0]
    848a:	e7f6      	b.n	847a <__sfp+0x16>
    848c:	220c      	movs	r2, #12
    848e:	5ea5      	ldrsh	r5, [r4, r2]
    8490:	2d00      	cmp	r5, #0
    8492:	d00d      	beq.n	84b0 <__sfp+0x4c>
    8494:	3468      	adds	r4, #104	; 0x68
    8496:	e7f2      	b.n	847e <__sfp+0x1a>
    8498:	2104      	movs	r1, #4
    849a:	0038      	movs	r0, r7
    849c:	f7ff ff98 	bl	83d0 <__sfmoreglue>
    84a0:	6030      	str	r0, [r6, #0]
    84a2:	2800      	cmp	r0, #0
    84a4:	d1f0      	bne.n	8488 <__sfp+0x24>
    84a6:	230c      	movs	r3, #12
    84a8:	0004      	movs	r4, r0
    84aa:	603b      	str	r3, [r7, #0]
    84ac:	0020      	movs	r0, r4
    84ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    84b0:	2301      	movs	r3, #1
    84b2:	0020      	movs	r0, r4
    84b4:	425b      	negs	r3, r3
    84b6:	81e3      	strh	r3, [r4, #14]
    84b8:	3302      	adds	r3, #2
    84ba:	81a3      	strh	r3, [r4, #12]
    84bc:	6665      	str	r5, [r4, #100]	; 0x64
    84be:	6025      	str	r5, [r4, #0]
    84c0:	60a5      	str	r5, [r4, #8]
    84c2:	6065      	str	r5, [r4, #4]
    84c4:	6125      	str	r5, [r4, #16]
    84c6:	6165      	str	r5, [r4, #20]
    84c8:	61a5      	str	r5, [r4, #24]
    84ca:	2208      	movs	r2, #8
    84cc:	0029      	movs	r1, r5
    84ce:	305c      	adds	r0, #92	; 0x5c
    84d0:	f000 f87a 	bl	85c8 <memset>
    84d4:	6365      	str	r5, [r4, #52]	; 0x34
    84d6:	63a5      	str	r5, [r4, #56]	; 0x38
    84d8:	64a5      	str	r5, [r4, #72]	; 0x48
    84da:	64e5      	str	r5, [r4, #76]	; 0x4c
    84dc:	e7e6      	b.n	84ac <__sfp+0x48>
    84de:	46c0      	nop			; (mov r8, r8)
    84e0:	0000b69c 	.word	0x0000b69c

000084e4 <_fwalk_reent>:
    84e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    84e6:	0004      	movs	r4, r0
    84e8:	0007      	movs	r7, r0
    84ea:	2600      	movs	r6, #0
    84ec:	9101      	str	r1, [sp, #4]
    84ee:	3448      	adds	r4, #72	; 0x48
    84f0:	2c00      	cmp	r4, #0
    84f2:	d101      	bne.n	84f8 <_fwalk_reent+0x14>
    84f4:	0030      	movs	r0, r6
    84f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    84f8:	6863      	ldr	r3, [r4, #4]
    84fa:	68a5      	ldr	r5, [r4, #8]
    84fc:	9300      	str	r3, [sp, #0]
    84fe:	9b00      	ldr	r3, [sp, #0]
    8500:	3b01      	subs	r3, #1
    8502:	9300      	str	r3, [sp, #0]
    8504:	d501      	bpl.n	850a <_fwalk_reent+0x26>
    8506:	6824      	ldr	r4, [r4, #0]
    8508:	e7f2      	b.n	84f0 <_fwalk_reent+0xc>
    850a:	89ab      	ldrh	r3, [r5, #12]
    850c:	2b01      	cmp	r3, #1
    850e:	d908      	bls.n	8522 <_fwalk_reent+0x3e>
    8510:	220e      	movs	r2, #14
    8512:	5eab      	ldrsh	r3, [r5, r2]
    8514:	3301      	adds	r3, #1
    8516:	d004      	beq.n	8522 <_fwalk_reent+0x3e>
    8518:	0029      	movs	r1, r5
    851a:	0038      	movs	r0, r7
    851c:	9b01      	ldr	r3, [sp, #4]
    851e:	4798      	blx	r3
    8520:	4306      	orrs	r6, r0
    8522:	3568      	adds	r5, #104	; 0x68
    8524:	e7eb      	b.n	84fe <_fwalk_reent+0x1a>
	...

00008528 <__libc_init_array>:
    8528:	b570      	push	{r4, r5, r6, lr}
    852a:	2600      	movs	r6, #0
    852c:	4d0c      	ldr	r5, [pc, #48]	; (8560 <__libc_init_array+0x38>)
    852e:	4c0d      	ldr	r4, [pc, #52]	; (8564 <__libc_init_array+0x3c>)
    8530:	1b64      	subs	r4, r4, r5
    8532:	10a4      	asrs	r4, r4, #2
    8534:	42a6      	cmp	r6, r4
    8536:	d109      	bne.n	854c <__libc_init_array+0x24>
    8538:	2600      	movs	r6, #0
    853a:	f003 f8cb 	bl	b6d4 <_init>
    853e:	4d0a      	ldr	r5, [pc, #40]	; (8568 <__libc_init_array+0x40>)
    8540:	4c0a      	ldr	r4, [pc, #40]	; (856c <__libc_init_array+0x44>)
    8542:	1b64      	subs	r4, r4, r5
    8544:	10a4      	asrs	r4, r4, #2
    8546:	42a6      	cmp	r6, r4
    8548:	d105      	bne.n	8556 <__libc_init_array+0x2e>
    854a:	bd70      	pop	{r4, r5, r6, pc}
    854c:	00b3      	lsls	r3, r6, #2
    854e:	58eb      	ldr	r3, [r5, r3]
    8550:	4798      	blx	r3
    8552:	3601      	adds	r6, #1
    8554:	e7ee      	b.n	8534 <__libc_init_array+0xc>
    8556:	00b3      	lsls	r3, r6, #2
    8558:	58eb      	ldr	r3, [r5, r3]
    855a:	4798      	blx	r3
    855c:	3601      	adds	r6, #1
    855e:	e7f2      	b.n	8546 <__libc_init_array+0x1e>
    8560:	0000b6e0 	.word	0x0000b6e0
    8564:	0000b6e0 	.word	0x0000b6e0
    8568:	0000b6e0 	.word	0x0000b6e0
    856c:	0000b6e4 	.word	0x0000b6e4

00008570 <malloc>:
    8570:	b510      	push	{r4, lr}
    8572:	4b03      	ldr	r3, [pc, #12]	; (8580 <malloc+0x10>)
    8574:	0001      	movs	r1, r0
    8576:	6818      	ldr	r0, [r3, #0]
    8578:	f000 f878 	bl	866c <_malloc_r>
    857c:	bd10      	pop	{r4, pc}
    857e:	46c0      	nop			; (mov r8, r8)
    8580:	20000068 	.word	0x20000068

00008584 <free>:
    8584:	b510      	push	{r4, lr}
    8586:	4b03      	ldr	r3, [pc, #12]	; (8594 <free+0x10>)
    8588:	0001      	movs	r1, r0
    858a:	6818      	ldr	r0, [r3, #0]
    858c:	f000 f824 	bl	85d8 <_free_r>
    8590:	bd10      	pop	{r4, pc}
    8592:	46c0      	nop			; (mov r8, r8)
    8594:	20000068 	.word	0x20000068

00008598 <memcmp>:
    8598:	b530      	push	{r4, r5, lr}
    859a:	2400      	movs	r4, #0
    859c:	42a2      	cmp	r2, r4
    859e:	d101      	bne.n	85a4 <memcmp+0xc>
    85a0:	2000      	movs	r0, #0
    85a2:	e005      	b.n	85b0 <memcmp+0x18>
    85a4:	5d03      	ldrb	r3, [r0, r4]
    85a6:	1c65      	adds	r5, r4, #1
    85a8:	5d0c      	ldrb	r4, [r1, r4]
    85aa:	42a3      	cmp	r3, r4
    85ac:	d001      	beq.n	85b2 <memcmp+0x1a>
    85ae:	1b18      	subs	r0, r3, r4
    85b0:	bd30      	pop	{r4, r5, pc}
    85b2:	002c      	movs	r4, r5
    85b4:	e7f2      	b.n	859c <memcmp+0x4>

000085b6 <memcpy>:
    85b6:	2300      	movs	r3, #0
    85b8:	b510      	push	{r4, lr}
    85ba:	429a      	cmp	r2, r3
    85bc:	d100      	bne.n	85c0 <memcpy+0xa>
    85be:	bd10      	pop	{r4, pc}
    85c0:	5ccc      	ldrb	r4, [r1, r3]
    85c2:	54c4      	strb	r4, [r0, r3]
    85c4:	3301      	adds	r3, #1
    85c6:	e7f8      	b.n	85ba <memcpy+0x4>

000085c8 <memset>:
    85c8:	0003      	movs	r3, r0
    85ca:	1882      	adds	r2, r0, r2
    85cc:	4293      	cmp	r3, r2
    85ce:	d100      	bne.n	85d2 <memset+0xa>
    85d0:	4770      	bx	lr
    85d2:	7019      	strb	r1, [r3, #0]
    85d4:	3301      	adds	r3, #1
    85d6:	e7f9      	b.n	85cc <memset+0x4>

000085d8 <_free_r>:
    85d8:	b570      	push	{r4, r5, r6, lr}
    85da:	0005      	movs	r5, r0
    85dc:	2900      	cmp	r1, #0
    85de:	d010      	beq.n	8602 <_free_r+0x2a>
    85e0:	1f0c      	subs	r4, r1, #4
    85e2:	6823      	ldr	r3, [r4, #0]
    85e4:	2b00      	cmp	r3, #0
    85e6:	da00      	bge.n	85ea <_free_r+0x12>
    85e8:	18e4      	adds	r4, r4, r3
    85ea:	0028      	movs	r0, r5
    85ec:	f000 fbd6 	bl	8d9c <__malloc_lock>
    85f0:	4a1d      	ldr	r2, [pc, #116]	; (8668 <_free_r+0x90>)
    85f2:	6813      	ldr	r3, [r2, #0]
    85f4:	2b00      	cmp	r3, #0
    85f6:	d105      	bne.n	8604 <_free_r+0x2c>
    85f8:	6063      	str	r3, [r4, #4]
    85fa:	6014      	str	r4, [r2, #0]
    85fc:	0028      	movs	r0, r5
    85fe:	f000 fbce 	bl	8d9e <__malloc_unlock>
    8602:	bd70      	pop	{r4, r5, r6, pc}
    8604:	42a3      	cmp	r3, r4
    8606:	d909      	bls.n	861c <_free_r+0x44>
    8608:	6821      	ldr	r1, [r4, #0]
    860a:	1860      	adds	r0, r4, r1
    860c:	4283      	cmp	r3, r0
    860e:	d1f3      	bne.n	85f8 <_free_r+0x20>
    8610:	6818      	ldr	r0, [r3, #0]
    8612:	685b      	ldr	r3, [r3, #4]
    8614:	1841      	adds	r1, r0, r1
    8616:	6021      	str	r1, [r4, #0]
    8618:	e7ee      	b.n	85f8 <_free_r+0x20>
    861a:	0013      	movs	r3, r2
    861c:	685a      	ldr	r2, [r3, #4]
    861e:	2a00      	cmp	r2, #0
    8620:	d001      	beq.n	8626 <_free_r+0x4e>
    8622:	42a2      	cmp	r2, r4
    8624:	d9f9      	bls.n	861a <_free_r+0x42>
    8626:	6819      	ldr	r1, [r3, #0]
    8628:	1858      	adds	r0, r3, r1
    862a:	42a0      	cmp	r0, r4
    862c:	d10b      	bne.n	8646 <_free_r+0x6e>
    862e:	6820      	ldr	r0, [r4, #0]
    8630:	1809      	adds	r1, r1, r0
    8632:	1858      	adds	r0, r3, r1
    8634:	6019      	str	r1, [r3, #0]
    8636:	4282      	cmp	r2, r0
    8638:	d1e0      	bne.n	85fc <_free_r+0x24>
    863a:	6810      	ldr	r0, [r2, #0]
    863c:	6852      	ldr	r2, [r2, #4]
    863e:	1841      	adds	r1, r0, r1
    8640:	6019      	str	r1, [r3, #0]
    8642:	605a      	str	r2, [r3, #4]
    8644:	e7da      	b.n	85fc <_free_r+0x24>
    8646:	42a0      	cmp	r0, r4
    8648:	d902      	bls.n	8650 <_free_r+0x78>
    864a:	230c      	movs	r3, #12
    864c:	602b      	str	r3, [r5, #0]
    864e:	e7d5      	b.n	85fc <_free_r+0x24>
    8650:	6821      	ldr	r1, [r4, #0]
    8652:	1860      	adds	r0, r4, r1
    8654:	4282      	cmp	r2, r0
    8656:	d103      	bne.n	8660 <_free_r+0x88>
    8658:	6810      	ldr	r0, [r2, #0]
    865a:	6852      	ldr	r2, [r2, #4]
    865c:	1841      	adds	r1, r0, r1
    865e:	6021      	str	r1, [r4, #0]
    8660:	6062      	str	r2, [r4, #4]
    8662:	605c      	str	r4, [r3, #4]
    8664:	e7ca      	b.n	85fc <_free_r+0x24>
    8666:	46c0      	nop			; (mov r8, r8)
    8668:	20000bac 	.word	0x20000bac

0000866c <_malloc_r>:
    866c:	2303      	movs	r3, #3
    866e:	b570      	push	{r4, r5, r6, lr}
    8670:	1ccd      	adds	r5, r1, #3
    8672:	439d      	bics	r5, r3
    8674:	3508      	adds	r5, #8
    8676:	0006      	movs	r6, r0
    8678:	2d0c      	cmp	r5, #12
    867a:	d21e      	bcs.n	86ba <_malloc_r+0x4e>
    867c:	250c      	movs	r5, #12
    867e:	42a9      	cmp	r1, r5
    8680:	d81d      	bhi.n	86be <_malloc_r+0x52>
    8682:	0030      	movs	r0, r6
    8684:	f000 fb8a 	bl	8d9c <__malloc_lock>
    8688:	4a25      	ldr	r2, [pc, #148]	; (8720 <_malloc_r+0xb4>)
    868a:	6814      	ldr	r4, [r2, #0]
    868c:	0021      	movs	r1, r4
    868e:	2900      	cmp	r1, #0
    8690:	d119      	bne.n	86c6 <_malloc_r+0x5a>
    8692:	4c24      	ldr	r4, [pc, #144]	; (8724 <_malloc_r+0xb8>)
    8694:	6823      	ldr	r3, [r4, #0]
    8696:	2b00      	cmp	r3, #0
    8698:	d103      	bne.n	86a2 <_malloc_r+0x36>
    869a:	0030      	movs	r0, r6
    869c:	f000 f844 	bl	8728 <_sbrk_r>
    86a0:	6020      	str	r0, [r4, #0]
    86a2:	0029      	movs	r1, r5
    86a4:	0030      	movs	r0, r6
    86a6:	f000 f83f 	bl	8728 <_sbrk_r>
    86aa:	1c43      	adds	r3, r0, #1
    86ac:	d12c      	bne.n	8708 <_malloc_r+0x9c>
    86ae:	230c      	movs	r3, #12
    86b0:	0030      	movs	r0, r6
    86b2:	6033      	str	r3, [r6, #0]
    86b4:	f000 fb73 	bl	8d9e <__malloc_unlock>
    86b8:	e003      	b.n	86c2 <_malloc_r+0x56>
    86ba:	2d00      	cmp	r5, #0
    86bc:	dadf      	bge.n	867e <_malloc_r+0x12>
    86be:	230c      	movs	r3, #12
    86c0:	6033      	str	r3, [r6, #0]
    86c2:	2000      	movs	r0, #0
    86c4:	bd70      	pop	{r4, r5, r6, pc}
    86c6:	680b      	ldr	r3, [r1, #0]
    86c8:	1b5b      	subs	r3, r3, r5
    86ca:	d41a      	bmi.n	8702 <_malloc_r+0x96>
    86cc:	2b0b      	cmp	r3, #11
    86ce:	d903      	bls.n	86d8 <_malloc_r+0x6c>
    86d0:	600b      	str	r3, [r1, #0]
    86d2:	18cc      	adds	r4, r1, r3
    86d4:	6025      	str	r5, [r4, #0]
    86d6:	e003      	b.n	86e0 <_malloc_r+0x74>
    86d8:	428c      	cmp	r4, r1
    86da:	d10e      	bne.n	86fa <_malloc_r+0x8e>
    86dc:	6863      	ldr	r3, [r4, #4]
    86de:	6013      	str	r3, [r2, #0]
    86e0:	0030      	movs	r0, r6
    86e2:	f000 fb5c 	bl	8d9e <__malloc_unlock>
    86e6:	0020      	movs	r0, r4
    86e8:	2207      	movs	r2, #7
    86ea:	300b      	adds	r0, #11
    86ec:	1d23      	adds	r3, r4, #4
    86ee:	4390      	bics	r0, r2
    86f0:	1ac3      	subs	r3, r0, r3
    86f2:	d0e7      	beq.n	86c4 <_malloc_r+0x58>
    86f4:	425a      	negs	r2, r3
    86f6:	50e2      	str	r2, [r4, r3]
    86f8:	e7e4      	b.n	86c4 <_malloc_r+0x58>
    86fa:	684b      	ldr	r3, [r1, #4]
    86fc:	6063      	str	r3, [r4, #4]
    86fe:	000c      	movs	r4, r1
    8700:	e7ee      	b.n	86e0 <_malloc_r+0x74>
    8702:	000c      	movs	r4, r1
    8704:	6849      	ldr	r1, [r1, #4]
    8706:	e7c2      	b.n	868e <_malloc_r+0x22>
    8708:	2303      	movs	r3, #3
    870a:	1cc4      	adds	r4, r0, #3
    870c:	439c      	bics	r4, r3
    870e:	42a0      	cmp	r0, r4
    8710:	d0e0      	beq.n	86d4 <_malloc_r+0x68>
    8712:	1a21      	subs	r1, r4, r0
    8714:	0030      	movs	r0, r6
    8716:	f000 f807 	bl	8728 <_sbrk_r>
    871a:	1c43      	adds	r3, r0, #1
    871c:	d1da      	bne.n	86d4 <_malloc_r+0x68>
    871e:	e7c6      	b.n	86ae <_malloc_r+0x42>
    8720:	20000bac 	.word	0x20000bac
    8724:	20000bb0 	.word	0x20000bb0

00008728 <_sbrk_r>:
    8728:	2300      	movs	r3, #0
    872a:	b570      	push	{r4, r5, r6, lr}
    872c:	4c06      	ldr	r4, [pc, #24]	; (8748 <_sbrk_r+0x20>)
    872e:	0005      	movs	r5, r0
    8730:	0008      	movs	r0, r1
    8732:	6023      	str	r3, [r4, #0]
    8734:	f7f8 f92c 	bl	990 <_sbrk>
    8738:	1c43      	adds	r3, r0, #1
    873a:	d103      	bne.n	8744 <_sbrk_r+0x1c>
    873c:	6823      	ldr	r3, [r4, #0]
    873e:	2b00      	cmp	r3, #0
    8740:	d000      	beq.n	8744 <_sbrk_r+0x1c>
    8742:	602b      	str	r3, [r5, #0]
    8744:	bd70      	pop	{r4, r5, r6, pc}
    8746:	46c0      	nop			; (mov r8, r8)
    8748:	20000c10 	.word	0x20000c10

0000874c <setbuf>:
    874c:	424a      	negs	r2, r1
    874e:	414a      	adcs	r2, r1
    8750:	2380      	movs	r3, #128	; 0x80
    8752:	b510      	push	{r4, lr}
    8754:	0052      	lsls	r2, r2, #1
    8756:	00db      	lsls	r3, r3, #3
    8758:	f000 f802 	bl	8760 <setvbuf>
    875c:	bd10      	pop	{r4, pc}
	...

00008760 <setvbuf>:
    8760:	b5f0      	push	{r4, r5, r6, r7, lr}
    8762:	001d      	movs	r5, r3
    8764:	4b4f      	ldr	r3, [pc, #316]	; (88a4 <setvbuf+0x144>)
    8766:	b085      	sub	sp, #20
    8768:	681e      	ldr	r6, [r3, #0]
    876a:	0004      	movs	r4, r0
    876c:	000f      	movs	r7, r1
    876e:	9200      	str	r2, [sp, #0]
    8770:	2e00      	cmp	r6, #0
    8772:	d005      	beq.n	8780 <setvbuf+0x20>
    8774:	69b3      	ldr	r3, [r6, #24]
    8776:	2b00      	cmp	r3, #0
    8778:	d102      	bne.n	8780 <setvbuf+0x20>
    877a:	0030      	movs	r0, r6
    877c:	f7ff fe3e 	bl	83fc <__sinit>
    8780:	4b49      	ldr	r3, [pc, #292]	; (88a8 <setvbuf+0x148>)
    8782:	429c      	cmp	r4, r3
    8784:	d150      	bne.n	8828 <setvbuf+0xc8>
    8786:	6874      	ldr	r4, [r6, #4]
    8788:	9b00      	ldr	r3, [sp, #0]
    878a:	2b02      	cmp	r3, #2
    878c:	d005      	beq.n	879a <setvbuf+0x3a>
    878e:	2b01      	cmp	r3, #1
    8790:	d900      	bls.n	8794 <setvbuf+0x34>
    8792:	e084      	b.n	889e <setvbuf+0x13e>
    8794:	2d00      	cmp	r5, #0
    8796:	da00      	bge.n	879a <setvbuf+0x3a>
    8798:	e081      	b.n	889e <setvbuf+0x13e>
    879a:	0021      	movs	r1, r4
    879c:	0030      	movs	r0, r6
    879e:	f7ff fdab 	bl	82f8 <_fflush_r>
    87a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    87a4:	2900      	cmp	r1, #0
    87a6:	d008      	beq.n	87ba <setvbuf+0x5a>
    87a8:	0023      	movs	r3, r4
    87aa:	3344      	adds	r3, #68	; 0x44
    87ac:	4299      	cmp	r1, r3
    87ae:	d002      	beq.n	87b6 <setvbuf+0x56>
    87b0:	0030      	movs	r0, r6
    87b2:	f7ff ff11 	bl	85d8 <_free_r>
    87b6:	2300      	movs	r3, #0
    87b8:	6363      	str	r3, [r4, #52]	; 0x34
    87ba:	2300      	movs	r3, #0
    87bc:	61a3      	str	r3, [r4, #24]
    87be:	6063      	str	r3, [r4, #4]
    87c0:	89a3      	ldrh	r3, [r4, #12]
    87c2:	061b      	lsls	r3, r3, #24
    87c4:	d503      	bpl.n	87ce <setvbuf+0x6e>
    87c6:	6921      	ldr	r1, [r4, #16]
    87c8:	0030      	movs	r0, r6
    87ca:	f7ff ff05 	bl	85d8 <_free_r>
    87ce:	89a3      	ldrh	r3, [r4, #12]
    87d0:	4a36      	ldr	r2, [pc, #216]	; (88ac <setvbuf+0x14c>)
    87d2:	4013      	ands	r3, r2
    87d4:	81a3      	strh	r3, [r4, #12]
    87d6:	9b00      	ldr	r3, [sp, #0]
    87d8:	2b02      	cmp	r3, #2
    87da:	d05a      	beq.n	8892 <setvbuf+0x132>
    87dc:	ab03      	add	r3, sp, #12
    87de:	aa02      	add	r2, sp, #8
    87e0:	0021      	movs	r1, r4
    87e2:	0030      	movs	r0, r6
    87e4:	f000 fa6e 	bl	8cc4 <__swhatbuf_r>
    87e8:	89a3      	ldrh	r3, [r4, #12]
    87ea:	4318      	orrs	r0, r3
    87ec:	81a0      	strh	r0, [r4, #12]
    87ee:	2d00      	cmp	r5, #0
    87f0:	d124      	bne.n	883c <setvbuf+0xdc>
    87f2:	9d02      	ldr	r5, [sp, #8]
    87f4:	0028      	movs	r0, r5
    87f6:	f7ff febb 	bl	8570 <malloc>
    87fa:	9501      	str	r5, [sp, #4]
    87fc:	1e07      	subs	r7, r0, #0
    87fe:	d142      	bne.n	8886 <setvbuf+0x126>
    8800:	9b02      	ldr	r3, [sp, #8]
    8802:	9301      	str	r3, [sp, #4]
    8804:	42ab      	cmp	r3, r5
    8806:	d139      	bne.n	887c <setvbuf+0x11c>
    8808:	2001      	movs	r0, #1
    880a:	4240      	negs	r0, r0
    880c:	2302      	movs	r3, #2
    880e:	89a2      	ldrh	r2, [r4, #12]
    8810:	4313      	orrs	r3, r2
    8812:	81a3      	strh	r3, [r4, #12]
    8814:	2300      	movs	r3, #0
    8816:	60a3      	str	r3, [r4, #8]
    8818:	0023      	movs	r3, r4
    881a:	3347      	adds	r3, #71	; 0x47
    881c:	6023      	str	r3, [r4, #0]
    881e:	6123      	str	r3, [r4, #16]
    8820:	2301      	movs	r3, #1
    8822:	6163      	str	r3, [r4, #20]
    8824:	b005      	add	sp, #20
    8826:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8828:	4b21      	ldr	r3, [pc, #132]	; (88b0 <setvbuf+0x150>)
    882a:	429c      	cmp	r4, r3
    882c:	d101      	bne.n	8832 <setvbuf+0xd2>
    882e:	68b4      	ldr	r4, [r6, #8]
    8830:	e7aa      	b.n	8788 <setvbuf+0x28>
    8832:	4b20      	ldr	r3, [pc, #128]	; (88b4 <setvbuf+0x154>)
    8834:	429c      	cmp	r4, r3
    8836:	d1a7      	bne.n	8788 <setvbuf+0x28>
    8838:	68f4      	ldr	r4, [r6, #12]
    883a:	e7a5      	b.n	8788 <setvbuf+0x28>
    883c:	2f00      	cmp	r7, #0
    883e:	d0d9      	beq.n	87f4 <setvbuf+0x94>
    8840:	69b3      	ldr	r3, [r6, #24]
    8842:	2b00      	cmp	r3, #0
    8844:	d102      	bne.n	884c <setvbuf+0xec>
    8846:	0030      	movs	r0, r6
    8848:	f7ff fdd8 	bl	83fc <__sinit>
    884c:	9b00      	ldr	r3, [sp, #0]
    884e:	2b01      	cmp	r3, #1
    8850:	d103      	bne.n	885a <setvbuf+0xfa>
    8852:	89a3      	ldrh	r3, [r4, #12]
    8854:	9a00      	ldr	r2, [sp, #0]
    8856:	431a      	orrs	r2, r3
    8858:	81a2      	strh	r2, [r4, #12]
    885a:	2008      	movs	r0, #8
    885c:	89a3      	ldrh	r3, [r4, #12]
    885e:	6027      	str	r7, [r4, #0]
    8860:	6127      	str	r7, [r4, #16]
    8862:	6165      	str	r5, [r4, #20]
    8864:	4018      	ands	r0, r3
    8866:	d018      	beq.n	889a <setvbuf+0x13a>
    8868:	2001      	movs	r0, #1
    886a:	4018      	ands	r0, r3
    886c:	2300      	movs	r3, #0
    886e:	4298      	cmp	r0, r3
    8870:	d011      	beq.n	8896 <setvbuf+0x136>
    8872:	426d      	negs	r5, r5
    8874:	60a3      	str	r3, [r4, #8]
    8876:	61a5      	str	r5, [r4, #24]
    8878:	0018      	movs	r0, r3
    887a:	e7d3      	b.n	8824 <setvbuf+0xc4>
    887c:	9801      	ldr	r0, [sp, #4]
    887e:	f7ff fe77 	bl	8570 <malloc>
    8882:	1e07      	subs	r7, r0, #0
    8884:	d0c0      	beq.n	8808 <setvbuf+0xa8>
    8886:	2380      	movs	r3, #128	; 0x80
    8888:	89a2      	ldrh	r2, [r4, #12]
    888a:	9d01      	ldr	r5, [sp, #4]
    888c:	4313      	orrs	r3, r2
    888e:	81a3      	strh	r3, [r4, #12]
    8890:	e7d6      	b.n	8840 <setvbuf+0xe0>
    8892:	2000      	movs	r0, #0
    8894:	e7ba      	b.n	880c <setvbuf+0xac>
    8896:	60a5      	str	r5, [r4, #8]
    8898:	e7c4      	b.n	8824 <setvbuf+0xc4>
    889a:	60a0      	str	r0, [r4, #8]
    889c:	e7c2      	b.n	8824 <setvbuf+0xc4>
    889e:	2001      	movs	r0, #1
    88a0:	4240      	negs	r0, r0
    88a2:	e7bf      	b.n	8824 <setvbuf+0xc4>
    88a4:	20000068 	.word	0x20000068
    88a8:	0000b65c 	.word	0x0000b65c
    88ac:	fffff35c 	.word	0xfffff35c
    88b0:	0000b67c 	.word	0x0000b67c
    88b4:	0000b63c 	.word	0x0000b63c

000088b8 <__sread>:
    88b8:	b570      	push	{r4, r5, r6, lr}
    88ba:	000c      	movs	r4, r1
    88bc:	250e      	movs	r5, #14
    88be:	5f49      	ldrsh	r1, [r1, r5]
    88c0:	f000 fea0 	bl	9604 <_read_r>
    88c4:	2800      	cmp	r0, #0
    88c6:	db03      	blt.n	88d0 <__sread+0x18>
    88c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    88ca:	181b      	adds	r3, r3, r0
    88cc:	6563      	str	r3, [r4, #84]	; 0x54
    88ce:	bd70      	pop	{r4, r5, r6, pc}
    88d0:	89a3      	ldrh	r3, [r4, #12]
    88d2:	4a02      	ldr	r2, [pc, #8]	; (88dc <__sread+0x24>)
    88d4:	4013      	ands	r3, r2
    88d6:	81a3      	strh	r3, [r4, #12]
    88d8:	e7f9      	b.n	88ce <__sread+0x16>
    88da:	46c0      	nop			; (mov r8, r8)
    88dc:	ffffefff 	.word	0xffffefff

000088e0 <__swrite>:
    88e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    88e2:	001f      	movs	r7, r3
    88e4:	898b      	ldrh	r3, [r1, #12]
    88e6:	0005      	movs	r5, r0
    88e8:	000c      	movs	r4, r1
    88ea:	0016      	movs	r6, r2
    88ec:	05db      	lsls	r3, r3, #23
    88ee:	d505      	bpl.n	88fc <__swrite+0x1c>
    88f0:	230e      	movs	r3, #14
    88f2:	5ec9      	ldrsh	r1, [r1, r3]
    88f4:	2200      	movs	r2, #0
    88f6:	2302      	movs	r3, #2
    88f8:	f000 f9d0 	bl	8c9c <_lseek_r>
    88fc:	89a3      	ldrh	r3, [r4, #12]
    88fe:	4a05      	ldr	r2, [pc, #20]	; (8914 <__swrite+0x34>)
    8900:	0028      	movs	r0, r5
    8902:	4013      	ands	r3, r2
    8904:	81a3      	strh	r3, [r4, #12]
    8906:	0032      	movs	r2, r6
    8908:	230e      	movs	r3, #14
    890a:	5ee1      	ldrsh	r1, [r4, r3]
    890c:	003b      	movs	r3, r7
    890e:	f000 f929 	bl	8b64 <_write_r>
    8912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8914:	ffffefff 	.word	0xffffefff

00008918 <__sseek>:
    8918:	b570      	push	{r4, r5, r6, lr}
    891a:	000c      	movs	r4, r1
    891c:	250e      	movs	r5, #14
    891e:	5f49      	ldrsh	r1, [r1, r5]
    8920:	f000 f9bc 	bl	8c9c <_lseek_r>
    8924:	89a3      	ldrh	r3, [r4, #12]
    8926:	1c42      	adds	r2, r0, #1
    8928:	d103      	bne.n	8932 <__sseek+0x1a>
    892a:	4a05      	ldr	r2, [pc, #20]	; (8940 <__sseek+0x28>)
    892c:	4013      	ands	r3, r2
    892e:	81a3      	strh	r3, [r4, #12]
    8930:	bd70      	pop	{r4, r5, r6, pc}
    8932:	2280      	movs	r2, #128	; 0x80
    8934:	0152      	lsls	r2, r2, #5
    8936:	4313      	orrs	r3, r2
    8938:	81a3      	strh	r3, [r4, #12]
    893a:	6560      	str	r0, [r4, #84]	; 0x54
    893c:	e7f8      	b.n	8930 <__sseek+0x18>
    893e:	46c0      	nop			; (mov r8, r8)
    8940:	ffffefff 	.word	0xffffefff

00008944 <__sclose>:
    8944:	b510      	push	{r4, lr}
    8946:	230e      	movs	r3, #14
    8948:	5ec9      	ldrsh	r1, [r1, r3]
    894a:	f000 f995 	bl	8c78 <_close_r>
    894e:	bd10      	pop	{r4, pc}

00008950 <strchr>:
    8950:	b2c9      	uxtb	r1, r1
    8952:	7803      	ldrb	r3, [r0, #0]
    8954:	2b00      	cmp	r3, #0
    8956:	d004      	beq.n	8962 <strchr+0x12>
    8958:	4299      	cmp	r1, r3
    895a:	d100      	bne.n	895e <strchr+0xe>
    895c:	4770      	bx	lr
    895e:	3001      	adds	r0, #1
    8960:	e7f7      	b.n	8952 <strchr+0x2>
    8962:	424b      	negs	r3, r1
    8964:	4159      	adcs	r1, r3
    8966:	4249      	negs	r1, r1
    8968:	4008      	ands	r0, r1
    896a:	e7f7      	b.n	895c <strchr+0xc>

0000896c <strcmp>:
    896c:	7802      	ldrb	r2, [r0, #0]
    896e:	780b      	ldrb	r3, [r1, #0]
    8970:	2a00      	cmp	r2, #0
    8972:	d003      	beq.n	897c <strcmp+0x10>
    8974:	3001      	adds	r0, #1
    8976:	3101      	adds	r1, #1
    8978:	429a      	cmp	r2, r3
    897a:	d0f7      	beq.n	896c <strcmp>
    897c:	1ad0      	subs	r0, r2, r3
    897e:	4770      	bx	lr

00008980 <strcpy>:
    8980:	1c03      	adds	r3, r0, #0
    8982:	780a      	ldrb	r2, [r1, #0]
    8984:	3101      	adds	r1, #1
    8986:	701a      	strb	r2, [r3, #0]
    8988:	3301      	adds	r3, #1
    898a:	2a00      	cmp	r2, #0
    898c:	d1f9      	bne.n	8982 <strcpy+0x2>
    898e:	4770      	bx	lr

00008990 <strlen>:
    8990:	2300      	movs	r3, #0
    8992:	5cc2      	ldrb	r2, [r0, r3]
    8994:	3301      	adds	r3, #1
    8996:	2a00      	cmp	r2, #0
    8998:	d1fb      	bne.n	8992 <strlen+0x2>
    899a:	1e58      	subs	r0, r3, #1
    899c:	4770      	bx	lr

0000899e <strncmp>:
    899e:	2300      	movs	r3, #0
    89a0:	b530      	push	{r4, r5, lr}
    89a2:	429a      	cmp	r2, r3
    89a4:	d00a      	beq.n	89bc <strncmp+0x1e>
    89a6:	3a01      	subs	r2, #1
    89a8:	5cc4      	ldrb	r4, [r0, r3]
    89aa:	5ccd      	ldrb	r5, [r1, r3]
    89ac:	42ac      	cmp	r4, r5
    89ae:	d104      	bne.n	89ba <strncmp+0x1c>
    89b0:	429a      	cmp	r2, r3
    89b2:	d002      	beq.n	89ba <strncmp+0x1c>
    89b4:	3301      	adds	r3, #1
    89b6:	2c00      	cmp	r4, #0
    89b8:	d1f6      	bne.n	89a8 <strncmp+0xa>
    89ba:	1b63      	subs	r3, r4, r5
    89bc:	0018      	movs	r0, r3
    89be:	bd30      	pop	{r4, r5, pc}

000089c0 <strncpy>:
    89c0:	b570      	push	{r4, r5, r6, lr}
    89c2:	0004      	movs	r4, r0
    89c4:	2a00      	cmp	r2, #0
    89c6:	d100      	bne.n	89ca <strncpy+0xa>
    89c8:	bd70      	pop	{r4, r5, r6, pc}
    89ca:	780d      	ldrb	r5, [r1, #0]
    89cc:	1e56      	subs	r6, r2, #1
    89ce:	1c63      	adds	r3, r4, #1
    89d0:	7025      	strb	r5, [r4, #0]
    89d2:	3101      	adds	r1, #1
    89d4:	2d00      	cmp	r5, #0
    89d6:	d105      	bne.n	89e4 <strncpy+0x24>
    89d8:	18a4      	adds	r4, r4, r2
    89da:	429c      	cmp	r4, r3
    89dc:	d0f4      	beq.n	89c8 <strncpy+0x8>
    89de:	701d      	strb	r5, [r3, #0]
    89e0:	3301      	adds	r3, #1
    89e2:	e7fa      	b.n	89da <strncpy+0x1a>
    89e4:	001c      	movs	r4, r3
    89e6:	0032      	movs	r2, r6
    89e8:	e7ec      	b.n	89c4 <strncpy+0x4>

000089ea <strstr>:
    89ea:	b510      	push	{r4, lr}
    89ec:	0002      	movs	r2, r0
    89ee:	7800      	ldrb	r0, [r0, #0]
    89f0:	2800      	cmp	r0, #0
    89f2:	d104      	bne.n	89fe <strstr+0x14>
    89f4:	7809      	ldrb	r1, [r1, #0]
    89f6:	2900      	cmp	r1, #0
    89f8:	d00d      	beq.n	8a16 <strstr+0x2c>
    89fa:	bd10      	pop	{r4, pc}
    89fc:	3201      	adds	r2, #1
    89fe:	7810      	ldrb	r0, [r2, #0]
    8a00:	2800      	cmp	r0, #0
    8a02:	d0fa      	beq.n	89fa <strstr+0x10>
    8a04:	2300      	movs	r3, #0
    8a06:	5cc8      	ldrb	r0, [r1, r3]
    8a08:	2800      	cmp	r0, #0
    8a0a:	d004      	beq.n	8a16 <strstr+0x2c>
    8a0c:	5cd4      	ldrb	r4, [r2, r3]
    8a0e:	4284      	cmp	r4, r0
    8a10:	d1f4      	bne.n	89fc <strstr+0x12>
    8a12:	3301      	adds	r3, #1
    8a14:	e7f7      	b.n	8a06 <strstr+0x1c>
    8a16:	0010      	movs	r0, r2
    8a18:	e7ef      	b.n	89fa <strstr+0x10>
	...

00008a1c <viprintf>:
    8a1c:	4b09      	ldr	r3, [pc, #36]	; (8a44 <viprintf+0x28>)
    8a1e:	b570      	push	{r4, r5, r6, lr}
    8a20:	681c      	ldr	r4, [r3, #0]
    8a22:	0005      	movs	r5, r0
    8a24:	000e      	movs	r6, r1
    8a26:	2c00      	cmp	r4, #0
    8a28:	d005      	beq.n	8a36 <viprintf+0x1a>
    8a2a:	69a3      	ldr	r3, [r4, #24]
    8a2c:	2b00      	cmp	r3, #0
    8a2e:	d102      	bne.n	8a36 <viprintf+0x1a>
    8a30:	0020      	movs	r0, r4
    8a32:	f7ff fce3 	bl	83fc <__sinit>
    8a36:	0033      	movs	r3, r6
    8a38:	002a      	movs	r2, r5
    8a3a:	68a1      	ldr	r1, [r4, #8]
    8a3c:	0020      	movs	r0, r4
    8a3e:	f000 fb3d 	bl	90bc <_vfiprintf_r>
    8a42:	bd70      	pop	{r4, r5, r6, pc}
    8a44:	20000068 	.word	0x20000068

00008a48 <_vsniprintf_r>:
    8a48:	b530      	push	{r4, r5, lr}
    8a4a:	0014      	movs	r4, r2
    8a4c:	b09b      	sub	sp, #108	; 0x6c
    8a4e:	0005      	movs	r5, r0
    8a50:	001a      	movs	r2, r3
    8a52:	2c00      	cmp	r4, #0
    8a54:	da05      	bge.n	8a62 <_vsniprintf_r+0x1a>
    8a56:	238b      	movs	r3, #139	; 0x8b
    8a58:	6003      	str	r3, [r0, #0]
    8a5a:	2001      	movs	r0, #1
    8a5c:	4240      	negs	r0, r0
    8a5e:	b01b      	add	sp, #108	; 0x6c
    8a60:	bd30      	pop	{r4, r5, pc}
    8a62:	2382      	movs	r3, #130	; 0x82
    8a64:	4668      	mov	r0, sp
    8a66:	009b      	lsls	r3, r3, #2
    8a68:	8183      	strh	r3, [r0, #12]
    8a6a:	2300      	movs	r3, #0
    8a6c:	9100      	str	r1, [sp, #0]
    8a6e:	9104      	str	r1, [sp, #16]
    8a70:	429c      	cmp	r4, r3
    8a72:	d000      	beq.n	8a76 <_vsniprintf_r+0x2e>
    8a74:	1e63      	subs	r3, r4, #1
    8a76:	9302      	str	r3, [sp, #8]
    8a78:	9305      	str	r3, [sp, #20]
    8a7a:	2301      	movs	r3, #1
    8a7c:	4669      	mov	r1, sp
    8a7e:	425b      	negs	r3, r3
    8a80:	81cb      	strh	r3, [r1, #14]
    8a82:	0028      	movs	r0, r5
    8a84:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    8a86:	f000 f9ed 	bl	8e64 <_svfiprintf_r>
    8a8a:	1c43      	adds	r3, r0, #1
    8a8c:	da01      	bge.n	8a92 <_vsniprintf_r+0x4a>
    8a8e:	238b      	movs	r3, #139	; 0x8b
    8a90:	602b      	str	r3, [r5, #0]
    8a92:	2c00      	cmp	r4, #0
    8a94:	d0e3      	beq.n	8a5e <_vsniprintf_r+0x16>
    8a96:	2300      	movs	r3, #0
    8a98:	9a00      	ldr	r2, [sp, #0]
    8a9a:	7013      	strb	r3, [r2, #0]
    8a9c:	e7df      	b.n	8a5e <_vsniprintf_r+0x16>
	...

00008aa0 <vsniprintf>:
    8aa0:	b507      	push	{r0, r1, r2, lr}
    8aa2:	9300      	str	r3, [sp, #0]
    8aa4:	0013      	movs	r3, r2
    8aa6:	000a      	movs	r2, r1
    8aa8:	0001      	movs	r1, r0
    8aaa:	4802      	ldr	r0, [pc, #8]	; (8ab4 <vsniprintf+0x14>)
    8aac:	6800      	ldr	r0, [r0, #0]
    8aae:	f7ff ffcb 	bl	8a48 <_vsniprintf_r>
    8ab2:	bd0e      	pop	{r1, r2, r3, pc}
    8ab4:	20000068 	.word	0x20000068

00008ab8 <__swbuf_r>:
    8ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8aba:	0005      	movs	r5, r0
    8abc:	000e      	movs	r6, r1
    8abe:	0014      	movs	r4, r2
    8ac0:	2800      	cmp	r0, #0
    8ac2:	d004      	beq.n	8ace <__swbuf_r+0x16>
    8ac4:	6983      	ldr	r3, [r0, #24]
    8ac6:	2b00      	cmp	r3, #0
    8ac8:	d101      	bne.n	8ace <__swbuf_r+0x16>
    8aca:	f7ff fc97 	bl	83fc <__sinit>
    8ace:	4b22      	ldr	r3, [pc, #136]	; (8b58 <__swbuf_r+0xa0>)
    8ad0:	429c      	cmp	r4, r3
    8ad2:	d12d      	bne.n	8b30 <__swbuf_r+0x78>
    8ad4:	686c      	ldr	r4, [r5, #4]
    8ad6:	69a3      	ldr	r3, [r4, #24]
    8ad8:	60a3      	str	r3, [r4, #8]
    8ada:	89a3      	ldrh	r3, [r4, #12]
    8adc:	071b      	lsls	r3, r3, #28
    8ade:	d531      	bpl.n	8b44 <__swbuf_r+0x8c>
    8ae0:	6923      	ldr	r3, [r4, #16]
    8ae2:	2b00      	cmp	r3, #0
    8ae4:	d02e      	beq.n	8b44 <__swbuf_r+0x8c>
    8ae6:	6823      	ldr	r3, [r4, #0]
    8ae8:	6922      	ldr	r2, [r4, #16]
    8aea:	b2f7      	uxtb	r7, r6
    8aec:	1a98      	subs	r0, r3, r2
    8aee:	6963      	ldr	r3, [r4, #20]
    8af0:	b2f6      	uxtb	r6, r6
    8af2:	4298      	cmp	r0, r3
    8af4:	db05      	blt.n	8b02 <__swbuf_r+0x4a>
    8af6:	0021      	movs	r1, r4
    8af8:	0028      	movs	r0, r5
    8afa:	f7ff fbfd 	bl	82f8 <_fflush_r>
    8afe:	2800      	cmp	r0, #0
    8b00:	d126      	bne.n	8b50 <__swbuf_r+0x98>
    8b02:	68a3      	ldr	r3, [r4, #8]
    8b04:	3001      	adds	r0, #1
    8b06:	3b01      	subs	r3, #1
    8b08:	60a3      	str	r3, [r4, #8]
    8b0a:	6823      	ldr	r3, [r4, #0]
    8b0c:	1c5a      	adds	r2, r3, #1
    8b0e:	6022      	str	r2, [r4, #0]
    8b10:	701f      	strb	r7, [r3, #0]
    8b12:	6963      	ldr	r3, [r4, #20]
    8b14:	4298      	cmp	r0, r3
    8b16:	d004      	beq.n	8b22 <__swbuf_r+0x6a>
    8b18:	89a3      	ldrh	r3, [r4, #12]
    8b1a:	07db      	lsls	r3, r3, #31
    8b1c:	d51a      	bpl.n	8b54 <__swbuf_r+0x9c>
    8b1e:	2e0a      	cmp	r6, #10
    8b20:	d118      	bne.n	8b54 <__swbuf_r+0x9c>
    8b22:	0021      	movs	r1, r4
    8b24:	0028      	movs	r0, r5
    8b26:	f7ff fbe7 	bl	82f8 <_fflush_r>
    8b2a:	2800      	cmp	r0, #0
    8b2c:	d012      	beq.n	8b54 <__swbuf_r+0x9c>
    8b2e:	e00f      	b.n	8b50 <__swbuf_r+0x98>
    8b30:	4b0a      	ldr	r3, [pc, #40]	; (8b5c <__swbuf_r+0xa4>)
    8b32:	429c      	cmp	r4, r3
    8b34:	d101      	bne.n	8b3a <__swbuf_r+0x82>
    8b36:	68ac      	ldr	r4, [r5, #8]
    8b38:	e7cd      	b.n	8ad6 <__swbuf_r+0x1e>
    8b3a:	4b09      	ldr	r3, [pc, #36]	; (8b60 <__swbuf_r+0xa8>)
    8b3c:	429c      	cmp	r4, r3
    8b3e:	d1ca      	bne.n	8ad6 <__swbuf_r+0x1e>
    8b40:	68ec      	ldr	r4, [r5, #12]
    8b42:	e7c8      	b.n	8ad6 <__swbuf_r+0x1e>
    8b44:	0021      	movs	r1, r4
    8b46:	0028      	movs	r0, r5
    8b48:	f000 f820 	bl	8b8c <__swsetup_r>
    8b4c:	2800      	cmp	r0, #0
    8b4e:	d0ca      	beq.n	8ae6 <__swbuf_r+0x2e>
    8b50:	2601      	movs	r6, #1
    8b52:	4276      	negs	r6, r6
    8b54:	0030      	movs	r0, r6
    8b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8b58:	0000b65c 	.word	0x0000b65c
    8b5c:	0000b67c 	.word	0x0000b67c
    8b60:	0000b63c 	.word	0x0000b63c

00008b64 <_write_r>:
    8b64:	b570      	push	{r4, r5, r6, lr}
    8b66:	0005      	movs	r5, r0
    8b68:	0008      	movs	r0, r1
    8b6a:	0011      	movs	r1, r2
    8b6c:	2200      	movs	r2, #0
    8b6e:	4c06      	ldr	r4, [pc, #24]	; (8b88 <_write_r+0x24>)
    8b70:	6022      	str	r2, [r4, #0]
    8b72:	001a      	movs	r2, r3
    8b74:	f7ff f92a 	bl	7dcc <_write>
    8b78:	1c43      	adds	r3, r0, #1
    8b7a:	d103      	bne.n	8b84 <_write_r+0x20>
    8b7c:	6823      	ldr	r3, [r4, #0]
    8b7e:	2b00      	cmp	r3, #0
    8b80:	d000      	beq.n	8b84 <_write_r+0x20>
    8b82:	602b      	str	r3, [r5, #0]
    8b84:	bd70      	pop	{r4, r5, r6, pc}
    8b86:	46c0      	nop			; (mov r8, r8)
    8b88:	20000c10 	.word	0x20000c10

00008b8c <__swsetup_r>:
    8b8c:	4b36      	ldr	r3, [pc, #216]	; (8c68 <__swsetup_r+0xdc>)
    8b8e:	b570      	push	{r4, r5, r6, lr}
    8b90:	681d      	ldr	r5, [r3, #0]
    8b92:	0006      	movs	r6, r0
    8b94:	000c      	movs	r4, r1
    8b96:	2d00      	cmp	r5, #0
    8b98:	d005      	beq.n	8ba6 <__swsetup_r+0x1a>
    8b9a:	69ab      	ldr	r3, [r5, #24]
    8b9c:	2b00      	cmp	r3, #0
    8b9e:	d102      	bne.n	8ba6 <__swsetup_r+0x1a>
    8ba0:	0028      	movs	r0, r5
    8ba2:	f7ff fc2b 	bl	83fc <__sinit>
    8ba6:	4b31      	ldr	r3, [pc, #196]	; (8c6c <__swsetup_r+0xe0>)
    8ba8:	429c      	cmp	r4, r3
    8baa:	d10f      	bne.n	8bcc <__swsetup_r+0x40>
    8bac:	686c      	ldr	r4, [r5, #4]
    8bae:	230c      	movs	r3, #12
    8bb0:	5ee2      	ldrsh	r2, [r4, r3]
    8bb2:	b293      	uxth	r3, r2
    8bb4:	0719      	lsls	r1, r3, #28
    8bb6:	d42d      	bmi.n	8c14 <__swsetup_r+0x88>
    8bb8:	06d9      	lsls	r1, r3, #27
    8bba:	d411      	bmi.n	8be0 <__swsetup_r+0x54>
    8bbc:	2309      	movs	r3, #9
    8bbe:	2001      	movs	r0, #1
    8bc0:	6033      	str	r3, [r6, #0]
    8bc2:	3337      	adds	r3, #55	; 0x37
    8bc4:	4313      	orrs	r3, r2
    8bc6:	81a3      	strh	r3, [r4, #12]
    8bc8:	4240      	negs	r0, r0
    8bca:	bd70      	pop	{r4, r5, r6, pc}
    8bcc:	4b28      	ldr	r3, [pc, #160]	; (8c70 <__swsetup_r+0xe4>)
    8bce:	429c      	cmp	r4, r3
    8bd0:	d101      	bne.n	8bd6 <__swsetup_r+0x4a>
    8bd2:	68ac      	ldr	r4, [r5, #8]
    8bd4:	e7eb      	b.n	8bae <__swsetup_r+0x22>
    8bd6:	4b27      	ldr	r3, [pc, #156]	; (8c74 <__swsetup_r+0xe8>)
    8bd8:	429c      	cmp	r4, r3
    8bda:	d1e8      	bne.n	8bae <__swsetup_r+0x22>
    8bdc:	68ec      	ldr	r4, [r5, #12]
    8bde:	e7e6      	b.n	8bae <__swsetup_r+0x22>
    8be0:	075b      	lsls	r3, r3, #29
    8be2:	d513      	bpl.n	8c0c <__swsetup_r+0x80>
    8be4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8be6:	2900      	cmp	r1, #0
    8be8:	d008      	beq.n	8bfc <__swsetup_r+0x70>
    8bea:	0023      	movs	r3, r4
    8bec:	3344      	adds	r3, #68	; 0x44
    8bee:	4299      	cmp	r1, r3
    8bf0:	d002      	beq.n	8bf8 <__swsetup_r+0x6c>
    8bf2:	0030      	movs	r0, r6
    8bf4:	f7ff fcf0 	bl	85d8 <_free_r>
    8bf8:	2300      	movs	r3, #0
    8bfa:	6363      	str	r3, [r4, #52]	; 0x34
    8bfc:	2224      	movs	r2, #36	; 0x24
    8bfe:	89a3      	ldrh	r3, [r4, #12]
    8c00:	4393      	bics	r3, r2
    8c02:	81a3      	strh	r3, [r4, #12]
    8c04:	2300      	movs	r3, #0
    8c06:	6063      	str	r3, [r4, #4]
    8c08:	6923      	ldr	r3, [r4, #16]
    8c0a:	6023      	str	r3, [r4, #0]
    8c0c:	2308      	movs	r3, #8
    8c0e:	89a2      	ldrh	r2, [r4, #12]
    8c10:	4313      	orrs	r3, r2
    8c12:	81a3      	strh	r3, [r4, #12]
    8c14:	6923      	ldr	r3, [r4, #16]
    8c16:	2b00      	cmp	r3, #0
    8c18:	d10b      	bne.n	8c32 <__swsetup_r+0xa6>
    8c1a:	21a0      	movs	r1, #160	; 0xa0
    8c1c:	2280      	movs	r2, #128	; 0x80
    8c1e:	89a3      	ldrh	r3, [r4, #12]
    8c20:	0089      	lsls	r1, r1, #2
    8c22:	0092      	lsls	r2, r2, #2
    8c24:	400b      	ands	r3, r1
    8c26:	4293      	cmp	r3, r2
    8c28:	d003      	beq.n	8c32 <__swsetup_r+0xa6>
    8c2a:	0021      	movs	r1, r4
    8c2c:	0030      	movs	r0, r6
    8c2e:	f000 f871 	bl	8d14 <__smakebuf_r>
    8c32:	2301      	movs	r3, #1
    8c34:	89a2      	ldrh	r2, [r4, #12]
    8c36:	4013      	ands	r3, r2
    8c38:	d011      	beq.n	8c5e <__swsetup_r+0xd2>
    8c3a:	2300      	movs	r3, #0
    8c3c:	60a3      	str	r3, [r4, #8]
    8c3e:	6963      	ldr	r3, [r4, #20]
    8c40:	425b      	negs	r3, r3
    8c42:	61a3      	str	r3, [r4, #24]
    8c44:	2000      	movs	r0, #0
    8c46:	6923      	ldr	r3, [r4, #16]
    8c48:	4283      	cmp	r3, r0
    8c4a:	d1be      	bne.n	8bca <__swsetup_r+0x3e>
    8c4c:	230c      	movs	r3, #12
    8c4e:	5ee2      	ldrsh	r2, [r4, r3]
    8c50:	0613      	lsls	r3, r2, #24
    8c52:	d5ba      	bpl.n	8bca <__swsetup_r+0x3e>
    8c54:	2340      	movs	r3, #64	; 0x40
    8c56:	4313      	orrs	r3, r2
    8c58:	81a3      	strh	r3, [r4, #12]
    8c5a:	3801      	subs	r0, #1
    8c5c:	e7b5      	b.n	8bca <__swsetup_r+0x3e>
    8c5e:	0792      	lsls	r2, r2, #30
    8c60:	d400      	bmi.n	8c64 <__swsetup_r+0xd8>
    8c62:	6963      	ldr	r3, [r4, #20]
    8c64:	60a3      	str	r3, [r4, #8]
    8c66:	e7ed      	b.n	8c44 <__swsetup_r+0xb8>
    8c68:	20000068 	.word	0x20000068
    8c6c:	0000b65c 	.word	0x0000b65c
    8c70:	0000b67c 	.word	0x0000b67c
    8c74:	0000b63c 	.word	0x0000b63c

00008c78 <_close_r>:
    8c78:	2300      	movs	r3, #0
    8c7a:	b570      	push	{r4, r5, r6, lr}
    8c7c:	4c06      	ldr	r4, [pc, #24]	; (8c98 <_close_r+0x20>)
    8c7e:	0005      	movs	r5, r0
    8c80:	0008      	movs	r0, r1
    8c82:	6023      	str	r3, [r4, #0]
    8c84:	f7f7 fe96 	bl	9b4 <_close>
    8c88:	1c43      	adds	r3, r0, #1
    8c8a:	d103      	bne.n	8c94 <_close_r+0x1c>
    8c8c:	6823      	ldr	r3, [r4, #0]
    8c8e:	2b00      	cmp	r3, #0
    8c90:	d000      	beq.n	8c94 <_close_r+0x1c>
    8c92:	602b      	str	r3, [r5, #0]
    8c94:	bd70      	pop	{r4, r5, r6, pc}
    8c96:	46c0      	nop			; (mov r8, r8)
    8c98:	20000c10 	.word	0x20000c10

00008c9c <_lseek_r>:
    8c9c:	b570      	push	{r4, r5, r6, lr}
    8c9e:	0005      	movs	r5, r0
    8ca0:	0008      	movs	r0, r1
    8ca2:	0011      	movs	r1, r2
    8ca4:	2200      	movs	r2, #0
    8ca6:	4c06      	ldr	r4, [pc, #24]	; (8cc0 <_lseek_r+0x24>)
    8ca8:	6022      	str	r2, [r4, #0]
    8caa:	001a      	movs	r2, r3
    8cac:	f7f7 fe8c 	bl	9c8 <_lseek>
    8cb0:	1c43      	adds	r3, r0, #1
    8cb2:	d103      	bne.n	8cbc <_lseek_r+0x20>
    8cb4:	6823      	ldr	r3, [r4, #0]
    8cb6:	2b00      	cmp	r3, #0
    8cb8:	d000      	beq.n	8cbc <_lseek_r+0x20>
    8cba:	602b      	str	r3, [r5, #0]
    8cbc:	bd70      	pop	{r4, r5, r6, pc}
    8cbe:	46c0      	nop			; (mov r8, r8)
    8cc0:	20000c10 	.word	0x20000c10

00008cc4 <__swhatbuf_r>:
    8cc4:	b570      	push	{r4, r5, r6, lr}
    8cc6:	000e      	movs	r6, r1
    8cc8:	001d      	movs	r5, r3
    8cca:	230e      	movs	r3, #14
    8ccc:	5ec9      	ldrsh	r1, [r1, r3]
    8cce:	b090      	sub	sp, #64	; 0x40
    8cd0:	0014      	movs	r4, r2
    8cd2:	2900      	cmp	r1, #0
    8cd4:	da07      	bge.n	8ce6 <__swhatbuf_r+0x22>
    8cd6:	2300      	movs	r3, #0
    8cd8:	602b      	str	r3, [r5, #0]
    8cda:	89b3      	ldrh	r3, [r6, #12]
    8cdc:	061b      	lsls	r3, r3, #24
    8cde:	d411      	bmi.n	8d04 <__swhatbuf_r+0x40>
    8ce0:	2380      	movs	r3, #128	; 0x80
    8ce2:	00db      	lsls	r3, r3, #3
    8ce4:	e00f      	b.n	8d06 <__swhatbuf_r+0x42>
    8ce6:	aa01      	add	r2, sp, #4
    8ce8:	f000 fca0 	bl	962c <_fstat_r>
    8cec:	2800      	cmp	r0, #0
    8cee:	dbf2      	blt.n	8cd6 <__swhatbuf_r+0x12>
    8cf0:	22f0      	movs	r2, #240	; 0xf0
    8cf2:	9b02      	ldr	r3, [sp, #8]
    8cf4:	0212      	lsls	r2, r2, #8
    8cf6:	4013      	ands	r3, r2
    8cf8:	4a05      	ldr	r2, [pc, #20]	; (8d10 <__swhatbuf_r+0x4c>)
    8cfa:	189b      	adds	r3, r3, r2
    8cfc:	425a      	negs	r2, r3
    8cfe:	4153      	adcs	r3, r2
    8d00:	602b      	str	r3, [r5, #0]
    8d02:	e7ed      	b.n	8ce0 <__swhatbuf_r+0x1c>
    8d04:	2340      	movs	r3, #64	; 0x40
    8d06:	2000      	movs	r0, #0
    8d08:	6023      	str	r3, [r4, #0]
    8d0a:	b010      	add	sp, #64	; 0x40
    8d0c:	bd70      	pop	{r4, r5, r6, pc}
    8d0e:	46c0      	nop			; (mov r8, r8)
    8d10:	ffffe000 	.word	0xffffe000

00008d14 <__smakebuf_r>:
    8d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8d16:	2602      	movs	r6, #2
    8d18:	898b      	ldrh	r3, [r1, #12]
    8d1a:	0005      	movs	r5, r0
    8d1c:	000c      	movs	r4, r1
    8d1e:	4233      	tst	r3, r6
    8d20:	d006      	beq.n	8d30 <__smakebuf_r+0x1c>
    8d22:	0023      	movs	r3, r4
    8d24:	3347      	adds	r3, #71	; 0x47
    8d26:	6023      	str	r3, [r4, #0]
    8d28:	6123      	str	r3, [r4, #16]
    8d2a:	2301      	movs	r3, #1
    8d2c:	6163      	str	r3, [r4, #20]
    8d2e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    8d30:	ab01      	add	r3, sp, #4
    8d32:	466a      	mov	r2, sp
    8d34:	f7ff ffc6 	bl	8cc4 <__swhatbuf_r>
    8d38:	9900      	ldr	r1, [sp, #0]
    8d3a:	0007      	movs	r7, r0
    8d3c:	0028      	movs	r0, r5
    8d3e:	f7ff fc95 	bl	866c <_malloc_r>
    8d42:	2800      	cmp	r0, #0
    8d44:	d108      	bne.n	8d58 <__smakebuf_r+0x44>
    8d46:	220c      	movs	r2, #12
    8d48:	5ea3      	ldrsh	r3, [r4, r2]
    8d4a:	059a      	lsls	r2, r3, #22
    8d4c:	d4ef      	bmi.n	8d2e <__smakebuf_r+0x1a>
    8d4e:	2203      	movs	r2, #3
    8d50:	4393      	bics	r3, r2
    8d52:	431e      	orrs	r6, r3
    8d54:	81a6      	strh	r6, [r4, #12]
    8d56:	e7e4      	b.n	8d22 <__smakebuf_r+0xe>
    8d58:	4b0f      	ldr	r3, [pc, #60]	; (8d98 <__smakebuf_r+0x84>)
    8d5a:	62ab      	str	r3, [r5, #40]	; 0x28
    8d5c:	2380      	movs	r3, #128	; 0x80
    8d5e:	89a2      	ldrh	r2, [r4, #12]
    8d60:	6020      	str	r0, [r4, #0]
    8d62:	4313      	orrs	r3, r2
    8d64:	81a3      	strh	r3, [r4, #12]
    8d66:	9b00      	ldr	r3, [sp, #0]
    8d68:	6120      	str	r0, [r4, #16]
    8d6a:	6163      	str	r3, [r4, #20]
    8d6c:	9b01      	ldr	r3, [sp, #4]
    8d6e:	2b00      	cmp	r3, #0
    8d70:	d00d      	beq.n	8d8e <__smakebuf_r+0x7a>
    8d72:	230e      	movs	r3, #14
    8d74:	5ee1      	ldrsh	r1, [r4, r3]
    8d76:	0028      	movs	r0, r5
    8d78:	f000 fc6a 	bl	9650 <_isatty_r>
    8d7c:	2800      	cmp	r0, #0
    8d7e:	d006      	beq.n	8d8e <__smakebuf_r+0x7a>
    8d80:	2203      	movs	r2, #3
    8d82:	89a3      	ldrh	r3, [r4, #12]
    8d84:	4393      	bics	r3, r2
    8d86:	001a      	movs	r2, r3
    8d88:	2301      	movs	r3, #1
    8d8a:	4313      	orrs	r3, r2
    8d8c:	81a3      	strh	r3, [r4, #12]
    8d8e:	89a0      	ldrh	r0, [r4, #12]
    8d90:	4338      	orrs	r0, r7
    8d92:	81a0      	strh	r0, [r4, #12]
    8d94:	e7cb      	b.n	8d2e <__smakebuf_r+0x1a>
    8d96:	46c0      	nop			; (mov r8, r8)
    8d98:	00008379 	.word	0x00008379

00008d9c <__malloc_lock>:
    8d9c:	4770      	bx	lr

00008d9e <__malloc_unlock>:
    8d9e:	4770      	bx	lr

00008da0 <__ssputs_r>:
    8da0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8da2:	688e      	ldr	r6, [r1, #8]
    8da4:	b085      	sub	sp, #20
    8da6:	0007      	movs	r7, r0
    8da8:	000c      	movs	r4, r1
    8daa:	9203      	str	r2, [sp, #12]
    8dac:	9301      	str	r3, [sp, #4]
    8dae:	429e      	cmp	r6, r3
    8db0:	d839      	bhi.n	8e26 <__ssputs_r+0x86>
    8db2:	2390      	movs	r3, #144	; 0x90
    8db4:	898a      	ldrh	r2, [r1, #12]
    8db6:	00db      	lsls	r3, r3, #3
    8db8:	421a      	tst	r2, r3
    8dba:	d034      	beq.n	8e26 <__ssputs_r+0x86>
    8dbc:	2503      	movs	r5, #3
    8dbe:	6909      	ldr	r1, [r1, #16]
    8dc0:	6823      	ldr	r3, [r4, #0]
    8dc2:	1a5b      	subs	r3, r3, r1
    8dc4:	9302      	str	r3, [sp, #8]
    8dc6:	6963      	ldr	r3, [r4, #20]
    8dc8:	9802      	ldr	r0, [sp, #8]
    8dca:	435d      	muls	r5, r3
    8dcc:	0feb      	lsrs	r3, r5, #31
    8dce:	195d      	adds	r5, r3, r5
    8dd0:	9b01      	ldr	r3, [sp, #4]
    8dd2:	106d      	asrs	r5, r5, #1
    8dd4:	3301      	adds	r3, #1
    8dd6:	181b      	adds	r3, r3, r0
    8dd8:	42ab      	cmp	r3, r5
    8dda:	d900      	bls.n	8dde <__ssputs_r+0x3e>
    8ddc:	001d      	movs	r5, r3
    8dde:	0553      	lsls	r3, r2, #21
    8de0:	d532      	bpl.n	8e48 <__ssputs_r+0xa8>
    8de2:	0029      	movs	r1, r5
    8de4:	0038      	movs	r0, r7
    8de6:	f7ff fc41 	bl	866c <_malloc_r>
    8dea:	1e06      	subs	r6, r0, #0
    8dec:	d109      	bne.n	8e02 <__ssputs_r+0x62>
    8dee:	230c      	movs	r3, #12
    8df0:	603b      	str	r3, [r7, #0]
    8df2:	2340      	movs	r3, #64	; 0x40
    8df4:	2001      	movs	r0, #1
    8df6:	89a2      	ldrh	r2, [r4, #12]
    8df8:	4240      	negs	r0, r0
    8dfa:	4313      	orrs	r3, r2
    8dfc:	81a3      	strh	r3, [r4, #12]
    8dfe:	b005      	add	sp, #20
    8e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e02:	9a02      	ldr	r2, [sp, #8]
    8e04:	6921      	ldr	r1, [r4, #16]
    8e06:	f7ff fbd6 	bl	85b6 <memcpy>
    8e0a:	89a3      	ldrh	r3, [r4, #12]
    8e0c:	4a14      	ldr	r2, [pc, #80]	; (8e60 <__ssputs_r+0xc0>)
    8e0e:	401a      	ands	r2, r3
    8e10:	2380      	movs	r3, #128	; 0x80
    8e12:	4313      	orrs	r3, r2
    8e14:	81a3      	strh	r3, [r4, #12]
    8e16:	9b02      	ldr	r3, [sp, #8]
    8e18:	6126      	str	r6, [r4, #16]
    8e1a:	18f6      	adds	r6, r6, r3
    8e1c:	6026      	str	r6, [r4, #0]
    8e1e:	6165      	str	r5, [r4, #20]
    8e20:	9e01      	ldr	r6, [sp, #4]
    8e22:	1aed      	subs	r5, r5, r3
    8e24:	60a5      	str	r5, [r4, #8]
    8e26:	9b01      	ldr	r3, [sp, #4]
    8e28:	42b3      	cmp	r3, r6
    8e2a:	d200      	bcs.n	8e2e <__ssputs_r+0x8e>
    8e2c:	001e      	movs	r6, r3
    8e2e:	0032      	movs	r2, r6
    8e30:	9903      	ldr	r1, [sp, #12]
    8e32:	6820      	ldr	r0, [r4, #0]
    8e34:	f000 fc29 	bl	968a <memmove>
    8e38:	68a3      	ldr	r3, [r4, #8]
    8e3a:	2000      	movs	r0, #0
    8e3c:	1b9b      	subs	r3, r3, r6
    8e3e:	60a3      	str	r3, [r4, #8]
    8e40:	6823      	ldr	r3, [r4, #0]
    8e42:	199e      	adds	r6, r3, r6
    8e44:	6026      	str	r6, [r4, #0]
    8e46:	e7da      	b.n	8dfe <__ssputs_r+0x5e>
    8e48:	002a      	movs	r2, r5
    8e4a:	0038      	movs	r0, r7
    8e4c:	f000 fc2f 	bl	96ae <_realloc_r>
    8e50:	1e06      	subs	r6, r0, #0
    8e52:	d1e0      	bne.n	8e16 <__ssputs_r+0x76>
    8e54:	6921      	ldr	r1, [r4, #16]
    8e56:	0038      	movs	r0, r7
    8e58:	f7ff fbbe 	bl	85d8 <_free_r>
    8e5c:	e7c7      	b.n	8dee <__ssputs_r+0x4e>
    8e5e:	46c0      	nop			; (mov r8, r8)
    8e60:	fffffb7f 	.word	0xfffffb7f

00008e64 <_svfiprintf_r>:
    8e64:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e66:	b09f      	sub	sp, #124	; 0x7c
    8e68:	9002      	str	r0, [sp, #8]
    8e6a:	9305      	str	r3, [sp, #20]
    8e6c:	898b      	ldrh	r3, [r1, #12]
    8e6e:	000f      	movs	r7, r1
    8e70:	0016      	movs	r6, r2
    8e72:	061b      	lsls	r3, r3, #24
    8e74:	d511      	bpl.n	8e9a <_svfiprintf_r+0x36>
    8e76:	690b      	ldr	r3, [r1, #16]
    8e78:	2b00      	cmp	r3, #0
    8e7a:	d10e      	bne.n	8e9a <_svfiprintf_r+0x36>
    8e7c:	2140      	movs	r1, #64	; 0x40
    8e7e:	f7ff fbf5 	bl	866c <_malloc_r>
    8e82:	6038      	str	r0, [r7, #0]
    8e84:	6138      	str	r0, [r7, #16]
    8e86:	2800      	cmp	r0, #0
    8e88:	d105      	bne.n	8e96 <_svfiprintf_r+0x32>
    8e8a:	230c      	movs	r3, #12
    8e8c:	9a02      	ldr	r2, [sp, #8]
    8e8e:	3801      	subs	r0, #1
    8e90:	6013      	str	r3, [r2, #0]
    8e92:	b01f      	add	sp, #124	; 0x7c
    8e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e96:	2340      	movs	r3, #64	; 0x40
    8e98:	617b      	str	r3, [r7, #20]
    8e9a:	2300      	movs	r3, #0
    8e9c:	ad06      	add	r5, sp, #24
    8e9e:	616b      	str	r3, [r5, #20]
    8ea0:	3320      	adds	r3, #32
    8ea2:	766b      	strb	r3, [r5, #25]
    8ea4:	3310      	adds	r3, #16
    8ea6:	76ab      	strb	r3, [r5, #26]
    8ea8:	0034      	movs	r4, r6
    8eaa:	7823      	ldrb	r3, [r4, #0]
    8eac:	2b00      	cmp	r3, #0
    8eae:	d147      	bne.n	8f40 <_svfiprintf_r+0xdc>
    8eb0:	1ba3      	subs	r3, r4, r6
    8eb2:	9304      	str	r3, [sp, #16]
    8eb4:	d00d      	beq.n	8ed2 <_svfiprintf_r+0x6e>
    8eb6:	1ba3      	subs	r3, r4, r6
    8eb8:	0032      	movs	r2, r6
    8eba:	0039      	movs	r1, r7
    8ebc:	9802      	ldr	r0, [sp, #8]
    8ebe:	f7ff ff6f 	bl	8da0 <__ssputs_r>
    8ec2:	1c43      	adds	r3, r0, #1
    8ec4:	d100      	bne.n	8ec8 <_svfiprintf_r+0x64>
    8ec6:	e0b5      	b.n	9034 <_svfiprintf_r+0x1d0>
    8ec8:	696a      	ldr	r2, [r5, #20]
    8eca:	9b04      	ldr	r3, [sp, #16]
    8ecc:	4694      	mov	ip, r2
    8ece:	4463      	add	r3, ip
    8ed0:	616b      	str	r3, [r5, #20]
    8ed2:	7823      	ldrb	r3, [r4, #0]
    8ed4:	2b00      	cmp	r3, #0
    8ed6:	d100      	bne.n	8eda <_svfiprintf_r+0x76>
    8ed8:	e0ac      	b.n	9034 <_svfiprintf_r+0x1d0>
    8eda:	2201      	movs	r2, #1
    8edc:	2300      	movs	r3, #0
    8ede:	4252      	negs	r2, r2
    8ee0:	606a      	str	r2, [r5, #4]
    8ee2:	a902      	add	r1, sp, #8
    8ee4:	3254      	adds	r2, #84	; 0x54
    8ee6:	1852      	adds	r2, r2, r1
    8ee8:	3401      	adds	r4, #1
    8eea:	602b      	str	r3, [r5, #0]
    8eec:	60eb      	str	r3, [r5, #12]
    8eee:	60ab      	str	r3, [r5, #8]
    8ef0:	7013      	strb	r3, [r2, #0]
    8ef2:	65ab      	str	r3, [r5, #88]	; 0x58
    8ef4:	4e58      	ldr	r6, [pc, #352]	; (9058 <_svfiprintf_r+0x1f4>)
    8ef6:	2205      	movs	r2, #5
    8ef8:	7821      	ldrb	r1, [r4, #0]
    8efa:	0030      	movs	r0, r6
    8efc:	f000 fbba 	bl	9674 <memchr>
    8f00:	1c62      	adds	r2, r4, #1
    8f02:	2800      	cmp	r0, #0
    8f04:	d120      	bne.n	8f48 <_svfiprintf_r+0xe4>
    8f06:	6829      	ldr	r1, [r5, #0]
    8f08:	06cb      	lsls	r3, r1, #27
    8f0a:	d504      	bpl.n	8f16 <_svfiprintf_r+0xb2>
    8f0c:	2353      	movs	r3, #83	; 0x53
    8f0e:	ae02      	add	r6, sp, #8
    8f10:	3020      	adds	r0, #32
    8f12:	199b      	adds	r3, r3, r6
    8f14:	7018      	strb	r0, [r3, #0]
    8f16:	070b      	lsls	r3, r1, #28
    8f18:	d504      	bpl.n	8f24 <_svfiprintf_r+0xc0>
    8f1a:	2353      	movs	r3, #83	; 0x53
    8f1c:	202b      	movs	r0, #43	; 0x2b
    8f1e:	ae02      	add	r6, sp, #8
    8f20:	199b      	adds	r3, r3, r6
    8f22:	7018      	strb	r0, [r3, #0]
    8f24:	7823      	ldrb	r3, [r4, #0]
    8f26:	2b2a      	cmp	r3, #42	; 0x2a
    8f28:	d016      	beq.n	8f58 <_svfiprintf_r+0xf4>
    8f2a:	2000      	movs	r0, #0
    8f2c:	210a      	movs	r1, #10
    8f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8f30:	7822      	ldrb	r2, [r4, #0]
    8f32:	3a30      	subs	r2, #48	; 0x30
    8f34:	2a09      	cmp	r2, #9
    8f36:	d955      	bls.n	8fe4 <_svfiprintf_r+0x180>
    8f38:	2800      	cmp	r0, #0
    8f3a:	d015      	beq.n	8f68 <_svfiprintf_r+0x104>
    8f3c:	9309      	str	r3, [sp, #36]	; 0x24
    8f3e:	e013      	b.n	8f68 <_svfiprintf_r+0x104>
    8f40:	2b25      	cmp	r3, #37	; 0x25
    8f42:	d0b5      	beq.n	8eb0 <_svfiprintf_r+0x4c>
    8f44:	3401      	adds	r4, #1
    8f46:	e7b0      	b.n	8eaa <_svfiprintf_r+0x46>
    8f48:	2301      	movs	r3, #1
    8f4a:	1b80      	subs	r0, r0, r6
    8f4c:	4083      	lsls	r3, r0
    8f4e:	6829      	ldr	r1, [r5, #0]
    8f50:	0014      	movs	r4, r2
    8f52:	430b      	orrs	r3, r1
    8f54:	602b      	str	r3, [r5, #0]
    8f56:	e7cd      	b.n	8ef4 <_svfiprintf_r+0x90>
    8f58:	9b05      	ldr	r3, [sp, #20]
    8f5a:	1d18      	adds	r0, r3, #4
    8f5c:	681b      	ldr	r3, [r3, #0]
    8f5e:	9005      	str	r0, [sp, #20]
    8f60:	2b00      	cmp	r3, #0
    8f62:	db39      	blt.n	8fd8 <_svfiprintf_r+0x174>
    8f64:	9309      	str	r3, [sp, #36]	; 0x24
    8f66:	0014      	movs	r4, r2
    8f68:	7823      	ldrb	r3, [r4, #0]
    8f6a:	2b2e      	cmp	r3, #46	; 0x2e
    8f6c:	d10b      	bne.n	8f86 <_svfiprintf_r+0x122>
    8f6e:	7863      	ldrb	r3, [r4, #1]
    8f70:	1c62      	adds	r2, r4, #1
    8f72:	2b2a      	cmp	r3, #42	; 0x2a
    8f74:	d13e      	bne.n	8ff4 <_svfiprintf_r+0x190>
    8f76:	9b05      	ldr	r3, [sp, #20]
    8f78:	3402      	adds	r4, #2
    8f7a:	1d1a      	adds	r2, r3, #4
    8f7c:	681b      	ldr	r3, [r3, #0]
    8f7e:	9205      	str	r2, [sp, #20]
    8f80:	2b00      	cmp	r3, #0
    8f82:	db34      	blt.n	8fee <_svfiprintf_r+0x18a>
    8f84:	9307      	str	r3, [sp, #28]
    8f86:	4e35      	ldr	r6, [pc, #212]	; (905c <_svfiprintf_r+0x1f8>)
    8f88:	7821      	ldrb	r1, [r4, #0]
    8f8a:	2203      	movs	r2, #3
    8f8c:	0030      	movs	r0, r6
    8f8e:	f000 fb71 	bl	9674 <memchr>
    8f92:	2800      	cmp	r0, #0
    8f94:	d006      	beq.n	8fa4 <_svfiprintf_r+0x140>
    8f96:	2340      	movs	r3, #64	; 0x40
    8f98:	1b80      	subs	r0, r0, r6
    8f9a:	4083      	lsls	r3, r0
    8f9c:	682a      	ldr	r2, [r5, #0]
    8f9e:	3401      	adds	r4, #1
    8fa0:	4313      	orrs	r3, r2
    8fa2:	602b      	str	r3, [r5, #0]
    8fa4:	7821      	ldrb	r1, [r4, #0]
    8fa6:	2206      	movs	r2, #6
    8fa8:	482d      	ldr	r0, [pc, #180]	; (9060 <_svfiprintf_r+0x1fc>)
    8faa:	1c66      	adds	r6, r4, #1
    8fac:	7629      	strb	r1, [r5, #24]
    8fae:	f000 fb61 	bl	9674 <memchr>
    8fb2:	2800      	cmp	r0, #0
    8fb4:	d046      	beq.n	9044 <_svfiprintf_r+0x1e0>
    8fb6:	4b2b      	ldr	r3, [pc, #172]	; (9064 <_svfiprintf_r+0x200>)
    8fb8:	2b00      	cmp	r3, #0
    8fba:	d12f      	bne.n	901c <_svfiprintf_r+0x1b8>
    8fbc:	6829      	ldr	r1, [r5, #0]
    8fbe:	9b05      	ldr	r3, [sp, #20]
    8fc0:	2207      	movs	r2, #7
    8fc2:	05c9      	lsls	r1, r1, #23
    8fc4:	d528      	bpl.n	9018 <_svfiprintf_r+0x1b4>
    8fc6:	189b      	adds	r3, r3, r2
    8fc8:	4393      	bics	r3, r2
    8fca:	3308      	adds	r3, #8
    8fcc:	9305      	str	r3, [sp, #20]
    8fce:	696b      	ldr	r3, [r5, #20]
    8fd0:	9a03      	ldr	r2, [sp, #12]
    8fd2:	189b      	adds	r3, r3, r2
    8fd4:	616b      	str	r3, [r5, #20]
    8fd6:	e767      	b.n	8ea8 <_svfiprintf_r+0x44>
    8fd8:	425b      	negs	r3, r3
    8fda:	60eb      	str	r3, [r5, #12]
    8fdc:	2302      	movs	r3, #2
    8fde:	430b      	orrs	r3, r1
    8fe0:	602b      	str	r3, [r5, #0]
    8fe2:	e7c0      	b.n	8f66 <_svfiprintf_r+0x102>
    8fe4:	434b      	muls	r3, r1
    8fe6:	3401      	adds	r4, #1
    8fe8:	189b      	adds	r3, r3, r2
    8fea:	2001      	movs	r0, #1
    8fec:	e7a0      	b.n	8f30 <_svfiprintf_r+0xcc>
    8fee:	2301      	movs	r3, #1
    8ff0:	425b      	negs	r3, r3
    8ff2:	e7c7      	b.n	8f84 <_svfiprintf_r+0x120>
    8ff4:	2300      	movs	r3, #0
    8ff6:	0014      	movs	r4, r2
    8ff8:	200a      	movs	r0, #10
    8ffa:	001a      	movs	r2, r3
    8ffc:	606b      	str	r3, [r5, #4]
    8ffe:	7821      	ldrb	r1, [r4, #0]
    9000:	3930      	subs	r1, #48	; 0x30
    9002:	2909      	cmp	r1, #9
    9004:	d903      	bls.n	900e <_svfiprintf_r+0x1aa>
    9006:	2b00      	cmp	r3, #0
    9008:	d0bd      	beq.n	8f86 <_svfiprintf_r+0x122>
    900a:	9207      	str	r2, [sp, #28]
    900c:	e7bb      	b.n	8f86 <_svfiprintf_r+0x122>
    900e:	4342      	muls	r2, r0
    9010:	3401      	adds	r4, #1
    9012:	1852      	adds	r2, r2, r1
    9014:	2301      	movs	r3, #1
    9016:	e7f2      	b.n	8ffe <_svfiprintf_r+0x19a>
    9018:	3307      	adds	r3, #7
    901a:	e7d5      	b.n	8fc8 <_svfiprintf_r+0x164>
    901c:	ab05      	add	r3, sp, #20
    901e:	9300      	str	r3, [sp, #0]
    9020:	003a      	movs	r2, r7
    9022:	4b11      	ldr	r3, [pc, #68]	; (9068 <_svfiprintf_r+0x204>)
    9024:	0029      	movs	r1, r5
    9026:	9802      	ldr	r0, [sp, #8]
    9028:	e000      	b.n	902c <_svfiprintf_r+0x1c8>
    902a:	bf00      	nop
    902c:	9003      	str	r0, [sp, #12]
    902e:	9b03      	ldr	r3, [sp, #12]
    9030:	3301      	adds	r3, #1
    9032:	d1cc      	bne.n	8fce <_svfiprintf_r+0x16a>
    9034:	89bb      	ldrh	r3, [r7, #12]
    9036:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9038:	065b      	lsls	r3, r3, #25
    903a:	d400      	bmi.n	903e <_svfiprintf_r+0x1da>
    903c:	e729      	b.n	8e92 <_svfiprintf_r+0x2e>
    903e:	2001      	movs	r0, #1
    9040:	4240      	negs	r0, r0
    9042:	e726      	b.n	8e92 <_svfiprintf_r+0x2e>
    9044:	ab05      	add	r3, sp, #20
    9046:	9300      	str	r3, [sp, #0]
    9048:	003a      	movs	r2, r7
    904a:	4b07      	ldr	r3, [pc, #28]	; (9068 <_svfiprintf_r+0x204>)
    904c:	0029      	movs	r1, r5
    904e:	9802      	ldr	r0, [sp, #8]
    9050:	f000 f9be 	bl	93d0 <_printf_i>
    9054:	e7ea      	b.n	902c <_svfiprintf_r+0x1c8>
    9056:	46c0      	nop			; (mov r8, r8)
    9058:	0000b6a0 	.word	0x0000b6a0
    905c:	0000b6a6 	.word	0x0000b6a6
    9060:	0000b6aa 	.word	0x0000b6aa
    9064:	00000000 	.word	0x00000000
    9068:	00008da1 	.word	0x00008da1

0000906c <__sfputc_r>:
    906c:	6893      	ldr	r3, [r2, #8]
    906e:	b510      	push	{r4, lr}
    9070:	3b01      	subs	r3, #1
    9072:	6093      	str	r3, [r2, #8]
    9074:	2b00      	cmp	r3, #0
    9076:	da05      	bge.n	9084 <__sfputc_r+0x18>
    9078:	6994      	ldr	r4, [r2, #24]
    907a:	42a3      	cmp	r3, r4
    907c:	db08      	blt.n	9090 <__sfputc_r+0x24>
    907e:	b2cb      	uxtb	r3, r1
    9080:	2b0a      	cmp	r3, #10
    9082:	d005      	beq.n	9090 <__sfputc_r+0x24>
    9084:	6813      	ldr	r3, [r2, #0]
    9086:	1c58      	adds	r0, r3, #1
    9088:	6010      	str	r0, [r2, #0]
    908a:	7019      	strb	r1, [r3, #0]
    908c:	b2c8      	uxtb	r0, r1
    908e:	bd10      	pop	{r4, pc}
    9090:	f7ff fd12 	bl	8ab8 <__swbuf_r>
    9094:	e7fb      	b.n	908e <__sfputc_r+0x22>

00009096 <__sfputs_r>:
    9096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9098:	0006      	movs	r6, r0
    909a:	000f      	movs	r7, r1
    909c:	0014      	movs	r4, r2
    909e:	18d5      	adds	r5, r2, r3
    90a0:	42ac      	cmp	r4, r5
    90a2:	d101      	bne.n	90a8 <__sfputs_r+0x12>
    90a4:	2000      	movs	r0, #0
    90a6:	e007      	b.n	90b8 <__sfputs_r+0x22>
    90a8:	7821      	ldrb	r1, [r4, #0]
    90aa:	003a      	movs	r2, r7
    90ac:	0030      	movs	r0, r6
    90ae:	f7ff ffdd 	bl	906c <__sfputc_r>
    90b2:	3401      	adds	r4, #1
    90b4:	1c43      	adds	r3, r0, #1
    90b6:	d1f3      	bne.n	90a0 <__sfputs_r+0xa>
    90b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000090bc <_vfiprintf_r>:
    90bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    90be:	b09f      	sub	sp, #124	; 0x7c
    90c0:	0006      	movs	r6, r0
    90c2:	000f      	movs	r7, r1
    90c4:	0014      	movs	r4, r2
    90c6:	9305      	str	r3, [sp, #20]
    90c8:	2800      	cmp	r0, #0
    90ca:	d004      	beq.n	90d6 <_vfiprintf_r+0x1a>
    90cc:	6983      	ldr	r3, [r0, #24]
    90ce:	2b00      	cmp	r3, #0
    90d0:	d101      	bne.n	90d6 <_vfiprintf_r+0x1a>
    90d2:	f7ff f993 	bl	83fc <__sinit>
    90d6:	4b7f      	ldr	r3, [pc, #508]	; (92d4 <_vfiprintf_r+0x218>)
    90d8:	429f      	cmp	r7, r3
    90da:	d15c      	bne.n	9196 <_vfiprintf_r+0xda>
    90dc:	6877      	ldr	r7, [r6, #4]
    90de:	89bb      	ldrh	r3, [r7, #12]
    90e0:	071b      	lsls	r3, r3, #28
    90e2:	d562      	bpl.n	91aa <_vfiprintf_r+0xee>
    90e4:	693b      	ldr	r3, [r7, #16]
    90e6:	2b00      	cmp	r3, #0
    90e8:	d05f      	beq.n	91aa <_vfiprintf_r+0xee>
    90ea:	2300      	movs	r3, #0
    90ec:	ad06      	add	r5, sp, #24
    90ee:	616b      	str	r3, [r5, #20]
    90f0:	3320      	adds	r3, #32
    90f2:	766b      	strb	r3, [r5, #25]
    90f4:	3310      	adds	r3, #16
    90f6:	76ab      	strb	r3, [r5, #26]
    90f8:	9402      	str	r4, [sp, #8]
    90fa:	9c02      	ldr	r4, [sp, #8]
    90fc:	7823      	ldrb	r3, [r4, #0]
    90fe:	2b00      	cmp	r3, #0
    9100:	d15d      	bne.n	91be <_vfiprintf_r+0x102>
    9102:	9b02      	ldr	r3, [sp, #8]
    9104:	1ae3      	subs	r3, r4, r3
    9106:	9304      	str	r3, [sp, #16]
    9108:	d00d      	beq.n	9126 <_vfiprintf_r+0x6a>
    910a:	9b04      	ldr	r3, [sp, #16]
    910c:	9a02      	ldr	r2, [sp, #8]
    910e:	0039      	movs	r1, r7
    9110:	0030      	movs	r0, r6
    9112:	f7ff ffc0 	bl	9096 <__sfputs_r>
    9116:	1c43      	adds	r3, r0, #1
    9118:	d100      	bne.n	911c <_vfiprintf_r+0x60>
    911a:	e0cc      	b.n	92b6 <_vfiprintf_r+0x1fa>
    911c:	696a      	ldr	r2, [r5, #20]
    911e:	9b04      	ldr	r3, [sp, #16]
    9120:	4694      	mov	ip, r2
    9122:	4463      	add	r3, ip
    9124:	616b      	str	r3, [r5, #20]
    9126:	7823      	ldrb	r3, [r4, #0]
    9128:	2b00      	cmp	r3, #0
    912a:	d100      	bne.n	912e <_vfiprintf_r+0x72>
    912c:	e0c3      	b.n	92b6 <_vfiprintf_r+0x1fa>
    912e:	2201      	movs	r2, #1
    9130:	2300      	movs	r3, #0
    9132:	4252      	negs	r2, r2
    9134:	606a      	str	r2, [r5, #4]
    9136:	a902      	add	r1, sp, #8
    9138:	3254      	adds	r2, #84	; 0x54
    913a:	1852      	adds	r2, r2, r1
    913c:	3401      	adds	r4, #1
    913e:	602b      	str	r3, [r5, #0]
    9140:	60eb      	str	r3, [r5, #12]
    9142:	60ab      	str	r3, [r5, #8]
    9144:	7013      	strb	r3, [r2, #0]
    9146:	65ab      	str	r3, [r5, #88]	; 0x58
    9148:	7821      	ldrb	r1, [r4, #0]
    914a:	2205      	movs	r2, #5
    914c:	4862      	ldr	r0, [pc, #392]	; (92d8 <_vfiprintf_r+0x21c>)
    914e:	f000 fa91 	bl	9674 <memchr>
    9152:	1c63      	adds	r3, r4, #1
    9154:	469c      	mov	ip, r3
    9156:	2800      	cmp	r0, #0
    9158:	d135      	bne.n	91c6 <_vfiprintf_r+0x10a>
    915a:	6829      	ldr	r1, [r5, #0]
    915c:	06cb      	lsls	r3, r1, #27
    915e:	d504      	bpl.n	916a <_vfiprintf_r+0xae>
    9160:	2353      	movs	r3, #83	; 0x53
    9162:	aa02      	add	r2, sp, #8
    9164:	3020      	adds	r0, #32
    9166:	189b      	adds	r3, r3, r2
    9168:	7018      	strb	r0, [r3, #0]
    916a:	070b      	lsls	r3, r1, #28
    916c:	d504      	bpl.n	9178 <_vfiprintf_r+0xbc>
    916e:	2353      	movs	r3, #83	; 0x53
    9170:	202b      	movs	r0, #43	; 0x2b
    9172:	aa02      	add	r2, sp, #8
    9174:	189b      	adds	r3, r3, r2
    9176:	7018      	strb	r0, [r3, #0]
    9178:	7823      	ldrb	r3, [r4, #0]
    917a:	2b2a      	cmp	r3, #42	; 0x2a
    917c:	d02c      	beq.n	91d8 <_vfiprintf_r+0x11c>
    917e:	2000      	movs	r0, #0
    9180:	210a      	movs	r1, #10
    9182:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9184:	7822      	ldrb	r2, [r4, #0]
    9186:	3a30      	subs	r2, #48	; 0x30
    9188:	2a09      	cmp	r2, #9
    918a:	d800      	bhi.n	918e <_vfiprintf_r+0xd2>
    918c:	e06b      	b.n	9266 <_vfiprintf_r+0x1aa>
    918e:	2800      	cmp	r0, #0
    9190:	d02a      	beq.n	91e8 <_vfiprintf_r+0x12c>
    9192:	9309      	str	r3, [sp, #36]	; 0x24
    9194:	e028      	b.n	91e8 <_vfiprintf_r+0x12c>
    9196:	4b51      	ldr	r3, [pc, #324]	; (92dc <_vfiprintf_r+0x220>)
    9198:	429f      	cmp	r7, r3
    919a:	d101      	bne.n	91a0 <_vfiprintf_r+0xe4>
    919c:	68b7      	ldr	r7, [r6, #8]
    919e:	e79e      	b.n	90de <_vfiprintf_r+0x22>
    91a0:	4b4f      	ldr	r3, [pc, #316]	; (92e0 <_vfiprintf_r+0x224>)
    91a2:	429f      	cmp	r7, r3
    91a4:	d19b      	bne.n	90de <_vfiprintf_r+0x22>
    91a6:	68f7      	ldr	r7, [r6, #12]
    91a8:	e799      	b.n	90de <_vfiprintf_r+0x22>
    91aa:	0039      	movs	r1, r7
    91ac:	0030      	movs	r0, r6
    91ae:	f7ff fced 	bl	8b8c <__swsetup_r>
    91b2:	2800      	cmp	r0, #0
    91b4:	d099      	beq.n	90ea <_vfiprintf_r+0x2e>
    91b6:	2001      	movs	r0, #1
    91b8:	4240      	negs	r0, r0
    91ba:	b01f      	add	sp, #124	; 0x7c
    91bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    91be:	2b25      	cmp	r3, #37	; 0x25
    91c0:	d09f      	beq.n	9102 <_vfiprintf_r+0x46>
    91c2:	3401      	adds	r4, #1
    91c4:	e79a      	b.n	90fc <_vfiprintf_r+0x40>
    91c6:	4b44      	ldr	r3, [pc, #272]	; (92d8 <_vfiprintf_r+0x21c>)
    91c8:	6829      	ldr	r1, [r5, #0]
    91ca:	1ac0      	subs	r0, r0, r3
    91cc:	2301      	movs	r3, #1
    91ce:	4083      	lsls	r3, r0
    91d0:	430b      	orrs	r3, r1
    91d2:	602b      	str	r3, [r5, #0]
    91d4:	4664      	mov	r4, ip
    91d6:	e7b7      	b.n	9148 <_vfiprintf_r+0x8c>
    91d8:	9b05      	ldr	r3, [sp, #20]
    91da:	1d18      	adds	r0, r3, #4
    91dc:	681b      	ldr	r3, [r3, #0]
    91de:	9005      	str	r0, [sp, #20]
    91e0:	2b00      	cmp	r3, #0
    91e2:	db3a      	blt.n	925a <_vfiprintf_r+0x19e>
    91e4:	9309      	str	r3, [sp, #36]	; 0x24
    91e6:	4664      	mov	r4, ip
    91e8:	7823      	ldrb	r3, [r4, #0]
    91ea:	2b2e      	cmp	r3, #46	; 0x2e
    91ec:	d10b      	bne.n	9206 <_vfiprintf_r+0x14a>
    91ee:	7863      	ldrb	r3, [r4, #1]
    91f0:	1c62      	adds	r2, r4, #1
    91f2:	2b2a      	cmp	r3, #42	; 0x2a
    91f4:	d13f      	bne.n	9276 <_vfiprintf_r+0x1ba>
    91f6:	9b05      	ldr	r3, [sp, #20]
    91f8:	3402      	adds	r4, #2
    91fa:	1d1a      	adds	r2, r3, #4
    91fc:	681b      	ldr	r3, [r3, #0]
    91fe:	9205      	str	r2, [sp, #20]
    9200:	2b00      	cmp	r3, #0
    9202:	db35      	blt.n	9270 <_vfiprintf_r+0x1b4>
    9204:	9307      	str	r3, [sp, #28]
    9206:	7821      	ldrb	r1, [r4, #0]
    9208:	2203      	movs	r2, #3
    920a:	4836      	ldr	r0, [pc, #216]	; (92e4 <_vfiprintf_r+0x228>)
    920c:	f000 fa32 	bl	9674 <memchr>
    9210:	2800      	cmp	r0, #0
    9212:	d007      	beq.n	9224 <_vfiprintf_r+0x168>
    9214:	4b33      	ldr	r3, [pc, #204]	; (92e4 <_vfiprintf_r+0x228>)
    9216:	682a      	ldr	r2, [r5, #0]
    9218:	1ac0      	subs	r0, r0, r3
    921a:	2340      	movs	r3, #64	; 0x40
    921c:	4083      	lsls	r3, r0
    921e:	4313      	orrs	r3, r2
    9220:	602b      	str	r3, [r5, #0]
    9222:	3401      	adds	r4, #1
    9224:	7821      	ldrb	r1, [r4, #0]
    9226:	1c63      	adds	r3, r4, #1
    9228:	2206      	movs	r2, #6
    922a:	482f      	ldr	r0, [pc, #188]	; (92e8 <_vfiprintf_r+0x22c>)
    922c:	9302      	str	r3, [sp, #8]
    922e:	7629      	strb	r1, [r5, #24]
    9230:	f000 fa20 	bl	9674 <memchr>
    9234:	2800      	cmp	r0, #0
    9236:	d044      	beq.n	92c2 <_vfiprintf_r+0x206>
    9238:	4b2c      	ldr	r3, [pc, #176]	; (92ec <_vfiprintf_r+0x230>)
    923a:	2b00      	cmp	r3, #0
    923c:	d12f      	bne.n	929e <_vfiprintf_r+0x1e2>
    923e:	6829      	ldr	r1, [r5, #0]
    9240:	9b05      	ldr	r3, [sp, #20]
    9242:	2207      	movs	r2, #7
    9244:	05c9      	lsls	r1, r1, #23
    9246:	d528      	bpl.n	929a <_vfiprintf_r+0x1de>
    9248:	189b      	adds	r3, r3, r2
    924a:	4393      	bics	r3, r2
    924c:	3308      	adds	r3, #8
    924e:	9305      	str	r3, [sp, #20]
    9250:	696b      	ldr	r3, [r5, #20]
    9252:	9a03      	ldr	r2, [sp, #12]
    9254:	189b      	adds	r3, r3, r2
    9256:	616b      	str	r3, [r5, #20]
    9258:	e74f      	b.n	90fa <_vfiprintf_r+0x3e>
    925a:	425b      	negs	r3, r3
    925c:	60eb      	str	r3, [r5, #12]
    925e:	2302      	movs	r3, #2
    9260:	430b      	orrs	r3, r1
    9262:	602b      	str	r3, [r5, #0]
    9264:	e7bf      	b.n	91e6 <_vfiprintf_r+0x12a>
    9266:	434b      	muls	r3, r1
    9268:	3401      	adds	r4, #1
    926a:	189b      	adds	r3, r3, r2
    926c:	2001      	movs	r0, #1
    926e:	e789      	b.n	9184 <_vfiprintf_r+0xc8>
    9270:	2301      	movs	r3, #1
    9272:	425b      	negs	r3, r3
    9274:	e7c6      	b.n	9204 <_vfiprintf_r+0x148>
    9276:	2300      	movs	r3, #0
    9278:	0014      	movs	r4, r2
    927a:	200a      	movs	r0, #10
    927c:	001a      	movs	r2, r3
    927e:	606b      	str	r3, [r5, #4]
    9280:	7821      	ldrb	r1, [r4, #0]
    9282:	3930      	subs	r1, #48	; 0x30
    9284:	2909      	cmp	r1, #9
    9286:	d903      	bls.n	9290 <_vfiprintf_r+0x1d4>
    9288:	2b00      	cmp	r3, #0
    928a:	d0bc      	beq.n	9206 <_vfiprintf_r+0x14a>
    928c:	9207      	str	r2, [sp, #28]
    928e:	e7ba      	b.n	9206 <_vfiprintf_r+0x14a>
    9290:	4342      	muls	r2, r0
    9292:	3401      	adds	r4, #1
    9294:	1852      	adds	r2, r2, r1
    9296:	2301      	movs	r3, #1
    9298:	e7f2      	b.n	9280 <_vfiprintf_r+0x1c4>
    929a:	3307      	adds	r3, #7
    929c:	e7d5      	b.n	924a <_vfiprintf_r+0x18e>
    929e:	ab05      	add	r3, sp, #20
    92a0:	9300      	str	r3, [sp, #0]
    92a2:	003a      	movs	r2, r7
    92a4:	4b12      	ldr	r3, [pc, #72]	; (92f0 <_vfiprintf_r+0x234>)
    92a6:	0029      	movs	r1, r5
    92a8:	0030      	movs	r0, r6
    92aa:	e000      	b.n	92ae <_vfiprintf_r+0x1f2>
    92ac:	bf00      	nop
    92ae:	9003      	str	r0, [sp, #12]
    92b0:	9b03      	ldr	r3, [sp, #12]
    92b2:	3301      	adds	r3, #1
    92b4:	d1cc      	bne.n	9250 <_vfiprintf_r+0x194>
    92b6:	89bb      	ldrh	r3, [r7, #12]
    92b8:	065b      	lsls	r3, r3, #25
    92ba:	d500      	bpl.n	92be <_vfiprintf_r+0x202>
    92bc:	e77b      	b.n	91b6 <_vfiprintf_r+0xfa>
    92be:	980b      	ldr	r0, [sp, #44]	; 0x2c
    92c0:	e77b      	b.n	91ba <_vfiprintf_r+0xfe>
    92c2:	ab05      	add	r3, sp, #20
    92c4:	9300      	str	r3, [sp, #0]
    92c6:	003a      	movs	r2, r7
    92c8:	4b09      	ldr	r3, [pc, #36]	; (92f0 <_vfiprintf_r+0x234>)
    92ca:	0029      	movs	r1, r5
    92cc:	0030      	movs	r0, r6
    92ce:	f000 f87f 	bl	93d0 <_printf_i>
    92d2:	e7ec      	b.n	92ae <_vfiprintf_r+0x1f2>
    92d4:	0000b65c 	.word	0x0000b65c
    92d8:	0000b6a0 	.word	0x0000b6a0
    92dc:	0000b67c 	.word	0x0000b67c
    92e0:	0000b63c 	.word	0x0000b63c
    92e4:	0000b6a6 	.word	0x0000b6a6
    92e8:	0000b6aa 	.word	0x0000b6aa
    92ec:	00000000 	.word	0x00000000
    92f0:	00009097 	.word	0x00009097

000092f4 <_printf_common>:
    92f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    92f6:	0015      	movs	r5, r2
    92f8:	9301      	str	r3, [sp, #4]
    92fa:	688a      	ldr	r2, [r1, #8]
    92fc:	690b      	ldr	r3, [r1, #16]
    92fe:	9000      	str	r0, [sp, #0]
    9300:	000c      	movs	r4, r1
    9302:	4293      	cmp	r3, r2
    9304:	da00      	bge.n	9308 <_printf_common+0x14>
    9306:	0013      	movs	r3, r2
    9308:	0022      	movs	r2, r4
    930a:	602b      	str	r3, [r5, #0]
    930c:	3243      	adds	r2, #67	; 0x43
    930e:	7812      	ldrb	r2, [r2, #0]
    9310:	2a00      	cmp	r2, #0
    9312:	d001      	beq.n	9318 <_printf_common+0x24>
    9314:	3301      	adds	r3, #1
    9316:	602b      	str	r3, [r5, #0]
    9318:	6823      	ldr	r3, [r4, #0]
    931a:	069b      	lsls	r3, r3, #26
    931c:	d502      	bpl.n	9324 <_printf_common+0x30>
    931e:	682b      	ldr	r3, [r5, #0]
    9320:	3302      	adds	r3, #2
    9322:	602b      	str	r3, [r5, #0]
    9324:	2706      	movs	r7, #6
    9326:	6823      	ldr	r3, [r4, #0]
    9328:	401f      	ands	r7, r3
    932a:	d027      	beq.n	937c <_printf_common+0x88>
    932c:	0023      	movs	r3, r4
    932e:	3343      	adds	r3, #67	; 0x43
    9330:	781b      	ldrb	r3, [r3, #0]
    9332:	1e5a      	subs	r2, r3, #1
    9334:	4193      	sbcs	r3, r2
    9336:	6822      	ldr	r2, [r4, #0]
    9338:	0692      	lsls	r2, r2, #26
    933a:	d430      	bmi.n	939e <_printf_common+0xaa>
    933c:	0022      	movs	r2, r4
    933e:	9901      	ldr	r1, [sp, #4]
    9340:	3243      	adds	r2, #67	; 0x43
    9342:	9800      	ldr	r0, [sp, #0]
    9344:	9e08      	ldr	r6, [sp, #32]
    9346:	47b0      	blx	r6
    9348:	1c43      	adds	r3, r0, #1
    934a:	d025      	beq.n	9398 <_printf_common+0xa4>
    934c:	2306      	movs	r3, #6
    934e:	6820      	ldr	r0, [r4, #0]
    9350:	682a      	ldr	r2, [r5, #0]
    9352:	68e1      	ldr	r1, [r4, #12]
    9354:	4003      	ands	r3, r0
    9356:	2500      	movs	r5, #0
    9358:	2b04      	cmp	r3, #4
    935a:	d103      	bne.n	9364 <_printf_common+0x70>
    935c:	1a8d      	subs	r5, r1, r2
    935e:	43eb      	mvns	r3, r5
    9360:	17db      	asrs	r3, r3, #31
    9362:	401d      	ands	r5, r3
    9364:	68a3      	ldr	r3, [r4, #8]
    9366:	6922      	ldr	r2, [r4, #16]
    9368:	4293      	cmp	r3, r2
    936a:	dd01      	ble.n	9370 <_printf_common+0x7c>
    936c:	1a9b      	subs	r3, r3, r2
    936e:	18ed      	adds	r5, r5, r3
    9370:	2700      	movs	r7, #0
    9372:	42bd      	cmp	r5, r7
    9374:	d120      	bne.n	93b8 <_printf_common+0xc4>
    9376:	2000      	movs	r0, #0
    9378:	e010      	b.n	939c <_printf_common+0xa8>
    937a:	3701      	adds	r7, #1
    937c:	68e3      	ldr	r3, [r4, #12]
    937e:	682a      	ldr	r2, [r5, #0]
    9380:	1a9b      	subs	r3, r3, r2
    9382:	429f      	cmp	r7, r3
    9384:	dad2      	bge.n	932c <_printf_common+0x38>
    9386:	0022      	movs	r2, r4
    9388:	2301      	movs	r3, #1
    938a:	3219      	adds	r2, #25
    938c:	9901      	ldr	r1, [sp, #4]
    938e:	9800      	ldr	r0, [sp, #0]
    9390:	9e08      	ldr	r6, [sp, #32]
    9392:	47b0      	blx	r6
    9394:	1c43      	adds	r3, r0, #1
    9396:	d1f0      	bne.n	937a <_printf_common+0x86>
    9398:	2001      	movs	r0, #1
    939a:	4240      	negs	r0, r0
    939c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    939e:	2030      	movs	r0, #48	; 0x30
    93a0:	18e1      	adds	r1, r4, r3
    93a2:	3143      	adds	r1, #67	; 0x43
    93a4:	7008      	strb	r0, [r1, #0]
    93a6:	0021      	movs	r1, r4
    93a8:	1c5a      	adds	r2, r3, #1
    93aa:	3145      	adds	r1, #69	; 0x45
    93ac:	7809      	ldrb	r1, [r1, #0]
    93ae:	18a2      	adds	r2, r4, r2
    93b0:	3243      	adds	r2, #67	; 0x43
    93b2:	3302      	adds	r3, #2
    93b4:	7011      	strb	r1, [r2, #0]
    93b6:	e7c1      	b.n	933c <_printf_common+0x48>
    93b8:	0022      	movs	r2, r4
    93ba:	2301      	movs	r3, #1
    93bc:	321a      	adds	r2, #26
    93be:	9901      	ldr	r1, [sp, #4]
    93c0:	9800      	ldr	r0, [sp, #0]
    93c2:	9e08      	ldr	r6, [sp, #32]
    93c4:	47b0      	blx	r6
    93c6:	1c43      	adds	r3, r0, #1
    93c8:	d0e6      	beq.n	9398 <_printf_common+0xa4>
    93ca:	3701      	adds	r7, #1
    93cc:	e7d1      	b.n	9372 <_printf_common+0x7e>
	...

000093d0 <_printf_i>:
    93d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    93d2:	b08b      	sub	sp, #44	; 0x2c
    93d4:	9206      	str	r2, [sp, #24]
    93d6:	000a      	movs	r2, r1
    93d8:	3243      	adds	r2, #67	; 0x43
    93da:	9307      	str	r3, [sp, #28]
    93dc:	9005      	str	r0, [sp, #20]
    93de:	9204      	str	r2, [sp, #16]
    93e0:	7e0a      	ldrb	r2, [r1, #24]
    93e2:	000c      	movs	r4, r1
    93e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    93e6:	2a6e      	cmp	r2, #110	; 0x6e
    93e8:	d100      	bne.n	93ec <_printf_i+0x1c>
    93ea:	e08f      	b.n	950c <_printf_i+0x13c>
    93ec:	d817      	bhi.n	941e <_printf_i+0x4e>
    93ee:	2a63      	cmp	r2, #99	; 0x63
    93f0:	d02c      	beq.n	944c <_printf_i+0x7c>
    93f2:	d808      	bhi.n	9406 <_printf_i+0x36>
    93f4:	2a00      	cmp	r2, #0
    93f6:	d100      	bne.n	93fa <_printf_i+0x2a>
    93f8:	e099      	b.n	952e <_printf_i+0x15e>
    93fa:	2a58      	cmp	r2, #88	; 0x58
    93fc:	d054      	beq.n	94a8 <_printf_i+0xd8>
    93fe:	0026      	movs	r6, r4
    9400:	3642      	adds	r6, #66	; 0x42
    9402:	7032      	strb	r2, [r6, #0]
    9404:	e029      	b.n	945a <_printf_i+0x8a>
    9406:	2a64      	cmp	r2, #100	; 0x64
    9408:	d001      	beq.n	940e <_printf_i+0x3e>
    940a:	2a69      	cmp	r2, #105	; 0x69
    940c:	d1f7      	bne.n	93fe <_printf_i+0x2e>
    940e:	6821      	ldr	r1, [r4, #0]
    9410:	681a      	ldr	r2, [r3, #0]
    9412:	0608      	lsls	r0, r1, #24
    9414:	d523      	bpl.n	945e <_printf_i+0x8e>
    9416:	1d11      	adds	r1, r2, #4
    9418:	6019      	str	r1, [r3, #0]
    941a:	6815      	ldr	r5, [r2, #0]
    941c:	e025      	b.n	946a <_printf_i+0x9a>
    941e:	2a73      	cmp	r2, #115	; 0x73
    9420:	d100      	bne.n	9424 <_printf_i+0x54>
    9422:	e088      	b.n	9536 <_printf_i+0x166>
    9424:	d808      	bhi.n	9438 <_printf_i+0x68>
    9426:	2a6f      	cmp	r2, #111	; 0x6f
    9428:	d029      	beq.n	947e <_printf_i+0xae>
    942a:	2a70      	cmp	r2, #112	; 0x70
    942c:	d1e7      	bne.n	93fe <_printf_i+0x2e>
    942e:	2220      	movs	r2, #32
    9430:	6809      	ldr	r1, [r1, #0]
    9432:	430a      	orrs	r2, r1
    9434:	6022      	str	r2, [r4, #0]
    9436:	e003      	b.n	9440 <_printf_i+0x70>
    9438:	2a75      	cmp	r2, #117	; 0x75
    943a:	d020      	beq.n	947e <_printf_i+0xae>
    943c:	2a78      	cmp	r2, #120	; 0x78
    943e:	d1de      	bne.n	93fe <_printf_i+0x2e>
    9440:	0022      	movs	r2, r4
    9442:	2178      	movs	r1, #120	; 0x78
    9444:	3245      	adds	r2, #69	; 0x45
    9446:	7011      	strb	r1, [r2, #0]
    9448:	4a6c      	ldr	r2, [pc, #432]	; (95fc <_printf_i+0x22c>)
    944a:	e030      	b.n	94ae <_printf_i+0xde>
    944c:	000e      	movs	r6, r1
    944e:	681a      	ldr	r2, [r3, #0]
    9450:	3642      	adds	r6, #66	; 0x42
    9452:	1d11      	adds	r1, r2, #4
    9454:	6019      	str	r1, [r3, #0]
    9456:	6813      	ldr	r3, [r2, #0]
    9458:	7033      	strb	r3, [r6, #0]
    945a:	2301      	movs	r3, #1
    945c:	e079      	b.n	9552 <_printf_i+0x182>
    945e:	0649      	lsls	r1, r1, #25
    9460:	d5d9      	bpl.n	9416 <_printf_i+0x46>
    9462:	1d11      	adds	r1, r2, #4
    9464:	6019      	str	r1, [r3, #0]
    9466:	2300      	movs	r3, #0
    9468:	5ed5      	ldrsh	r5, [r2, r3]
    946a:	2d00      	cmp	r5, #0
    946c:	da03      	bge.n	9476 <_printf_i+0xa6>
    946e:	232d      	movs	r3, #45	; 0x2d
    9470:	9a04      	ldr	r2, [sp, #16]
    9472:	426d      	negs	r5, r5
    9474:	7013      	strb	r3, [r2, #0]
    9476:	4b62      	ldr	r3, [pc, #392]	; (9600 <_printf_i+0x230>)
    9478:	270a      	movs	r7, #10
    947a:	9303      	str	r3, [sp, #12]
    947c:	e02f      	b.n	94de <_printf_i+0x10e>
    947e:	6820      	ldr	r0, [r4, #0]
    9480:	6819      	ldr	r1, [r3, #0]
    9482:	0605      	lsls	r5, r0, #24
    9484:	d503      	bpl.n	948e <_printf_i+0xbe>
    9486:	1d08      	adds	r0, r1, #4
    9488:	6018      	str	r0, [r3, #0]
    948a:	680d      	ldr	r5, [r1, #0]
    948c:	e005      	b.n	949a <_printf_i+0xca>
    948e:	0640      	lsls	r0, r0, #25
    9490:	d5f9      	bpl.n	9486 <_printf_i+0xb6>
    9492:	680d      	ldr	r5, [r1, #0]
    9494:	1d08      	adds	r0, r1, #4
    9496:	6018      	str	r0, [r3, #0]
    9498:	b2ad      	uxth	r5, r5
    949a:	4b59      	ldr	r3, [pc, #356]	; (9600 <_printf_i+0x230>)
    949c:	2708      	movs	r7, #8
    949e:	9303      	str	r3, [sp, #12]
    94a0:	2a6f      	cmp	r2, #111	; 0x6f
    94a2:	d018      	beq.n	94d6 <_printf_i+0x106>
    94a4:	270a      	movs	r7, #10
    94a6:	e016      	b.n	94d6 <_printf_i+0x106>
    94a8:	3145      	adds	r1, #69	; 0x45
    94aa:	700a      	strb	r2, [r1, #0]
    94ac:	4a54      	ldr	r2, [pc, #336]	; (9600 <_printf_i+0x230>)
    94ae:	9203      	str	r2, [sp, #12]
    94b0:	681a      	ldr	r2, [r3, #0]
    94b2:	6821      	ldr	r1, [r4, #0]
    94b4:	1d10      	adds	r0, r2, #4
    94b6:	6018      	str	r0, [r3, #0]
    94b8:	6815      	ldr	r5, [r2, #0]
    94ba:	0608      	lsls	r0, r1, #24
    94bc:	d522      	bpl.n	9504 <_printf_i+0x134>
    94be:	07cb      	lsls	r3, r1, #31
    94c0:	d502      	bpl.n	94c8 <_printf_i+0xf8>
    94c2:	2320      	movs	r3, #32
    94c4:	4319      	orrs	r1, r3
    94c6:	6021      	str	r1, [r4, #0]
    94c8:	2710      	movs	r7, #16
    94ca:	2d00      	cmp	r5, #0
    94cc:	d103      	bne.n	94d6 <_printf_i+0x106>
    94ce:	2320      	movs	r3, #32
    94d0:	6822      	ldr	r2, [r4, #0]
    94d2:	439a      	bics	r2, r3
    94d4:	6022      	str	r2, [r4, #0]
    94d6:	0023      	movs	r3, r4
    94d8:	2200      	movs	r2, #0
    94da:	3343      	adds	r3, #67	; 0x43
    94dc:	701a      	strb	r2, [r3, #0]
    94de:	6863      	ldr	r3, [r4, #4]
    94e0:	60a3      	str	r3, [r4, #8]
    94e2:	2b00      	cmp	r3, #0
    94e4:	db5c      	blt.n	95a0 <_printf_i+0x1d0>
    94e6:	2204      	movs	r2, #4
    94e8:	6821      	ldr	r1, [r4, #0]
    94ea:	4391      	bics	r1, r2
    94ec:	6021      	str	r1, [r4, #0]
    94ee:	2d00      	cmp	r5, #0
    94f0:	d158      	bne.n	95a4 <_printf_i+0x1d4>
    94f2:	9e04      	ldr	r6, [sp, #16]
    94f4:	2b00      	cmp	r3, #0
    94f6:	d064      	beq.n	95c2 <_printf_i+0x1f2>
    94f8:	0026      	movs	r6, r4
    94fa:	9b03      	ldr	r3, [sp, #12]
    94fc:	3642      	adds	r6, #66	; 0x42
    94fe:	781b      	ldrb	r3, [r3, #0]
    9500:	7033      	strb	r3, [r6, #0]
    9502:	e05e      	b.n	95c2 <_printf_i+0x1f2>
    9504:	0648      	lsls	r0, r1, #25
    9506:	d5da      	bpl.n	94be <_printf_i+0xee>
    9508:	b2ad      	uxth	r5, r5
    950a:	e7d8      	b.n	94be <_printf_i+0xee>
    950c:	6809      	ldr	r1, [r1, #0]
    950e:	681a      	ldr	r2, [r3, #0]
    9510:	0608      	lsls	r0, r1, #24
    9512:	d505      	bpl.n	9520 <_printf_i+0x150>
    9514:	1d11      	adds	r1, r2, #4
    9516:	6019      	str	r1, [r3, #0]
    9518:	6813      	ldr	r3, [r2, #0]
    951a:	6962      	ldr	r2, [r4, #20]
    951c:	601a      	str	r2, [r3, #0]
    951e:	e006      	b.n	952e <_printf_i+0x15e>
    9520:	0649      	lsls	r1, r1, #25
    9522:	d5f7      	bpl.n	9514 <_printf_i+0x144>
    9524:	1d11      	adds	r1, r2, #4
    9526:	6019      	str	r1, [r3, #0]
    9528:	6813      	ldr	r3, [r2, #0]
    952a:	8aa2      	ldrh	r2, [r4, #20]
    952c:	801a      	strh	r2, [r3, #0]
    952e:	2300      	movs	r3, #0
    9530:	9e04      	ldr	r6, [sp, #16]
    9532:	6123      	str	r3, [r4, #16]
    9534:	e054      	b.n	95e0 <_printf_i+0x210>
    9536:	681a      	ldr	r2, [r3, #0]
    9538:	1d11      	adds	r1, r2, #4
    953a:	6019      	str	r1, [r3, #0]
    953c:	6816      	ldr	r6, [r2, #0]
    953e:	2100      	movs	r1, #0
    9540:	6862      	ldr	r2, [r4, #4]
    9542:	0030      	movs	r0, r6
    9544:	f000 f896 	bl	9674 <memchr>
    9548:	2800      	cmp	r0, #0
    954a:	d001      	beq.n	9550 <_printf_i+0x180>
    954c:	1b80      	subs	r0, r0, r6
    954e:	6060      	str	r0, [r4, #4]
    9550:	6863      	ldr	r3, [r4, #4]
    9552:	6123      	str	r3, [r4, #16]
    9554:	2300      	movs	r3, #0
    9556:	9a04      	ldr	r2, [sp, #16]
    9558:	7013      	strb	r3, [r2, #0]
    955a:	e041      	b.n	95e0 <_printf_i+0x210>
    955c:	6923      	ldr	r3, [r4, #16]
    955e:	0032      	movs	r2, r6
    9560:	9906      	ldr	r1, [sp, #24]
    9562:	9805      	ldr	r0, [sp, #20]
    9564:	9d07      	ldr	r5, [sp, #28]
    9566:	47a8      	blx	r5
    9568:	1c43      	adds	r3, r0, #1
    956a:	d043      	beq.n	95f4 <_printf_i+0x224>
    956c:	6823      	ldr	r3, [r4, #0]
    956e:	2500      	movs	r5, #0
    9570:	079b      	lsls	r3, r3, #30
    9572:	d40f      	bmi.n	9594 <_printf_i+0x1c4>
    9574:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9576:	68e0      	ldr	r0, [r4, #12]
    9578:	4298      	cmp	r0, r3
    957a:	da3d      	bge.n	95f8 <_printf_i+0x228>
    957c:	0018      	movs	r0, r3
    957e:	e03b      	b.n	95f8 <_printf_i+0x228>
    9580:	0022      	movs	r2, r4
    9582:	2301      	movs	r3, #1
    9584:	3219      	adds	r2, #25
    9586:	9906      	ldr	r1, [sp, #24]
    9588:	9805      	ldr	r0, [sp, #20]
    958a:	9e07      	ldr	r6, [sp, #28]
    958c:	47b0      	blx	r6
    958e:	1c43      	adds	r3, r0, #1
    9590:	d030      	beq.n	95f4 <_printf_i+0x224>
    9592:	3501      	adds	r5, #1
    9594:	68e3      	ldr	r3, [r4, #12]
    9596:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9598:	1a9b      	subs	r3, r3, r2
    959a:	429d      	cmp	r5, r3
    959c:	dbf0      	blt.n	9580 <_printf_i+0x1b0>
    959e:	e7e9      	b.n	9574 <_printf_i+0x1a4>
    95a0:	2d00      	cmp	r5, #0
    95a2:	d0a9      	beq.n	94f8 <_printf_i+0x128>
    95a4:	9e04      	ldr	r6, [sp, #16]
    95a6:	0028      	movs	r0, r5
    95a8:	0039      	movs	r1, r7
    95aa:	f7fe fd2b 	bl	8004 <__aeabi_uidivmod>
    95ae:	9b03      	ldr	r3, [sp, #12]
    95b0:	3e01      	subs	r6, #1
    95b2:	5c5b      	ldrb	r3, [r3, r1]
    95b4:	0028      	movs	r0, r5
    95b6:	7033      	strb	r3, [r6, #0]
    95b8:	0039      	movs	r1, r7
    95ba:	f7fe fc9d 	bl	7ef8 <__udivsi3>
    95be:	1e05      	subs	r5, r0, #0
    95c0:	d1f1      	bne.n	95a6 <_printf_i+0x1d6>
    95c2:	2f08      	cmp	r7, #8
    95c4:	d109      	bne.n	95da <_printf_i+0x20a>
    95c6:	6823      	ldr	r3, [r4, #0]
    95c8:	07db      	lsls	r3, r3, #31
    95ca:	d506      	bpl.n	95da <_printf_i+0x20a>
    95cc:	6863      	ldr	r3, [r4, #4]
    95ce:	6922      	ldr	r2, [r4, #16]
    95d0:	4293      	cmp	r3, r2
    95d2:	dc02      	bgt.n	95da <_printf_i+0x20a>
    95d4:	2330      	movs	r3, #48	; 0x30
    95d6:	3e01      	subs	r6, #1
    95d8:	7033      	strb	r3, [r6, #0]
    95da:	9b04      	ldr	r3, [sp, #16]
    95dc:	1b9b      	subs	r3, r3, r6
    95de:	6123      	str	r3, [r4, #16]
    95e0:	9b07      	ldr	r3, [sp, #28]
    95e2:	aa09      	add	r2, sp, #36	; 0x24
    95e4:	9300      	str	r3, [sp, #0]
    95e6:	0021      	movs	r1, r4
    95e8:	9b06      	ldr	r3, [sp, #24]
    95ea:	9805      	ldr	r0, [sp, #20]
    95ec:	f7ff fe82 	bl	92f4 <_printf_common>
    95f0:	1c43      	adds	r3, r0, #1
    95f2:	d1b3      	bne.n	955c <_printf_i+0x18c>
    95f4:	2001      	movs	r0, #1
    95f6:	4240      	negs	r0, r0
    95f8:	b00b      	add	sp, #44	; 0x2c
    95fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    95fc:	0000b6c2 	.word	0x0000b6c2
    9600:	0000b6b1 	.word	0x0000b6b1

00009604 <_read_r>:
    9604:	b570      	push	{r4, r5, r6, lr}
    9606:	0005      	movs	r5, r0
    9608:	0008      	movs	r0, r1
    960a:	0011      	movs	r1, r2
    960c:	2200      	movs	r2, #0
    960e:	4c06      	ldr	r4, [pc, #24]	; (9628 <_read_r+0x24>)
    9610:	6022      	str	r2, [r4, #0]
    9612:	001a      	movs	r2, r3
    9614:	f7fe fbc6 	bl	7da4 <_read>
    9618:	1c43      	adds	r3, r0, #1
    961a:	d103      	bne.n	9624 <_read_r+0x20>
    961c:	6823      	ldr	r3, [r4, #0]
    961e:	2b00      	cmp	r3, #0
    9620:	d000      	beq.n	9624 <_read_r+0x20>
    9622:	602b      	str	r3, [r5, #0]
    9624:	bd70      	pop	{r4, r5, r6, pc}
    9626:	46c0      	nop			; (mov r8, r8)
    9628:	20000c10 	.word	0x20000c10

0000962c <_fstat_r>:
    962c:	2300      	movs	r3, #0
    962e:	b570      	push	{r4, r5, r6, lr}
    9630:	4c06      	ldr	r4, [pc, #24]	; (964c <_fstat_r+0x20>)
    9632:	0005      	movs	r5, r0
    9634:	0008      	movs	r0, r1
    9636:	0011      	movs	r1, r2
    9638:	6023      	str	r3, [r4, #0]
    963a:	f7f7 f9be 	bl	9ba <_fstat>
    963e:	1c43      	adds	r3, r0, #1
    9640:	d103      	bne.n	964a <_fstat_r+0x1e>
    9642:	6823      	ldr	r3, [r4, #0]
    9644:	2b00      	cmp	r3, #0
    9646:	d000      	beq.n	964a <_fstat_r+0x1e>
    9648:	602b      	str	r3, [r5, #0]
    964a:	bd70      	pop	{r4, r5, r6, pc}
    964c:	20000c10 	.word	0x20000c10

00009650 <_isatty_r>:
    9650:	2300      	movs	r3, #0
    9652:	b570      	push	{r4, r5, r6, lr}
    9654:	4c06      	ldr	r4, [pc, #24]	; (9670 <_isatty_r+0x20>)
    9656:	0005      	movs	r5, r0
    9658:	0008      	movs	r0, r1
    965a:	6023      	str	r3, [r4, #0]
    965c:	f7f7 f9b2 	bl	9c4 <_isatty>
    9660:	1c43      	adds	r3, r0, #1
    9662:	d103      	bne.n	966c <_isatty_r+0x1c>
    9664:	6823      	ldr	r3, [r4, #0]
    9666:	2b00      	cmp	r3, #0
    9668:	d000      	beq.n	966c <_isatty_r+0x1c>
    966a:	602b      	str	r3, [r5, #0]
    966c:	bd70      	pop	{r4, r5, r6, pc}
    966e:	46c0      	nop			; (mov r8, r8)
    9670:	20000c10 	.word	0x20000c10

00009674 <memchr>:
    9674:	b2c9      	uxtb	r1, r1
    9676:	1882      	adds	r2, r0, r2
    9678:	4290      	cmp	r0, r2
    967a:	d101      	bne.n	9680 <memchr+0xc>
    967c:	2000      	movs	r0, #0
    967e:	4770      	bx	lr
    9680:	7803      	ldrb	r3, [r0, #0]
    9682:	428b      	cmp	r3, r1
    9684:	d0fb      	beq.n	967e <memchr+0xa>
    9686:	3001      	adds	r0, #1
    9688:	e7f6      	b.n	9678 <memchr+0x4>

0000968a <memmove>:
    968a:	b510      	push	{r4, lr}
    968c:	4288      	cmp	r0, r1
    968e:	d902      	bls.n	9696 <memmove+0xc>
    9690:	188b      	adds	r3, r1, r2
    9692:	4298      	cmp	r0, r3
    9694:	d308      	bcc.n	96a8 <memmove+0x1e>
    9696:	2300      	movs	r3, #0
    9698:	429a      	cmp	r2, r3
    969a:	d007      	beq.n	96ac <memmove+0x22>
    969c:	5ccc      	ldrb	r4, [r1, r3]
    969e:	54c4      	strb	r4, [r0, r3]
    96a0:	3301      	adds	r3, #1
    96a2:	e7f9      	b.n	9698 <memmove+0xe>
    96a4:	5c8b      	ldrb	r3, [r1, r2]
    96a6:	5483      	strb	r3, [r0, r2]
    96a8:	3a01      	subs	r2, #1
    96aa:	d2fb      	bcs.n	96a4 <memmove+0x1a>
    96ac:	bd10      	pop	{r4, pc}

000096ae <_realloc_r>:
    96ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    96b0:	0007      	movs	r7, r0
    96b2:	000d      	movs	r5, r1
    96b4:	0016      	movs	r6, r2
    96b6:	2900      	cmp	r1, #0
    96b8:	d105      	bne.n	96c6 <_realloc_r+0x18>
    96ba:	0011      	movs	r1, r2
    96bc:	f7fe ffd6 	bl	866c <_malloc_r>
    96c0:	0004      	movs	r4, r0
    96c2:	0020      	movs	r0, r4
    96c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    96c6:	2a00      	cmp	r2, #0
    96c8:	d103      	bne.n	96d2 <_realloc_r+0x24>
    96ca:	f7fe ff85 	bl	85d8 <_free_r>
    96ce:	0034      	movs	r4, r6
    96d0:	e7f7      	b.n	96c2 <_realloc_r+0x14>
    96d2:	f000 f812 	bl	96fa <_malloc_usable_size_r>
    96d6:	002c      	movs	r4, r5
    96d8:	4286      	cmp	r6, r0
    96da:	d9f2      	bls.n	96c2 <_realloc_r+0x14>
    96dc:	0031      	movs	r1, r6
    96de:	0038      	movs	r0, r7
    96e0:	f7fe ffc4 	bl	866c <_malloc_r>
    96e4:	1e04      	subs	r4, r0, #0
    96e6:	d0ec      	beq.n	96c2 <_realloc_r+0x14>
    96e8:	0029      	movs	r1, r5
    96ea:	0032      	movs	r2, r6
    96ec:	f7fe ff63 	bl	85b6 <memcpy>
    96f0:	0029      	movs	r1, r5
    96f2:	0038      	movs	r0, r7
    96f4:	f7fe ff70 	bl	85d8 <_free_r>
    96f8:	e7e3      	b.n	96c2 <_realloc_r+0x14>

000096fa <_malloc_usable_size_r>:
    96fa:	1f0b      	subs	r3, r1, #4
    96fc:	681b      	ldr	r3, [r3, #0]
    96fe:	1f18      	subs	r0, r3, #4
    9700:	2b00      	cmp	r3, #0
    9702:	da01      	bge.n	9708 <_malloc_usable_size_r+0xe>
    9704:	580b      	ldr	r3, [r1, r0]
    9706:	18c0      	adds	r0, r0, r3
    9708:	4770      	bx	lr
    970a:	0000      	movs	r0, r0
    970c:	682f2e2e 	.word	0x682f2e2e
    9710:	732f6c61 	.word	0x732f6c61
    9714:	682f6372 	.word	0x682f6372
    9718:	695f6c61 	.word	0x695f6c61
    971c:	00632e6f 	.word	0x00632e6f
    9720:	682f2e2e 	.word	0x682f2e2e
    9724:	732f6c61 	.word	0x732f6c61
    9728:	682f6372 	.word	0x682f6372
    972c:	755f6c61 	.word	0x755f6c61
    9730:	74726173 	.word	0x74726173
    9734:	7973615f 	.word	0x7973615f
    9738:	632e636e 	.word	0x632e636e
    973c:	00000000 	.word	0x00000000
    9740:	682f2e2e 	.word	0x682f2e2e
    9744:	732f6c61 	.word	0x732f6c61
    9748:	682f6372 	.word	0x682f6372
    974c:	755f6c61 	.word	0x755f6c61
    9750:	74726173 	.word	0x74726173
    9754:	6e79735f 	.word	0x6e79735f
    9758:	00632e63 	.word	0x00632e63
    975c:	682f2e2e 	.word	0x682f2e2e
    9760:	752f6c61 	.word	0x752f6c61
    9764:	736c6974 	.word	0x736c6974
    9768:	6372732f 	.word	0x6372732f
    976c:	6974752f 	.word	0x6974752f
    9770:	725f736c 	.word	0x725f736c
    9774:	62676e69 	.word	0x62676e69
    9778:	65666675 	.word	0x65666675
    977c:	00632e72 	.word	0x00632e72

00009780 <_i2cms>:
	...

00009798 <_usarts>:
    9798:	00000003 40100004 00030000 00008a09     .......@........
    97a8:	00000000 00000004 40100004 00030000     ...........@....
    97b8:	00008a09 00000000 682f2e2e 732f6c70     ........../hpl/s
    97c8:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    97d8:	0000632e 676e6972 20667562 6c6c7566     .c..ringbuf full
    97e8:	00000021 6e726157 3a676e69 736e7520     !...Warning: uns
    97f8:	20656661 66667562 72207265 61656c65     afe buffer relea
    9808:	0a216573 00000000 2e302e30 00302e30     se!.....0.0.0.0.
    9818:	4f525245 000a0d52 0000000d 73257325     ERROR.......%s%s
    9828:	00000000 61747365 73696c62 63742068     ....establish tc
    9838:	6f632070 63656e6e 6e6f6974 74697720     p connection wit
    9848:	65732068 72657672 736f6828 25273d74     h server(host='%
    9858:	202c2773 74726f70 75255b3d 000a295d     s', port=[%u])..
    9868:	61746567 69726464 206f666e 6f727265     getaddrinfo erro
    9878:	64252872 68202c29 2074736f 2527203d     r(%d), host = '%
    9888:	202c2773 74726f70 5b203d20 0a5d6425     s', port = [%d].
    9898:	00000000 61657263 61206574 6f632074     ....create at co
    98a8:	65206e6e 726f7272 0000000a 6e6e6f63     nn error....conn
    98b8:	20746365 6f727265 00000a72 6c696166     ect error...fail
    98c8:	206f7420 61747365 73696c62 63742068      to establish tc
    98d8:	00000a70 63637573 20737365 65206f74     p...success to e
    98e8:	62617473 6873696c 70637420 6466202c     stablish tcp, fd
    98f8:	0a64253d 00000000 736f6c63 636f7365     =%d.....closesoc
    9908:	2074656b 6f727265 00000a72 64206f4e     ket error...No d
    9918:	20617461 73206562 0a746e65 00000000     ata be sent.....
    9928:	646e6573 69616620 72202c6c 3d207465     send fail, ret =
    9938:	6e657320 20292864 6425203d 0000000a      send() = %d....
    9948:	6e6e6f63 69746365 69206e6f 6c632073     connection is cl
    9958:	6465736f 0000000a 76636572 69616620     osed....recv fai
    9968:	00000a6c                                l...

0000996c <__func__.6259>:
    996c:	386d6973 675f3030 5f737270 5f746f67     sim800_gprs_got_
    997c:	00007069                                ip..

00009980 <__func__.6218>:
    9980:	386d6973 675f3030 5f737270 75646f6d     sim800_gprs_modu
    9990:	735f656c 656b636f 61645f74 685f6174     le_socket_data_h
    99a0:	6c646e61 00000065                       andle...

000099a8 <__func__.6188>:
    99a8:	386d6973 675f3030 5f737270 616d6f64     sim800_gprs_doma
    99b8:	725f6e69 635f7073 626c6c61 006b6361     in_rsp_callback.

000099c8 <__func__.6250>:
    99c8:	386d6973 675f3030 5f737270 695f7069     sim800_gprs_ip_i
    99d8:	0074696e                                nit.

000099dc <__func__.6226>:
    99dc:	386d6973 755f3030 5f747261 666c6573     sim800_uart_self
    99ec:	70616461 6e6f6974 00000000              adaption....

000099f8 <__func__.6272>:
    99f8:	5f4c4148 435f5441 5f4e4e4f 74696e49     HAL_AT_CONN_Init
    9a08:	00000000                                ....

00009a0c <__func__.6235>:
    9a0c:	386d6973 755f3030 5f747261 74696e69     sim800_uart_init
    9a1c:	00000000                                ....

00009a20 <__func__.6241>:
    9a20:	386d6973 675f3030 5f737270 74617473     sim800_gprs_stat
    9a30:	635f7375 6b636568 00000000              us_check....

00009a3c <__func__.6287>:
    9a3c:	5f4c4148 435f5441 5f4e4e4f 616d6f44     HAL_AT_CONN_Doma
    9a4c:	6f546e69 00007049                       inToIp..

00009a54 <__func__.6266>:
    9a54:	386d6973 675f3030 5f737270 5f746567     sim800_gprs_get_
    9a64:	6f5f7069 00796c6e 00000000 0000a080     ip_only.........
    9a74:	00009fb4                                ....

00009a78 <__func__.6300>:
    9a78:	5f4c4148 435f5441 5f4e4e4f 72617453     HAL_AT_CONN_Star
    9a88:	00000074                                t...

00009a8c <__func__.6321>:
    9a8c:	5f4c4148 435f5441 5f4e4e4f 736f6c43     HAL_AT_CONN_Clos
    9a9c:	00000065                                e...

00009aa0 <__func__.6334>:
    9aa0:	5f4c4148 435f5441 5f4e4e4f 646e6553     HAL_AT_CONN_Send
    9ab0:	00000000 432b5441 00545453 00004b4f     ....AT+CSTT.OK..
    9ac0:	20646d63 72207325 25207073 65722073     cmd %s rsp %s re
    9ad0:	20797274 61206425 73252074 20642520     try %d at %s %d 
    9ae0:	6c696166 000a0d20 432b5441 52434949     fail ...AT+CIICR
    9af0:	00000000 25207325 61662064 64656c69     ....%s %d failed
    9b00:	70737220 0d732520 0000000a 432b5441      rsp %s.....AT+C
    9b10:	52534649 00000000 4f525245 00000052     IFSR....ERROR...
    9b20:	61766e49 2064696c 6b6e696c 20646920     Invalid link id 
    9b30:	30257830 21207832 0a0d2121 00000000     0x%02x !!!......
    9b40:	206f6f54 676e6f6c 6e656c20 20687467     Too long length 
    9b50:	6420666f 2e617461 61746164 206e656c     of data.datalen 
    9b60:	25207369 0a0d2073 00000000 61766e49     is %s ......Inva
    9b70:	2064696c 206e656c 69727473 2121676e     lid len string!!
    9b80:	64202c21 6c617461 69206e65 73252073     !, datalen is %s
    9b90:	000a0d20 206f6f54 676e6f6c 6e656c20      ...Too long len
    9ba0:	20687467 6920666f 64646170 70692e72     gth of ipaddr.ip
    9bb0:	72646461 20736920 0d207325 0000000a     addr is %s .....
    9bc0:	61766e49 2064696c 64617069 73207264     Invalid ipaddr s
    9bd0:	6e697274 21212167 7069202c 72646461     tring!!!, ipaddr
    9be0:	20736920 0d207325 0000000a 206f6f54      is %s .....Too 
    9bf0:	676e6f6c 6e656c20 20687467 7220666f     long length of r
    9c00:	746f6d65 6f702065 702e7472 2074726f     emote port.port 
    9c10:	25207369 0a0d2073 00000000 61766e49     is %s ......Inva
    9c20:	2064696c 64617069 73207264 6e697274     lid ipaddr strin
    9c30:	21212167 6f70202c 69207472 73252073     g!!!, port is %s
    9c40:	000a0d20 6f727245 25203a72 64252073      ...Error: %s %d
    9c50:	74756f20 20666f20 6f6d656d 002e7972      out of memory..
    9c60:	20732520 6b636f73 25207465 65672064      %s socket %d ge
    9c70:	61642074 6c206174 25206e65 61662064     t data len %d fa
    9c80:	74206c69 6f70206f 74207473 7461206f     il to post to at
    9c90:	6e6f635f 64202c6e 20706f72 000a7469     _conn, drop it..
    9ca0:	61766e69 2064696c 75706e69 74612074     invalid input at
    9cb0:	20732520 00000a0d 432b5441 48535049      %s ....AT+CIPSH
    9cc0:	00005455 25207325 61662064 64656c69     UT..%s %d failed
    9cd0:	70737220 20732520 72746572 6f632079      rsp %s retry co
    9ce0:	20746e75 0a0d6425 00000000 432b5441     unt %d......AT+C
    9cf0:	554d5049 00000058 253d7325 00000064     IPMUX...%s=%d...
    9d00:	432b5441 50535049 00005452 432b5441     AT+CIPSPRT..AT+C
    9d10:	52535049 00005049 6c2f2e2e 6b6b6e69     IPSRIP..../linkk
    9d20:	612f7469 732f6d74 30386d69 00632e30     it/atm/sim800.c.
    9d30:	61766e69 2064696c 75706e69 73252074     invalid input %s
    9d40:	0d642520 0000000a 386d6973 67203030      %d.....sim800 g
    9d50:	20737270 75646f6d 6820656c 20657661     prs module have 
    9d60:	65726c61 20796461 74696e69 0d206465     already inited .
    9d70:	0000000a 61657243 676e6974 6e696c20     ....Creating lin
    9d80:	756d206b 20786574 6c696166 28206465     k mutex failed (
    9d90:	25207325 002e2964 00005441 386d6973     %s %d)..AT..sim8
    9da0:	755f3030 5f747261 666c6573 70616461     00_uart_selfadap
    9db0:	6e6f6974 69616620 0a0d206c 00000000     tion fail ......
    9dc0:	30455441 00000000 492b5441 00005250     ATE0....AT+IPR..
    9dd0:	492b5441 00004346 253d7325 64252c64     AT+IFC..%s=%d,%d
    9de0:	00000000 57265441 00000000 432b5441     ....AT&W....AT+C
    9df0:	3f4e4950 00000000 432b5441 00005153     PIN?....AT+CSQ..
    9e00:	6e676973 71206c61 696c6175 69207974     signal quality i
    9e10:	73252073 000a0d20 432b5441 3f474552     s %s ...AT+CREG?
    9e20:	00000000 7774656e 206b726f 69676572     ....network regi
    9e30:	61727473 6e6f6974 20736920 0d207325     stration is %s .
    9e40:	0000000a 432b5441 54544147 0000003f     ....AT+CGATT?...
    9e50:	73727067 74746120 20686361 63656863     gprs attach chec
    9e60:	7325206b 000a0d20 25207325 61662064     k %s ...%s %d fa
    9e70:	64656c69 000a0d20 432b0a0d 47534e44     iled .....+CDNSG
    9e80:	203a5049 00000000 522b0a0d 49454345     IP: ......+RECEI
    9e90:	002c4556 73207325 30386d69 70672030     VE,.%s sim800 gp
    9ea0:	6d207372 6c75646f 61682065 276e6576     rs module haven'
    9eb0:	6e692074 79207469 0d207465 0000000a     t init yet .....
    9ec0:	616d6f64 6c206e69 74676e65 766f2068     domain length ov
    9ed0:	69737265 6120657a 73252074 000a0d20     ersize at %s ...
    9ee0:	432b5441 47534e44 00005049 253d7325     AT+CDNSGIP..%s=%
    9ef0:	00000073 61766e69 2064696c 616d6f64     s...invalid doma
    9f00:	72206e69 25207073 74612073 0d642520     in rsp %s at %d.
    9f10:	0000000a 61766e69 2064696c 616d6f64     ....invalid doma
    9f20:	72206e69 68207073 20646165 25207369     in rsp head is %
    9f30:	74612073 0d642520 0000000a 25207325     s at %d.....%s %
    9f40:	202d2064 61766e69 2064696c 75706e69     d - invalid inpu
    9f50:	0a0d2074 00000000 6c206f4e 206b6e69     t ......No link 
    9f60:	69617661 6c62616c 6f662065 6f6e2072     available for no
    9f70:	25202c77 61662073 64656c69 0a0d202e     w, %s failed. ..
    9f80:	00000000 432b5441 45535049 52455652     ....AT+CIPSERVER
    9f90:	00000000 432b5441 54535049 00545241     ....AT+CIPSTART.
    9fa0:	253d7325 54222c64 2c225043 22732522     %s=%d,"TCP","%s"
    9fb0:	0064252c 4e4e4f43 20544345 4c494146     ,%d.CONNECT FAIL
    9fc0:	00000a0d 6d636370 73252064 69616620     ....pccmd %s fai
    9fd0:	72202c6c 25207073 0a0d2073 00000000     l, rsp %s ......
    9fe0:	253d7325 55222c64 2c225044 22732522     %s=%d,"UDP","%s"
    9ff0:	0064252c 386d6973 67203030 20737270     ,%d.sim800 gprs 
    a000:	75646f6d 6320656c 656e6e6f 74207463     module connect t
    a010:	20657079 6e206425 7320746f 6f707075     ype %d not suppo
    a020:	0d207472 0000000a 63206f4e 656e6e6f     rt .....No conne
    a030:	6f697463 6f66206e 20646e75 20726f66     ction found for 
    a040:	28206466 20296425 25206e69 0a0d2073     fd (%d) in %s ..
    a050:	00000000 432b5441 4c435049 0045534f     ....AT+CIPCLOSE.
    a060:	20646d63 72207325 69207073 73252073     cmd %s rsp is %s
    a070:	000a0d20 432b5441 45535049 0000444e      ...AT+CIPSEND..
    a080:	4e4e4f43 20544345 0a0d4b4f 00000000     CONNECT OK......
    a090:	65696c63 6449746e 00000000 69766564     clientId....devi
    a0a0:	614e6563 0000656d 646f7270 4b746375     ceName..productK
    a0b0:	00007965 656d6974 6d617473 00000070     ey..timestamp...
    a0c0:	34323532 30383036 30303030 00000030     2524608000000...
    a0d0:	75636573 6f6d6572 00006564 00000033     securemode..3...
    a0e0:	6e676973 6874656d 0000646f 63616d68     signmethod..hmac
    a0f0:	32616873 00003635 00007767 00747865     sha256..gw..ext.
    a100:	00726576 64732d63 2e332d6b 00302e30     ver.c-sdk-3.0.0.

0000a110 <__func__.6135>:
    a110:	7474716d 6178655f 656c706d 00000000     mqtt_example....
    a120:	7373654d 20656761 69727241 3a646576     Message Arrived:
    a130:	00000a20 69706f54 3a202063 2a2e2520      ...Topic  : %.*
    a140:	00000a73 6c796150 3a64616f 2a2e2520     s...Payload: %.*
    a150:	00000a73 2d67736d 6576653e 745f746e     s...msg->event_t
    a160:	20657079 6425203a 0000000a 6f6d656d     ype : %d....memo
    a170:	6e207972 6520746f 67756f6e 00000a68     ry not enough...
    a180:	2f73252f 672f7325 00007465 73627573     /%s/%s/get..subs
    a190:	62697263 61662065 64656c69 0000000a     cribe failed....
    a1a0:	6c6c6568 6f772c6f 00646c72 6c627570     hello,world.publ
    a1b0:	20687369 6c696166 000a6465 20544f49     ish failed..IOT 
    a1c0:	204d5441 74696e69 69616620 2164656c     ATM init failed!
    a1d0:	0000000a 7474716d 61786520 656c706d     ....mqtt example
    a1e0:	0000000a 257c7325 20643330 00203a3a     ....%s|%03d :: .
    a1f0:	5454514d 6e6f6320 75727473 66207463     MQTT construct f
    a200:	656c6961 00000064 2d746f69 68747561     ailed...iot-auth
    a210:	2d6e632e 6e616873 69616867 696c612e     .cn-shanghai.ali
    a220:	636e7579 6f632e73 0000006d 2d746f69     yuncs.com...iot-
    a230:	68747561 2d70612e 74756f73 73616568     auth.ap-southeas
    a240:	2e312d74 79696c61 73636e75 6d6f632e     t-1.aliyuncs.com
    a250:	00000000 2d746f69 68747561 2d70612e     ....iot-auth.ap-
    a260:	74726f6e 73616568 2e312d74 79696c61     northeast-1.aliy
    a270:	73636e75 6d6f632e 00000000 2d746f69     uncs.com....iot-
    a280:	68747561 2d73752e 74736577 612e312d     auth.us-west-1.a
    a290:	7579696c 2e73636e 006d6f63 2d746f69     liyuncs.com.iot-
    a2a0:	68747561 2d75652e 746e6563 2d6c6172     auth.eu-central-
    a2b0:	6c612e31 6e757969 632e7363 00006d6f     1.aliyuncs.com..
    a2c0:	2d746f69 6d2d7361 2e747471 732d6e63     iot-as-mqtt.cn-s
    a2d0:	676e6168 2e696168 79696c61 73636e75     hanghai.aliyuncs
    a2e0:	6d6f632e 00000000 2d746f69 6d2d7361     .com....iot-as-m
    a2f0:	2e747471 732d7061 6874756f 74736165     qtt.ap-southeast
    a300:	612e312d 7579696c 2e73636e 006d6f63     -1.aliyuncs.com.
    a310:	2d746f69 6d2d7361 2e747471 6e2d7061     iot-as-mqtt.ap-n
    a320:	6874726f 74736165 612e312d 7579696c     ortheast-1.aliyu
    a330:	2e73636e 006d6f63 2d746f69 6d2d7361     ncs.com.iot-as-m
    a340:	2e747471 772d7375 2d747365 6c612e31     qtt.us-west-1.al
    a350:	6e757969 632e7363 00006d6f 2d746f69     iyuncs.com..iot-
    a360:	6d2d7361 2e747471 632d7565 72746e65     as-mqtt.eu-centr
    a370:	312d6c61 696c612e 636e7579 6f632e73     al-1.aliyuncs.co
    a380:	0000006d 2e302e33 00000030 04030201     m...3.0.0.......
    a390:	08070605 00000000 04030201 00000000     ................
    a3a0:	6f706572 66207472 20636e75 20746f6e     report func not 
    a3b0:	69676572 72657473 00000021 69766564     register!...devi
    a3c0:	206f666e 6f706572 00007472 7379732f     nfo report../sys
    a3d0:	2f73252f 742f7325 676e6968 7665642f     /%s/%s/thing/dev
    a3e0:	69656369 2f6f666e 61647075 00006574     iceinfo/update..
    a3f0:	69766564 206f666e 6f706572 74207472     devinfo report t
    a400:	6369706f 7325203a 00000000 6c6c616d     opic: %s....mall
    a410:	6520636f 00007272 69706f74 736d2063     oc err..topic ms
    a420:	65672067 6172656e 65206574 00007272     g generate err..
    a430:	69766564 206f666e 6f706572 64207472     devinfo report d
    a440:	3a617461 00732520 6c627570 20687369     ata: %s.publish 
    a450:	6c696166 202c6465 20746572 6425203d     failed, ret = %d
    a460:	00000000 69766564 206f666e 6f706572     ....devinfo repo
    a470:	73207472 65636375 00006465 6d726966     rt succeed..firm
    a480:	65726177 72657620 6e6f6973 656f6420     ware version doe
    a490:	6f6e2073 6d692074 6d656c70 00746e65     s not implement.
    a4a0:	6d726966 65726177 72657620 6e6f6973     firmware version
    a4b0:	70657220 2074726f 72617473 6e692074      report start in
    a4c0:	54514d20 00000054 61746f2f 7665642f      MQTT.../ota/dev
    a4d0:	2f656369 6f666e69 252f6d72 73252f73     ice/inform/%s/%s
    a4e0:	00000000 6d726966 65726177 70657220     ....firmware rep
    a4f0:	2074726f 69706f74 65672063 6172656e     ort topic genera
    a500:	65206574 00007272 6d726966 65726177     te err..firmware
    a510:	70657220 2074726f 69706f74 25203a63      report topic: %
    a520:	00000073 6469227b 25223a22 222c2264     s...{"id":"%d","
    a530:	61726170 3a22736d 6576227b 6f697372     params":{"versio
    a540:	223a226e 7d227325 0000007d 6d726966     n":"%s"}}...firm
    a550:	65726177 70657220 2074726f 7373656d     ware report mess
    a560:	20656761 6e6f736a 74616420 65672061     age json data ge
    a570:	6172656e 65206574 00007272 6d726966     nerate err..firm
    a580:	65726177 70657220 2074726f 61746164     ware report data
    a590:	7325203a 00000000 6c627570 20687369     : %s....publish 
    a5a0:	6c696166 00006465 6d726966 65726177     failed..firmware
    a5b0:	72657620 6e6f6973 70657220 2074726f      version report 
    a5c0:	696e6966 64656873 6f69202c 705f7874     finished, iotx_p
    a5d0:	696c6275 29286873 25203d20 00000064     ublish() = %d...
    a5e0:	31313131 31313131 32323131 32323232     1111111111222222
    a5f0:	32323232 33333333 33333333 34343333     2222333333333344
    a600:	34343434 34343434 00000000 6469227b     44444444....{"id
    a610:	25223a22 222c2264 73726576 226e6f69     ":"%d","version"
    a620:	2e31223a 222c2230 61726170 3a22736d     :"1.0","params":
    a630:	61227b5b 4b727474 3a227965 53595322     [{"attrKey":"SYS
    a640:	5f504c5f 5f4b4453 53524556 224e4f49     _LP_SDK_VERSION"
    a650:	7461222c 61567274 2265756c 7325223a     ,"attrValue":"%s
    a660:	64222c22 69616d6f 223a226e 54535953     ","domain":"SYST
    a670:	7d224d45 61227b2c 4b727474 3a227965     EM"},{"attrKey":
    a680:	53595322 4b44535f 4e414c5f 47415547     "SYS_SDK_LANGUAG
    a690:	222c2245 72747461 756c6156 223a2265     E","attrValue":"
    a6a0:	222c2243 616d6f64 3a226e69 53595322     C","domain":"SYS
    a6b0:	224d4554 222c5d7d 6874656d 3a22646f     TEM"}],"method":
    a6c0:	69687422 642e676e 63697665 666e6965     "thing.deviceinf
    a6d0:	70752e6f 65746164 00007d22              o.update"}..

0000a6dc <K>:
    a6dc:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
    a6ec:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
    a6fc:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
    a70c:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
    a71c:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
    a72c:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
    a73c:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
    a74c:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
    a75c:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
    a76c:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
    a77c:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
    a78c:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
    a79c:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
    a7ac:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
    a7bc:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
    a7cc:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.

0000a7dc <sha256_padding>:
    a7dc:	00000080 00000000 00000000 00000000     ................
	...
    a81c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    a82c:	00000000 00005aa6 00005af0 00005af6     .....Z...Z...Z..
    a83c:	00005b10 00005b16 00005aa0 0000612e     .[...[...Z...a..
    a84c:	0000612e 00005c32 00005e38 00005c6c     .a..2\..8^..l\..
    a85c:	0000612e 0000612e 0000612e 0000612e     .a...a...a...a..
    a86c:	00005cee 0000612e 000060de 0000612e     .\...a...`...a..
    a87c:	00006122 4354514d 00000000 00000004     "a..MQTC........
	...
    a898:	0001001e 5754514d 00000000 00000000     ....MQTW........
	...
    a8d8:	72657469 7369206d 4c554e20 0000004c     iterm is NULL...
    a8e8:	20656874 72616863 65746361 20232072     the character # 
    a8f8:	20646e61 7369202b 72726520 0000726f     and + is error..
    a908:	20736168 72616863 65746361 20232072     has character # 
    a918:	20646e61 7369202b 72726520 0000726f     and + is error..
    a928:	206e656c 7420666f 6369706f 656d614e     len of topicName
    a938:	63786520 73646565 00343620 0000002f      exceeds 64./...
    a948:	206e7572 78746f69 6568635f 725f6b63     run iotx_check_r
    a958:	20656c75 6f727265 00000072 20656874     ule error...the 
    a968:	72616863 65746361 20232072 65207369     character # is e
    a978:	726f7272 00000000 7474716d 61657220     rror....mqtt rea
    a988:	72652064 2c726f72 3d637220 00006425     d error, rc=%d..
    a998:	6f636564 61506564 74656b63 72726520     decodePacket err
    a9a8:	722c726f 203d2063 00006425 7474716d     or,rc = %d..mqtt
    a9b8:	61657220 75622064 72656666 20736920      read buffer is 
    a9c8:	206f6f74 726f6873 6d202c74 52747471     too short, mqttR
    a9d8:	42646165 654c6675 203a206e 202c7525     eadBufLen : %u, 
    a9e8:	616d6572 61446e69 654c6174 203a206e     remainDataLen : 
    a9f8:	00006425 7474716d 61657220 72652064     %d..mqtt read er
    aa08:	00726f72 6f6c6c61 65746163 6d657220     ror.allocate rem
    aa18:	206e6961 66667562 66207265 656c6961     ain buffer faile
    aa28:	00000064 7474716d 61657220 75622064     d...mqtt read bu
    aa38:	72656666 20736920 206f6f74 726f6873     ffer is too shor
    aa48:	00000074 69726553 7a696c61 6f632065     t...Serialize co
    aa58:	63656e6e 61702074 74656b63 69616620     nnect packet fai
    aa68:	2c64656c 6e656c20 25203d20 00000064     led, len = %d...
    aa78:	646e6573 6e6f6320 7463656e 63617020     send connect pac
    aa88:	2074656b 6c696166 00006465 5454514d     ket failed..MQTT
    aa98:	69726553 7a696c61 75705f65 73696c62     Serialize_publis
    aaa8:	73692068 72726520 202c726f 3d6e656c     h is error, len=
    aab8:	202c6425 5f667562 657a6973 6e65735f     %d, buf_size_sen
    aac8:	75253d64 6170202c 616f6c79 6e656c64     d=%u, payloadlen
    aad8:	0075253d 20656874 61726170 666f206d     =%u.the param of
    aae8:	6e656c20 20736920 6f727265 00002172      len is error!..
    aaf8:	65726f6d 61687420 7525206e 656c6520     more than %u ele
    ab08:	746e656d 6e692073 70657220 696c6275     ments in republi
    ab18:	6c206873 2e747369 73694c20 766f2074     sh list. List ov
    ab28:	6c667265 0021776f 206e7572 78746f69     erflow!.run iotx
    ab38:	6d656d5f 5f79726f 6c6c616d 6920636f     _memory_malloc i
    ab48:	72652073 21726f72 00000000 68737570     s error!....push
    ab58:	62757020 6873696c 746e6920 6f74206f      publish into to
    ab68:	62757020 6f666e49 7473696c 69616620      pubInfolist fai
    ab78:	2164656c 00000000 20746f6e 756f6e65     led!....not enou
    ab88:	6d206867 726f6d65 00002e79 75706e49     gh memory...Inpu
    ab98:	65682074 62747261 20746165 65746e69     t heartbeat inte
    aba8:	6c617672 20642528 2029736d 6c41203c     rval(%d ms) < Al
    abb8:	65776f6c 696d2064 756d696e 6425286d     lowed minimum(%d
    abc8:	29736d20 00000000 65736552 65682074      ms)....Reset he
    abd8:	62747261 20746165 65746e69 6c617672     artbeat interval
    abe8:	203e3d20 4d206425 696c6c69 6f636573      => %d Milliseco
    abf8:	0000646e 75706e49 65682074 62747261     nd..Input heartb
    ac08:	20746165 65746e69 6c617672 20642528     eat interval(%d 
    ac18:	2029736d 6c41203e 65776f6c 616d2064     ms) > Allowed ma
    ac28:	756d6978 6425286d 29736d20 00000000     ximum(%d ms)....
    ac38:	6f6c6c61 65746163 74654e20 6b726f77     allocate Network
    ac48:	72747320 20746375 6c696166 00006465      struct failed..
    ac58:	5454514d 696e6920 75732074 73656363     MQTT init succes
    ac68:	00002173 78746f69 5f636d5f 74696e69     s!..iotx_mc_init
    ac78:	69616620 0064656c 20504354 5420726f      failed.TCP or T
    ac88:	4320534c 656e6e6f 6f697463 6166206e     LS Connection fa
    ac98:	64656c69 00000000 74726563 63696669     iled....certific
    aca8:	20657461 65207369 72697078 00216465     ate is expired!.
    acb8:	646e6573 6e6f6320 7463656e 63617020     send connect pac
    acc8:	2074656b 6c696166 202c6465 3d206372     ket failed, rc =
    acd8:	00642520 64616572 6b636150 65207465      %d.readPacket e
    ace8:	726f7272 7365722c 20746c75 6425203d     rror,result = %d
    acf8:	00000000 74696177 6e6f6320 6b63616e     ....wait connack
    ad08:	6d697420 74756f65 00000000 6e6e6f63      timeout....conn
    ad18:	20746365 206b6361 65207369 726f7272     ect ack is error
    ad28:	00000000 65636572 64657669 6a657220     ....received rej
    ad38:	20746365 204b4341 6d6f7266 54514d20     ect ACK from MQT
    ad48:	65732054 72657672 63722021 25203d20     T server! rc = %
    ad58:	00000064 74696177 6e6f6320 7463656e     d...wait connect
    ad68:	4b434120 6d697420 74756f65 63722021      ACK timeout! rc
    ad78:	25203d20 00000064 65697274 255b2064      = %d...tried [%
    ad88:	64252f64 6974205d 2073656d 4e4e4f43     d/%d] times CONN
    ad98:	6177202c 6e697469 6f662067 64252072     , waiting for %d
    ada8:	2e736d20 00002e2e 7474716d 6e6f6320      ms.....mqtt con
    adb8:	7463656e 63757320 73736563 00000021     nect success!...
    adc8:	76636572 6e6e6f43 506b6361 20636f72     recvConnackProc 
    add8:	6f727265 65722c72 746c7573 25203d20     error,result = %
    ade8:	00000064 6f727265 636f2072 20727563     d...error occur 
    adf8:	253d6372 00000064 74617473 203d2065     rc=%d...state = 
    ae08:	00006425 7065656b 76696c61 72705f65     %d..keepalive_pr
    ae18:	7365626f 726f6d20 68742065 25206e61     obes more than %
    ae28:	64202c75 6f637369 63656e6e 0a646574     u, disconnected.
    ae38:	00000000 4e4e4f43 004b4341 41425550     ....CONNACK.PUBA
    ae48:	00004b43 41425553 00004b43 20627553     CK..SUBACK..Sub 
    ae58:	206b6361 6b636170 65207465 726f7272     ack packet error
    ae68:	6372202c 4d203d20 44545451 72657365     , rc = MQTTDeser
    ae78:	696c6169 735f657a 63616275 2029286b     ialize_suback() 
    ae88:	6425203d 00000000 76636572 41627553     = %d....recvSubA
    ae98:	72506b63 6520636f 726f7272 7365722c     ckProc error,res
    aea8:	20746c75 6425203d 00000000 75746552     ult = %d....Retu
    aeb8:	56206e72 65756c61 00000000 73303225     rn Value....%20s
    aec8:	25203a20 00000064 6b636150 49207465      : %d...Packet I
    aed8:	00000044 6e756f43 00000074 6e617247     D...Count...Gran
    aee8:	20646574 00536f51 73363125 3230255b     ted QoS.%16s[%02
    aef8:	3a205d64 00642520 5454514d 42555320     d] : %d.MQTT SUB
    af08:	49524353 66204542 656c6961 61202c64     SCRIBE failed, a
    af18:	63206b63 2065646f 30207369 00303878     ck code is 0x80.
    af28:	6b636170 695f7465 203d2064 202c6425     packet_id = %d, 
    af38:	6e657665 79745f74 253d6570 00000064     event_type=%d...
    af48:	4c425550 00485349 6b636150 49207465     PUBLISH.Packet I
    af58:	746e6564 00000000 73303225 25203a20     dent....%20s : %
    af68:	00643830 69706f54 654c2063 6874676e     08d.Topic Length
    af78:	00000000 69706f54 614e2063 0000656d     ....Topic Name..
    af88:	73303225 25203a20 00732a2e 6c796150     %20s : %.*s.Payl
    af98:	2064616f 2f6e654c 6d6f6f52 00000000     oad Len/Room....
    afa8:	73303225 25203a20 202f2064 00006425     %20s : %d / %d..
    afb8:	65636552 20657669 6c667542 00006e65     Receive Buflen..
    afc8:	696c6564 69726576 6d20676e 2e206773     delivering msg .
    afd8:	00002e2e 69706f74 65622063 74616d20     ....topic be mat
    afe8:	64656863 00000000 6d204f4e 68637461     ched....NO match
    aff8:	20676e69 20796e61 69706f74 63202c63     ing any topic, c
    b008:	206c6c61 61666564 20746c75 646e6168     all default hand
    b018:	6620656c 74636e75 006e6f69 61766e49     le function.Inva
    b028:	2064696c 2c534f51 534f5120 756c6176     lid QOS, QOSvalu
    b038:	203d2065 00006425 76636572 6c627550     e = %d..recvPubl
    b048:	50687369 20636f72 6f727265 65722c72     ishProc error,re
    b058:	746c7573 25203d20 00000064 55534e55     sult = %d...UNSU
    b068:	4b434142 00000000 65636572 20657669     BACK....receive 
    b078:	676e6970 73657220 736e6f70 00002165     ping response!..
    b088:	41564e49 2044494c 45505954 00000000     INVALID TYPE....
    b098:	76636572 61627550 72506b63 6520636f     recvPubackProc e
    b0a8:	726f7272 7365722c 20746c75 6425203d     rror,result = %d
    b0b8:	00000000 76636572 75736e55 6b634162     ....recvUnsubAck
    b0c8:	636f7250 72726520 722c726f 6c757365     Proc error,resul
    b0d8:	203d2074 00006425 3d206372 54514d20     t = %d..rc = MQT
    b0e8:	73694454 6e6e6f63 28746365 203d2029     TDisconnect() = 
    b0f8:	00006425 7474716d 73696420 6e6e6f63     %d..mqtt disconn
    b108:	21746365 00000000 7474716d 6c657220     ect!....mqtt rel
    b118:	65736165 00000021 61766e49 2064696c     ease!...Invalid 
    b128:	75677261 746e656d 6974202c 756f656d     argument, timeou
    b138:	736d5f74 25203d20 00000064 206e656c     t_ms = %d...len 
    b148:	514d203d 65535454 6c616972 5f657a69     = MQTTSerialize_
    b158:	676e6970 28716572 203d2029 00006425     pingreq() = %d..
    b168:	69726553 7a696c61 69702065 7220676e     Serialize ping r
    b178:	65757165 69207473 72652073 00726f72     equest is error.
    b188:	676e6970 74756f20 6e617473 676e6964     ping outstanding
    b198:	20736920 6f727265 65722c72 746c7573      is error,result
    b1a8:	25203d20 00000064 646e6573 54514d20      = %d...send MQT
    b1b8:	69702054 2e2e676e 0000002e 74696157     T ping......Wait
    b1c8:	20676e69 72206f74 6e6f6365 7463656e     ing to reconnect
    b1d8:	002e2e2e 72617473 6f742074 63657220     ....start to rec
    b1e8:	656e6e6f 00007463 6f636572 63656e6e     onnect..reconnec
    b1f8:	61702074 736d6172 514d203a 65565454     t params: MQTTVe
    b208:	6f697372 64253d6e 6c63202c 746e6569     rsion=%d, client
    b218:	253d4449 6b202c73 41706565 6576696c     ID=%s, keepAlive
    b228:	65746e49 6c617672 2c64253d 65737520     Interval=%d, use
    b238:	6d616e72 73253d65 00000000 206e7572     rname=%s....run 
    b248:	78746f69 74716d5f 6f635f74 63656e6e     iotx_mqtt_connec
    b258:	20292874 6f727265 00002172 7474716d     t() error!..mqtt
    b268:	63657220 656e6e6f 66207463 656c6961      reconnect faile
    b278:	63722064 25203d20 00000064 6f636572     d rc = %d...reco
    b288:	63656e6e 656e2074 726f7774 6166206b     nnect network fa
    b298:	202c6c69 3d206372 00642520 7774656e     il, rc = %d.netw
    b2a8:	206b726f 64207369 6f637369 63656e6e     ork is disconnec
    b2b8:	21646574 00000000 7774656e 206b726f     ted!....network 
    b2c8:	72207369 6e6f6365 7463656e 00216465     is reconnected!.
    b2d8:	72617020 65207361 726f7272 00000000      paras error....
    b2e8:	7474716d 696c6320 20746e65 74617473     mqtt client stat
    b2f8:	73692065 72726520 732c726f 65746174     e is error,state
    b308:	25203d20 00000064 69706f74 6f662063      = %d...topic fo
    b318:	74616d72 20736920 6f727265 6f742c72     rmat is error,to
    b328:	46636970 65746c69 203d2072 00007325     picFilter = %s..
    b338:	46524550 204d524f 73627573 62697263     PERFORM subscrib
    b348:	6f742065 73252720 6d282027 64496773     e to '%s' (msgId
    b358:	2964253d 00000000 69706f54 00000063     =%d)....Topic...
    b368:	73303225 25203a20 00000073 6b636150     %20s : %s...Pack
    b378:	4c207465 74676e65 00000068 206e7572     et Length...run 
    b388:	646e6573 6b636150 65207465 726f7272     sendPacket error
    b398:	00000021 20707564 2c627573 69706f74     !...dup sub,topi
    b3a8:	203d2063 00007325 7474716d 62757320     c = %s..mqtt sub
    b3b8:	69726373 70206562 656b6361 65732074     scribe packet se
    b3c8:	742c746e 6369706f 25203d20 00002173     nt,topic = %s!..
    b3d8:	206e7572 5454514d 73627553 62697263     run MQTTSubscrib
    b3e8:	72652065 2c726f72 20637220 6425203d     e error, rc = %d
    b3f8:	00000000 61766e49 2064696c 28736f71     ....Invalid qos(
    b408:	20296425 2074756f 5b20666f 202c6425     %d) out of [%d, 
    b418:	2c5d6425 69737520 2520676e 00000064     %d], using %d...
    b428:	6b636170 695f7465 203d2064 00006425     packet_id = %d..
    b438:	65646f6e 63613e2d 79745f6b 253d6570     node->ack_type=%
    b448:	6e632064 64253d74 00000000 63637573     d cnt=%d....succ
    b458:	21737365 00000021 656d6974 74756f20     ess!!...time out
    b468:	00002121 7474716d 736e7520 63736275     !!..mqtt unsubsc
    b478:	65626972 63617020 2074656b 746e6573     ribe packet sent
    b488:	706f742c 3d206369 21732520 00000000     ,topic = %s!....
    b498:	206e7572 5454514d 75736e55 72637362     run MQTTUnsubscr
    b4a8:	20656269 6f727265 00002172 5454514d     ibe error!..MQTT
    b4b8:	6c627550 20687369 75746572 65206e72     Publish return e
    b4c8:	726f7272 54514d2c 4f515f54 69203253     rror,MQTT_QOS2 i
    b4d8:	6f6e2073 6f6e2077 75732074 726f7070     s now not suppor
    b4e8:	2e646574 00000000 5454514d 6c627550     ted.....MQTTPubl
    b4f8:	20687369 65207369 726f7272 6372202c     ish is error, rc
    b508:	25203d20 00000064 5454514d 00000000      = %d...MQTT....
    b518:	7349514d 00007064 61726170 6520736d     MQIsdp..params e
    b528:	00007272 5f544f49 5454514d 6275505f     rr..IOT_MQTT_Pub
    b538:	6873696c 69616620 0a64656c 00000000     lish failed.....
    b548:	74696e69 72617020 20736d61 6e207369     init params is n
    b558:	6320746f 6c706d6f 00657465 70617277     ot complete.wrap
    b568:	5f726570 7474716d 6e6f635f 7463656e     per_mqtt_connect
    b578:	69616620 0064656c 6c696166 74206465      failed.failed t
    b588:	6572206f 74726f70 64696d20 00000000     o report mid....
    b598:	6c696166 74206465 6572206f 74726f70     failed to report
    b5a8:	76656420 6f666e69 00000000 6c696166      devinfo....fail
    b5b8:	74206465 6572206f 74726f70 72696620     ed to report fir
    b5c8:	7261776d 65762065 6f697372 0000006e     mware version...
    b5d8:	646e6168 2072656c 6e207369 006c6c75     handler is null.
    b5e8:	66796679 66796679 00000000 34776658     yfyfyfyf....Xfw4
    b5f8:	78617663 7531427a 4b546d46 6763326e     cvaxzB1uFmTKn2cg
    b608:	33776a64 707a6c67 41516839 00000000     djw3glzp9hQA....
    b618:	2d707061 2e302e31 30322d30 31303931     app-1.0.0-201901
    b628:	312e3831 00303030 4a333161 454f5a4f     18.1000.a13JOZOE
    b638:	00774475                                uDw.

0000b63c <__sf_fake_stderr>:
	...

0000b65c <__sf_fake_stdin>:
	...

0000b67c <__sf_fake_stdout>:
	...

0000b69c <_global_impure_ptr>:
    b69c:	2000006c 2b302d23 6c680020 6665004c     l.. #-0+ .hlL.ef
    b6ac:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    b6bc:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    b6cc:	64636261 00006665                       abcdef..

0000b6d4 <_init>:
    b6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b6d6:	46c0      	nop			; (mov r8, r8)
    b6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b6da:	bc08      	pop	{r3}
    b6dc:	469e      	mov	lr, r3
    b6de:	4770      	bx	lr

0000b6e0 <__init_array_start>:
    b6e0:	000000dd 	.word	0x000000dd

0000b6e4 <_fini>:
    b6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b6e6:	46c0      	nop			; (mov r8, r8)
    b6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b6ea:	bc08      	pop	{r3}
    b6ec:	469e      	mov	lr, r3
    b6ee:	4770      	bx	lr

0000b6f0 <__fini_array_start>:
    b6f0:	000000b5 	.word	0x000000b5
